
sensor_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800f9c8  0800f9c8  0001f9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff14  0800ff14  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff14  0800ff14  0001ff14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff1c  0800ff1c  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff1c  0800ff1c  0001ff1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff20  0800ff20  0001ff20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ff24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  0800ff9c  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  0801003c  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e00  200001b8  080100dc  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005fb8  080100dc  00025fb8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043d17  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000060da  00000000  00000000  00063efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003420  00000000  00000000  00069fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003198  00000000  00000000  0006d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e362  00000000  00000000  00070590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003567f  00000000  00000000  0009e8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011f84e  00000000  00000000  000d3f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f37bf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e3f8  00000000  00000000  001f3810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f9b0 	.word	0x0800f9b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	0800f9b0 	.word	0x0800f9b0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80002c8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d32e      	bcc.n	80002ba <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d312      	bcc.n	800028c <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000284:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000286:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028a:	4770      	bx	lr

0800028c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800028c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800028e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000290:	d317      	bcc.n	80002c2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000292:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000294:	1b12      	subs	r2, r2, r4

08000296 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000296:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800029e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a0:	d1f9      	bne.n	8000296 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a4:	d005      	beq.n	80002b2 <_No2ChunkNeeded>

080002a6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002aa:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002ae:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b0:	d1f9      	bne.n	80002a6 <_LoopCopyAfterWrapAround>

080002b2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002b2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002b4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002b8:	4770      	bx	lr

080002ba <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002ba:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002bc:	3801      	subs	r0, #1
        CMP      R0,R2
 80002be:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c0:	d2d1      	bcs.n	8000266 <_Case4>

080002c2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002c2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002c4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002c6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002c8:	20005538 	.word	0x20005538

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295
 80002e0:	f000 b974 	b.w	80005cc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f000 f806 	bl	80002fc <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__udivmoddi4>:
 80002fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000300:	9d08      	ldr	r5, [sp, #32]
 8000302:	4604      	mov	r4, r0
 8000304:	468e      	mov	lr, r1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d14d      	bne.n	80003a6 <__udivmoddi4+0xaa>
 800030a:	428a      	cmp	r2, r1
 800030c:	4694      	mov	ip, r2
 800030e:	d969      	bls.n	80003e4 <__udivmoddi4+0xe8>
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	b152      	cbz	r2, 800032c <__udivmoddi4+0x30>
 8000316:	fa01 f302 	lsl.w	r3, r1, r2
 800031a:	f1c2 0120 	rsb	r1, r2, #32
 800031e:	fa20 f101 	lsr.w	r1, r0, r1
 8000322:	fa0c fc02 	lsl.w	ip, ip, r2
 8000326:	ea41 0e03 	orr.w	lr, r1, r3
 800032a:	4094      	lsls	r4, r2
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	0c21      	lsrs	r1, r4, #16
 8000332:	fbbe f6f8 	udiv	r6, lr, r8
 8000336:	fa1f f78c 	uxth.w	r7, ip
 800033a:	fb08 e316 	mls	r3, r8, r6, lr
 800033e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000342:	fb06 f107 	mul.w	r1, r6, r7
 8000346:	4299      	cmp	r1, r3
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x64>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 811f 	bcs.w	8000594 <__udivmoddi4+0x298>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 811c 	bls.w	8000594 <__udivmoddi4+0x298>
 800035c:	3e02      	subs	r6, #2
 800035e:	4463      	add	r3, ip
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 f707 	mul.w	r7, r0, r7
 8000374:	42a7      	cmp	r7, r4
 8000376:	d90a      	bls.n	800038e <__udivmoddi4+0x92>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	f080 810a 	bcs.w	8000598 <__udivmoddi4+0x29c>
 8000384:	42a7      	cmp	r7, r4
 8000386:	f240 8107 	bls.w	8000598 <__udivmoddi4+0x29c>
 800038a:	4464      	add	r4, ip
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	1be4      	subs	r4, r4, r7
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa4>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xc2>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	f000 80ef 	beq.w	800058e <__udivmoddi4+0x292>
 80003b0:	2600      	movs	r6, #0
 80003b2:	e9c5 0100 	strd	r0, r1, [r5]
 80003b6:	4630      	mov	r0, r6
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f683 	clz	r6, r3
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d14a      	bne.n	800045c <__udivmoddi4+0x160>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd4>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80f9 	bhi.w	80005c2 <__udivmoddi4+0x2c6>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	469e      	mov	lr, r3
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa4>
 80003de:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa4>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xec>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 8092 	bne.w	8000516 <__udivmoddi4+0x21a>
 80003f2:	eba1 010c 	sub.w	r1, r1, ip
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2601      	movs	r6, #1
 8000400:	0c20      	lsrs	r0, r4, #16
 8000402:	fbb1 f3f7 	udiv	r3, r1, r7
 8000406:	fb07 1113 	mls	r1, r7, r3, r1
 800040a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040e:	fb0e f003 	mul.w	r0, lr, r3
 8000412:	4288      	cmp	r0, r1
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x12c>
 8000416:	eb1c 0101 	adds.w	r1, ip, r1
 800041a:	f103 38ff 	add.w	r8, r3, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x12a>
 8000420:	4288      	cmp	r0, r1
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2c0>
 8000426:	4643      	mov	r3, r8
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1110 	mls	r1, r7, r0, r1
 8000434:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x156>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x154>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2ca>
 8000450:	4608      	mov	r0, r1
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045a:	e79c      	b.n	8000396 <__udivmoddi4+0x9a>
 800045c:	f1c6 0720 	rsb	r7, r6, #32
 8000460:	40b3      	lsls	r3, r6
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa20 f407 	lsr.w	r4, r0, r7
 800046e:	fa01 f306 	lsl.w	r3, r1, r6
 8000472:	431c      	orrs	r4, r3
 8000474:	40f9      	lsrs	r1, r7
 8000476:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047a:	fa00 f306 	lsl.w	r3, r0, r6
 800047e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000482:	0c20      	lsrs	r0, r4, #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fb09 1118 	mls	r1, r9, r8, r1
 800048c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000490:	fb08 f00e 	mul.w	r0, r8, lr
 8000494:	4288      	cmp	r0, r1
 8000496:	fa02 f206 	lsl.w	r2, r2, r6
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b8>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2bc>
 80004a8:	4288      	cmp	r0, r1
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2bc>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004bc:	fb09 1110 	mls	r1, r9, r0, r1
 80004c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c8:	458e      	cmp	lr, r1
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1e2>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2b4>
 80004d6:	458e      	cmp	lr, r1
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2b4>
 80004da:	3802      	subs	r0, #2
 80004dc:	4461      	add	r1, ip
 80004de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e2:	fba0 9402 	umull	r9, r4, r0, r2
 80004e6:	eba1 010e 	sub.w	r1, r1, lr
 80004ea:	42a1      	cmp	r1, r4
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46a6      	mov	lr, r4
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x2a4>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x2a0>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x212>
 80004f6:	ebb3 0208 	subs.w	r2, r3, r8
 80004fa:	eb61 010e 	sbc.w	r1, r1, lr
 80004fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000502:	fa22 f306 	lsr.w	r3, r2, r6
 8000506:	40f1      	lsrs	r1, r6
 8000508:	431f      	orrs	r7, r3
 800050a:	e9c5 7100 	strd	r7, r1, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	f1c2 0320 	rsb	r3, r2, #32
 800051a:	40d8      	lsrs	r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa21 f303 	lsr.w	r3, r1, r3
 8000524:	4091      	lsls	r1, r2
 8000526:	4301      	orrs	r1, r0
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb3 f0f7 	udiv	r0, r3, r7
 8000534:	fb07 3610 	mls	r6, r7, r0, r3
 8000538:	0c0b      	lsrs	r3, r1, #16
 800053a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053e:	fb00 f60e 	mul.w	r6, r0, lr
 8000542:	429e      	cmp	r6, r3
 8000544:	fa04 f402 	lsl.w	r4, r4, r2
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x260>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b8>
 8000554:	429e      	cmp	r6, r3
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b8>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1b9b      	subs	r3, r3, r6
 800055e:	b289      	uxth	r1, r1
 8000560:	fbb3 f6f7 	udiv	r6, r3, r7
 8000564:	fb07 3316 	mls	r3, r7, r6, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb06 f30e 	mul.w	r3, r6, lr
 8000570:	428b      	cmp	r3, r1
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x28a>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f106 38ff 	add.w	r8, r6, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2b0>
 800057e:	428b      	cmp	r3, r1
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2b0>
 8000582:	3e02      	subs	r6, #2
 8000584:	4461      	add	r1, ip
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0x104>
 800058e:	462e      	mov	r6, r5
 8000590:	4628      	mov	r0, r5
 8000592:	e705      	b.n	80003a0 <__udivmoddi4+0xa4>
 8000594:	4606      	mov	r6, r0
 8000596:	e6e3      	b.n	8000360 <__udivmoddi4+0x64>
 8000598:	4618      	mov	r0, r3
 800059a:	e6f8      	b.n	800038e <__udivmoddi4+0x92>
 800059c:	454b      	cmp	r3, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f8>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a8:	3801      	subs	r0, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f8>
 80005ac:	4646      	mov	r6, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x28a>
 80005b0:	4620      	mov	r0, r4
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1e2>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x260>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b8>
 80005bc:	3b02      	subs	r3, #2
 80005be:	4461      	add	r1, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x12c>
 80005c2:	4630      	mov	r0, r6
 80005c4:	e709      	b.n	80003da <__udivmoddi4+0xde>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x156>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <bsp_lsm303agr_init>:
#include "main.h"
#include "non_block_queue_ndx.h"

static LSM303AGR_MAG_Object_t bsp_mag_lsm303agr_Obj = { 0 };

int32_t bsp_lsm303agr_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
	LSM303AGR_IO_t mag_io_ctx;
	uint8_t id;

	mag_io_ctx.BusType = LSM303AGR_I2C_BUS;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	mag_io_ctx.Address = LSM303AGR_I2C_ADD_MG;
 80005da:	233d      	movs	r3, #61	; 0x3d
 80005dc:	743b      	strb	r3, [r7, #16]
	mag_io_ctx.Init = BSP_I2C1_Init;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <bsp_lsm303agr_init+0xa4>)
 80005e0:	607b      	str	r3, [r7, #4]
	mag_io_ctx.DeInit = BSP_I2C1_DeInit;
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <bsp_lsm303agr_init+0xa8>)
 80005e4:	60bb      	str	r3, [r7, #8]
	mag_io_ctx.ReadReg = BSP_I2C1_ReadReg;
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <bsp_lsm303agr_init+0xac>)
 80005e8:	61bb      	str	r3, [r7, #24]
	mag_io_ctx.WriteReg = BSP_I2C1_WriteReg;
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <bsp_lsm303agr_init+0xb0>)
 80005ec:	617b      	str	r3, [r7, #20]
	mag_io_ctx.GetTick = BSP_GetTick;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <bsp_lsm303agr_init+0xb4>)
 80005f0:	61fb      	str	r3, [r7, #28]

	if (LSM303AGR_MAG_RegisterBusIO(&bsp_mag_lsm303agr_Obj,
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4824      	ldr	r0, [pc, #144]	; (8000688 <bsp_lsm303agr_init+0xb8>)
 80005f8:	f001 fa94 	bl	8001b24 <LSM303AGR_MAG_RegisterBusIO>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <bsp_lsm303agr_init+0x38>
			&mag_io_ctx) != LSM303AGR_OK) {
		return LSM303AGR_ERROR;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e031      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	}

	// Reset device and wait for powerup
	if (lsm303agr_mag_boot_set(&bsp_mag_lsm303agr_Obj.Ctx, 1) != LSM303AGR_OK) {
 8000608:	2101      	movs	r1, #1
 800060a:	4820      	ldr	r0, [pc, #128]	; (800068c <bsp_lsm303agr_init+0xbc>)
 800060c:	f001 fc76 	bl	8001efc <lsm303agr_mag_boot_set>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <bsp_lsm303agr_init+0x4c>
		return LSM303AGR_ERROR;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e027      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	}
	HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f002 fbf7 	bl	8002e10 <HAL_Delay>

	// Vefify sensor ID (This is to just verify that connection is make to chip)
	if (LSM303AGR_MAG_ReadID(&bsp_mag_lsm303agr_Obj, &id) != LSM303AGR_OK) {
 8000622:	1cfb      	adds	r3, r7, #3
 8000624:	4619      	mov	r1, r3
 8000626:	4818      	ldr	r0, [pc, #96]	; (8000688 <bsp_lsm303agr_init+0xb8>)
 8000628:	f001 fb1d 	bl	8001c66 <LSM303AGR_MAG_ReadID>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <bsp_lsm303agr_init+0x68>
		return LSM303AGR_ERROR;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e019      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	} else {
		if (id != LSM303AGR_ID_MG) {
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2b40      	cmp	r3, #64	; 0x40
 800063c:	d002      	beq.n	8000644 <bsp_lsm303agr_init+0x74>
			return LSM303AGR_ERROR;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	e013      	b.n	800066c <bsp_lsm303agr_init+0x9c>
		}
	}

	// Standard init
	if (LSM303AGR_MAG_Init(&bsp_mag_lsm303agr_Obj) != LSM303AGR_OK) {
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <bsp_lsm303agr_init+0xb8>)
 8000646:	f001 fad1 	bl	8001bec <LSM303AGR_MAG_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <bsp_lsm303agr_init+0x86>
		return LSM303AGR_ERROR;
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	e00a      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	}

	// Setup interrupt on data ready

	if (lsm303agr_mag_drdy_on_pin_set(&bsp_mag_lsm303agr_Obj.Ctx,
 8000656:	2101      	movs	r1, #1
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <bsp_lsm303agr_init+0xbc>)
 800065a:	f001 fc9b 	bl	8001f94 <lsm303agr_mag_drdy_on_pin_set>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <bsp_lsm303agr_init+0x9a>
			1) != LSM303AGR_OK) {
		return LSM303AGR_ERROR;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	e000      	b.n	800066c <bsp_lsm303agr_init+0x9c>
//  if (lsm303agr_mag_data_rate_set(&(bsp_mag_lsm303agr_Obj.Ctx), LSM303AGR_MG_ODR_50Hz) != LSM303AGR_OK)
//  {
//    return LSM303AGR_ERROR;
//  }

	return LSM303AGR_OK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800168d 	.word	0x0800168d
 8000678:	08001709 	.word	0x08001709
 800067c:	080017bd 	.word	0x080017bd
 8000680:	08001759 	.word	0x08001759
 8000684:	08001821 	.word	0x08001821
 8000688:	200001d4 	.word	0x200001d4
 800068c:	200001f0 	.word	0x200001f0

08000690 <bsp_lsm303agr_enable>:

int32_t bsp_lsm303agr_enable(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// Start up mag
	if (LSM303AGR_MAG_Enable(&bsp_mag_lsm303agr_Obj) != LSM303AGR_OK) {
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <bsp_lsm303agr_enable+0x1c>)
 8000696:	f001 fafc 	bl	8001c92 <LSM303AGR_MAG_Enable>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <bsp_lsm303agr_enable+0x16>
		return LSM303AGR_ERROR;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	e000      	b.n	80006a8 <bsp_lsm303agr_enable+0x18>
	}

	return LSM303AGR_OK;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200001d4 	.word	0x200001d4

080006b0 <bsp_lsm6dsl_init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */

int32_t bsp_lsm6dsl_init() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	lsm6dsl_ctrl3_c_t ctrl3_c;
	uint8_t id;

	io_ctx.BusType = LSM6DSL_I2C_BUS;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
	io_ctx.Address = LSM6DSL_I2C_ADD_H;
 80006ba:	23d7      	movs	r3, #215	; 0xd7
 80006bc:	763b      	strb	r3, [r7, #24]
	io_ctx.Init = BSP_I2C1_Init;
 80006be:	4b56      	ldr	r3, [pc, #344]	; (8000818 <bsp_lsm6dsl_init+0x168>)
 80006c0:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit = BSP_I2C1_DeInit;
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <bsp_lsm6dsl_init+0x16c>)
 80006c4:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg = BSP_I2C1_ReadReg;
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <bsp_lsm6dsl_init+0x170>)
 80006c8:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg = BSP_I2C1_WriteReg;
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <bsp_lsm6dsl_init+0x174>)
 80006cc:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick = BSP_GetTick;
 80006ce:	4b56      	ldr	r3, [pc, #344]	; (8000828 <bsp_lsm6dsl_init+0x178>)
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24

	if (LSM6DSL_RegisterBusIO(&bsp_lsm6dsl_Obj, &io_ctx) != LSM6DSL_OK) {
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4619      	mov	r1, r3
 80006d8:	4854      	ldr	r0, [pc, #336]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80006da:	f001 fca7 	bl	800202c <LSM6DSL_RegisterBusIO>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <bsp_lsm6dsl_init+0x3a>
		return LSM6DSL_ERROR;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	e091      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Vefify sensor ID
	if (LSM6DSL_ReadID(&bsp_lsm6dsl_Obj, &id) != LSM6DSL_OK) {
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	4619      	mov	r1, r3
 80006ee:	484f      	ldr	r0, [pc, #316]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80006f0:	f001 fd6b 	bl	80021ca <LSM6DSL_ReadID>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <bsp_lsm6dsl_init+0x50>
		return LSM6DSL_ERROR;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	e086      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (id != LSM6DSL_ID) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b6a      	cmp	r3, #106	; 0x6a
 8000704:	d002      	beq.n	800070c <bsp_lsm6dsl_init+0x5c>
		return LSM6DSL_ERROR;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e080      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Reset device
	if (lsm6dsl_reset_set(&bsp_lsm6dsl_Obj.Ctx, 1) != LSM6DSL_OK) {
 800070c:	2101      	movs	r1, #1
 800070e:	4848      	ldr	r0, [pc, #288]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 8000710:	f002 f8d3 	bl	80028ba <lsm6dsl_reset_set>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <bsp_lsm6dsl_init+0x70>
		return LSM6DSL_ERROR;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e076      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Wait for reset to complete
	do {
		if (lsm6dsl_read_reg(&bsp_lsm6dsl_Obj.Ctx, LSM6DSL_CTRL3_C,
 8000720:	f107 0208 	add.w	r2, r7, #8
 8000724:	2301      	movs	r3, #1
 8000726:	2112      	movs	r1, #18
 8000728:	4841      	ldr	r0, [pc, #260]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 800072a:	f001 fefc 	bl	8002526 <lsm6dsl_read_reg>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <bsp_lsm6dsl_init+0x8a>
				(uint8_t*) &ctrl3_c, 1) != LSM6DSL_OK) {
			return LSM6DSL_ERROR;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	e069      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
		}
	} while (ctrl3_c.sw_reset == 1);
 800073a:	7a3b      	ldrb	r3, [r7, #8]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ec      	bne.n	8000720 <bsp_lsm6dsl_init+0x70>

	// Init using default settings
	if (LSM6DSL_Init(&bsp_lsm6dsl_Obj) != LSM6DSL_OK) {
 8000746:	4839      	ldr	r0, [pc, #228]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 8000748:	f001 fcd6 	bl	80020f8 <LSM6DSL_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <bsp_lsm6dsl_init+0xa8>
		return LSM6DSL_ERROR;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	e05a      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Override default data rate for acc and gyro
	bsp_lsm6dsl_Obj.acc_odr = (lsm6dsl_odr_xl_t) GYRO_ACC_RATE;
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 800075a:	2206      	movs	r2, #6
 800075c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	bsp_lsm6dsl_Obj.gyro_odr = (lsm6dsl_odr_g_t) GYRO_ACC_RATE;
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 8000762:	2206      	movs	r2, #6
 8000764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	LSM6DSL_ACC_Disable(&bsp_lsm6dsl_Obj);
 8000768:	4830      	ldr	r0, [pc, #192]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 800076a:	f001 fd68 	bl	800223e <LSM6DSL_ACC_Disable>
	LSM6DSL_GYRO_Disable(&bsp_lsm6dsl_Obj);
 800076e:	482f      	ldr	r0, [pc, #188]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 8000770:	f001 fdb8 	bl	80022e4 <LSM6DSL_GYRO_Disable>

	if (lsm6dsl_fifo_data_rate_set(&(bsp_lsm6dsl_Obj.Ctx),
 8000774:	2106      	movs	r1, #6
 8000776:	482e      	ldr	r0, [pc, #184]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 8000778:	f002 faf6 	bl	8002d68 <lsm6dsl_fifo_data_rate_set>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <bsp_lsm6dsl_init+0xd8>
			(lsm6dsl_odr_fifo_t) GYRO_ACC_RATE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	e042      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_ACC_Set_Decimation(&bsp_lsm6dsl_Obj,
 8000788:	2101      	movs	r1, #1
 800078a:	4828      	ldr	r0, [pc, #160]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 800078c:	f001 fe45 	bl	800241a <LSM6DSL_FIFO_ACC_Set_Decimation>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <bsp_lsm6dsl_init+0xec>
			LSM6DSL_FIFO_XL_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	e038      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_GYRO_Set_Decimation(&bsp_lsm6dsl_Obj,
 800079c:	2101      	movs	r1, #1
 800079e:	4823      	ldr	r0, [pc, #140]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007a0:	f001 fe63 	bl	800246a <LSM6DSL_FIFO_GYRO_Set_Decimation>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <bsp_lsm6dsl_init+0x100>
			LSM6DSL_FIFO_GY_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e02e      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_Set_Mode(&bsp_lsm6dsl_Obj,
 80007b0:	2106      	movs	r1, #6
 80007b2:	481e      	ldr	r0, [pc, #120]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007b4:	f001 fdf8 	bl	80023a8 <LSM6DSL_FIFO_Set_Mode>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <bsp_lsm6dsl_init+0x114>
			LSM6DSL_STREAM_MODE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e024      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_Set_Watermark_Level(&bsp_lsm6dsl_Obj,
 80007c4:	213c      	movs	r1, #60	; 0x3c
 80007c6:	4819      	ldr	r0, [pc, #100]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007c8:	f001 fdd6 	bl	8002378 <LSM6DSL_FIFO_Set_Watermark_Level>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <bsp_lsm6dsl_init+0x128>
			GYRO_ACC_WATERMARK) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	e01a      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Setup watermark interrupt
	lsm6dsl_int1_route_t fth_route = { 0 };
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2100      	movs	r1, #0
 80007dc:	460a      	mov	r2, r1
 80007de:	801a      	strh	r2, [r3, #0]
 80007e0:	460a      	mov	r2, r1
 80007e2:	709a      	strb	r2, [r3, #2]
	fth_route.int1_fth = 1;
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&(bsp_lsm6dsl_Obj.Ctx), fth_route);
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 80007f0:	f002 f8af 	bl	8002952 <lsm6dsl_pin_int1_route_set>

	bsp_lsm6dsl_Obj.is_initialized = 1;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// Enable interrupt
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2017      	movs	r0, #23
 8000802:	f002 fc1b 	bl	800303c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000806:	2017      	movs	r0, #23
 8000808:	f002 fc44 	bl	8003094 <HAL_NVIC_EnableIRQ>

	return LSM6DSL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	0800168d 	.word	0x0800168d
 800081c:	08001709 	.word	0x08001709
 8000820:	080017bd 	.word	0x080017bd
 8000824:	08001759 	.word	0x08001759
 8000828:	08001821 	.word	0x08001821
 800082c:	20000200 	.word	0x20000200
 8000830:	2000021c 	.word	0x2000021c

08000834 <bsp_lsm6dsl_enable>:
//	

//	DebugExtAnalyzerReset1();
//}

void bsp_lsm6dsl_enable(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	LSM6DSL_ACC_Enable(&bsp_lsm6dsl_Obj);
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <bsp_lsm6dsl_enable+0x14>)
 800083a:	f001 fcdc 	bl	80021f6 <LSM6DSL_ACC_Enable>
	LSM6DSL_GYRO_Enable(&bsp_lsm6dsl_Obj);
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <bsp_lsm6dsl_enable+0x14>)
 8000840:	f001 fd2c 	bl	800229c <LSM6DSL_GYRO_Enable>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000200 	.word	0x20000200

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f002 fab0 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f828 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f96a 	bl	8000b30 <MX_GPIO_Init>
  MX_ETH_Init();
 800085c:	f000 f896 	bl	800098c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000860:	f000 f8e2 	bl	8000a28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000864:	f000 f910 	bl	8000a88 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000868:	f000 f93c 	bl	8000ae4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 800086c:	f00e fe50 	bl	800f510 <SEGGER_SYSVIEW_Conf>
  InitSensorBus1(&AccGyroCallback, &MagCallback);
 8000870:	4908      	ldr	r1, [pc, #32]	; (8000894 <main+0x48>)
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <main+0x4c>)
 8000874:	f000 fb3a 	bl	8000eec <InitSensorBus1>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000878:	f00a fba2 	bl	800afc0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <main+0x50>)
 800087e:	2100      	movs	r1, #0
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <main+0x54>)
 8000882:	f00a fc07 	bl	800b094 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <main+0x58>)
 800088a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800088c:	f00a fbcc 	bl	800b028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000890:	e7fe      	b.n	8000890 <main+0x44>
 8000892:	bf00      	nop
 8000894:	08000e59 	.word	0x08000e59
 8000898:	08000d59 	.word	0x08000d59
 800089c:	0800fe5c 	.word	0x0800fe5c
 80008a0:	08000e8d 	.word	0x08000e8d
 80008a4:	200008a8 	.word	0x200008a8

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2234      	movs	r2, #52	; 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00e ffb0 	bl	800f81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008cc:	f006 ff0e 	bl	80076ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <SystemClock_Config+0xdc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <SystemClock_Config+0xdc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <SystemClock_Config+0xdc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <SystemClock_Config+0xe0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f0:	4a25      	ldr	r2, [pc, #148]	; (8000988 <SystemClock_Config+0xe0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <SystemClock_Config+0xe0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000908:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800091c:	2360      	movs	r3, #96	; 0x60
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4618      	mov	r0, r3
 8000932:	f006 ff3b 	bl	80077ac <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800093c:	f000 fac2 	bl	8000ec4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000940:	f006 fee4 	bl	800770c <HAL_PWREx_EnableOverDrive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094a:	f000 fabb 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2103      	movs	r1, #3
 800096a:	4618      	mov	r0, r3
 800096c:	f007 fa8e 	bl	8007e8c <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000976:	f000 faa5 	bl	8000ec4 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_ETH_Init+0x84>)
 8000992:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <MX_ETH_Init+0x88>)
 8000994:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_ETH_Init+0x8c>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_ETH_Init+0x8c>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_ETH_Init+0x8c>)
 80009a4:	22e1      	movs	r2, #225	; 0xe1
 80009a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_ETH_Init+0x8c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_ETH_Init+0x8c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_ETH_Init+0x8c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_ETH_Init+0x84>)
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <MX_ETH_Init+0x8c>)
 80009be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_ETH_Init+0x84>)
 80009c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_ETH_Init+0x84>)
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <MX_ETH_Init+0x90>)
 80009cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_ETH_Init+0x84>)
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <MX_ETH_Init+0x94>)
 80009d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_ETH_Init+0x84>)
 80009d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_ETH_Init+0x84>)
 80009de:	f003 f9b7 	bl	8003d50 <HAL_ETH_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 fa6c 	bl	8000ec4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ec:	2238      	movs	r2, #56	; 0x38
 80009ee:	2100      	movs	r1, #0
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_ETH_Init+0x98>)
 80009f2:	f00e ff13 	bl	800f81c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_ETH_Init+0x98>)
 80009f8:	2221      	movs	r2, #33	; 0x21
 80009fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_ETH_Init+0x98>)
 80009fe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a02:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_ETH_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000268 	.word	0x20000268
 8000a14:	40028000 	.word	0x40028000
 8000a18:	200008ac 	.word	0x200008ac
 8000a1c:	20000118 	.word	0x20000118
 8000a20:	20000078 	.word	0x20000078
 8000a24:	20000230 	.word	0x20000230

08000a28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART3_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART3_UART_Init+0x58>)
 8000a6c:	f009 f98a 	bl	8009d84 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 fa25 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000318 	.word	0x20000318
 8000a84:	40004800 	.word	0x40004800

08000a88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2206      	movs	r2, #6
 8000a98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	f006 fcb4 	bl	8007438 <HAL_PCD_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f000 f9f5 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200003a0 	.word	0x200003a0

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_DMA_Init+0x48>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_DMA_Init+0x48>)
 8000af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DMA_Init+0x48>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2105      	movs	r1, #5
 8000b06:	200b      	movs	r0, #11
 8000b08:	f002 fa98 	bl	800303c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b0c:	200b      	movs	r0, #11
 8000b0e:	f002 fac1 	bl	8003094 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2105      	movs	r1, #5
 8000b16:	2011      	movs	r0, #17
 8000b18:	f002 fa90 	bl	800303c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f002 fab9 	bl	8003094 <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b70      	ldr	r3, [pc, #448]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a6f      	ldr	r2, [pc, #444]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b6d      	ldr	r3, [pc, #436]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a69      	ldr	r2, [pc, #420]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a63      	ldr	r2, [pc, #396]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b61      	ldr	r3, [pc, #388]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b5e      	ldr	r3, [pc, #376]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a5d      	ldr	r2, [pc, #372]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b5b      	ldr	r3, [pc, #364]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba6:	4b58      	ldr	r3, [pc, #352]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a57      	ldr	r2, [pc, #348]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bac:	f043 0320 	orr.w	r3, r3, #32
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b55      	ldr	r3, [pc, #340]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0320 	and.w	r3, r3, #32
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	4b52      	ldr	r3, [pc, #328]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a51      	ldr	r2, [pc, #324]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b4f      	ldr	r3, [pc, #316]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a4b      	ldr	r2, [pc, #300]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <MX_GPIO_Init+0x1d8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf4:	4845      	ldr	r0, [pc, #276]	; (8000d0c <MX_GPIO_Init+0x1dc>)
 8000bf6:	f004 f8af 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ExtAnalyzer3_GPIO_Port, ExtAnalyzer3_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	4843      	ldr	r0, [pc, #268]	; (8000d10 <MX_GPIO_Init+0x1e0>)
 8000c02:	f004 f8a9 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ExtAnalyzer1_Pin|ExtAnalyzer2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c0c:	4841      	ldr	r0, [pc, #260]	; (8000d14 <MX_GPIO_Init+0x1e4>)
 8000c0e:	f004 f8a3 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	; 0x40
 8000c16:	4840      	ldr	r0, [pc, #256]	; (8000d18 <MX_GPIO_Init+0x1e8>)
 8000c18:	f004 f89e 	bl	8004d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MagDataRdy_Pin */
  GPIO_InitStruct.Pin = MagDataRdy_Pin;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MagDataRdy_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483a      	ldr	r0, [pc, #232]	; (8000d1c <MX_GPIO_Init+0x1ec>)
 8000c32:	f003 fbb3 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c36:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	482f      	ldr	r0, [pc, #188]	; (8000d0c <MX_GPIO_Init+0x1dc>)
 8000c50:	f003 fba4 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtAnalyzer3_Pin */
  GPIO_InitStruct.Pin = ExtAnalyzer3_Pin;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ExtAnalyzer3_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4828      	ldr	r0, [pc, #160]	; (8000d10 <MX_GPIO_Init+0x1e0>)
 8000c6e:	f003 fb95 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : Lms6dsl_Int1_Pin */
  GPIO_InitStruct.Pin = Lms6dsl_Int1_Pin;
 8000c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Lms6dsl_Int1_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4821      	ldr	r0, [pc, #132]	; (8000d10 <MX_GPIO_Init+0x1e0>)
 8000c8a:	f003 fb87 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : ExtAnalyzer1_Pin ExtAnalyzer2_Pin */
  GPIO_InitStruct.Pin = ExtAnalyzer1_Pin|ExtAnalyzer2_Pin;
 8000c8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <MX_GPIO_Init+0x1e4>)
 8000ca8:	f003 fb78 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4815      	ldr	r0, [pc, #84]	; (8000d18 <MX_GPIO_Init+0x1e8>)
 8000cc4:	f003 fb6a 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480f      	ldr	r0, [pc, #60]	; (8000d18 <MX_GPIO_Init+0x1e8>)
 8000cdc:	f003 fb5e 	bl	800439c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	2009      	movs	r0, #9
 8000ce6:	f002 f9a9 	bl	800303c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cea:	2009      	movs	r0, #9
 8000cec:	f002 f9d2 	bl	8003094 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	2028      	movs	r0, #40	; 0x28
 8000cf6:	f002 f9a1 	bl	800303c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cfa:	2028      	movs	r0, #40	; 0x28
 8000cfc:	f002 f9ca 	bl	8003094 <HAL_NVIC_EnableIRQ>

}
 8000d00:	bf00      	nop
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40021400 	.word	0x40021400
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40020800 	.word	0x40020800

08000d20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Here when data is ready to read using DMA

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]

	if ( (GPIO_Pin == MagDataRdy_Pin) || (GPIO_Pin == Lms6dsl_Int1_Pin)) {
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_EXTI_Callback+0x18>
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_EXTI_Callback+0x1c>
		UpdateSensorBus1();
 8000d38:	f000 f91a 	bl	8000f70 <UpdateSensorBus1>
//	// If acc/gyro
//	if (GPIO_Pin == Lms6dsl_Int1_Pin) {
//		SensorBus1_DMA_Request(DMA_ACC_GYRO);
//		return;
//	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_I2C_MemRxCpltCallback>:

// Here when DMA is complete and data is ready to use
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	SensorBus1_DMA_CallBack();
 8000d4c:	f000 f9bc 	bl	80010c8 <SensorBus1_DMA_CallBack>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <AccGyroCallback>:


void AccGyroCallback(GYRO_ACC_t * pRawData, uint16_t numItems) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]

	// First, average raw data
	LSM6DSL_Axes_t gyroAvg = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
	LSM6DSL_Axes_t accAvg = {0};
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]

	GYRO_ACC_t * pCruRawData = pRawData;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t itemCount = numItems;
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	847b      	strh	r3, [r7, #34]	; 0x22

	// Now sum data sets
	while(itemCount) {
 8000d84:	e029      	b.n	8000dda <AccGyroCallback+0x82>
		gyroAvg.x += pCruRawData->gyro_data.x;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d8e:	4413      	add	r3, r2
 8000d90:	617b      	str	r3, [r7, #20]
		gyroAvg.y += pCruRawData->gyro_data.y;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d96:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
		gyroAvg.z += pCruRawData->gyro_data.z;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	61fb      	str	r3, [r7, #28]

		accAvg.x += pCruRawData->acc_data.x;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dae:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000db2:	4413      	add	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
		accAvg.y += pCruRawData->acc_data.y;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
		accAvg.z += pCruRawData->acc_data.z;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000dca:	4413      	add	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]

		pCruRawData++;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
		itemCount--;
 8000dd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	847b      	strh	r3, [r7, #34]	; 0x22
	while(itemCount) {
 8000dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1d2      	bne.n	8000d86 <AccGyroCallback+0x2e>
	}

	// Complete average
	gyroAvg.x /= numItems;
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
	gyroAvg.y /= numItems;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	fb92 f3f3 	sdiv	r3, r2, r3
 8000df2:	61bb      	str	r3, [r7, #24]
	gyroAvg.z /= numItems;
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dfc:	61fb      	str	r3, [r7, #28]

	accAvg.x /= numItems;
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e06:	60bb      	str	r3, [r7, #8]
	accAvg.y /= numItems;
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e10:	60fb      	str	r3, [r7, #12]
	accAvg.z /= numItems;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e1a:	613b      	str	r3, [r7, #16]


	SEGGER_SYSVIEW_PrintfHost("Gyro Value: X = %d, Y = %d, Z = %d, ",
 8000e1c:	6979      	ldr	r1, [r7, #20]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <AccGyroCallback+0xf4>)
 8000e24:	f00e faf6 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
			gyroAvg.x, gyroAvg.y, gyroAvg.z);

	SEGGER_SYSVIEW_PrintfHost("Acc Value: X = %d, Y = %d, Z = %d, ",
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <AccGyroCallback+0xf8>)
 8000e30:	f00e faf0 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
			accAvg.x, accAvg.y, accAvg.z);

	if (accAvg.x > 1000) {
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e3a:	dd02      	ble.n	8000e42 <AccGyroCallback+0xea>
		SEGGER_SYSVIEW_PrintfHost("!!!!ERROR !!!!!");
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <AccGyroCallback+0xfc>)
 8000e3e:	f00e fae9 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
	}
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	0800f9d4 	.word	0x0800f9d4
 8000e50:	0800f9fc 	.word	0x0800f9fc
 8000e54:	0800fa20 	.word	0x0800fa20

08000e58 <MagCallback>:


static void MagCallback(LSM303AGR_AxesRaw_t * pRawData, uint16_t numItems) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
//	HAL_GetTick();

	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
				 pRawData->x, pRawData->y, pRawData->z);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f9b3 3000 	ldrsh.w	r3, [r3]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8000e6a:	4619      	mov	r1, r3
				 pRawData->x, pRawData->y, pRawData->z);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8000e72:	461a      	mov	r2, r3
				 pRawData->x, pRawData->y, pRawData->z);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <MagCallback+0x30>)
 8000e7c:	f00e faca 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	0800fa30 	.word	0x0800fa30

08000e8c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	StartSensorBus1();
 8000e94:	f000 f864 	bl	8000f60 <StartSensorBus1>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f00a f9a1 	bl	800b1e0 <osDelay>
 8000e9e:	e7fb      	b.n	8000e98 <StartDefaultTask+0xc>

08000ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb2:	f001 ff8d 	bl	8002dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40000c00 	.word	0x40000c00

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <assert_failed+0x18>)
 8000ee0:	f00e fa98 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
	                            on line %d\r\n", file, line);
	  while(1);
 8000ee4:	e7fe      	b.n	8000ee4 <assert_failed+0x14>
 8000ee6:	bf00      	nop
 8000ee8:	0800fa54 	.word	0x0800fa54

08000eec <InitSensorBus1>:
static MagCallback_t pMagCallback = NULL;

static void run_pending_dma(void);


void InitSensorBus1(AccGyroCallback_t pAccGyroCB, MagCallback_t pMagCB) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]

	pAccGyroCallback = pAccGyroCB;
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <InitSensorBus1+0x4c>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6013      	str	r3, [r2, #0]
	pMagCallback = pMagCB;
 8000efc:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <InitSensorBus1+0x50>)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	6013      	str	r3, [r2, #0]

	req_mag = GP_FALSE;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <InitSensorBus1+0x54>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	req_gyro_acc = GP_FALSE;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <InitSensorBus1+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	lock_update = GP_FALSE;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <InitSensorBus1+0x5c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
	in_process_dma = DMA_RDY;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <InitSensorBus1+0x60>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
	p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <InitSensorBus1+0x64>)
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <InitSensorBus1+0x68>)
 8000f1e:	601a      	str	r2, [r3, #0]
	p_mag_raw_data = &mag_raw_data1;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <InitSensorBus1+0x6c>)
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <InitSensorBus1+0x70>)
 8000f24:	601a      	str	r2, [r3, #0]

	bsp_lsm6dsl_init();
 8000f26:	f7ff fbc3 	bl	80006b0 <bsp_lsm6dsl_init>
	bsp_lsm303agr_init();
 8000f2a:	f7ff fb51 	bl	80005d0 <bsp_lsm303agr_init>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200009c0 	.word	0x200009c0
 8000f3c:	200009c4 	.word	0x200009c4
 8000f40:	200008b3 	.word	0x200008b3
 8000f44:	200008b4 	.word	0x200008b4
 8000f48:	200008b5 	.word	0x200008b5
 8000f4c:	200008b2 	.word	0x200008b2
 8000f50:	200009a8 	.word	0x200009a8
 8000f54:	200008b8 	.word	0x200008b8
 8000f58:	200009bc 	.word	0x200009bc
 8000f5c:	200009ac 	.word	0x200009ac

08000f60 <StartSensorBus1>:


void StartSensorBus1(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	bsp_lsm6dsl_enable();
 8000f64:	f7ff fc66 	bl	8000834 <bsp_lsm6dsl_enable>
	bsp_lsm303agr_enable();
 8000f68:	f7ff fb92 	bl	8000690 <bsp_lsm303agr_enable>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <UpdateSensorBus1>:


void UpdateSensorBus1(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_PrintfHost("UpdateSensorBus1");
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <UpdateSensorBus1+0x48>)
 8000f76:	f00e fa4d 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>

	// Set based on pin state, using this method help with missed updates when stopped for debug
	if (HAL_GPIO_ReadPin(Lms6dsl_Int1_GPIO_Port, Lms6dsl_Int1_Pin) == GPIO_PIN_SET) {
 8000f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <UpdateSensorBus1+0x4c>)
 8000f80:	f003 feca 	bl	8004d18 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <UpdateSensorBus1+0x26>
		req_gyro_acc = GP_TRUE;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <UpdateSensorBus1+0x50>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc");
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <UpdateSensorBus1+0x54>)
 8000f92:	f00e fa3f 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
	}

	if (HAL_GPIO_ReadPin(MagDataRdy_GPIO_Port, MagDataRdy_Pin) == GPIO_PIN_SET) {
 8000f96:	2108      	movs	r1, #8
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <UpdateSensorBus1+0x58>)
 8000f9a:	f003 febd 	bl	8004d18 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <UpdateSensorBus1+0x40>
		req_mag = GP_TRUE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <UpdateSensorBus1+0x5c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_mag");
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <UpdateSensorBus1+0x60>)
 8000fac:	f00e fa32 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
	}

	run_pending_dma();
 8000fb0:	f000 f810 	bl	8000fd4 <run_pending_dma>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	0800fa98 	.word	0x0800fa98
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	200008b4 	.word	0x200008b4
 8000fc4:	0800faac 	.word	0x0800faac
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	200008b3 	.word	0x200008b3
 8000fd0:	0800fabc 	.word	0x0800fabc

08000fd4 <run_pending_dma>:


void run_pending_dma(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af02      	add	r7, sp, #8
	SEGGER_SYSVIEW_PrintfHost("run_pending_dma");
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <run_pending_dma+0xc4>)
 8000fdc:	f00e fa1a 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
	// Must not be reentrant, this will catch that
	// Must have SensorBus1_DMA_CallBack and UpdateSensorBus1 on same interrupt level
	assert_param(lock_update == GP_FALSE);
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <run_pending_dma+0xc8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <run_pending_dma+0x1e>
 8000fea:	2150      	movs	r1, #80	; 0x50
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <run_pending_dma+0xcc>)
 8000fee:	f7ff ff6f 	bl	8000ed0 <assert_failed>
	lock_update = GP_TRUE;
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <run_pending_dma+0xc8>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]

	if (in_process_dma != DMA_RDY) { // exit if previous still running
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <run_pending_dma+0xd0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <run_pending_dma+0x36>
		lock_update = GP_FALSE;
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <run_pending_dma+0xc8>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		return;
 8001008:	e044      	b.n	8001094 <run_pending_dma+0xc0>
	}


	// Else check for ryro/acc DMA read
	if (req_gyro_acc) {
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <run_pending_dma+0xd4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01c      	beq.n	800104e <run_pending_dma+0x7a>
		assert_param(HAL_I2C_Mem_Read_DMA(&hi2c1, LSM6DSL_I2C_ADD_H, LSM6DSL_FIFO_DATA_OUT_L,
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <run_pending_dma+0xd8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <run_pending_dma+0xdc>)
 800101a:	8812      	ldrh	r2, [r2, #0]
 800101c:	9201      	str	r2, [sp, #4]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	223e      	movs	r2, #62	; 0x3e
 8001024:	21d7      	movs	r1, #215	; 0xd7
 8001026:	4823      	ldr	r0, [pc, #140]	; (80010b4 <run_pending_dma+0xe0>)
 8001028:	f004 faac 	bl	8005584 <HAL_I2C_Mem_Read_DMA>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <run_pending_dma+0x66>
 8001032:	215b      	movs	r1, #91	; 0x5b
 8001034:	481a      	ldr	r0, [pc, #104]	; (80010a0 <run_pending_dma+0xcc>)
 8001036:	f7ff ff4b 	bl	8000ed0 <assert_failed>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) p_acc_gyro_raw_data,
				acc_gyro_raw_data_size) == HAL_OK);

		in_process_dma = DMA_ACC_GYRO;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <run_pending_dma+0xd0>)
 800103c:	2202      	movs	r2, #2
 800103e:	701a      	strb	r2, [r3, #0]
		req_gyro_acc = GP_FALSE;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <run_pending_dma+0xd4>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc DMA");
 8001046:	481c      	ldr	r0, [pc, #112]	; (80010b8 <run_pending_dma+0xe4>)
 8001048:	f00e f9e4 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
 800104c:	e01f      	b.n	800108e <run_pending_dma+0xba>
	// Else check for mag request
	} else if (req_mag) {
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <run_pending_dma+0xe8>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01a      	beq.n	800108e <run_pending_dma+0xba>
		assert_param(HAL_I2C_Mem_Read_DMA(&hi2c1, LSM303AGR_I2C_ADD_MG,
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <run_pending_dma+0xec>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2206      	movs	r2, #6
 800105e:	9201      	str	r2, [sp, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	2268      	movs	r2, #104	; 0x68
 8001066:	213d      	movs	r1, #61	; 0x3d
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <run_pending_dma+0xe0>)
 800106a:	f004 fa8b 	bl	8005584 <HAL_I2C_Mem_Read_DMA>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <run_pending_dma+0xa8>
 8001074:	2164      	movs	r1, #100	; 0x64
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <run_pending_dma+0xcc>)
 8001078:	f7ff ff2a 	bl	8000ed0 <assert_failed>
				LSM303AGR_OUTX_L_REG_M, I2C_MEMADD_SIZE_8BIT,
				(uint8_t*) p_mag_raw_data, sizeof(LSM303AGR_AxesRaw_t)) == HAL_OK);


		in_process_dma = DMA_MAG;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <run_pending_dma+0xd0>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
		req_mag = GP_FALSE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <run_pending_dma+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_mag DMA");
 8001088:	480e      	ldr	r0, [pc, #56]	; (80010c4 <run_pending_dma+0xf0>)
 800108a:	f00e f9c3 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
	}

	lock_update = GP_FALSE;
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <run_pending_dma+0xc8>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	0800fac4 	.word	0x0800fac4
 800109c:	200008b5 	.word	0x200008b5
 80010a0:	0800fad4 	.word	0x0800fad4
 80010a4:	200008b2 	.word	0x200008b2
 80010a8:	200008b4 	.word	0x200008b4
 80010ac:	200009a8 	.word	0x200009a8
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000a14 	.word	0x20000a14
 80010b8:	0800faf0 	.word	0x0800faf0
 80010bc:	200008b3 	.word	0x200008b3
 80010c0:	200009bc 	.word	0x200009bc
 80010c4:	0800fb04 	.word	0x0800fb04

080010c8 <SensorBus1_DMA_CallBack>:


void SensorBus1_DMA_CallBack(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0


	// Handle data ready from last dma request
	switch (in_process_dma) {
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <SensorBus1_DMA_CallBack+0x80>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d018      	beq.n	8001108 <SensorBus1_DMA_CallBack+0x40>
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d12d      	bne.n	8001136 <SensorBus1_DMA_CallBack+0x6e>

	case DMA_ACC_GYRO:
		SEGGER_SYSVIEW_PrintfHost("DMA_ACC_GYRO DMA CALLBACK");
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <SensorBus1_DMA_CallBack+0x84>)
 80010dc:	f00e f99a 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
			// Acc Gyro call back with current raw data
		pAccGyroCallback(p_acc_gyro_raw_data, GYRO_ACC_SAMPLES);
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <SensorBus1_DMA_CallBack+0x88>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <SensorBus1_DMA_CallBack+0x8c>)
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	210a      	movs	r1, #10
 80010ea:	4610      	mov	r0, r2
 80010ec:	4798      	blx	r3

		// Swap raw data storage
		if (p_acc_gyro_raw_data == &acc_gyro_raw_data1[0]) {
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <SensorBus1_DMA_CallBack+0x8c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <SensorBus1_DMA_CallBack+0x90>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d103      	bne.n	8001100 <SensorBus1_DMA_CallBack+0x38>
			p_acc_gyro_raw_data = &acc_gyro_raw_data2[0];
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <SensorBus1_DMA_CallBack+0x8c>)
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <SensorBus1_DMA_CallBack+0x94>)
 80010fc:	601a      	str	r2, [r3, #0]
		} else {
			p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
		}

		break;
 80010fe:	e01b      	b.n	8001138 <SensorBus1_DMA_CallBack+0x70>
			p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <SensorBus1_DMA_CallBack+0x8c>)
 8001102:	4a15      	ldr	r2, [pc, #84]	; (8001158 <SensorBus1_DMA_CallBack+0x90>)
 8001104:	601a      	str	r2, [r3, #0]
		break;
 8001106:	e017      	b.n	8001138 <SensorBus1_DMA_CallBack+0x70>

	case DMA_MAG:
		SEGGER_SYSVIEW_PrintfHost("DMA_MAG DMA CALLBACK");
 8001108:	4815      	ldr	r0, [pc, #84]	; (8001160 <SensorBus1_DMA_CallBack+0x98>)
 800110a:	f00e f983 	bl	800f414 <SEGGER_SYSVIEW_PrintfHost>
		// Mag call back with current raw data
		pMagCallback(p_mag_raw_data, 1);
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <SensorBus1_DMA_CallBack+0x9c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <SensorBus1_DMA_CallBack+0xa0>)
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	2101      	movs	r1, #1
 8001118:	4610      	mov	r0, r2
 800111a:	4798      	blx	r3

		// Swap raw data storage
		if (p_mag_raw_data == &mag_raw_data1) {
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <SensorBus1_DMA_CallBack+0xa0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <SensorBus1_DMA_CallBack+0xa4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d103      	bne.n	800112e <SensorBus1_DMA_CallBack+0x66>
			p_mag_raw_data = &mag_raw_data2;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <SensorBus1_DMA_CallBack+0xa0>)
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <SensorBus1_DMA_CallBack+0xa8>)
 800112a:	601a      	str	r2, [r3, #0]
		} else {
			p_mag_raw_data = &mag_raw_data1;
		}

		break;
 800112c:	e004      	b.n	8001138 <SensorBus1_DMA_CallBack+0x70>
			p_mag_raw_data = &mag_raw_data1;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <SensorBus1_DMA_CallBack+0xa0>)
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <SensorBus1_DMA_CallBack+0xa4>)
 8001132:	601a      	str	r2, [r3, #0]
		break;
 8001134:	e000      	b.n	8001138 <SensorBus1_DMA_CallBack+0x70>

	default:
		assert_param(!HAL_OK);
		break;
 8001136:	bf00      	nop
	}

	in_process_dma = DMA_RDY; // Indicate ready for more
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <SensorBus1_DMA_CallBack+0x80>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]

	// Schedule next pending
	run_pending_dma();
 800113e:	f7ff ff49 	bl	8000fd4 <run_pending_dma>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200008b2 	.word	0x200008b2
 800114c:	0800fb10 	.word	0x0800fb10
 8001150:	200009c0 	.word	0x200009c0
 8001154:	200009a8 	.word	0x200009a8
 8001158:	200008b8 	.word	0x200008b8
 800115c:	20000930 	.word	0x20000930
 8001160:	0800fb2c 	.word	0x0800fb2c
 8001164:	200009c4 	.word	0x200009c4
 8001168:	200009bc 	.word	0x200009bc
 800116c:	200009ac 	.word	0x200009ac
 8001170:	200009b4 	.word	0x200009b4

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210f      	movs	r1, #15
 80011ae:	f06f 0001 	mvn.w	r0, #1
 80011b2:	f001 ff43 	bl	800303c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	; (800131c <HAL_ETH_MspInit+0x158>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	f040 8096 	bne.w	8001314 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e8:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a46      	ldr	r2, [pc, #280]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	4b41      	ldr	r3, [pc, #260]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a40      	ldr	r2, [pc, #256]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800121e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6313      	str	r3, [r2, #48]	; 0x30
 800123c:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a34      	ldr	r2, [pc, #208]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a28      	ldr	r2, [pc, #160]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 800127e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001290:	2332      	movs	r3, #50	; 0x32
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <HAL_ETH_MspInit+0x160>)
 80012ac:	f003 f876 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012b0:	2386      	movs	r3, #134	; 0x86
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c0:	230b      	movs	r3, #11
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <HAL_ETH_MspInit+0x164>)
 80012cc:	f003 f866 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e2:	230b      	movs	r3, #11
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <HAL_ETH_MspInit+0x168>)
 80012ee:	f003 f855 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4808      	ldr	r0, [pc, #32]	; (8001330 <HAL_ETH_MspInit+0x16c>)
 8001310:	f003 f844 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40028000 	.word	0x40028000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40021800 	.word	0x40021800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ae      	sub	sp, #184	; 0xb8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2290      	movs	r2, #144	; 0x90
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f00e fa61 	bl	800f81c <memset>
  if(huart->Instance==USART3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_UART_MspInit+0xb4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d13c      	bne.n	80013de <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001368:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800136a:	2300      	movs	r3, #0
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f007 f89e 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f7ff fda1 	bl	8000ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_UART_MspInit+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_UART_MspInit+0xb8>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_UART_MspInit+0xb8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 80013da:	f002 ffdf 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	37b8      	adds	r7, #184	; 0xb8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004800 	.word	0x40004800
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ae      	sub	sp, #184	; 0xb8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2290      	movs	r2, #144	; 0x90
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f00e fa01 	bl	800f81c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001422:	d159      	bne.n	80014d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001424:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001428:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4618      	mov	r0, r3
 8001436:	f007 f83d 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001440:	f7ff fd40 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800145c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001476:	230a      	movs	r3, #10
 8001478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001480:	4619      	mov	r1, r3
 8001482:	4818      	ldr	r0, [pc, #96]	; (80014e4 <HAL_PCD_MspInit+0xf0>)
 8001484:	f002 ff8a 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <HAL_PCD_MspInit+0xf0>)
 80014a4:	f002 ff7a 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 80014ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b2:	6353      	str	r3, [r2, #52]	; 0x34
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	6453      	str	r3, [r2, #68]	; 0x44
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_PCD_MspInit+0xec>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	37b8      	adds	r7, #184	; 0xb8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	; 0x38
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <HAL_InitTick+0xe0>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a32      	ldr	r2, [pc, #200]	; (80015c8 <HAL_InitTick+0xe0>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_InitTick+0xe0>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f006 ff98 	bl	8008450 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800152a:	f006 ff69 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 800152e:	6378      	str	r0, [r7, #52]	; 0x34
 8001530:	e004      	b.n	800153c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001532:	f006 ff65 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_InitTick+0xe4>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	0c9b      	lsrs	r3, r3, #18
 8001546:	3b01      	subs	r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_InitTick+0xe8>)
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <HAL_InitTick+0xec>)
 800154e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_InitTick+0xe8>)
 8001552:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001556:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_InitTick+0xe8>)
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <HAL_InitTick+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_InitTick+0xe8>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_InitTick+0xe8>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001570:	4817      	ldr	r0, [pc, #92]	; (80015d0 <HAL_InitTick+0xe8>)
 8001572:	f008 f809 	bl	8009588 <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800157c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11b      	bne.n	80015bc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <HAL_InitTick+0xe8>)
 8001586:	f008 f929 	bl	80097dc <HAL_TIM_Base_Start_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001598:	2032      	movs	r0, #50	; 0x32
 800159a:	f001 fd7b 	bl	8003094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d808      	bhi.n	80015b6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	2032      	movs	r0, #50	; 0x32
 80015aa:	f001 fd47 	bl	800303c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_InitTick+0xf0>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e002      	b.n	80015bc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3738      	adds	r7, #56	; 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	200009c8 	.word	0x200009c8
 80015d4:	40000c00 	.word	0x40000c00
 80015d8:	20000008 	.word	0x20000008

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MagDataRdy_Pin);
 800160c:	2008      	movs	r0, #8
 800160e:	f003 fbcf 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Stream0_IRQHandler+0x10>)
 800161e:	f002 f913 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000a6c 	.word	0x20000a6c

0800162c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Stream6_IRQHandler+0x10>)
 8001632:	f002 f909 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000acc 	.word	0x20000acc

08001640 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <I2C1_EV_IRQHandler+0x10>)
 8001646:	f004 f88f 	bl	8005768 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000a14 	.word	0x20000a14

08001654 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <I2C1_ER_IRQHandler+0x10>)
 800165a:	f004 f89f 	bl	800579c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000a14 	.word	0x20000a14

08001668 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lms6dsl_Int1_Pin);
 800166c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001670:	f003 fb9e 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM5_IRQHandler+0x10>)
 800167e:	f008 f97b 	bl	8009978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200009c8 	.word	0x200009c8

0800168c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <BSP_I2C1_Init+0x70>)
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <BSP_I2C1_Init+0x74>)
 800169a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <BSP_I2C1_Init+0x78>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	4918      	ldr	r1, [pc, #96]	; (8001704 <BSP_I2C1_Init+0x78>)
 80016a4:	600a      	str	r2, [r1, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d122      	bne.n	80016f0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <BSP_I2C1_Init+0x70>)
 80016ac:	f004 f935 	bl	800591a <HAL_I2C_GetState>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11c      	bne.n	80016f0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <BSP_I2C1_Init+0x70>)
 80016b8:	f000 f8fe 	bl	80018b8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <BSP_I2C1_Init+0x70>)
 80016c4:	f000 f8b4 	bl	8001830 <MX_I2C1_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016ce:	f06f 0307 	mvn.w	r3, #7
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	e00c      	b.n	80016f0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <BSP_I2C1_Init+0x70>)
 80016da:	f005 fdc3 	bl	8007264 <HAL_I2CEx_ConfigAnalogFilter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016e4:	f06f 0307 	mvn.w	r3, #7
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	e001      	b.n	80016f0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000a14 	.word	0x20000a14
 8001700:	40005400 	.word	0x40005400
 8001704:	20000a68 	.word	0x20000a68

08001708 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <BSP_I2C1_DeInit+0x48>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d014      	beq.n	8001744 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <BSP_I2C1_DeInit+0x48>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <BSP_I2C1_DeInit+0x48>)
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <BSP_I2C1_DeInit+0x48>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10b      	bne.n	8001744 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <BSP_I2C1_DeInit+0x4c>)
 800172e:	f000 f991 	bl	8001a54 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001732:	4808      	ldr	r0, [pc, #32]	; (8001754 <BSP_I2C1_DeInit+0x4c>)
 8001734:	f003 fc76 	bl	8005024 <HAL_I2C_DeInit>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800173e:	f06f 0307 	mvn.w	r3, #7
 8001742:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000a68 	.word	0x20000a68
 8001754:	20000a14 	.word	0x20000a14

08001758 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af04      	add	r7, sp, #16
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	81fb      	strh	r3, [r7, #14]
 8001766:	460b      	mov	r3, r1
 8001768:	81bb      	strh	r3, [r7, #12]
 800176a:	4613      	mov	r3, r2
 800176c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001772:	89ba      	ldrh	r2, [r7, #12]
 8001774:	89f9      	ldrh	r1, [r7, #14]
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <BSP_I2C1_WriteReg+0x60>)
 8001788:	f003 fcb2 	bl	80050f0 <HAL_I2C_Mem_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00c      	beq.n	80017ac <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001792:	4809      	ldr	r0, [pc, #36]	; (80017b8 <BSP_I2C1_WriteReg+0x60>)
 8001794:	f004 f8cf 	bl	8005936 <HAL_I2C_GetError>
 8001798:	4603      	mov	r3, r0
 800179a:	2b04      	cmp	r3, #4
 800179c:	d103      	bne.n	80017a6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800179e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e002      	b.n	80017ac <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80017a6:	f06f 0303 	mvn.w	r3, #3
 80017aa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80017ac:	697b      	ldr	r3, [r7, #20]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000a14 	.word	0x20000a14

080017bc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af04      	add	r7, sp, #16
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	81fb      	strh	r3, [r7, #14]
 80017ca:	460b      	mov	r3, r1
 80017cc:	81bb      	strh	r3, [r7, #12]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80017d6:	89ba      	ldrh	r2, [r7, #12]
 80017d8:	89f9      	ldrh	r1, [r7, #14]
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <BSP_I2C1_ReadReg+0x60>)
 80017ec:	f003 fda2 	bl	8005334 <HAL_I2C_Mem_Read>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <BSP_I2C1_ReadReg+0x60>)
 80017f8:	f004 f89d 	bl	8005936 <HAL_I2C_GetError>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d103      	bne.n	800180a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001802:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e002      	b.n	8001810 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800180a:	f06f 0303 	mvn.w	r3, #3
 800180e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001810:	697b      	ldr	r3, [r7, #20]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000a14 	.word	0x20000a14

08001820 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001824:	f001 fae8 	bl	8002df8 <HAL_GetTick>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_I2C1_Init+0x80>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_I2C1_Init+0x84>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f003 fab4 	bl	8004de0 <HAL_I2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f005 fced 	bl	8007264 <HAL_I2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f005 fd5a 	bl	8007350 <HAL_I2CEx_ConfigDigitalFilter>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005400 	.word	0x40005400
 80018b4:	2010091a 	.word	0x2010091a

080018b8 <I2C1_MspInit>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0ae      	sub	sp, #184	; 0xb8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2290      	movs	r2, #144	; 0x90
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00d ffa7 	bl	800f81c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fde9 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <I2C1_MspInit+0x184>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <I2C1_MspInit+0x184>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <I2C1_MspInit+0x184>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80018fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001902:	2312      	movs	r3, #18
 8001904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001914:	2304      	movs	r3, #4
 8001916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800191a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800191e:	4619      	mov	r1, r3
 8001920:	4847      	ldr	r0, [pc, #284]	; (8001a40 <I2C1_MspInit+0x188>)
 8001922:	f002 fd3b 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192e:	2312      	movs	r3, #18
 8001930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001940:	2304      	movs	r3, #4
 8001942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001946:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800194a:	4619      	mov	r1, r3
 800194c:	483c      	ldr	r0, [pc, #240]	; (8001a40 <I2C1_MspInit+0x188>)
 800194e:	f002 fd25 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <I2C1_MspInit+0x184>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <I2C1_MspInit+0x184>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <I2C1_MspInit+0x184>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral DMA init*/

    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <I2C1_MspInit+0x18c>)
 800196c:	4a36      	ldr	r2, [pc, #216]	; (8001a48 <I2C1_MspInit+0x190>)
 800196e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <I2C1_MspInit+0x18c>)
 8001972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001976:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <I2C1_MspInit+0x18c>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <I2C1_MspInit+0x18c>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <I2C1_MspInit+0x18c>)
 8001986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <I2C1_MspInit+0x18c>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <I2C1_MspInit+0x18c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <I2C1_MspInit+0x18c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <I2C1_MspInit+0x18c>)
 80019a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019a4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <I2C1_MspInit+0x18c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_i2c1_rx);
 80019ac:	4825      	ldr	r0, [pc, #148]	; (8001a44 <I2C1_MspInit+0x18c>)
 80019ae:	f001 fba1 	bl	80030f4 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <I2C1_MspInit+0x18c>)
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <I2C1_MspInit+0x18c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6393      	str	r3, [r2, #56]	; 0x38

    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <I2C1_MspInit+0x194>)
 80019c0:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <I2C1_MspInit+0x198>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <I2C1_MspInit+0x194>)
 80019c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <I2C1_MspInit+0x194>)
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <I2C1_MspInit+0x194>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <I2C1_MspInit+0x194>)
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <I2C1_MspInit+0x194>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <I2C1_MspInit+0x194>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <I2C1_MspInit+0x194>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <I2C1_MspInit+0x194>)
 80019f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <I2C1_MspInit+0x194>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_i2c1_tx);
 8001a00:	4812      	ldr	r0, [pc, #72]	; (8001a4c <I2C1_MspInit+0x194>)
 8001a02:	f001 fb77 	bl	80030f4 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <I2C1_MspInit+0x194>)
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <I2C1_MspInit+0x194>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	201f      	movs	r0, #31
 8001a18:	f001 fb10 	bl	800303c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a1c:	201f      	movs	r0, #31
 8001a1e:	f001 fb39 	bl	8003094 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2105      	movs	r1, #5
 8001a26:	2020      	movs	r0, #32
 8001a28:	f001 fb08 	bl	800303c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a2c:	2020      	movs	r0, #32
 8001a2e:	f001 fb31 	bl	8003094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	37b8      	adds	r7, #184	; 0xb8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	20000a6c 	.word	0x20000a6c
 8001a48:	40026010 	.word	0x40026010
 8001a4c:	20000acc 	.word	0x20000acc
 8001a50:	400260a0 	.word	0x400260a0

08001a54 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <I2C1_MspDeInit+0x50>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <I2C1_MspDeInit+0x50>)
 8001a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a66:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6c:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <I2C1_MspDeInit+0x54>)
 8001a6e:	f003 f815 	bl	8004a9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <I2C1_MspDeInit+0x54>)
 8001a78:	f003 f810 	bl	8004a9c <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 fd7b 	bl	800357c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fd76 	bl	800357c <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001a90:	201f      	movs	r0, #31
 8001a92:	f001 fb17 	bl	80030c4 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001a96:	2020      	movs	r0, #32
 8001a98:	f001 fb14 	bl	80030c4 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020400 	.word	0x40020400

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f00d fe49 	bl	800f794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7fe fea3 	bl	800084c <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b14:	0800ff24 	.word	0x0800ff24
  ldr r2, =_sbss
 8001b18:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8001b1c:	20005fb8 	.word	0x20005fb8

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e04b      	b.n	8001bd8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	7b1a      	ldrb	r2, [r3, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8001b7c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8001b82:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e01e      	b.n	8001bd8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4798      	blx	r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e014      	b.n	8001bd8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d010      	beq.n	8001bd8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	331c      	adds	r3, #28
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa0a 	bl	8001fe0 <lsm303agr_mag_i2c_interface_set>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e000      	b.n	8001bda <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	08001cd3 	.word	0x08001cd3
 8001be8:	08001d35 	.word	0x08001d35

08001bec <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	331c      	adds	r3, #28
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f947 	bl	8001e8e <lsm303agr_mag_block_data_update_set>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e028      	b.n	8001c5e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	331c      	adds	r3, #28
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f8ef 	bl	8001df6 <lsm303agr_mag_operating_mode_set>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e01c      	b.n	8001c5e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	331c      	adds	r3, #28
 8001c28:	2103      	movs	r1, #3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f909 	bl	8001e42 <lsm303agr_mag_data_rate_set>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e010      	b.n	8001c5e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	331c      	adds	r3, #28
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f980 	bl	8001f48 <lsm303agr_mag_self_test_set>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e004      	b.n	8001c5e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	331c      	adds	r3, #28
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f92f 	bl	8001eda <lsm303agr_mag_device_id_get>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	e000      	b.n	8001c8a <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e010      	b.n	8001cca <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	331c      	adds	r3, #28
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f8a1 	bl	8001df6 <lsm303agr_mag_operating_mode_set>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e004      	b.n	8001cca <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cd2:	b590      	push	{r4, r7, lr}
 8001cd4:	b087      	sub	sp, #28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	460b      	mov	r3, r1
 8001ce0:	72fb      	strb	r3, [r7, #11]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10e      	bne.n	8001d10 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	695c      	ldr	r4, [r3, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	7b1b      	ldrb	r3, [r3, #12]
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	b299      	uxth	r1, r3
 8001d06:	893b      	ldrh	r3, [r7, #8]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	47a0      	blx	r4
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	e00d      	b.n	8001d2c <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	695c      	ldr	r4, [r3, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	7b1b      	ldrb	r3, [r3, #12]
 8001d18:	b298      	uxth	r0, r3
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	b299      	uxth	r1, r3
 8001d24:	893b      	ldrh	r3, [r7, #8]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	47a0      	blx	r4
 8001d2a:	4603      	mov	r3, r0
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd90      	pop	{r4, r7, pc}

08001d34 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	460b      	mov	r3, r1
 8001d42:	72fb      	strb	r3, [r7, #11]
 8001d44:	4613      	mov	r3, r2
 8001d46:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10e      	bne.n	8001d72 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	691c      	ldr	r4, [r3, #16]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	7b1b      	ldrb	r3, [r3, #12]
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	b299      	uxth	r1, r3
 8001d68:	893b      	ldrh	r3, [r7, #8]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	47a0      	blx	r4
 8001d6e:	4603      	mov	r3, r0
 8001d70:	e00d      	b.n	8001d8e <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	691c      	ldr	r4, [r3, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	b298      	uxth	r0, r3
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	b299      	uxth	r1, r3
 8001d86:	893b      	ldrh	r3, [r7, #8]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	47a0      	blx	r4
 8001d8c:	4603      	mov	r3, r0
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}

08001d96 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001d96:	b590      	push	{r4, r7, lr}
 8001d98:	b087      	sub	sp, #28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	461a      	mov	r2, r3
 8001da2:	460b      	mov	r3, r1
 8001da4:	72fb      	strb	r3, [r7, #11]
 8001da6:	4613      	mov	r3, r2
 8001da8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685c      	ldr	r4, [r3, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6898      	ldr	r0, [r3, #8]
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	7af9      	ldrb	r1, [r7, #11]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	47a0      	blx	r4
 8001dba:	6178      	str	r0, [r7, #20]

  return ret;
 8001dbc:	697b      	ldr	r3, [r7, #20]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}

08001dc6 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b087      	sub	sp, #28
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	72fb      	strb	r3, [r7, #11]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681c      	ldr	r4, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6898      	ldr	r0, [r3, #8]
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	7af9      	ldrb	r1, [r7, #11]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	47a0      	blx	r4
 8001dea:	6178      	str	r0, [r7, #20]

  return ret;
 8001dec:	697b      	ldr	r3, [r7, #20]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}

08001df6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001e02:	f107 0208 	add.w	r2, r7, #8
 8001e06:	2301      	movs	r3, #1
 8001e08:	2160      	movs	r1, #96	; 0x60
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffc3 	bl	8001d96 <lsm303agr_read_reg>
 8001e10:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10f      	bne.n	8001e38 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	7a3b      	ldrb	r3, [r7, #8]
 8001e22:	f362 0301 	bfi	r3, r2, #0, #2
 8001e26:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	2160      	movs	r1, #96	; 0x60
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffc8 	bl	8001dc6 <lsm303agr_write_reg>
 8001e36:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001e4e:	f107 0208 	add.w	r2, r7, #8
 8001e52:	2301      	movs	r3, #1
 8001e54:	2160      	movs	r1, #96	; 0x60
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff9d 	bl	8001d96 <lsm303agr_read_reg>
 8001e5c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10f      	bne.n	8001e84 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	7a3b      	ldrb	r3, [r7, #8]
 8001e6e:	f362 0383 	bfi	r3, r2, #2, #2
 8001e72:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2301      	movs	r3, #1
 8001e7a:	2160      	movs	r1, #96	; 0x60
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ffa2 	bl	8001dc6 <lsm303agr_write_reg>
 8001e82:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001e9a:	f107 0208 	add.w	r2, r7, #8
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	2162      	movs	r1, #98	; 0x62
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff77 	bl	8001d96 <lsm303agr_read_reg>
 8001ea8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10f      	bne.n	8001ed0 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	7a3b      	ldrb	r3, [r7, #8]
 8001eba:	f362 1304 	bfi	r3, r2, #4, #1
 8001ebe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001ec0:	f107 0208 	add.w	r2, r7, #8
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	2162      	movs	r1, #98	; 0x62
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff7c 	bl	8001dc6 <lsm303agr_write_reg>
 8001ece:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	214f      	movs	r1, #79	; 0x4f
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff53 	bl	8001d96 <lsm303agr_read_reg>
 8001ef0:	60f8      	str	r0, [r7, #12]

  return ret;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <lsm303agr_mag_boot_set>:
  * @param  val    Change the values of reboot in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2160      	movs	r1, #96	; 0x60
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff40 	bl	8001d96 <lsm303agr_read_reg>
 8001f16:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <lsm303agr_mag_boot_set+0x42>
  {
    cfg_reg_a_m.reboot = (uint8_t)val;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	7a3b      	ldrb	r3, [r7, #8]
 8001f28:	f362 1386 	bfi	r3, r2, #6, #1
 8001f2c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001f2e:	f107 0208 	add.w	r2, r7, #8
 8001f32:	2301      	movs	r3, #1
 8001f34:	2160      	movs	r1, #96	; 0x60
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff45 	bl	8001dc6 <lsm303agr_write_reg>
 8001f3c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2162      	movs	r1, #98	; 0x62
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff1a 	bl	8001d96 <lsm303agr_read_reg>
 8001f62:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	7a3b      	ldrb	r3, [r7, #8]
 8001f74:	f362 0341 	bfi	r3, r2, #1, #1
 8001f78:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001f7a:	f107 0208 	add.w	r2, r7, #8
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2162      	movs	r1, #98	; 0x62
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff1f 	bl	8001dc6 <lsm303agr_write_reg>
 8001f88:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <lsm303agr_mag_drdy_on_pin_set>:
  * @param  val    Change the values of drdy_on_pin in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_drdy_on_pin_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001fa0:	f107 0208 	add.w	r2, r7, #8
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2162      	movs	r1, #98	; 0x62
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fef4 	bl	8001d96 <lsm303agr_read_reg>
 8001fae:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <lsm303agr_mag_drdy_on_pin_set+0x42>
  {
    cfg_reg_c_m.int_mag = (uint8_t)val;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	7a3b      	ldrb	r3, [r7, #8]
 8001fc0:	f362 0300 	bfi	r3, r2, #0, #1
 8001fc4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001fc6:	f107 0208 	add.w	r2, r7, #8
 8001fca:	2301      	movs	r3, #1
 8001fcc:	2162      	movs	r1, #98	; 0x62
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fef9 	bl	8001dc6 <lsm303agr_write_reg>
 8001fd4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001fec:	f107 0208 	add.w	r2, r7, #8
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	2162      	movs	r1, #98	; 0x62
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fece 	bl	8001d96 <lsm303agr_read_reg>
 8001ffa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	7a3b      	ldrb	r3, [r7, #8]
 800200c:	f362 1345 	bfi	r3, r2, #5, #1
 8002010:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	2301      	movs	r3, #1
 8002018:	2162      	movs	r1, #98	; 0x62
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fed3 	bl	8001dc6 <lsm303agr_write_reg>
 8002020:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d103      	bne.n	8002048 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e04d      	b.n	80020e4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	7b1a      	ldrb	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <LSM6DSL_RegisterBusIO+0xc4>)
 8002084:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <LSM6DSL_RegisterBusIO+0xc8>)
 800208a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e020      	b.n	80020e4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4798      	blx	r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e016      	b.n	80020e4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d112      	bne.n	80020e4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80020c8:	230c      	movs	r3, #12
 80020ca:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	461a      	mov	r2, r3
 80020d0:	2112      	movs	r1, #18
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f935 	bl	8002342 <LSM6DSL_Write_Reg>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	080024bb 	.word	0x080024bb
 80020f4:	080024f1 	.word	0x080024f1

080020f8 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	331c      	adds	r3, #28
 8002104:	2101      	movs	r1, #1
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fbfd 	bl	8002906 <lsm6dsl_auto_increment_set>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e054      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	331c      	adds	r3, #28
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb94 	bl	800284c <lsm6dsl_block_data_update_set>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e048      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	331c      	adds	r3, #28
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fdf0 	bl	8002d1c <lsm6dsl_fifo_mode_set>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e03c      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2204      	movs	r2, #4
 800214c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	331c      	adds	r3, #28
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fa3b 	bl	80025d2 <lsm6dsl_xl_data_rate_set>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e02c      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	331c      	adds	r3, #28
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fa09 	bl	8002586 <lsm6dsl_xl_full_scale_set>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e020      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2204      	movs	r2, #4
 8002184:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	331c      	adds	r3, #28
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fad4 	bl	800273c <lsm6dsl_gy_data_rate_set>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e010      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	331c      	adds	r3, #28
 80021a4:	2106      	movs	r1, #6
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 faa2 	bl	80026f0 <lsm6dsl_gy_full_scale_set>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e004      	b.n	80021c2 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	331c      	adds	r3, #28
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fb5c 	bl	8002898 <lsm6dsl_device_id_get>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e000      	b.n	80021ee <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e014      	b.n	8002236 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 021c 	add.w	r2, r3, #28
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f000 f9d9 	bl	80025d2 <lsm6dsl_xl_data_rate_set>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e004      	b.n	8002236 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e01f      	b.n	8002294 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 021c 	add.w	r2, r3, #28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	332b      	adds	r3, #43	; 0x2b
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f000 f9dd 	bl	8002620 <lsm6dsl_xl_data_rate_get>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	e010      	b.n	8002294 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	331c      	adds	r3, #28
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f9aa 	bl	80025d2 <lsm6dsl_xl_data_rate_set>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	e004      	b.n	8002294 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e014      	b.n	80022dc <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 021c 	add.w	r2, r3, #28
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f000 fa3b 	bl	800273c <lsm6dsl_gy_data_rate_set>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	e004      	b.n	80022dc <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e01f      	b.n	800233a <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f103 021c 	add.w	r2, r3, #28
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	332c      	adds	r3, #44	; 0x2c
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 fa3e 	bl	8002788 <lsm6dsl_gy_data_rate_get>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e010      	b.n	800233a <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	331c      	adds	r3, #28
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fa0c 	bl	800273c <lsm6dsl_gy_data_rate_set>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e004      	b.n	800233a <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]
 800234e:	4613      	mov	r3, r2
 8002350:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 001c 	add.w	r0, r3, #28
 8002358:	1cba      	adds	r2, r7, #2
 800235a:	78f9      	ldrb	r1, [r7, #3]
 800235c:	2301      	movs	r3, #1
 800235e:	f000 f8fa 	bl	8002556 <lsm6dsl_write_reg>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	e000      	b.n	8002370 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <LSM6DSL_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	331c      	adds	r3, #28
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fc43 	bl	8002c18 <lsm6dsl_fifo_watermark_set>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	e000      	b.n	80023a0 <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LSM6DSL_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	bf8c      	ite	hi
 80023be:	2201      	movhi	r2, #1
 80023c0:	2200      	movls	r2, #0
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	2a00      	cmp	r2, #0
 80023c6:	d10b      	bne.n	80023e0 <LSM6DSL_FIFO_Set_Mode+0x38>
 80023c8:	2201      	movs	r2, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	60fb      	str	r3, [r7, #12]
      break;
 80023e6:	e000      	b.n	80023ea <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 80023e8:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d101      	bne.n	80023f6 <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	e00d      	b.n	8002412 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	331c      	adds	r3, #28
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fc8c 	bl	8002d1c <lsm6dsl_fifo_mode_set>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e000      	b.n	8002412 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <LSM6DSL_FIFO_ACC_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO accelero decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	2b07      	cmp	r3, #7
 800242e:	d903      	bls.n	8002438 <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	60fb      	str	r3, [r7, #12]
      break;
 8002436:	e000      	b.n	800243a <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 8002438:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d101      	bne.n	8002446 <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	e00d      	b.n	8002462 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	331c      	adds	r3, #28
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fc18 	bl	8002c84 <lsm6dsl_fifo_xl_batch_set>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	e000      	b.n	8002462 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <LSM6DSL_FIFO_GYRO_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO gyro decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	2b07      	cmp	r3, #7
 800247e:	d903      	bls.n	8002488 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	60fb      	str	r3, [r7, #12]
      break;
 8002486:	e000      	b.n	800248a <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 8002488:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d101      	bne.n	8002496 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	e00d      	b.n	80024b2 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	331c      	adds	r3, #28
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fc16 	bl	8002cd0 <lsm6dsl_fifo_gy_batch_set>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	e000      	b.n	80024b2 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 80024b0:	68fb      	ldr	r3, [r7, #12]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024ba:	b590      	push	{r4, r7, lr}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	461a      	mov	r2, r3
 80024c6:	460b      	mov	r3, r1
 80024c8:	72fb      	strb	r3, [r7, #11]
 80024ca:	4613      	mov	r3, r2
 80024cc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	695c      	ldr	r4, [r3, #20]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	b298      	uxth	r0, r3
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	b299      	uxth	r1, r3
 80024e0:	893b      	ldrh	r3, [r7, #8]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	47a0      	blx	r4
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd90      	pop	{r4, r7, pc}

080024f0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	460b      	mov	r3, r1
 80024fe:	72fb      	strb	r3, [r7, #11]
 8002500:	4613      	mov	r3, r2
 8002502:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	691c      	ldr	r4, [r3, #16]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	b298      	uxth	r0, r3
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	b299      	uxth	r1, r3
 8002516:	893b      	ldrh	r3, [r7, #8]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	47a0      	blx	r4
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd90      	pop	{r4, r7, pc}

08002526 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002526:	b590      	push	{r4, r7, lr}
 8002528:	b087      	sub	sp, #28
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	461a      	mov	r2, r3
 8002532:	460b      	mov	r3, r1
 8002534:	72fb      	strb	r3, [r7, #11]
 8002536:	4613      	mov	r3, r2
 8002538:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685c      	ldr	r4, [r3, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6898      	ldr	r0, [r3, #8]
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	7af9      	ldrb	r1, [r7, #11]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	47a0      	blx	r4
 800254a:	6178      	str	r0, [r7, #20]

  return ret;
 800254c:	697b      	ldr	r3, [r7, #20]
}
 800254e:	4618      	mov	r0, r3
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd90      	pop	{r4, r7, pc}

08002556 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002556:	b590      	push	{r4, r7, lr}
 8002558:	b087      	sub	sp, #28
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	461a      	mov	r2, r3
 8002562:	460b      	mov	r3, r1
 8002564:	72fb      	strb	r3, [r7, #11]
 8002566:	4613      	mov	r3, r2
 8002568:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681c      	ldr	r4, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6898      	ldr	r0, [r3, #8]
 8002572:	893b      	ldrh	r3, [r7, #8]
 8002574:	7af9      	ldrb	r1, [r7, #11]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	47a0      	blx	r4
 800257a:	6178      	str	r0, [r7, #20]

  return ret;
 800257c:	697b      	ldr	r3, [r7, #20]
}
 800257e:	4618      	mov	r0, r3
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}

08002586 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002592:	f107 0208 	add.w	r2, r7, #8
 8002596:	2301      	movs	r3, #1
 8002598:	2110      	movs	r1, #16
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffc3 	bl	8002526 <lsm6dsl_read_reg>
 80025a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	f362 0383 	bfi	r3, r2, #2, #2
 80025b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025b8:	f107 0208 	add.w	r2, r7, #8
 80025bc:	2301      	movs	r3, #1
 80025be:	2110      	movs	r1, #16
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffc8 	bl	8002556 <lsm6dsl_write_reg>
 80025c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025c8:	68fb      	ldr	r3, [r7, #12]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025de:	f107 0208 	add.w	r2, r7, #8
 80025e2:	2301      	movs	r3, #1
 80025e4:	2110      	movs	r1, #16
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff9d 	bl	8002526 <lsm6dsl_read_reg>
 80025ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10f      	bne.n	8002614 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	7a3b      	ldrb	r3, [r7, #8]
 80025fe:	f362 1307 	bfi	r3, r2, #4, #4
 8002602:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	2301      	movs	r3, #1
 800260a:	2110      	movs	r1, #16
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ffa2 	bl	8002556 <lsm6dsl_write_reg>
 8002612:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002614:	68fb      	ldr	r3, [r7, #12]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800262a:	f107 0208 	add.w	r2, r7, #8
 800262e:	2301      	movs	r3, #1
 8002630:	2110      	movs	r1, #16
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff77 	bl	8002526 <lsm6dsl_read_reg>
 8002638:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b0b      	cmp	r3, #11
 8002644:	d84a      	bhi.n	80026dc <lsm6dsl_xl_data_rate_get+0xbc>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <lsm6dsl_xl_data_rate_get+0x2c>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800267d 	.word	0x0800267d
 8002650:	08002685 	.word	0x08002685
 8002654:	0800268d 	.word	0x0800268d
 8002658:	08002695 	.word	0x08002695
 800265c:	0800269d 	.word	0x0800269d
 8002660:	080026a5 	.word	0x080026a5
 8002664:	080026ad 	.word	0x080026ad
 8002668:	080026b5 	.word	0x080026b5
 800266c:	080026bd 	.word	0x080026bd
 8002670:	080026c5 	.word	0x080026c5
 8002674:	080026cd 	.word	0x080026cd
 8002678:	080026d5 	.word	0x080026d5
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
      break;
 8002682:	e02f      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
      break;
 800268a:	e02b      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
      break;
 8002692:	e027      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2203      	movs	r2, #3
 8002698:	701a      	strb	r2, [r3, #0]
      break;
 800269a:	e023      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2204      	movs	r2, #4
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	e01f      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2205      	movs	r2, #5
 80026a8:	701a      	strb	r2, [r3, #0]
      break;
 80026aa:	e01b      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2206      	movs	r2, #6
 80026b0:	701a      	strb	r2, [r3, #0]
      break;
 80026b2:	e017      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2207      	movs	r2, #7
 80026b8:	701a      	strb	r2, [r3, #0]
      break;
 80026ba:	e013      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2208      	movs	r2, #8
 80026c0:	701a      	strb	r2, [r3, #0]
      break;
 80026c2:	e00f      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2209      	movs	r2, #9
 80026c8:	701a      	strb	r2, [r3, #0]
      break;
 80026ca:	e00b      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	220a      	movs	r2, #10
 80026d0:	701a      	strb	r2, [r3, #0]
      break;
 80026d2:	e007      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	220b      	movs	r2, #11
 80026d8:	701a      	strb	r2, [r3, #0]
      break;
 80026da:	e003      	b.n	80026e4 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	220c      	movs	r2, #12
 80026e0:	701a      	strb	r2, [r3, #0]
      break;
 80026e2:	bf00      	nop
  }

  return ret;
 80026e4:	68fb      	ldr	r3, [r7, #12]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop

080026f0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026fc:	f107 0208 	add.w	r2, r7, #8
 8002700:	2301      	movs	r3, #1
 8002702:	2111      	movs	r1, #17
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff0e 	bl	8002526 <lsm6dsl_read_reg>
 800270a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	b2da      	uxtb	r2, r3
 800271a:	7a3b      	ldrb	r3, [r7, #8]
 800271c:	f362 0343 	bfi	r3, r2, #1, #3
 8002720:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002722:	f107 0208 	add.w	r2, r7, #8
 8002726:	2301      	movs	r3, #1
 8002728:	2111      	movs	r1, #17
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff13 	bl	8002556 <lsm6dsl_write_reg>
 8002730:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002748:	f107 0208 	add.w	r2, r7, #8
 800274c:	2301      	movs	r3, #1
 800274e:	2111      	movs	r1, #17
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fee8 	bl	8002526 <lsm6dsl_read_reg>
 8002756:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	7a3b      	ldrb	r3, [r7, #8]
 8002768:	f362 1307 	bfi	r3, r2, #4, #4
 800276c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800276e:	f107 0208 	add.w	r2, r7, #8
 8002772:	2301      	movs	r3, #1
 8002774:	2111      	movs	r1, #17
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff feed 	bl	8002556 <lsm6dsl_write_reg>
 800277c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002792:	f107 0208 	add.w	r2, r7, #8
 8002796:	2301      	movs	r3, #1
 8002798:	2111      	movs	r1, #17
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fec3 	bl	8002526 <lsm6dsl_read_reg>
 80027a0:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 80027a2:	7a3b      	ldrb	r3, [r7, #8]
 80027a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	d844      	bhi.n	8002838 <lsm6dsl_gy_data_rate_get+0xb0>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <lsm6dsl_gy_data_rate_get+0x2c>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027e9 	.word	0x080027e9
 80027bc:	080027f1 	.word	0x080027f1
 80027c0:	080027f9 	.word	0x080027f9
 80027c4:	08002801 	.word	0x08002801
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002811 	.word	0x08002811
 80027d0:	08002819 	.word	0x08002819
 80027d4:	08002821 	.word	0x08002821
 80027d8:	08002829 	.word	0x08002829
 80027dc:	08002831 	.word	0x08002831
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
      break;
 80027e6:	e02b      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
      break;
 80027ee:	e027      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2202      	movs	r2, #2
 80027f4:	701a      	strb	r2, [r3, #0]
      break;
 80027f6:	e023      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2203      	movs	r2, #3
 80027fc:	701a      	strb	r2, [r3, #0]
      break;
 80027fe:	e01f      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2204      	movs	r2, #4
 8002804:	701a      	strb	r2, [r3, #0]
      break;
 8002806:	e01b      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2205      	movs	r2, #5
 800280c:	701a      	strb	r2, [r3, #0]
      break;
 800280e:	e017      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2206      	movs	r2, #6
 8002814:	701a      	strb	r2, [r3, #0]
      break;
 8002816:	e013      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2207      	movs	r2, #7
 800281c:	701a      	strb	r2, [r3, #0]
      break;
 800281e:	e00f      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2208      	movs	r2, #8
 8002824:	701a      	strb	r2, [r3, #0]
      break;
 8002826:	e00b      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2209      	movs	r2, #9
 800282c:	701a      	strb	r2, [r3, #0]
      break;
 800282e:	e007      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	220a      	movs	r2, #10
 8002834:	701a      	strb	r2, [r3, #0]
      break;
 8002836:	e003      	b.n	8002840 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	220b      	movs	r2, #11
 800283c:	701a      	strb	r2, [r3, #0]
      break;
 800283e:	bf00      	nop
  }

  return ret;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop

0800284c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002858:	f107 0208 	add.w	r2, r7, #8
 800285c:	2301      	movs	r3, #1
 800285e:	2112      	movs	r1, #18
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fe60 	bl	8002526 <lsm6dsl_read_reg>
 8002866:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	7a3b      	ldrb	r3, [r7, #8]
 8002878:	f362 1386 	bfi	r3, r2, #6, #1
 800287c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800287e:	f107 0208 	add.w	r2, r7, #8
 8002882:	2301      	movs	r3, #1
 8002884:	2112      	movs	r1, #18
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fe65 	bl	8002556 <lsm6dsl_write_reg>
 800288c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80028a2:	2301      	movs	r3, #1
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	210f      	movs	r1, #15
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fe3c 	bl	8002526 <lsm6dsl_read_reg>
 80028ae:	60f8      	str	r0, [r7, #12]

  return ret;
 80028b0:	68fb      	ldr	r3, [r7, #12]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028c6:	f107 0208 	add.w	r2, r7, #8
 80028ca:	2301      	movs	r3, #1
 80028cc:	2112      	movs	r1, #18
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fe29 	bl	8002526 <lsm6dsl_read_reg>
 80028d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	7a3b      	ldrb	r3, [r7, #8]
 80028e6:	f362 0300 	bfi	r3, r2, #0, #1
 80028ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028ec:	f107 0208 	add.w	r2, r7, #8
 80028f0:	2301      	movs	r3, #1
 80028f2:	2112      	movs	r1, #18
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fe2e 	bl	8002556 <lsm6dsl_write_reg>
 80028fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002912:	f107 0208 	add.w	r2, r7, #8
 8002916:	2301      	movs	r3, #1
 8002918:	2112      	movs	r1, #18
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fe03 	bl	8002526 <lsm6dsl_read_reg>
 8002920:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	7a3b      	ldrb	r3, [r7, #8]
 8002932:	f362 0382 	bfi	r3, r2, #2, #1
 8002936:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002938:	f107 0208 	add.w	r2, r7, #8
 800293c:	2301      	movs	r3, #1
 800293e:	2112      	movs	r1, #18
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fe08 	bl	8002556 <lsm6dsl_write_reg>
 8002946:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b08a      	sub	sp, #40	; 0x28
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800295c:	f107 021c 	add.w	r2, r7, #28
 8002960:	2301      	movs	r3, #1
 8002962:	210d      	movs	r1, #13
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fdde 	bl	8002526 <lsm6dsl_read_reg>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d147      	bne.n	8002a02 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002972:	783b      	ldrb	r3, [r7, #0]
 8002974:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	7f3b      	ldrb	r3, [r7, #28]
 800297c:	f362 0300 	bfi	r3, r2, #0, #1
 8002980:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8002982:	783b      	ldrb	r3, [r7, #0]
 8002984:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	7f3b      	ldrb	r3, [r7, #28]
 800298c:	f362 0341 	bfi	r3, r2, #1, #1
 8002990:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8002992:	783b      	ldrb	r3, [r7, #0]
 8002994:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	7f3b      	ldrb	r3, [r7, #28]
 800299c:	f362 0382 	bfi	r3, r2, #2, #1
 80029a0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80029a2:	783b      	ldrb	r3, [r7, #0]
 80029a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	7f3b      	ldrb	r3, [r7, #28]
 80029ac:	f362 03c3 	bfi	r3, r2, #3, #1
 80029b0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80029b2:	783b      	ldrb	r3, [r7, #0]
 80029b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	7f3b      	ldrb	r3, [r7, #28]
 80029bc:	f362 1304 	bfi	r3, r2, #4, #1
 80029c0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80029c2:	783b      	ldrb	r3, [r7, #0]
 80029c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	7f3b      	ldrb	r3, [r7, #28]
 80029cc:	f362 1345 	bfi	r3, r2, #5, #1
 80029d0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80029d2:	783b      	ldrb	r3, [r7, #0]
 80029d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	7f3b      	ldrb	r3, [r7, #28]
 80029dc:	f362 1386 	bfi	r3, r2, #6, #1
 80029e0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80029e2:	783b      	ldrb	r3, [r7, #0]
 80029e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	7f3b      	ldrb	r3, [r7, #28]
 80029ec:	f362 13c7 	bfi	r3, r2, #7, #1
 80029f0:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80029f2:	f107 021c 	add.w	r2, r7, #28
 80029f6:	2301      	movs	r3, #1
 80029f8:	210d      	movs	r1, #13
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fdab 	bl	8002556 <lsm6dsl_write_reg>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d107      	bne.n	8002a18 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002a08:	f107 0218 	add.w	r2, r7, #24
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	215e      	movs	r1, #94	; 0x5e
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fd88 	bl	8002526 <lsm6dsl_read_reg>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002a1e:	f107 0214 	add.w	r2, r7, #20
 8002a22:	2301      	movs	r3, #1
 8002a24:	215f      	movs	r1, #95	; 0x5f
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fd7d 	bl	8002526 <lsm6dsl_read_reg>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d147      	bne.n	8002ac4 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	7e3b      	ldrb	r3, [r7, #24]
 8002a3e:	f362 0300 	bfi	r3, r2, #0, #1
 8002a42:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	7e3b      	ldrb	r3, [r7, #24]
 8002a4e:	f362 0341 	bfi	r3, r2, #1, #1
 8002a52:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	7e3b      	ldrb	r3, [r7, #24]
 8002a5e:	f362 0382 	bfi	r3, r2, #2, #1
 8002a62:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	7e3b      	ldrb	r3, [r7, #24]
 8002a6e:	f362 03c3 	bfi	r3, r2, #3, #1
 8002a72:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	7e3b      	ldrb	r3, [r7, #24]
 8002a7e:	f362 1304 	bfi	r3, r2, #4, #1
 8002a82:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	7e3b      	ldrb	r3, [r7, #24]
 8002a8e:	f362 1345 	bfi	r3, r2, #5, #1
 8002a92:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	7e3b      	ldrb	r3, [r7, #24]
 8002a9e:	f362 1386 	bfi	r3, r2, #6, #1
 8002aa2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	7e3b      	ldrb	r3, [r7, #24]
 8002aae:	f362 13c7 	bfi	r3, r2, #7, #1
 8002ab2:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002ab4:	f107 0218 	add.w	r2, r7, #24
 8002ab8:	2301      	movs	r3, #1
 8002aba:	215e      	movs	r1, #94	; 0x5e
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fd4a 	bl	8002556 <lsm6dsl_write_reg>
 8002ac2:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002aca:	f107 0210 	add.w	r2, r7, #16
 8002ace:	2301      	movs	r3, #1
 8002ad0:	2113      	movs	r1, #19
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fd27 	bl	8002526 <lsm6dsl_read_reg>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002ae0:	78bb      	ldrb	r3, [r7, #2]
 8002ae2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	7c3b      	ldrb	r3, [r7, #16]
 8002aea:	f362 1304 	bfi	r3, r2, #4, #1
 8002aee:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002af0:	f107 0210 	add.w	r2, r7, #16
 8002af4:	2301      	movs	r3, #1
 8002af6:	2113      	movs	r1, #19
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fd2c 	bl	8002556 <lsm6dsl_write_reg>
 8002afe:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b06:	f107 0220 	add.w	r2, r7, #32
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	211a      	movs	r1, #26
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fd09 	bl	8002526 <lsm6dsl_read_reg>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d111      	bne.n	8002b40 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8002b1c:	78bb      	ldrb	r3, [r7, #2]
 8002b1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b28:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b2c:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b30:	f107 0220 	add.w	r2, r7, #32
 8002b34:	2301      	movs	r3, #1
 8002b36:	211a      	movs	r1, #26
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fd0c 	bl	8002556 <lsm6dsl_write_reg>
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d158      	bne.n	8002bf8 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002b46:	f107 020c 	add.w	r2, r7, #12
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	2158      	movs	r1, #88	; 0x58
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fce9 	bl	8002526 <lsm6dsl_read_reg>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002b56:	787b      	ldrb	r3, [r7, #1]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d141      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002b62:	787b      	ldrb	r3, [r7, #1]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d13b      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002b6e:	787b      	ldrb	r3, [r7, #1]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d135      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002b7a:	787b      	ldrb	r3, [r7, #1]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12f      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002b86:	787b      	ldrb	r3, [r7, #1]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d129      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002b92:	787b      	ldrb	r3, [r7, #1]
 8002b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b98:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d123      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002b9e:	7d3b      	ldrb	r3, [r7, #20]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11d      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002baa:	7d3b      	ldrb	r3, [r7, #20]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d117      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002bb6:	7d3b      	ldrb	r3, [r7, #20]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d111      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002bc2:	7d3b      	ldrb	r3, [r7, #20]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002bce:	7d3b      	ldrb	r3, [r7, #20]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8002bda:	7d3b      	ldrb	r3, [r7, #20]
 8002bdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002be0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002be6:	7b3b      	ldrb	r3, [r7, #12]
 8002be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bec:	733b      	strb	r3, [r7, #12]
 8002bee:	e003      	b.n	8002bf8 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002bf0:	7b3b      	ldrb	r3, [r7, #12]
 8002bf2:	f36f 13c7 	bfc	r3, #7, #1
 8002bf6:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002bfe:	f107 020c 	add.w	r2, r7, #12
 8002c02:	2301      	movs	r3, #1
 8002c04:	2158      	movs	r1, #88	; 0x58
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fca5 	bl	8002556 <lsm6dsl_write_reg>
 8002c0c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8002c24:	f107 020c 	add.w	r2, r7, #12
 8002c28:	2301      	movs	r3, #1
 8002c2a:	2107      	movs	r1, #7
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fc7a 	bl	8002526 <lsm6dsl_read_reg>
 8002c32:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11f      	bne.n	8002c7a <lsm6dsl_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.fth = (uint8_t)(0x00FFU & val);
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t)((0x0700U & val) >> 8);
 8002c40:	887b      	ldrh	r3, [r7, #2]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	7b3b      	ldrb	r3, [r7, #12]
 8002c4e:	f362 0302 	bfi	r3, r2, #0, #3
 8002c52:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 8002c54:	f107 0210 	add.w	r2, r7, #16
 8002c58:	2301      	movs	r3, #1
 8002c5a:	2106      	movs	r1, #6
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fc7a 	bl	8002556 <lsm6dsl_write_reg>
 8002c62:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <lsm6dsl_fifo_watermark_set+0x62>
    {
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8002c6a:	f107 020c 	add.w	r2, r7, #12
 8002c6e:	2301      	movs	r3, #1
 8002c70:	2107      	movs	r1, #7
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fc6f 	bl	8002556 <lsm6dsl_write_reg>
 8002c78:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 8002c7a:	697b      	ldr	r3, [r7, #20]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002c90:	f107 0208 	add.w	r2, r7, #8
 8002c94:	2301      	movs	r3, #1
 8002c96:	2108      	movs	r1, #8
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fc44 	bl	8002526 <lsm6dsl_read_reg>
 8002c9e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <lsm6dsl_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	7a3b      	ldrb	r3, [r7, #8]
 8002cb0:	f362 0302 	bfi	r3, r2, #0, #3
 8002cb4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002cb6:	f107 0208 	add.w	r2, r7, #8
 8002cba:	2301      	movs	r3, #1
 8002cbc:	2108      	movs	r1, #8
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fc49 	bl	8002556 <lsm6dsl_write_reg>
 8002cc4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002cdc:	f107 0208 	add.w	r2, r7, #8
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fc1e 	bl	8002526 <lsm6dsl_read_reg>
 8002cea:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <lsm6dsl_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	7a3b      	ldrb	r3, [r7, #8]
 8002cfc:	f362 03c5 	bfi	r3, r2, #3, #3
 8002d00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002d02:	f107 0208 	add.w	r2, r7, #8
 8002d06:	2301      	movs	r3, #1
 8002d08:	2108      	movs	r1, #8
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fc23 	bl	8002556 <lsm6dsl_write_reg>
 8002d10:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d28:	f107 0208 	add.w	r2, r7, #8
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	210a      	movs	r1, #10
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff fbf8 	bl	8002526 <lsm6dsl_read_reg>
 8002d36:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	7a3b      	ldrb	r3, [r7, #8]
 8002d48:	f362 0302 	bfi	r3, r2, #0, #3
 8002d4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d4e:	f107 0208 	add.w	r2, r7, #8
 8002d52:	2301      	movs	r3, #1
 8002d54:	210a      	movs	r1, #10
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fbfd 	bl	8002556 <lsm6dsl_write_reg>
 8002d5c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d74:	f107 0208 	add.w	r2, r7, #8
 8002d78:	2301      	movs	r3, #1
 8002d7a:	210a      	movs	r1, #10
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fbd2 	bl	8002526 <lsm6dsl_read_reg>
 8002d82:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <lsm6dsl_fifo_data_rate_set+0x42>
  {
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	7a3b      	ldrb	r3, [r7, #8]
 8002d94:	f362 03c6 	bfi	r3, r2, #3, #4
 8002d98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d9a:	f107 0208 	add.w	r2, r7, #8
 8002d9e:	2301      	movs	r3, #1
 8002da0:	210a      	movs	r1, #10
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fbd7 	bl	8002556 <lsm6dsl_write_reg>
 8002da8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db8:	2003      	movs	r0, #3
 8002dba:	f000 f91f 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dbe:	200f      	movs	r0, #15
 8002dc0:	f7fe fb92 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc4:	f7fe f9d6 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x20>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_IncTick+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_IncTick+0x24>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	20000b2c 	.word	0x20000b2c

08002df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_GetTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000b2c 	.word	0x20000b2c

08002e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff ffee 	bl	8002df8 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d005      	beq.n	8002e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_Delay+0x44>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e36:	bf00      	nop
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8f7      	bhi.n	8002e38 <HAL_Delay+0x28>
  {
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <__NVIC_SetPriorityGrouping+0x40>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x40>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	05fa0000 	.word	0x05fa0000

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db12      	blt.n	8002f30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	490a      	ldr	r1, [pc, #40]	; (8002f3c <__NVIC_DisableIRQ+0x44>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	3320      	adds	r3, #32
 8002f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f24:	f3bf 8f4f 	dsb	sy
}
 8002f28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f2a:	f3bf 8f6f 	isb	sy
}
 8002f2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b07      	cmp	r3, #7
 8003008:	d00f      	beq.n	800302a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d00c      	beq.n	800302a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d009      	beq.n	800302a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d006      	beq.n	800302a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d003      	beq.n	800302a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003022:	2191      	movs	r1, #145	; 0x91
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003026:	f7fd ff53 	bl	8000ed0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff14 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	0800fb44 	.word	0x0800fb44

0800303c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d903      	bls.n	800305c <HAL_NVIC_SetPriority+0x20>
 8003054:	21a9      	movs	r1, #169	; 0xa9
 8003056:	480e      	ldr	r0, [pc, #56]	; (8003090 <HAL_NVIC_SetPriority+0x54>)
 8003058:	f7fd ff3a 	bl	8000ed0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	d903      	bls.n	800306a <HAL_NVIC_SetPriority+0x2e>
 8003062:	21aa      	movs	r1, #170	; 0xaa
 8003064:	480a      	ldr	r0, [pc, #40]	; (8003090 <HAL_NVIC_SetPriority+0x54>)
 8003066:	f7fd ff33 	bl	8000ed0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306a:	f7ff ff19 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 800306e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	6978      	ldr	r0, [r7, #20]
 8003076:	f7ff ff8d 	bl	8002f94 <NVIC_EncodePriority>
 800307a:	4602      	mov	r2, r0
 800307c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff5c 	bl	8002f40 <__NVIC_SetPriority>
}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	0800fb44 	.word	0x0800fb44

08003094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da03      	bge.n	80030ae <HAL_NVIC_EnableIRQ+0x1a>
 80030a6:	21bd      	movs	r1, #189	; 0xbd
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <HAL_NVIC_EnableIRQ+0x2c>)
 80030aa:	f7fd ff11 	bl	8000ed0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff02 	bl	8002ebc <__NVIC_EnableIRQ>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	0800fb44 	.word	0x0800fb44

080030c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da03      	bge.n	80030de <HAL_NVIC_DisableIRQ+0x1a>
 80030d6:	21cd      	movs	r1, #205	; 0xcd
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <HAL_NVIC_DisableIRQ+0x2c>)
 80030da:	f7fd fef9 	bl	8000ed0 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff08 	bl	8002ef8 <__NVIC_DisableIRQ>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	0800fb44 	.word	0x0800fb44

080030f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff fe7a 	bl	8002df8 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e22c      	b.n	800356a <HAL_DMA_Init+0x476>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a82      	ldr	r2, [pc, #520]	; (8003320 <HAL_DMA_Init+0x22c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d04e      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a81      	ldr	r2, [pc, #516]	; (8003324 <HAL_DMA_Init+0x230>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d049      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7f      	ldr	r2, [pc, #508]	; (8003328 <HAL_DMA_Init+0x234>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d044      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7e      	ldr	r2, [pc, #504]	; (800332c <HAL_DMA_Init+0x238>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d03f      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7c      	ldr	r2, [pc, #496]	; (8003330 <HAL_DMA_Init+0x23c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d03a      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7b      	ldr	r2, [pc, #492]	; (8003334 <HAL_DMA_Init+0x240>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d035      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a79      	ldr	r2, [pc, #484]	; (8003338 <HAL_DMA_Init+0x244>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d030      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a78      	ldr	r2, [pc, #480]	; (800333c <HAL_DMA_Init+0x248>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d02b      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a76      	ldr	r2, [pc, #472]	; (8003340 <HAL_DMA_Init+0x24c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d026      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	; (8003344 <HAL_DMA_Init+0x250>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d021      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a73      	ldr	r2, [pc, #460]	; (8003348 <HAL_DMA_Init+0x254>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01c      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_DMA_Init+0x258>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d017      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a70      	ldr	r2, [pc, #448]	; (8003350 <HAL_DMA_Init+0x25c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d012      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6f      	ldr	r2, [pc, #444]	; (8003354 <HAL_DMA_Init+0x260>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00d      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6d      	ldr	r2, [pc, #436]	; (8003358 <HAL_DMA_Init+0x264>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d008      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6c      	ldr	r2, [pc, #432]	; (800335c <HAL_DMA_Init+0x268>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_Init+0xc4>
 80031b0:	21b8      	movs	r1, #184	; 0xb8
 80031b2:	486b      	ldr	r0, [pc, #428]	; (8003360 <HAL_DMA_Init+0x26c>)
 80031b4:	f7fd fe8c 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04e      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c8:	d049      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d2:	d044      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80031dc:	d03f      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e6:	d03a      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80031f0:	d035      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80031fa:	d030      	beq.n	800325e <HAL_DMA_Init+0x16a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003204:	d02b      	beq.n	800325e <HAL_DMA_Init+0x16a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320e:	d026      	beq.n	800325e <HAL_DMA_Init+0x16a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f1b3 5f90 	cmp.w	r3, #301989888	; 0x12000000
 8003218:	d021      	beq.n	800325e <HAL_DMA_Init+0x16a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8003222:	d01c      	beq.n	800325e <HAL_DMA_Init+0x16a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f1b3 5fb0 	cmp.w	r3, #369098752	; 0x16000000
 800322c:	d017      	beq.n	800325e <HAL_DMA_Init+0x16a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003236:	d012      	beq.n	800325e <HAL_DMA_Init+0x16a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f1b3 5fd0 	cmp.w	r3, #436207616	; 0x1a000000
 8003240:	d00d      	beq.n	800325e <HAL_DMA_Init+0x16a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 800324a:	d008      	beq.n	800325e <HAL_DMA_Init+0x16a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f1b3 5ff0 	cmp.w	r3, #503316480	; 0x1e000000
 8003254:	d003      	beq.n	800325e <HAL_DMA_Init+0x16a>
 8003256:	21b9      	movs	r1, #185	; 0xb9
 8003258:	4841      	ldr	r0, [pc, #260]	; (8003360 <HAL_DMA_Init+0x26c>)
 800325a:	f7fd fe39 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_DMA_Init+0x18a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d007      	beq.n	800327e <HAL_DMA_Init+0x18a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d003      	beq.n	800327e <HAL_DMA_Init+0x18a>
 8003276:	21ba      	movs	r1, #186	; 0xba
 8003278:	4839      	ldr	r0, [pc, #228]	; (8003360 <HAL_DMA_Init+0x26c>)
 800327a:	f7fd fe29 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003286:	d007      	beq.n	8003298 <HAL_DMA_Init+0x1a4>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_Init+0x1a4>
 8003290:	21bb      	movs	r1, #187	; 0xbb
 8003292:	4833      	ldr	r0, [pc, #204]	; (8003360 <HAL_DMA_Init+0x26c>)
 8003294:	f7fd fe1c 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a0:	d007      	beq.n	80032b2 <HAL_DMA_Init+0x1be>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_DMA_Init+0x1be>
 80032aa:	21bc      	movs	r1, #188	; 0xbc
 80032ac:	482c      	ldr	r0, [pc, #176]	; (8003360 <HAL_DMA_Init+0x26c>)
 80032ae:	f7fd fe0f 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <HAL_DMA_Init+0x1e2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c2:	d008      	beq.n	80032d6 <HAL_DMA_Init+0x1e2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032cc:	d003      	beq.n	80032d6 <HAL_DMA_Init+0x1e2>
 80032ce:	21bd      	movs	r1, #189	; 0xbd
 80032d0:	4823      	ldr	r0, [pc, #140]	; (8003360 <HAL_DMA_Init+0x26c>)
 80032d2:	f7fd fdfd 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <HAL_DMA_Init+0x206>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d008      	beq.n	80032fa <HAL_DMA_Init+0x206>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f0:	d003      	beq.n	80032fa <HAL_DMA_Init+0x206>
 80032f2:	21be      	movs	r1, #190	; 0xbe
 80032f4:	481a      	ldr	r0, [pc, #104]	; (8003360 <HAL_DMA_Init+0x26c>)
 80032f6:	f7fd fdeb 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d030      	beq.n	8003364 <HAL_DMA_Init+0x270>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d02b      	beq.n	8003364 <HAL_DMA_Init+0x270>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2b20      	cmp	r3, #32
 8003312:	d027      	beq.n	8003364 <HAL_DMA_Init+0x270>
 8003314:	21bf      	movs	r1, #191	; 0xbf
 8003316:	4812      	ldr	r0, [pc, #72]	; (8003360 <HAL_DMA_Init+0x26c>)
 8003318:	f7fd fdda 	bl	8000ed0 <assert_failed>
 800331c:	e022      	b.n	8003364 <HAL_DMA_Init+0x270>
 800331e:	bf00      	nop
 8003320:	40026010 	.word	0x40026010
 8003324:	40026028 	.word	0x40026028
 8003328:	40026040 	.word	0x40026040
 800332c:	40026058 	.word	0x40026058
 8003330:	40026070 	.word	0x40026070
 8003334:	40026088 	.word	0x40026088
 8003338:	400260a0 	.word	0x400260a0
 800333c:	400260b8 	.word	0x400260b8
 8003340:	40026410 	.word	0x40026410
 8003344:	40026428 	.word	0x40026428
 8003348:	40026440 	.word	0x40026440
 800334c:	40026458 	.word	0x40026458
 8003350:	40026470 	.word	0x40026470
 8003354:	40026488 	.word	0x40026488
 8003358:	400264a0 	.word	0x400264a0
 800335c:	400264b8 	.word	0x400264b8
 8003360:	0800fb80 	.word	0x0800fb80
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <HAL_DMA_Init+0x29e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d00d      	beq.n	8003392 <HAL_DMA_Init+0x29e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800337e:	d008      	beq.n	8003392 <HAL_DMA_Init+0x29e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003388:	d003      	beq.n	8003392 <HAL_DMA_Init+0x29e>
 800338a:	21c0      	movs	r1, #192	; 0xc0
 800338c:	4879      	ldr	r0, [pc, #484]	; (8003574 <HAL_DMA_Init+0x480>)
 800338e:	f7fd fd9f 	bl	8000ed0 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <HAL_DMA_Init+0x2b6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d003      	beq.n	80033aa <HAL_DMA_Init+0x2b6>
 80033a2:	21c1      	movs	r1, #193	; 0xc1
 80033a4:	4873      	ldr	r0, [pc, #460]	; (8003574 <HAL_DMA_Init+0x480>)
 80033a6:	f7fd fd93 	bl	8000ed0 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d041      	beq.n	8003436 <HAL_DMA_Init+0x342>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00f      	beq.n	80033da <HAL_DMA_Init+0x2e6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00b      	beq.n	80033da <HAL_DMA_Init+0x2e6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d007      	beq.n	80033da <HAL_DMA_Init+0x2e6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d003      	beq.n	80033da <HAL_DMA_Init+0x2e6>
 80033d2:	21c6      	movs	r1, #198	; 0xc6
 80033d4:	4867      	ldr	r0, [pc, #412]	; (8003574 <HAL_DMA_Init+0x480>)
 80033d6:	f7fd fd7b 	bl	8000ed0 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_DMA_Init+0x314>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ea:	d00d      	beq.n	8003408 <HAL_DMA_Init+0x314>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f4:	d008      	beq.n	8003408 <HAL_DMA_Init+0x314>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033fe:	d003      	beq.n	8003408 <HAL_DMA_Init+0x314>
 8003400:	21c7      	movs	r1, #199	; 0xc7
 8003402:	485c      	ldr	r0, [pc, #368]	; (8003574 <HAL_DMA_Init+0x480>)
 8003404:	f7fd fd64 	bl	8000ed0 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_DMA_Init+0x342>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003418:	d00d      	beq.n	8003436 <HAL_DMA_Init+0x342>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003422:	d008      	beq.n	8003436 <HAL_DMA_Init+0x342>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800342c:	d003      	beq.n	8003436 <HAL_DMA_Init+0x342>
 800342e:	21c8      	movs	r1, #200	; 0xc8
 8003430:	4850      	ldr	r0, [pc, #320]	; (8003574 <HAL_DMA_Init+0x480>)
 8003432:	f7fd fd4d 	bl	8000ed0 <assert_failed>
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003456:	e00f      	b.n	8003478 <HAL_DMA_Init+0x384>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003458:	f7ff fcce 	bl	8002df8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b05      	cmp	r3, #5
 8003464:	d908      	bls.n	8003478 <HAL_DMA_Init+0x384>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e078      	b.n	800356a <HAL_DMA_Init+0x476>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e8      	bne.n	8003458 <HAL_DMA_Init+0x364>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_DMA_Init+0x484>)
 8003492:	4013      	ands	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d107      	bne.n	80034e2 <HAL_DMA_Init+0x3ee>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4313      	orrs	r3, r2
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 0307 	bic.w	r3, r3, #7
 80034f8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b04      	cmp	r3, #4
 800350a:	d117      	bne.n	800353c <HAL_DMA_Init+0x448>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <HAL_DMA_Init+0x448>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fb9a 	bl	8003c58 <DMA_CheckFifoParam>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_DMA_Init+0x448>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2240      	movs	r2, #64	; 0x40
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003538:	2301      	movs	r3, #1
 800353a:	e016      	b.n	800356a <HAL_DMA_Init+0x476>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fb51 	bl	8003bec <DMA_CalcBaseAndBitshift>
 800354a:	4603      	mov	r3, r0
 800354c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	223f      	movs	r2, #63	; 0x3f
 8003554:	409a      	lsls	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	0800fb80 	.word	0x0800fb80
 8003578:	e010803f 	.word	0xe010803f

0800357c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0a5      	b.n	80036da <HAL_DMA_DeInit+0x15e>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d101      	bne.n	800359e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
 800359c:	e09d      	b.n	80036da <HAL_DMA_DeInit+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a50      	ldr	r2, [pc, #320]	; (80036e4 <HAL_DMA_DeInit+0x168>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04f      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a4e      	ldr	r2, [pc, #312]	; (80036e8 <HAL_DMA_DeInit+0x16c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d04a      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4d      	ldr	r2, [pc, #308]	; (80036ec <HAL_DMA_DeInit+0x170>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d045      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a4b      	ldr	r2, [pc, #300]	; (80036f0 <HAL_DMA_DeInit+0x174>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d040      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4a      	ldr	r2, [pc, #296]	; (80036f4 <HAL_DMA_DeInit+0x178>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d03b      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <HAL_DMA_DeInit+0x17c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d036      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a47      	ldr	r2, [pc, #284]	; (80036fc <HAL_DMA_DeInit+0x180>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d031      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a45      	ldr	r2, [pc, #276]	; (8003700 <HAL_DMA_DeInit+0x184>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02c      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a44      	ldr	r2, [pc, #272]	; (8003704 <HAL_DMA_DeInit+0x188>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d027      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a42      	ldr	r2, [pc, #264]	; (8003708 <HAL_DMA_DeInit+0x18c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d022      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a41      	ldr	r2, [pc, #260]	; (800370c <HAL_DMA_DeInit+0x190>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d01d      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3f      	ldr	r2, [pc, #252]	; (8003710 <HAL_DMA_DeInit+0x194>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d018      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a3e      	ldr	r2, [pc, #248]	; (8003714 <HAL_DMA_DeInit+0x198>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <HAL_DMA_DeInit+0x19c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a3b      	ldr	r2, [pc, #236]	; (800371c <HAL_DMA_DeInit+0x1a0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a39      	ldr	r2, [pc, #228]	; (8003720 <HAL_DMA_DeInit+0x1a4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_DMA_DeInit+0xcc>
 800363e:	f240 1149 	movw	r1, #329	; 0x149
 8003642:	4838      	ldr	r0, [pc, #224]	; (8003724 <HAL_DMA_DeInit+0x1a8>)
 8003644:	f7fd fc44 	bl	8000ed0 <assert_failed>

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2221      	movs	r2, #33	; 0x21
 8003686:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 faaf 	bl	8003bec <DMA_CalcBaseAndBitshift>
 800368e:	4603      	mov	r3, r0
 8003690:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	223f      	movs	r2, #63	; 0x3f
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40026010 	.word	0x40026010
 80036e8:	40026028 	.word	0x40026028
 80036ec:	40026040 	.word	0x40026040
 80036f0:	40026058 	.word	0x40026058
 80036f4:	40026070 	.word	0x40026070
 80036f8:	40026088 	.word	0x40026088
 80036fc:	400260a0 	.word	0x400260a0
 8003700:	400260b8 	.word	0x400260b8
 8003704:	40026410 	.word	0x40026410
 8003708:	40026428 	.word	0x40026428
 800370c:	40026440 	.word	0x40026440
 8003710:	40026458 	.word	0x40026458
 8003714:	40026470 	.word	0x40026470
 8003718:	40026488 	.word	0x40026488
 800371c:	400264a0 	.word	0x400264a0
 8003720:	400264b8 	.word	0x400264b8
 8003724:	0800fb80 	.word	0x0800fb80

08003728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_DMA_Start_IT+0x26>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d304      	bcc.n	8003758 <HAL_DMA_Start_IT+0x30>
 800374e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8003752:	482b      	ldr	r0, [pc, #172]	; (8003800 <HAL_DMA_Start_IT+0xd8>)
 8003754:	f7fd fbbc 	bl	8000ed0 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Start_IT+0x3e>
 8003762:	2302      	movs	r3, #2
 8003764:	e048      	b.n	80037f8 <HAL_DMA_Start_IT+0xd0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d137      	bne.n	80037ea <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2202      	movs	r2, #2
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f9fe 	bl	8003b90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	223f      	movs	r2, #63	; 0x3f
 800379a:	409a      	lsls	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0216 	orr.w	r2, r2, #22
 80037ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e005      	b.n	80037f6 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800fb80 	.word	0x0800fb80

08003804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e00c      	b.n	800383c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003854:	4b8e      	ldr	r3, [pc, #568]	; (8003a90 <HAL_DMA_IRQHandler+0x248>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a8e      	ldr	r2, [pc, #568]	; (8003a94 <HAL_DMA_IRQHandler+0x24c>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2208      	movs	r2, #8
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2204      	movs	r2, #4
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d012      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2204      	movs	r2, #4
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2210      	movs	r2, #16
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d043      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2210      	movs	r2, #16
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d018      	beq.n	800398a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
 8003976:	e01f      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e016      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2220      	movs	r2, #32
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 808f 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8087 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2220      	movs	r2, #32
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d136      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0216 	bic.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x1da>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	223f      	movs	r2, #63	; 0x3f
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d07e      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
        }
        return;
 8003a5e:	e079      	b.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10d      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d031      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
 8003a8c:	e02c      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
 8003a8e:	bf00      	nop
 8003a90:	20000004 	.word	0x20000004
 8003a94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
 8003aa8:	e01e      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0210 	bic.w	r2, r2, #16
 8003ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d032      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2205      	movs	r2, #5
 8003b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	3301      	adds	r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d307      	bcc.n	8003b30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f2      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x2cc>
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b54:	bf00      	nop
    }
  }
}
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6a:	b2db      	uxtb	r3, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d108      	bne.n	8003bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bce:	e007      	b.n	8003be0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3b10      	subs	r3, #16
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <DMA_CalcBaseAndBitshift+0x60>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <DMA_CalcBaseAndBitshift+0x64>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d908      	bls.n	8003c2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <DMA_CalcBaseAndBitshift+0x68>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	1d1a      	adds	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	659a      	str	r2, [r3, #88]	; 0x58
 8003c2a:	e006      	b.n	8003c3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <DMA_CalcBaseAndBitshift+0x68>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	aaaaaaab 	.word	0xaaaaaaab
 8003c50:	0800fe98 	.word	0x0800fe98
 8003c54:	fffffc00 	.word	0xfffffc00

08003c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11f      	bne.n	8003cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d856      	bhi.n	8003d26 <DMA_CheckFifoParam+0xce>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <DMA_CheckFifoParam+0x28>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003ca3 	.word	0x08003ca3
 8003c88:	08003c91 	.word	0x08003c91
 8003c8c:	08003d27 	.word	0x08003d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d046      	beq.n	8003d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e043      	b.n	8003d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003caa:	d140      	bne.n	8003d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e03d      	b.n	8003d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d121      	bne.n	8003d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d837      	bhi.n	8003d32 <DMA_CheckFifoParam+0xda>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <DMA_CheckFifoParam+0x70>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003cdf 	.word	0x08003cdf
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	08003cf1 	.word	0x08003cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e030      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d025      	beq.n	8003d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cee:	e022      	b.n	8003d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf8:	d11f      	bne.n	8003d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cfe:	e01c      	b.n	8003d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d903      	bls.n	8003d0e <DMA_CheckFifoParam+0xb6>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d003      	beq.n	8003d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d0c:	e018      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      break;
 8003d12:	e015      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      break;
 8003d24:	e00b      	b.n	8003d3e <DMA_CheckFifoParam+0xe6>
      break;
 8003d26:	bf00      	nop
 8003d28:	e00a      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e008      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e006      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06a      	b.n	8003e38 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2223      	movs	r2, #35	; 0x23
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fd fa25 	bl	80011c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <HAL_ETH_Init+0xf0>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <HAL_ETH_Init+0xf0>)
 8003d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d84:	6453      	str	r3, [r2, #68]	; 0x44
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_ETH_Init+0xf0>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <HAL_ETH_Init+0xf4>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <HAL_ETH_Init+0xf4>)
 8003d98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d9e:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_ETH_Init+0xf4>)
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4927      	ldr	r1, [pc, #156]	; (8003e44 <HAL_ETH_Init+0xf4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <HAL_ETH_Init+0xf4>)
 8003dae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc8:	f7ff f816 	bl	8002df8 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dce:	e011      	b.n	8003df4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dd0:	f7ff f812 	bl	8002df8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dde:	d909      	bls.n	8003df4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	22e0      	movs	r2, #224	; 0xe0
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e021      	b.n	8003e38 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e4      	bne.n	8003dd0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f958 	bl	80040bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9ff 	bl	8004210 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa55 	bl	80042c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f9bd 	bl	80041a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2210      	movs	r2, #16
 8003e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40013800 	.word	0x40013800

08003e48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4b51      	ldr	r3, [pc, #324]	; (8003fa4 <ETH_SetMACConfig+0x15c>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	7c1b      	ldrb	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <ETH_SetMACConfig+0x28>
 8003e6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e6e:	e000      	b.n	8003e72 <ETH_SetMACConfig+0x2a>
 8003e70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	7c5b      	ldrb	r3, [r3, #17]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <ETH_SetMACConfig+0x38>
 8003e7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e7e:	e000      	b.n	8003e82 <ETH_SetMACConfig+0x3a>
 8003e80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	7fdb      	ldrb	r3, [r3, #31]
 8003e8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003e90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	7f92      	ldrb	r2, [r2, #30]
 8003e9c:	2a00      	cmp	r2, #0
 8003e9e:	d102      	bne.n	8003ea6 <ETH_SetMACConfig+0x5e>
 8003ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ea4:	e000      	b.n	8003ea8 <ETH_SetMACConfig+0x60>
 8003ea6:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ea8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	7f1b      	ldrb	r3, [r3, #28]
 8003eae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003eb0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003eb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d102      	bne.n	8003ed0 <ETH_SetMACConfig+0x88>
 8003eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ece:	e000      	b.n	8003ed2 <ETH_SetMACConfig+0x8a>
 8003ed0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	7bdb      	ldrb	r3, [r3, #15]
 8003ed8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003eda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003eea:	4313      	orrs	r3, r2
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7fe ff84 	bl	8002e10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f1e:	4013      	ands	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	d101      	bne.n	8003f36 <ETH_SetMACConfig+0xee>
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	e000      	b.n	8003f38 <ETH_SetMACConfig+0xf0>
 8003f36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003f46:	2a01      	cmp	r2, #1
 8003f48:	d101      	bne.n	8003f4e <ETH_SetMACConfig+0x106>
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	e000      	b.n	8003f50 <ETH_SetMACConfig+0x108>
 8003f4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003f58:	2a01      	cmp	r2, #1
 8003f5a:	d101      	bne.n	8003f60 <ETH_SetMACConfig+0x118>
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	e000      	b.n	8003f62 <ETH_SetMACConfig+0x11a>
 8003f60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003f6a:	2a01      	cmp	r2, #1
 8003f6c:	d101      	bne.n	8003f72 <ETH_SetMACConfig+0x12a>
 8003f6e:	2202      	movs	r2, #2
 8003f70:	e000      	b.n	8003f74 <ETH_SetMACConfig+0x12c>
 8003f72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f74:	4313      	orrs	r3, r2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7fe ff3f 	bl	8002e10 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	619a      	str	r2, [r3, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	ff20810f 	.word	0xff20810f

08003fa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <ETH_SetDMAConfig+0x110>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <ETH_SetDMAConfig+0x2c>
 8003fce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fd2:	e000      	b.n	8003fd6 <ETH_SetDMAConfig+0x2e>
 8003fd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	7b5b      	ldrb	r3, [r3, #13]
 8003fda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	7f52      	ldrb	r2, [r2, #29]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	d102      	bne.n	8003fec <ETH_SetDMAConfig+0x44>
 8003fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fea:	e000      	b.n	8003fee <ETH_SetDMAConfig+0x46>
 8003fec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	7b9b      	ldrb	r3, [r3, #14]
 8003ff4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ff6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ffc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7f1b      	ldrb	r3, [r3, #28]
 8004002:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004004:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	7f9b      	ldrb	r3, [r3, #30]
 800400a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800400c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004012:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800401a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800401c:	4313      	orrs	r3, r2
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800403e:	2001      	movs	r0, #1
 8004040:	f7fe fee6 	bl	8002e10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800405c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004062:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004068:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004070:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004072:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800407a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004080:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800408a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800408e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800409c:	2001      	movs	r0, #1
 800409e:	f7fe feb7 	bl	8002e10 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	f8de3f23 	.word	0xf8de3f23

080040bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0a6      	sub	sp, #152	; 0x98
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80040d0:	2300      	movs	r3, #0
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040f8:	2300      	movs	r3, #0
 80040fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004102:	2300      	movs	r3, #0
 8004104:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004106:	2300      	movs	r3, #0
 8004108:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800411e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004128:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004130:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fe86 	bl	8003e48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800413c:	2301      	movs	r3, #1
 800413e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004140:	2301      	movs	r3, #1
 8004142:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800414a:	2301      	movs	r3, #1
 800414c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800415e:	2300      	movs	r3, #0
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004168:	2301      	movs	r3, #1
 800416a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800416c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004170:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004176:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004184:	2300      	movs	r3, #0
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800418c:	f107 0308 	add.w	r3, r7, #8
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff08 	bl	8003fa8 <ETH_SetDMAConfig>
}
 8004198:	bf00      	nop
 800419a:	3798      	adds	r7, #152	; 0x98
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3305      	adds	r3, #5
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	3204      	adds	r2, #4
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <ETH_MACAddressConfig+0x68>)
 80041c2:	4413      	add	r3, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3303      	adds	r3, #3
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	061a      	lsls	r2, r3, #24
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3302      	adds	r3, #2
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3301      	adds	r3, #1
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	4313      	orrs	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <ETH_MACAddressConfig+0x6c>)
 80041f2:	4413      	add	r3, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40028040 	.word	0x40028040
 800420c:	40028044 	.word	0x40028044

08004210 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e03e      	b.n	800429c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2200      	movs	r2, #0
 8004246:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	3206      	adds	r2, #6
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d80c      	bhi.n	8004280 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68d9      	ldr	r1, [r3, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	e004      	b.n	800428a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d9bd      	bls.n	800421e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b4:	611a      	str	r2, [r3, #16]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e046      	b.n	800435e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2200      	movs	r2, #0
 80042fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2200      	movs	r2, #0
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800430c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004314:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	3212      	adds	r2, #18
 800432a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d80c      	bhi.n	800434e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6919      	ldr	r1, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	440b      	add	r3, r1
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	e004      	b.n	8004358 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3301      	adds	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d9b5      	bls.n	80042d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438e:	60da      	str	r2, [r3, #12]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a3a      	ldr	r2, [pc, #232]	; (80044a4 <HAL_GPIO_Init+0x108>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02b      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a39      	ldr	r2, [pc, #228]	; (80044a8 <HAL_GPIO_Init+0x10c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d027      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a38      	ldr	r2, [pc, #224]	; (80044ac <HAL_GPIO_Init+0x110>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d023      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a37      	ldr	r2, [pc, #220]	; (80044b0 <HAL_GPIO_Init+0x114>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01f      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a36      	ldr	r2, [pc, #216]	; (80044b4 <HAL_GPIO_Init+0x118>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01b      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a35      	ldr	r2, [pc, #212]	; (80044b8 <HAL_GPIO_Init+0x11c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_GPIO_Init+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <HAL_GPIO_Init+0x124>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <HAL_GPIO_Init+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_GPIO_Init+0x12c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_GPIO_Init+0x130>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x7a>
 800440e:	21aa      	movs	r1, #170	; 0xaa
 8004410:	482f      	ldr	r0, [pc, #188]	; (80044d0 <HAL_GPIO_Init+0x134>)
 8004412:	f7fc fd5d 	bl	8000ed0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <HAL_GPIO_Init+0x8c>
 8004420:	21ab      	movs	r1, #171	; 0xab
 8004422:	482b      	ldr	r0, [pc, #172]	; (80044d0 <HAL_GPIO_Init+0x134>)
 8004424:	f7fc fd54 	bl	8000ed0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d035      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d031      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b11      	cmp	r3, #17
 800443e:	d02d      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d029      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b12      	cmp	r3, #18
 800444e:	d025      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004458:	d020      	beq.n	800449c <HAL_GPIO_Init+0x100>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004462:	d01b      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800446c:	d016      	beq.n	800449c <HAL_GPIO_Init+0x100>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004476:	d011      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004480:	d00c      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800448a:	d007      	beq.n	800449c <HAL_GPIO_Init+0x100>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x100>
 8004494:	21ac      	movs	r1, #172	; 0xac
 8004496:	480e      	ldr	r0, [pc, #56]	; (80044d0 <HAL_GPIO_Init+0x134>)
 8004498:	f7fc fd1a 	bl	8000ed0 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e2d6      	b.n	8004a50 <HAL_GPIO_Init+0x6b4>
 80044a2:	bf00      	nop
 80044a4:	40020000 	.word	0x40020000
 80044a8:	40020400 	.word	0x40020400
 80044ac:	40020800 	.word	0x40020800
 80044b0:	40020c00 	.word	0x40020c00
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40021400 	.word	0x40021400
 80044bc:	40021800 	.word	0x40021800
 80044c0:	40021c00 	.word	0x40021c00
 80044c4:	40022000 	.word	0x40022000
 80044c8:	40022400 	.word	0x40022400
 80044cc:	40022800 	.word	0x40022800
 80044d0:	0800fbb8 	.word	0x0800fbb8
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044d4:	2201      	movs	r2, #1
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	f040 82ac 	bne.w	8004a4a <HAL_GPIO_Init+0x6ae>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d005      	beq.n	800450a <HAL_GPIO_Init+0x16e>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d144      	bne.n	8004594 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <HAL_GPIO_Init+0x196>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d00b      	beq.n	8004532 <HAL_GPIO_Init+0x196>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d007      	beq.n	8004532 <HAL_GPIO_Init+0x196>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x196>
 800452a:	21bd      	movs	r1, #189	; 0xbd
 800452c:	4831      	ldr	r0, [pc, #196]	; (80045f4 <HAL_GPIO_Init+0x258>)
 800452e:	f7fc fccf 	bl	8000ed0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	2203      	movs	r2, #3
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004568:	2201      	movs	r2, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4013      	ands	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 0201 	and.w	r2, r3, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b03      	cmp	r3, #3
 800459e:	d02b      	beq.n	80045f8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_GPIO_Init+0x224>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d007      	beq.n	80045c0 <HAL_GPIO_Init+0x224>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x224>
 80045b8:	21ce      	movs	r1, #206	; 0xce
 80045ba:	480e      	ldr	r0, [pc, #56]	; (80045f4 <HAL_GPIO_Init+0x258>)
 80045bc:	f7fc fc88 	bl	8000ed0 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e002      	b.n	80045f8 <HAL_GPIO_Init+0x25c>
 80045f2:	bf00      	nop
 80045f4:	0800fbb8 	.word	0x0800fbb8
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	f040 8143 	bne.w	800488c <HAL_GPIO_Init+0x4f0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 811a 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b01      	cmp	r3, #1
 8004616:	f000 8115 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8110 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 810b 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8106 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b01      	cmp	r3, #1
 800463e:	f000 8101 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b02      	cmp	r3, #2
 8004648:	f000 80fc 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f000 80f7 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b02      	cmp	r3, #2
 800465c:	f000 80f2 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b03      	cmp	r3, #3
 8004666:	f000 80ed 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b03      	cmp	r3, #3
 8004670:	f000 80e8 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b03      	cmp	r3, #3
 800467a:	f000 80e3 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b03      	cmp	r3, #3
 8004684:	f000 80de 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b03      	cmp	r3, #3
 800468e:	f000 80d9 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b03      	cmp	r3, #3
 8004698:	f000 80d4 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	f000 80cf 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	f000 80ca 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	f000 80c5 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	f000 80c0 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	f000 80bb 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	f000 80b6 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	f000 80b1 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	f000 80ac 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	f000 80a7 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	f000 80a2 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b05      	cmp	r3, #5
 8004706:	f000 809d 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b06      	cmp	r3, #6
 8004710:	f000 8098 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b06      	cmp	r3, #6
 800471a:	f000 8093 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b07      	cmp	r3, #7
 8004724:	f000 808e 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b07      	cmp	r3, #7
 800472e:	f000 8089 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b07      	cmp	r3, #7
 8004738:	f000 8084 	beq.w	8004844 <HAL_GPIO_Init+0x4a8>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b07      	cmp	r3, #7
 8004742:	d07f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b07      	cmp	r3, #7
 800474a:	d07b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b07      	cmp	r3, #7
 8004752:	d077      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b07      	cmp	r3, #7
 800475a:	d073      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d06f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d06b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d067      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d063      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d05f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d05b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d057      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b09      	cmp	r3, #9
 800479a:	d053      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	d04f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	d04b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b09      	cmp	r3, #9
 80047b2:	d047      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b09      	cmp	r3, #9
 80047ba:	d043      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d03f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b0a      	cmp	r3, #10
 80047ca:	d03b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b09      	cmp	r3, #9
 80047d2:	d037      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b0a      	cmp	r3, #10
 80047da:	d033      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b0a      	cmp	r3, #10
 80047e2:	d02f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b0a      	cmp	r3, #10
 80047ea:	d02b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b0b      	cmp	r3, #11
 80047f2:	d027      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b0a      	cmp	r3, #10
 80047fa:	d023      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b0b      	cmp	r3, #11
 8004802:	d01f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b0b      	cmp	r3, #11
 800480a:	d01b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d017      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d013      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d00f      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b0f      	cmp	r3, #15
 800482a:	d00b      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b0d      	cmp	r3, #13
 8004832:	d007      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b0e      	cmp	r3, #14
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x4a8>
 800483c:	21db      	movs	r1, #219	; 0xdb
 800483e:	4889      	ldr	r0, [pc, #548]	; (8004a64 <HAL_GPIO_Init+0x6c8>)
 8004840:	f7fc fb46 	bl	8000ed0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08da      	lsrs	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80be 	beq.w	8004a4a <HAL_GPIO_Init+0x6ae>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <HAL_GPIO_Init+0x6cc>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	4a65      	ldr	r2, [pc, #404]	; (8004a68 <HAL_GPIO_Init+0x6cc>)
 80048d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d8:	6453      	str	r3, [r2, #68]	; 0x44
 80048da:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <HAL_GPIO_Init+0x6cc>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048e6:	4a61      	ldr	r2, [pc, #388]	; (8004a6c <HAL_GPIO_Init+0x6d0>)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	220f      	movs	r2, #15
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <HAL_GPIO_Init+0x6d4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d037      	beq.n	8004982 <HAL_GPIO_Init+0x5e6>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a57      	ldr	r2, [pc, #348]	; (8004a74 <HAL_GPIO_Init+0x6d8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d031      	beq.n	800497e <HAL_GPIO_Init+0x5e2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a56      	ldr	r2, [pc, #344]	; (8004a78 <HAL_GPIO_Init+0x6dc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02b      	beq.n	800497a <HAL_GPIO_Init+0x5de>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_GPIO_Init+0x6e0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d025      	beq.n	8004976 <HAL_GPIO_Init+0x5da>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a54      	ldr	r2, [pc, #336]	; (8004a80 <HAL_GPIO_Init+0x6e4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01f      	beq.n	8004972 <HAL_GPIO_Init+0x5d6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a53      	ldr	r2, [pc, #332]	; (8004a84 <HAL_GPIO_Init+0x6e8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d019      	beq.n	800496e <HAL_GPIO_Init+0x5d2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a52      	ldr	r2, [pc, #328]	; (8004a88 <HAL_GPIO_Init+0x6ec>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_GPIO_Init+0x5ce>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a51      	ldr	r2, [pc, #324]	; (8004a8c <HAL_GPIO_Init+0x6f0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00d      	beq.n	8004966 <HAL_GPIO_Init+0x5ca>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a50      	ldr	r2, [pc, #320]	; (8004a90 <HAL_GPIO_Init+0x6f4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <HAL_GPIO_Init+0x5c6>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4f      	ldr	r2, [pc, #316]	; (8004a94 <HAL_GPIO_Init+0x6f8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_GPIO_Init+0x5c2>
 800495a:	2309      	movs	r3, #9
 800495c:	e012      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 800495e:	230a      	movs	r3, #10
 8004960:	e010      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 8004962:	2308      	movs	r3, #8
 8004964:	e00e      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 8004966:	2307      	movs	r3, #7
 8004968:	e00c      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 800496a:	2306      	movs	r3, #6
 800496c:	e00a      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 800496e:	2305      	movs	r3, #5
 8004970:	e008      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 8004972:	2304      	movs	r3, #4
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 8004976:	2303      	movs	r3, #3
 8004978:	e004      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 800497a:	2302      	movs	r3, #2
 800497c:	e002      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_GPIO_Init+0x5e8>
 8004982:	2300      	movs	r3, #0
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	f002 0203 	and.w	r2, r2, #3
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	4093      	lsls	r3, r2
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_GPIO_Init+0x6d0>)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049a2:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x62a>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049c6:	4a34      	ldr	r2, [pc, #208]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049cc:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x654>
        {
          temp |= iocurrent;
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x67e>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x6a8>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <HAL_GPIO_Init+0x6fc>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b0f      	cmp	r3, #15
 8004a54:	f67f ad3e 	bls.w	80044d4 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	0800fbb8 	.word	0x0800fbb8
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40020000 	.word	0x40020000
 8004a74:	40020400 	.word	0x40020400
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020c00 	.word	0x40020c00
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40021400 	.word	0x40021400
 8004a88:	40021800 	.word	0x40021800
 8004a8c:	40021c00 	.word	0x40021c00
 8004a90:	40022000 	.word	0x40022000
 8004a94:	40022400 	.word	0x40022400
 8004a98:	40013c00 	.word	0x40013c00

08004a9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a8a      	ldr	r2, [pc, #552]	; (8004ce0 <HAL_GPIO_DeInit+0x244>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02c      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a89      	ldr	r2, [pc, #548]	; (8004ce4 <HAL_GPIO_DeInit+0x248>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d028      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a88      	ldr	r2, [pc, #544]	; (8004ce8 <HAL_GPIO_DeInit+0x24c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d024      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a87      	ldr	r2, [pc, #540]	; (8004cec <HAL_GPIO_DeInit+0x250>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d020      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a86      	ldr	r2, [pc, #536]	; (8004cf0 <HAL_GPIO_DeInit+0x254>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01c      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a85      	ldr	r2, [pc, #532]	; (8004cf4 <HAL_GPIO_DeInit+0x258>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a84      	ldr	r2, [pc, #528]	; (8004cf8 <HAL_GPIO_DeInit+0x25c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d014      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a83      	ldr	r2, [pc, #524]	; (8004cfc <HAL_GPIO_DeInit+0x260>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d010      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a82      	ldr	r2, [pc, #520]	; (8004d00 <HAL_GPIO_DeInit+0x264>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00c      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a81      	ldr	r2, [pc, #516]	; (8004d04 <HAL_GPIO_DeInit+0x268>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d008      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a80      	ldr	r2, [pc, #512]	; (8004d08 <HAL_GPIO_DeInit+0x26c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_GPIO_DeInit+0x78>
 8004b0a:	f240 112b 	movw	r1, #299	; 0x12b
 8004b0e:	487f      	ldr	r0, [pc, #508]	; (8004d0c <HAL_GPIO_DeInit+0x270>)
 8004b10:	f7fc f9de 	bl	8000ed0 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e0d9      	b.n	8004cce <HAL_GPIO_DeInit+0x232>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	f040 80c9 	bne.w	8004cc8 <HAL_GPIO_DeInit+0x22c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004b36:	4a76      	ldr	r2, [pc, #472]	; (8004d10 <HAL_GPIO_DeInit+0x274>)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b42:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	220f      	movs	r2, #15
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a61      	ldr	r2, [pc, #388]	; (8004ce0 <HAL_GPIO_DeInit+0x244>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d037      	beq.n	8004bd0 <HAL_GPIO_DeInit+0x134>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a60      	ldr	r2, [pc, #384]	; (8004ce4 <HAL_GPIO_DeInit+0x248>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <HAL_GPIO_DeInit+0x130>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a5f      	ldr	r2, [pc, #380]	; (8004ce8 <HAL_GPIO_DeInit+0x24c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d02b      	beq.n	8004bc8 <HAL_GPIO_DeInit+0x12c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a5e      	ldr	r2, [pc, #376]	; (8004cec <HAL_GPIO_DeInit+0x250>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d025      	beq.n	8004bc4 <HAL_GPIO_DeInit+0x128>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a5d      	ldr	r2, [pc, #372]	; (8004cf0 <HAL_GPIO_DeInit+0x254>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d01f      	beq.n	8004bc0 <HAL_GPIO_DeInit+0x124>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a5c      	ldr	r2, [pc, #368]	; (8004cf4 <HAL_GPIO_DeInit+0x258>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d019      	beq.n	8004bbc <HAL_GPIO_DeInit+0x120>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a5b      	ldr	r2, [pc, #364]	; (8004cf8 <HAL_GPIO_DeInit+0x25c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <HAL_GPIO_DeInit+0x11c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a5a      	ldr	r2, [pc, #360]	; (8004cfc <HAL_GPIO_DeInit+0x260>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00d      	beq.n	8004bb4 <HAL_GPIO_DeInit+0x118>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a59      	ldr	r2, [pc, #356]	; (8004d00 <HAL_GPIO_DeInit+0x264>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <HAL_GPIO_DeInit+0x114>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a58      	ldr	r2, [pc, #352]	; (8004d04 <HAL_GPIO_DeInit+0x268>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_GPIO_DeInit+0x110>
 8004ba8:	2309      	movs	r3, #9
 8004baa:	e012      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bac:	230a      	movs	r3, #10
 8004bae:	e010      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	e00e      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bb4:	2307      	movs	r3, #7
 8004bb6:	e00c      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bb8:	2306      	movs	r3, #6
 8004bba:	e00a      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bbc:	2305      	movs	r3, #5
 8004bbe:	e008      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	e006      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e004      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e002      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <HAL_GPIO_DeInit+0x136>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	f002 0203 	and.w	r2, r2, #3
 8004bd8:	0092      	lsls	r2, r2, #2
 8004bda:	4093      	lsls	r3, r2
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d132      	bne.n	8004c48 <HAL_GPIO_DeInit+0x1ac>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004be2:	4b4c      	ldr	r3, [pc, #304]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	494a      	ldr	r1, [pc, #296]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bf0:	4b48      	ldr	r3, [pc, #288]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	4946      	ldr	r1, [pc, #280]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004bfe:	4b45      	ldr	r3, [pc, #276]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	4943      	ldr	r1, [pc, #268]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c0c:	4b41      	ldr	r3, [pc, #260]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	493f      	ldr	r1, [pc, #252]	; (8004d14 <HAL_GPIO_DeInit+0x278>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	220f      	movs	r2, #15
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004c2a:	4a39      	ldr	r2, [pc, #228]	; (8004d10 <HAL_GPIO_DeInit+0x274>)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	3302      	adds	r3, #2
 8004c32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	4835      	ldr	r0, [pc, #212]	; (8004d10 <HAL_GPIO_DeInit+0x274>)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	400a      	ands	r2, r1
 8004c42:	3302      	adds	r3, #2
 8004c44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2103      	movs	r1, #3
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	401a      	ands	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	08da      	lsrs	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3208      	adds	r2, #8
 8004c66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	08d2      	lsrs	r2, r2, #3
 8004c7e:	4019      	ands	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3208      	adds	r2, #8
 8004c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2103      	movs	r1, #3
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	401a      	ands	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	401a      	ands	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	2103      	movs	r1, #3
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	f67f af22 	bls.w	8004b1a <HAL_GPIO_DeInit+0x7e>
    }
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	40020400 	.word	0x40020400
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020c00 	.word	0x40020c00
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40021400 	.word	0x40021400
 8004cf8:	40021800 	.word	0x40021800
 8004cfc:	40021c00 	.word	0x40021c00
 8004d00:	40022000 	.word	0x40022000
 8004d04:	40022400 	.word	0x40022400
 8004d08:	40022800 	.word	0x40022800
 8004d0c:	0800fbb8 	.word	0x0800fbb8
 8004d10:	40013800 	.word	0x40013800
 8004d14:	40013c00 	.word	0x40013c00

08004d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004d24:	887b      	ldrh	r3, [r7, #2]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <HAL_GPIO_ReadPin+0x1c>
 8004d2a:	f240 1177 	movw	r1, #375	; 0x177
 8004d2e:	4809      	ldr	r0, [pc, #36]	; (8004d54 <HAL_GPIO_ReadPin+0x3c>)
 8004d30:	f7fc f8ce 	bl	8000ed0 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e001      	b.n	8004d4a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	0800fbb8 	.word	0x0800fbb8

08004d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
 8004d64:	4613      	mov	r3, r2
 8004d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_GPIO_WritePin+0x20>
 8004d6e:	f240 1197 	movw	r1, #407	; 0x197
 8004d72:	480e      	ldr	r0, [pc, #56]	; (8004dac <HAL_GPIO_WritePin+0x54>)
 8004d74:	f7fc f8ac 	bl	8000ed0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004d78:	787b      	ldrb	r3, [r7, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_GPIO_WritePin+0x36>
 8004d7e:	787b      	ldrb	r3, [r7, #1]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d004      	beq.n	8004d8e <HAL_GPIO_WritePin+0x36>
 8004d84:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004d88:	4808      	ldr	r0, [pc, #32]	; (8004dac <HAL_GPIO_WritePin+0x54>)
 8004d8a:	f7fc f8a1 	bl	8000ed0 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004d8e:	787b      	ldrb	r3, [r7, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d94:	887a      	ldrh	r2, [r7, #2]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d9a:	e003      	b.n	8004da4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	041a      	lsls	r2, r3, #16
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	0800fbb8 	.word	0x0800fbb8

08004db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d006      	beq.n	8004dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb ffa6 	bl	8000d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40013c00 	.word	0x40013c00

08004de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e107      	b.n	8005002 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a85      	ldr	r2, [pc, #532]	; (800500c <HAL_I2C_Init+0x22c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_I2C_Init+0x44>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a83      	ldr	r2, [pc, #524]	; (8005010 <HAL_I2C_Init+0x230>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_I2C_Init+0x44>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a82      	ldr	r2, [pc, #520]	; (8005014 <HAL_I2C_Init+0x234>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_I2C_Init+0x44>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a80      	ldr	r2, [pc, #512]	; (8005018 <HAL_I2C_Init+0x238>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_I2C_Init+0x44>
 8004e1a:	f240 2119 	movw	r1, #537	; 0x219
 8004e1e:	487f      	ldr	r0, [pc, #508]	; (800501c <HAL_I2C_Init+0x23c>)
 8004e20:	f7fc f856 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2c:	d304      	bcc.n	8004e38 <HAL_I2C_Init+0x58>
 8004e2e:	f240 211a 	movw	r1, #538	; 0x21a
 8004e32:	487a      	ldr	r0, [pc, #488]	; (800501c <HAL_I2C_Init+0x23c>)
 8004e34:	f7fc f84c 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d008      	beq.n	8004e52 <HAL_I2C_Init+0x72>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d004      	beq.n	8004e52 <HAL_I2C_Init+0x72>
 8004e48:	f240 211b 	movw	r1, #539	; 0x21b
 8004e4c:	4873      	ldr	r0, [pc, #460]	; (800501c <HAL_I2C_Init+0x23c>)
 8004e4e:	f7fc f83f 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_I2C_Init+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e62:	d004      	beq.n	8004e6e <HAL_I2C_Init+0x8e>
 8004e64:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004e68:	486c      	ldr	r0, [pc, #432]	; (800501c <HAL_I2C_Init+0x23c>)
 8004e6a:	f7fc f831 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2bff      	cmp	r3, #255	; 0xff
 8004e74:	d904      	bls.n	8004e80 <HAL_I2C_Init+0xa0>
 8004e76:	f240 211d 	movw	r1, #541	; 0x21d
 8004e7a:	4868      	ldr	r0, [pc, #416]	; (800501c <HAL_I2C_Init+0x23c>)
 8004e7c:	f7fc f828 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d020      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d01c      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d018      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d014      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d010      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b05      	cmp	r3, #5
 8004eae:	d00c      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b06      	cmp	r3, #6
 8004eb6:	d008      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d004      	beq.n	8004eca <HAL_I2C_Init+0xea>
 8004ec0:	f240 211e 	movw	r1, #542	; 0x21e
 8004ec4:	4855      	ldr	r0, [pc, #340]	; (800501c <HAL_I2C_Init+0x23c>)
 8004ec6:	f7fc f803 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_I2C_Init+0x106>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004eda:	d004      	beq.n	8004ee6 <HAL_I2C_Init+0x106>
 8004edc:	f240 211f 	movw	r1, #543	; 0x21f
 8004ee0:	484e      	ldr	r0, [pc, #312]	; (800501c <HAL_I2C_Init+0x23c>)
 8004ee2:	f7fb fff5 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_I2C_Init+0x122>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef6:	d004      	beq.n	8004f02 <HAL_I2C_Init+0x122>
 8004ef8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004efc:	4847      	ldr	r0, [pc, #284]	; (800501c <HAL_I2C_Init+0x23c>)
 8004efe:	f7fb ffe7 	bl	8000ed0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8d6 	bl	80050c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e006      	b.n	8004f78 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d104      	bne.n	8004f8a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_I2C_Init+0x240>)
 8004f96:	430b      	orrs	r3, r1
 8004f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40005400 	.word	0x40005400
 8005010:	40005800 	.word	0x40005800
 8005014:	40005c00 	.word	0x40005c00
 8005018:	40006000 	.word	0x40006000
 800501c:	0800fbf4 	.word	0x0800fbf4
 8005020:	02008000 	.word	0x02008000

08005024 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e03a      	b.n	80050ac <HAL_I2C_DeInit+0x88>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_I2C_DeInit+0x90>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_I2C_DeInit+0x44>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_I2C_DeInit+0x94>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_I2C_DeInit+0x44>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_I2C_DeInit+0x98>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_I2C_DeInit+0x44>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_I2C_DeInit+0x9c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_I2C_DeInit+0x44>
 800505e:	f240 2187 	movw	r1, #647	; 0x287
 8005062:	4818      	ldr	r0, [pc, #96]	; (80050c4 <HAL_I2C_DeInit+0xa0>)
 8005064:	f7fb ff34 	bl	8000ed0 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	; 0x24
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f82b 	bl	80050dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40005400 	.word	0x40005400
 80050b8:	40005800 	.word	0x40005800
 80050bc:	40005c00 	.word	0x40005c00
 80050c0:	40006000 	.word	0x40006000
 80050c4:	0800fbf4 	.word	0x0800fbf4

080050c8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d007      	beq.n	8005120 <HAL_I2C_Mem_Write+0x30>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d004      	beq.n	8005120 <HAL_I2C_Mem_Write+0x30>
 8005116:	f640 1141 	movw	r1, #2369	; 0x941
 800511a:	4884      	ldr	r0, [pc, #528]	; (800532c <HAL_I2C_Mem_Write+0x23c>)
 800511c:	f7fb fed8 	bl	8000ed0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	f040 80f9 	bne.w	8005320 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_I2C_Mem_Write+0x4a>
 8005134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0ed      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_I2C_Mem_Write+0x64>
 8005150:	2302      	movs	r3, #2
 8005152:	e0e6      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800515c:	f7fd fe4c 	bl	8002df8 <HAL_GetTick>
 8005160:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	2319      	movs	r3, #25
 8005168:	2201      	movs	r2, #1
 800516a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f001 fd98 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0d1      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2221      	movs	r2, #33	; 0x21
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2240      	movs	r2, #64	; 0x40
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a3a      	ldr	r2, [r7, #32]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051a6:	88f8      	ldrh	r0, [r7, #6]
 80051a8:	893a      	ldrh	r2, [r7, #8]
 80051aa:	8979      	ldrh	r1, [r7, #10]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4603      	mov	r3, r0
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 ffc4 	bl	8006144 <I2C_RequestMemoryWrite>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0a9      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2bff      	cmp	r3, #255	; 0xff
 80051d6:	d90e      	bls.n	80051f6 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	22ff      	movs	r2, #255	; 0xff
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 fef4 	bl	8006fdc <I2C_TransferConfig>
 80051f4:	e00f      	b.n	8005216 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	b2da      	uxtb	r2, r3
 8005206:	8979      	ldrh	r1, [r7, #10]
 8005208:	2300      	movs	r3, #0
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f001 fee3 	bl	8006fdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f001 fd82 	bl	8006d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07b      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d034      	beq.n	80052ce <HAL_I2C_Mem_Write+0x1de>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	d130      	bne.n	80052ce <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	2200      	movs	r2, #0
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f001 fd14 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e04d      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2bff      	cmp	r3, #255	; 0xff
 800528e:	d90e      	bls.n	80052ae <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	22ff      	movs	r2, #255	; 0xff
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	b2da      	uxtb	r2, r3
 800529c:	8979      	ldrh	r1, [r7, #10]
 800529e:	2300      	movs	r3, #0
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f001 fe98 	bl	8006fdc <I2C_TransferConfig>
 80052ac:	e00f      	b.n	80052ce <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	8979      	ldrh	r1, [r7, #10]
 80052c0:	2300      	movs	r3, #0
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f001 fe87 	bl	8006fdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d19e      	bne.n	8005216 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f001 fd61 	bl	8006da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e01a      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2220      	movs	r2, #32
 80052f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <HAL_I2C_Mem_Write+0x240>)
 8005300:	400b      	ands	r3, r1
 8005302:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	0800fbf4 	.word	0x0800fbf4
 8005330:	fe00e800 	.word	0xfe00e800

08005334 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4603      	mov	r3, r0
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	460b      	mov	r3, r1
 8005348:	813b      	strh	r3, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d007      	beq.n	8005364 <HAL_I2C_Mem_Read+0x30>
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d004      	beq.n	8005364 <HAL_I2C_Mem_Read+0x30>
 800535a:	f640 11ca 	movw	r1, #2506	; 0x9ca
 800535e:	4886      	ldr	r0, [pc, #536]	; (8005578 <HAL_I2C_Mem_Read+0x244>)
 8005360:	f7fb fdb6 	bl	8000ed0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	f040 80fd 	bne.w	800556c <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_I2C_Mem_Read+0x4a>
 8005378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0f1      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_I2C_Mem_Read+0x64>
 8005394:	2302      	movs	r3, #2
 8005396:	e0ea      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053a0:	f7fd fd2a 	bl	8002df8 <HAL_GetTick>
 80053a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2319      	movs	r3, #25
 80053ac:	2201      	movs	r2, #1
 80053ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f001 fc76 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0d5      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2222      	movs	r2, #34	; 0x22
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a3a      	ldr	r2, [r7, #32]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ea:	88f8      	ldrh	r0, [r7, #6]
 80053ec:	893a      	ldrh	r2, [r7, #8]
 80053ee:	8979      	ldrh	r1, [r7, #10]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4603      	mov	r3, r0
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fef6 	bl	80061ec <I2C_RequestMemoryRead>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e0ad      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005416:	b29b      	uxth	r3, r3
 8005418:	2bff      	cmp	r3, #255	; 0xff
 800541a:	d90e      	bls.n	800543a <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	22ff      	movs	r2, #255	; 0xff
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	b2da      	uxtb	r2, r3
 8005428:	8979      	ldrh	r1, [r7, #10]
 800542a:	4b54      	ldr	r3, [pc, #336]	; (800557c <HAL_I2C_Mem_Read+0x248>)
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f001 fdd2 	bl	8006fdc <I2C_TransferConfig>
 8005438:	e00f      	b.n	800545a <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	b2da      	uxtb	r2, r3
 800544a:	8979      	ldrh	r1, [r7, #10]
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <HAL_I2C_Mem_Read+0x248>)
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f001 fdc1 	bl	8006fdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2200      	movs	r2, #0
 8005462:	2104      	movs	r1, #4
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f001 fc1d 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e07c      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d034      	beq.n	800551a <HAL_I2C_Mem_Read+0x1e6>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d130      	bne.n	800551a <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	2200      	movs	r2, #0
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f001 fbee 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e04d      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2bff      	cmp	r3, #255	; 0xff
 80054da:	d90e      	bls.n	80054fa <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	8979      	ldrh	r1, [r7, #10]
 80054ea:	2300      	movs	r3, #0
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f001 fd72 	bl	8006fdc <I2C_TransferConfig>
 80054f8:	e00f      	b.n	800551a <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005508:	b2da      	uxtb	r2, r3
 800550a:	8979      	ldrh	r1, [r7, #10]
 800550c:	2300      	movs	r3, #0
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f001 fd61 	bl	8006fdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d19a      	bne.n	800545a <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f001 fc3b 	bl	8006da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e01a      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2220      	movs	r2, #32
 800553e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6859      	ldr	r1, [r3, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <HAL_I2C_Mem_Read+0x24c>)
 800554c:	400b      	ands	r3, r1
 800554e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	0800fbf4 	.word	0x0800fbf4
 800557c:	80002400 	.word	0x80002400
 8005580:	fe00e800 	.word	0xfe00e800

08005584 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	461a      	mov	r2, r3
 8005592:	4603      	mov	r3, r0
 8005594:	817b      	strh	r3, [r7, #10]
 8005596:	460b      	mov	r3, r1
 8005598:	813b      	strh	r3, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d007      	beq.n	80055b4 <HAL_I2C_Mem_Read_DMA+0x30>
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d004      	beq.n	80055b4 <HAL_I2C_Mem_Read_DMA+0x30>
 80055aa:	f640 3192 	movw	r1, #2962	; 0xb92
 80055ae:	4868      	ldr	r0, [pc, #416]	; (8005750 <HAL_I2C_Mem_Read_DMA+0x1cc>)
 80055b0:	f7fb fc8e 	bl	8000ed0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	f040 80c2 	bne.w	8005746 <HAL_I2C_Mem_Read_DMA+0x1c2>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_I2C_Mem_Read_DMA+0x4a>
 80055c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <HAL_I2C_Mem_Read_DMA+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0b6      	b.n	8005748 <HAL_I2C_Mem_Read_DMA+0x1c4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Mem_Read_DMA+0x6a>
    {
      return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0ac      	b.n	8005748 <HAL_I2C_Mem_Read_DMA+0x1c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_I2C_Mem_Read_DMA+0x78>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e0a5      	b.n	8005748 <HAL_I2C_Mem_Read_DMA+0x1c4>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2222      	movs	r2, #34	; 0x22
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2240      	movs	r2, #64	; 0x40
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4a4a      	ldr	r2, [pc, #296]	; (8005754 <HAL_I2C_Mem_Read_DMA+0x1d0>)
 800562a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a4a      	ldr	r2, [pc, #296]	; (8005758 <HAL_I2C_Mem_Read_DMA+0x1d4>)
 8005630:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8005632:	897a      	ldrh	r2, [r7, #10]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2bff      	cmp	r3, #255	; 0xff
 8005640:	d903      	bls.n	800564a <HAL_I2C_Mem_Read_DMA+0xc6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	851a      	strh	r2, [r3, #40]	; 0x28
 8005648:	e004      	b.n	8005654 <HAL_I2C_Mem_Read_DMA+0xd0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d109      	bne.n	800566e <HAL_I2C_Mem_Read_DMA+0xea>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800565a:	893b      	ldrh	r3, [r7, #8]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	651a      	str	r2, [r3, #80]	; 0x50
 800566c:	e00b      	b.n	8005686 <HAL_I2C_Mem_Read_DMA+0x102>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800566e:	893b      	ldrh	r3, [r7, #8]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	b29b      	uxth	r3, r3
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800567c:	893b      	ldrh	r3, [r7, #8]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_I2C_Mem_Read_DMA+0x14c>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	4a32      	ldr	r2, [pc, #200]	; (800575c <HAL_I2C_Mem_Read_DMA+0x1d8>)
 8005694:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	4a31      	ldr	r2, [pc, #196]	; (8005760 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800569c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	2200      	movs	r2, #0
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2200      	movs	r2, #0
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3324      	adds	r3, #36	; 0x24
 80056b8:	4619      	mov	r1, r3
 80056ba:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056c0:	f7fe f832 	bl	8003728 <HAL_DMA_Start_IT>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d127      	bne.n	800571e <HAL_I2C_Mem_Read_DMA+0x19a>
 80056ce:	e013      	b.n	80056f8 <HAL_I2C_Mem_Read_DMA+0x174>
      hi2c->State     = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e027      	b.n	8005748 <HAL_I2C_Mem_Read_DMA+0x1c4>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	8979      	ldrh	r1, [r7, #10]
 80056fe:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f001 fc69 	bl	8006fdc <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005712:	2101      	movs	r1, #1
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f001 fcdd 	bl	80070d4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e014      	b.n	8005748 <HAL_I2C_Mem_Read_DMA+0x1c4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	f043 0210 	orr.w	r2, r3, #16
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_I2C_Mem_Read_DMA+0x1c4>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	0800fbf4 	.word	0x0800fbf4
 8005754:	ffff0000 	.word	0xffff0000
 8005758:	08005d3d 	.word	0x08005d3d
 800575c:	08006b5f 	.word	0x08006b5f
 8005760:	08006bf5 	.word	0x08006bf5
 8005764:	80002000 	.word	0x80002000

08005768 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
  }
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	09db      	lsrs	r3, r3, #7
 80057c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d0:	f043 0201 	orr.w	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	0a9b      	lsrs	r3, r3, #10
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	09db      	lsrs	r3, r3, #7
 80057f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f043 0208 	orr.w	r2, r3, #8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800580e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	0a5b      	lsrs	r3, r3, #9
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	09db      	lsrs	r3, r3, #7
 8005820:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582c:	f043 0202 	orr.w	r2, r3, #2
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 030b 	and.w	r3, r3, #11
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 f869 	bl	8006928 <I2C_ITError>
  }
}
 8005856:	bf00      	nop
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
 80058ba:	4613      	mov	r3, r2
 80058bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005928:	b2db      	uxtb	r3, r3
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b086      	sub	sp, #24
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <I2C_Slave_ISR_IT+0x24>
 800596e:	2302      	movs	r3, #2
 8005970:	e0ec      	b.n	8005b4c <I2C_Slave_ISR_IT+0x1fe>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005992:	6939      	ldr	r1, [r7, #16]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fe67 	bl	8006668 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d04d      	beq.n	8005a42 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d047      	beq.n	8005a42 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d128      	bne.n	8005a0e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b28      	cmp	r3, #40	; 0x28
 80059c6:	d108      	bne.n	80059da <I2C_Slave_ISR_IT+0x8c>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ce:	d104      	bne.n	80059da <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80059d0:	6939      	ldr	r1, [r7, #16]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 ff52 	bl	800687c <I2C_ITListenCplt>
 80059d8:	e032      	b.n	8005a40 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b29      	cmp	r3, #41	; 0x29
 80059e4:	d10e      	bne.n	8005a04 <I2C_Slave_ISR_IT+0xb6>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ec:	d00a      	beq.n	8005a04 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2210      	movs	r2, #16
 80059f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f001 f88d 	bl	8006b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fd0a 	bl	8006416 <I2C_ITSlaveSeqCplt>
 8005a02:	e01d      	b.n	8005a40 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005a0c:	e096      	b.n	8005b3c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <I2C_Slave_ISR_IT+0xe4>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a2e:	f040 8085 	bne.w	8005b3c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	4619      	mov	r1, r3
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 ff75 	bl	8006928 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a3e:	e07d      	b.n	8005b3c <I2C_Slave_ISR_IT+0x1ee>
 8005a40:	e07c      	b.n	8005b3c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d030      	beq.n	8005ab0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d02a      	beq.n	8005ab0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d018      	beq.n	8005a96 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d14f      	bne.n	8005b40 <I2C_Slave_ISR_IT+0x1f2>
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aa6:	d04b      	beq.n	8005b40 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fcb4 	bl	8006416 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005aae:	e047      	b.n	8005b40 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	08db      	lsrs	r3, r3, #3
 8005ac0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005ac8:	6939      	ldr	r1, [r7, #16]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fbe2 	bl	8006294 <I2C_ITAddrCplt>
 8005ad0:	e037      	b.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d031      	beq.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d02b      	beq.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d018      	beq.n	8005b26 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b24:	e00d      	b.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2c:	d002      	beq.n	8005b34 <I2C_Slave_ISR_IT+0x1e6>
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fc6e 	bl	8006416 <I2C_ITSlaveSeqCplt>
 8005b3a:	e002      	b.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005b3c:	bf00      	nop
 8005b3e:	e000      	b.n	8005b42 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005b40:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <I2C_Master_ISR_DMA+0x1a>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e0e1      	b.n	8005d32 <I2C_Master_ISR_DMA+0x1de>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2210      	movs	r2, #16
 8005b94:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f043 0204 	orr.w	r2, r3, #4
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ba2:	2120      	movs	r1, #32
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f001 fa95 	bl	80070d4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 ffb3 	bl	8006b16 <I2C_Flush_TXDR>
 8005bb0:	e0ba      	b.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	09db      	lsrs	r3, r3, #7
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d072      	beq.n	8005ca4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	099b      	lsrs	r3, r3, #6
 8005bc2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d06c      	beq.n	8005ca4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d04e      	beq.n	8005c82 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2bff      	cmp	r3, #255	; 0xff
 8005bfa:	d906      	bls.n	8005c0a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e010      	b.n	8005c2c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c1c:	d003      	beq.n	8005c26 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e002      	b.n	8005c2c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	8a79      	ldrh	r1, [r7, #18]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f001 f9ce 	bl	8006fdc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b22      	cmp	r3, #34	; 0x22
 8005c5c:	d108      	bne.n	8005c70 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c6e:	e05b      	b.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c80:	e052      	b.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c90:	d003      	beq.n	8005c9a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fb82 	bl	800639c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005c98:	e046      	b.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c9a:	2140      	movs	r1, #64	; 0x40
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fe43 	bl	8006928 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005ca2:	e041      	b.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d029      	beq.n	8005d04 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	099b      	lsrs	r3, r3, #6
 8005cb4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d023      	beq.n	8005d04 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d119      	bne.n	8005cfa <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cd4:	d027      	beq.n	8005d26 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cde:	d108      	bne.n	8005cf2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cee:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005cf0:	e019      	b.n	8005d26 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb52 	bl	800639c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005cf8:	e015      	b.n	8005d26 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005cfa:	2140      	movs	r1, #64	; 0x40
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fe13 	bl	8006928 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d02:	e010      	b.n	8005d26 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fbd8 	bl	80064d4 <I2C_ITMasterCplt>
 8005d24:	e000      	b.n	8005d28 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005d26:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005d48:	4b8c      	ldr	r3, [pc, #560]	; (8005f7c <I2C_Mem_ISR_DMA+0x240>)
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <I2C_Mem_ISR_DMA+0x1e>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e10c      	b.n	8005f74 <I2C_Mem_ISR_DMA+0x238>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d011      	beq.n	8005d9e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2210      	movs	r2, #16
 8005d80:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	f043 0204 	orr.w	r2, r3, #4
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d8e:	2120      	movs	r1, #32
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 f99f 	bl	80070d4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 febd 	bl	8006b16 <I2C_Flush_TXDR>
 8005d9c:	e0e5      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00f      	beq.n	8005dca <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	651a      	str	r2, [r3, #80]	; 0x50
 8005dc8:	e0cf      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	09db      	lsrs	r3, r3, #7
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d05c      	beq.n	8005e90 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	099b      	lsrs	r3, r3, #6
 8005dda:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d056      	beq.n	8005e90 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005de2:	2110      	movs	r1, #16
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f001 f975 	bl	80070d4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d048      	beq.n	8005e86 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2bff      	cmp	r3, #255	; 0xff
 8005dfc:	d910      	bls.n	8005e20 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	22ff      	movs	r2, #255	; 0xff
 8005e02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 f8df 	bl	8006fdc <I2C_TransferConfig>
 8005e1e:	e011      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	b299      	uxth	r1, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f001 f8cc 	bl	8006fdc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b22      	cmp	r3, #34	; 0x22
 8005e60:	d108      	bne.n	8005e74 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e72:	e07a      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e84:	e071      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e86:	2140      	movs	r1, #64	; 0x40
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fd4d 	bl	8006928 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005e8e:	e06c      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d056      	beq.n	8005f4a <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d050      	beq.n	8005f4a <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b22      	cmp	r3, #34	; 0x22
 8005eb2:	d101      	bne.n	8005eb8 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8005eb4:	4b32      	ldr	r3, [pc, #200]	; (8005f80 <I2C_Mem_ISR_DMA+0x244>)
 8005eb6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d910      	bls.n	8005ee4 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	b299      	uxth	r1, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f001 f87d 	bl	8006fdc <I2C_TransferConfig>
 8005ee2:	e011      	b.n	8005f08 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	b299      	uxth	r1, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f001 f86a 	bl	8006fdc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b22      	cmp	r3, #34	; 0x22
 8005f24:	d108      	bne.n	8005f38 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f34:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f36:	e018      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f46:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f48:	e00f      	b.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fab5 	bl	80064d4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	80002000 	.word	0x80002000
 8005f80:	80002400 	.word	0x80002400

08005f84 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <I2C_Slave_ISR_DMA+0x24>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e0c9      	b.n	800613c <I2C_Slave_ISR_DMA+0x1b8>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fb4c 	bl	8006668 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	091b      	lsrs	r3, r3, #4
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 809a 	beq.w	8006112 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8093 	beq.w	8006112 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	0b9b      	lsrs	r3, r3, #14
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0bdb      	lsrs	r3, r3, #15
 8005ffc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006000:	2b00      	cmp	r3, #0
 8006002:	d07f      	beq.n	8006104 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00d      	beq.n	8006028 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0bdb      	lsrs	r3, r3, #15
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8006024:	2301      	movs	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0b9b      	lsrs	r3, r3, #14
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006048:	2301      	movs	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d128      	bne.n	80060a4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b28      	cmp	r3, #40	; 0x28
 800605c:	d108      	bne.n	8006070 <I2C_Slave_ISR_DMA+0xec>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006064:	d104      	bne.n	8006070 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fc07 	bl	800687c <I2C_ITListenCplt>
 800606e:	e048      	b.n	8006102 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b29      	cmp	r3, #41	; 0x29
 800607a:	d10e      	bne.n	800609a <I2C_Slave_ISR_DMA+0x116>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006082:	d00a      	beq.n	800609a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2210      	movs	r2, #16
 800608a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 fd42 	bl	8006b16 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f9bf 	bl	8006416 <I2C_ITSlaveSeqCplt>
 8006098:	e033      	b.n	8006102 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2210      	movs	r2, #16
 80060a0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80060a2:	e034      	b.n	800610e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2210      	movs	r2, #16
 80060aa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b0:	f043 0204 	orr.w	r2, r3, #4
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060be:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <I2C_Slave_ISR_DMA+0x14a>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060cc:	d11f      	bne.n	800610e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b21      	cmp	r3, #33	; 0x21
 80060d2:	d002      	beq.n	80060da <I2C_Slave_ISR_DMA+0x156>
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b29      	cmp	r3, #41	; 0x29
 80060d8:	d103      	bne.n	80060e2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2221      	movs	r2, #33	; 0x21
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
 80060e0:	e008      	b.n	80060f4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	2b22      	cmp	r3, #34	; 0x22
 80060e6:	d002      	beq.n	80060ee <I2C_Slave_ISR_DMA+0x16a>
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	2b2a      	cmp	r3, #42	; 0x2a
 80060ec:	d102      	bne.n	80060f4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2222      	movs	r2, #34	; 0x22
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	4619      	mov	r1, r3
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fc14 	bl	8006928 <I2C_ITError>
      if (treatdmanack == 1U)
 8006100:	e005      	b.n	800610e <I2C_Slave_ISR_DMA+0x18a>
 8006102:	e004      	b.n	800610e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2210      	movs	r2, #16
 800610a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800610c:	e011      	b.n	8006132 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800610e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006110:	e00f      	b.n	8006132 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f8b1 	bl	8006294 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	8979      	ldrh	r1, [r7, #10]
 8006164:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <I2C_RequestMemoryWrite+0xa4>)
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 ff35 	bl	8006fdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fdd4 	bl	8006d24 <I2C_WaitOnTXISFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e02c      	b.n	80061e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d105      	bne.n	8006198 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800618c:	893b      	ldrh	r3, [r7, #8]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	629a      	str	r2, [r3, #40]	; 0x28
 8006196:	e015      	b.n	80061c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006198:	893b      	ldrh	r3, [r7, #8]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	b29b      	uxth	r3, r3
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	69b9      	ldr	r1, [r7, #24]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fdba 	bl	8006d24 <I2C_WaitOnTXISFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e012      	b.n	80061e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ba:	893b      	ldrh	r3, [r7, #8]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fd68 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	80002000 	.word	0x80002000

080061ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	460b      	mov	r3, r1
 8006200:	813b      	strh	r3, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	4b20      	ldr	r3, [pc, #128]	; (8006290 <I2C_RequestMemoryRead+0xa4>)
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2300      	movs	r3, #0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fee2 	bl	8006fdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fd81 	bl	8006d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e02c      	b.n	8006286 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d105      	bne.n	800623e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006232:	893b      	ldrh	r3, [r7, #8]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
 800623c:	e015      	b.n	800626a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	b29b      	uxth	r3, r3
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fd67 	bl	8006d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e012      	b.n	8006286 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2200      	movs	r2, #0
 8006272:	2140      	movs	r1, #64	; 0x40
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fd15 	bl	8006ca4 <I2C_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	80002000 	.word	0x80002000

08006294 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062aa:	2b28      	cmp	r3, #40	; 0x28
 80062ac:	d16a      	bne.n	8006384 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	0c1b      	lsrs	r3, r3, #16
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80062cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80062e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d138      	bne.n	8006364 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80062f2:	897b      	ldrh	r3, [r7, #10]
 80062f4:	09db      	lsrs	r3, r3, #7
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	89bb      	ldrh	r3, [r7, #12]
 80062fa:	4053      	eors	r3, r2
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f003 0306 	and.w	r3, r3, #6
 8006302:	2b00      	cmp	r3, #0
 8006304:	d11c      	bne.n	8006340 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	2b02      	cmp	r3, #2
 800631a:	d13b      	bne.n	8006394 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2208      	movs	r2, #8
 8006328:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006332:	89ba      	ldrh	r2, [r7, #12]
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff fab8 	bl	80058ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800633e:	e029      	b.n	8006394 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 ff2d 	bl	80071a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006356:	89ba      	ldrh	r2, [r7, #12]
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff faa6 	bl	80058ae <HAL_I2C_AddrCallback>
}
 8006362:	e017      	b.n	8006394 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 ff1d 	bl	80071a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006376:	89ba      	ldrh	r2, [r7, #12]
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fa96 	bl	80058ae <HAL_I2C_AddrCallback>
}
 8006382:	e007      	b.n	8006394 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2208      	movs	r2, #8
 800638a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b21      	cmp	r3, #33	; 0x21
 80063b6:	d115      	bne.n	80063e4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2211      	movs	r2, #17
 80063c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063cc:	2101      	movs	r1, #1
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 feea 	bl	80071a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fa3e 	bl	800585e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063e2:	e014      	b.n	800640e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2212      	movs	r2, #18
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063f8:	2102      	movs	r1, #2
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fed4 	bl	80071a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fa32 	bl	8005872 <HAL_I2C_MasterRxCpltCallback>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	0b9b      	lsrs	r3, r3, #14
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e00d      	b.n	8006468 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	0bdb      	lsrs	r3, r3, #15
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006466:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b29      	cmp	r3, #41	; 0x29
 8006472:	d112      	bne.n	800649a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2228      	movs	r2, #40	; 0x28
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2221      	movs	r2, #33	; 0x21
 8006480:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006482:	2101      	movs	r1, #1
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fe8f 	bl	80071a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff f9f7 	bl	8005886 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006498:	e017      	b.n	80064ca <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b2a      	cmp	r3, #42	; 0x2a
 80064a4:	d111      	bne.n	80064ca <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2228      	movs	r2, #40	; 0x28
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2222      	movs	r2, #34	; 0x22
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064b4:	2102      	movs	r1, #2
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fe76 	bl	80071a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff f9e8 	bl	800589a <HAL_I2C_SlaveRxCpltCallback>
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2220      	movs	r2, #32
 80064e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b21      	cmp	r3, #33	; 0x21
 80064f4:	d107      	bne.n	8006506 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064f6:	2101      	movs	r1, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fe55 	bl	80071a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2211      	movs	r2, #17
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
 8006504:	e00c      	b.n	8006520 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b22      	cmp	r3, #34	; 0x22
 8006510:	d106      	bne.n	8006520 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006512:	2102      	movs	r1, #2
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fe47 	bl	80071a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2212      	movs	r2, #18
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b4d      	ldr	r3, [pc, #308]	; (8006660 <I2C_ITMasterCplt+0x18c>)
 800652c:	400b      	ands	r3, r1
 800652e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a4a      	ldr	r2, [pc, #296]	; (8006664 <I2C_ITMasterCplt+0x190>)
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2210      	movs	r2, #16
 800654e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	f043 0204 	orr.w	r2, r3, #4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b60      	cmp	r3, #96	; 0x60
 8006566:	d10b      	bne.n	8006580 <I2C_ITMasterCplt+0xac>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	b2db      	uxtb	r3, r3
 800657c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800657e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fac8 	bl	8006b16 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d002      	beq.n	800659e <I2C_ITMasterCplt+0xca>
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f9bf 	bl	8006928 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80065aa:	e054      	b.n	8006656 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b21      	cmp	r3, #33	; 0x21
 80065b6:	d124      	bne.n	8006602 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d10b      	bne.n	80065ea <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff f97b 	bl	80058de <HAL_I2C_MemTxCpltCallback>
}
 80065e8:	e035      	b.n	8006656 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff f92f 	bl	800585e <HAL_I2C_MasterTxCpltCallback>
}
 8006600:	e029      	b.n	8006656 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b22      	cmp	r3, #34	; 0x22
 800660c:	d123      	bne.n	8006656 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b40      	cmp	r3, #64	; 0x40
 8006626:	d10b      	bne.n	8006640 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fa fb83 	bl	8000d44 <HAL_I2C_MemRxCpltCallback>
}
 800663e:	e00a      	b.n	8006656 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f90e 	bl	8005872 <HAL_I2C_MasterRxCpltCallback>
}
 8006656:	bf00      	nop
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	fe00e800 	.word	0xfe00e800
 8006664:	ffff0000 	.word	0xffff0000

08006668 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006684:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2220      	movs	r2, #32
 800668c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b21      	cmp	r3, #33	; 0x21
 8006692:	d002      	beq.n	800669a <I2C_ITSlaveCplt+0x32>
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b29      	cmp	r3, #41	; 0x29
 8006698:	d108      	bne.n	80066ac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800669a:	f248 0101 	movw	r1, #32769	; 0x8001
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fd82 	bl	80071a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2221      	movs	r2, #33	; 0x21
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30
 80066aa:	e00d      	b.n	80066c8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b22      	cmp	r3, #34	; 0x22
 80066b0:	d002      	beq.n	80066b8 <I2C_ITSlaveCplt+0x50>
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b2a      	cmp	r3, #42	; 0x2a
 80066b6:	d107      	bne.n	80066c8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80066b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fd73 	bl	80071a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2222      	movs	r2, #34	; 0x22
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b64      	ldr	r3, [pc, #400]	; (8006874 <I2C_ITSlaveCplt+0x20c>)
 80066e4:	400b      	ands	r3, r1
 80066e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fa14 	bl	8006b16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	0b9b      	lsrs	r3, r3, #14
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d013      	beq.n	8006722 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006708:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	2b00      	cmp	r3, #0
 8006710:	d020      	beq.n	8006754 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006720:	e018      	b.n	8006754 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	0bdb      	lsrs	r3, r3, #15
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d012      	beq.n	8006754 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800673c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b29a      	uxth	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d020      	beq.n	80067a2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b0:	f043 0204 	orr.w	r2, r3, #4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d010      	beq.n	80067f0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f8a7 	bl	8006928 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b28      	cmp	r3, #40	; 0x28
 80067e4:	d141      	bne.n	800686a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80067e6:	6979      	ldr	r1, [r7, #20]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f847 	bl	800687c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067ee:	e03c      	b.n	800686a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067f8:	d014      	beq.n	8006824 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fe0b 	bl	8006416 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <I2C_ITSlaveCplt+0x210>)
 8006804:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff f854 	bl	80058ca <HAL_I2C_ListenCpltCallback>
}
 8006822:	e022      	b.n	800686a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b22      	cmp	r3, #34	; 0x22
 800682e:	d10e      	bne.n	800684e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff f827 	bl	800589a <HAL_I2C_SlaveRxCpltCallback>
}
 800684c:	e00d      	b.n	800686a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff f80e 	bl	8005886 <HAL_I2C_SlaveTxCpltCallback>
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	fe00e800 	.word	0xfe00e800
 8006878:	ffff0000 	.word	0xffff0000

0800687c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a26      	ldr	r2, [pc, #152]	; (8006924 <I2C_ITListenCplt+0xa8>)
 800688a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	089b      	lsrs	r3, r3, #2
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d022      	beq.n	80068fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f043 0204 	orr.w	r2, r3, #4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80068fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fc52 	bl	80071a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2210      	movs	r2, #16
 800690a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fe ffd8 	bl	80058ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	ffff0000 	.word	0xffff0000

08006928 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a5d      	ldr	r2, [pc, #372]	; (8006abc <I2C_ITError+0x194>)
 8006946:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b28      	cmp	r3, #40	; 0x28
 800695e:	d005      	beq.n	800696c <I2C_ITError+0x44>
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b29      	cmp	r3, #41	; 0x29
 8006964:	d002      	beq.n	800696c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d10b      	bne.n	8006984 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800696c:	2103      	movs	r1, #3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fc1a 	bl	80071a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2228      	movs	r2, #40	; 0x28
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a50      	ldr	r2, [pc, #320]	; (8006ac0 <I2C_ITError+0x198>)
 8006980:	635a      	str	r2, [r3, #52]	; 0x34
 8006982:	e011      	b.n	80069a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006984:	f248 0103 	movw	r1, #32771	; 0x8003
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fc0d 	bl	80071a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b60      	cmp	r3, #96	; 0x60
 8006998:	d003      	beq.n	80069a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d039      	beq.n	8006a2a <I2C_ITError+0x102>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b11      	cmp	r3, #17
 80069ba:	d002      	beq.n	80069c2 <I2C_ITError+0x9a>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b21      	cmp	r3, #33	; 0x21
 80069c0:	d133      	bne.n	8006a2a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d0:	d107      	bne.n	80069e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fd f8b8 	bl	8003b5c <HAL_DMA_GetState>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d017      	beq.n	8006a22 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	4a33      	ldr	r2, [pc, #204]	; (8006ac4 <I2C_ITError+0x19c>)
 80069f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fc fefc 	bl	8003804 <HAL_DMA_Abort_IT>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d04d      	beq.n	8006aae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a20:	e045      	b.n	8006aae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f850 	bl	8006ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a28:	e041      	b.n	8006aae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d039      	beq.n	8006aa6 <I2C_ITError+0x17e>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b12      	cmp	r3, #18
 8006a36:	d002      	beq.n	8006a3e <I2C_ITError+0x116>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b22      	cmp	r3, #34	; 0x22
 8006a3c:	d133      	bne.n	8006aa6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4c:	d107      	bne.n	8006a5e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a5c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd f87a 	bl	8003b5c <HAL_DMA_GetState>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d017      	beq.n	8006a9e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	4a14      	ldr	r2, [pc, #80]	; (8006ac4 <I2C_ITError+0x19c>)
 8006a74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fc febe 	bl	8003804 <HAL_DMA_Abort_IT>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d011      	beq.n	8006ab2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a9c:	e009      	b.n	8006ab2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f812 	bl	8006ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006aa4:	e005      	b.n	8006ab2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f80e 	bl	8006ac8 <I2C_TreatErrorCallback>
  }
}
 8006aac:	e002      	b.n	8006ab4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006aae:	bf00      	nop
 8006ab0:	e000      	b.n	8006ab4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ab2:	bf00      	nop
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	ffff0000 	.word	0xffff0000
 8006ac0:	0800594f 	.word	0x0800594f
 8006ac4:	08006c69 	.word	0x08006c69

08006ac8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b60      	cmp	r3, #96	; 0x60
 8006ada:	d10e      	bne.n	8006afa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fe ff07 	bl	8005906 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006af8:	e009      	b.n	8006b0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7fe fef2 	bl	80058f2 <HAL_I2C_ErrorCallback>
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d103      	bne.n	8006b34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d007      	beq.n	8006b52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	619a      	str	r2, [r3, #24]
  }
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b7a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b86:	2120      	movs	r1, #32
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 faa3 	bl	80070d4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006b8e:	e02d      	b.n	8006bec <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b98:	441a      	add	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2bff      	cmp	r3, #255	; 0xff
 8006ba6:	d903      	bls.n	8006bb0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22ff      	movs	r2, #255	; 0xff
 8006bac:	851a      	strh	r2, [r3, #40]	; 0x28
 8006bae:	e004      	b.n	8006bba <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006bd0:	f7fc fdaa 	bl	8003728 <HAL_DMA_Start_IT>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d004      	beq.n	8006be4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006bda:	2110      	movs	r1, #16
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff fea3 	bl	8006928 <I2C_ITError>
}
 8006be2:	e003      	b.n	8006bec <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006be4:	2140      	movs	r1, #64	; 0x40
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fa74 	bl	80070d4 <I2C_Enable_IRQ>
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006c32:	2301      	movs	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fc ff9e 	bl	8003b78 <HAL_DMA_GetError>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d00e      	beq.n	8006c60 <I2C_DMAError+0x6c>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c56:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c58:	2110      	movs	r1, #16
 8006c5a:	68b8      	ldr	r0, [r7, #8]
 8006c5c:	f7ff fe64 	bl	8006928 <I2C_ITError>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	2200      	movs	r2, #0
 8006c84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	2200      	movs	r2, #0
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff ff16 	bl	8006ac8 <I2C_TreatErrorCallback>
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cb4:	e022      	b.n	8006cfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d01e      	beq.n	8006cfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cbe:	f7fc f89b 	bl	8002df8 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d113      	bne.n	8006cfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e00f      	b.n	8006d1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4013      	ands	r3, r2
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2301      	moveq	r3, #1
 8006d0e:	2300      	movne	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d0cd      	beq.n	8006cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d30:	e02c      	b.n	8006d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 f870 	bl	8006e1c <I2C_IsErrorOccurred>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e02a      	b.n	8006d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d01e      	beq.n	8006d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4e:	f7fc f853 	bl	8002df8 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d302      	bcc.n	8006d64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d113      	bne.n	8006d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e007      	b.n	8006d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d1cb      	bne.n	8006d32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006db0:	e028      	b.n	8006e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f830 	bl	8006e1c <I2C_IsErrorOccurred>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e026      	b.n	8006e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc6:	f7fc f817 	bl	8002df8 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d302      	bcc.n	8006ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d113      	bne.n	8006e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de0:	f043 0220 	orr.w	r2, r3, #32
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e007      	b.n	8006e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d1cf      	bne.n	8006db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d068      	beq.n	8006f1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e50:	e049      	b.n	8006ee6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d045      	beq.n	8006ee6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e5a:	f7fb ffcd 	bl	8002df8 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d302      	bcc.n	8006e70 <I2C_IsErrorOccurred+0x54>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d13a      	bne.n	8006ee6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e92:	d121      	bne.n	8006ed8 <I2C_IsErrorOccurred+0xbc>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e9a:	d01d      	beq.n	8006ed8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e9c:	7cfb      	ldrb	r3, [r7, #19]
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d01a      	beq.n	8006ed8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006eb2:	f7fb ffa1 	bl	8002df8 <HAL_GetTick>
 8006eb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eb8:	e00e      	b.n	8006ed8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006eba:	f7fb ff9d 	bl	8002df8 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b19      	cmp	r3, #25
 8006ec6:	d907      	bls.n	8006ed8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006ed6:	e006      	b.n	8006ee6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d1e9      	bne.n	8006eba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d003      	beq.n	8006efc <I2C_IsErrorOccurred+0xe0>
 8006ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0aa      	beq.n	8006e52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	f043 0304 	orr.w	r3, r3, #4
 8006f12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f043 0308 	orr.w	r3, r3, #8
 8006f54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	f043 0302 	orr.w	r3, r3, #2
 8006f76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01c      	beq.n	8006fca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fdc0 	bl	8006b16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <I2C_IsErrorOccurred+0x1bc>)
 8006fa2:	400b      	ands	r3, r1
 8006fa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3728      	adds	r7, #40	; 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	fe00e800 	.word	0xfe00e800

08006fdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	817b      	strh	r3, [r7, #10]
 8006fea:	4613      	mov	r3, r2
 8006fec:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <I2C_TransferConfig+0xd4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <I2C_TransferConfig+0x44>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2d      	ldr	r2, [pc, #180]	; (80070b4 <I2C_TransferConfig+0xd8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00e      	beq.n	8007020 <I2C_TransferConfig+0x44>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a2c      	ldr	r2, [pc, #176]	; (80070b8 <I2C_TransferConfig+0xdc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d009      	beq.n	8007020 <I2C_TransferConfig+0x44>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2a      	ldr	r2, [pc, #168]	; (80070bc <I2C_TransferConfig+0xe0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <I2C_TransferConfig+0x44>
 8007016:	f641 3147 	movw	r1, #6983	; 0x1b47
 800701a:	4829      	ldr	r0, [pc, #164]	; (80070c0 <I2C_TransferConfig+0xe4>)
 800701c:	f7f9 ff58 	bl	8000ed0 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007026:	d00b      	beq.n	8007040 <I2C_TransferConfig+0x64>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800702e:	d007      	beq.n	8007040 <I2C_TransferConfig+0x64>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <I2C_TransferConfig+0x64>
 8007036:	f641 3148 	movw	r1, #6984	; 0x1b48
 800703a:	4821      	ldr	r0, [pc, #132]	; (80070c0 <I2C_TransferConfig+0xe4>)
 800703c:	f7f9 ff48 	bl	8000ed0 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <I2C_TransferConfig+0xe8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00f      	beq.n	8007068 <I2C_TransferConfig+0x8c>
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <I2C_TransferConfig+0xec>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00b      	beq.n	8007068 <I2C_TransferConfig+0x8c>
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <I2C_TransferConfig+0xf0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d007      	beq.n	8007068 <I2C_TransferConfig+0x8c>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <I2C_TransferConfig+0x8c>
 800705e:	f641 3149 	movw	r1, #6985	; 0x1b49
 8007062:	4817      	ldr	r0, [pc, #92]	; (80070c0 <I2C_TransferConfig+0xe4>)
 8007064:	f7f9 ff34 	bl	8000ed0 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007068:	897b      	ldrh	r3, [r7, #10]
 800706a:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800706e:	7a7b      	ldrb	r3, [r7, #9]
 8007070:	041b      	lsls	r3, r3, #16
 8007072:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007076:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	4313      	orrs	r3, r2
 8007080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007084:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	0d5b      	lsrs	r3, r3, #21
 8007090:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <I2C_TransferConfig+0xf4>)
 8007096:	430b      	orrs	r3, r1
 8007098:	43db      	mvns	r3, r3
 800709a:	ea02 0103 	and.w	r1, r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070a8:	bf00      	nop
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40005400 	.word	0x40005400
 80070b4:	40005800 	.word	0x40005800
 80070b8:	40005c00 	.word	0x40005c00
 80070bc:	40006000 	.word	0x40006000
 80070c0:	0800fbf4 	.word	0x0800fbf4
 80070c4:	80004000 	.word	0x80004000
 80070c8:	80002400 	.word	0x80002400
 80070cc:	80002000 	.word	0x80002000
 80070d0:	03ff63ff 	.word	0x03ff63ff

080070d4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	4a2d      	ldr	r2, [pc, #180]	; (80071a0 <I2C_Enable_IRQ+0xcc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80070f2:	4a2c      	ldr	r2, [pc, #176]	; (80071a4 <I2C_Enable_IRQ+0xd0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d11d      	bne.n	8007134 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80070f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	da03      	bge.n	8007108 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007106:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	2b10      	cmp	r3, #16
 800710c:	d103      	bne.n	8007116 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007114:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	2b20      	cmp	r3, #32
 800711a:	d103      	bne.n	8007124 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007122:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007124:	887b      	ldrh	r3, [r7, #2]
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d12c      	bne.n	8007184 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007130:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007132:	e027      	b.n	8007184 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007134:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007138:	2b00      	cmp	r3, #0
 800713a:	da03      	bge.n	8007144 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007142:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007144:	887b      	ldrh	r3, [r7, #2]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007154:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007156:	887b      	ldrh	r3, [r7, #2]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007166:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007168:	887b      	ldrh	r3, [r7, #2]
 800716a:	2b10      	cmp	r3, #16
 800716c:	d103      	bne.n	8007176 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007174:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007176:	887b      	ldrh	r3, [r7, #2]
 8007178:	2b20      	cmp	r3, #32
 800717a:	d103      	bne.n	8007184 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f043 0320 	orr.w	r3, r3, #32
 8007182:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6819      	ldr	r1, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
}
 8007194:	bf00      	nop
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	08005b55 	.word	0x08005b55
 80071a4:	08005f85 	.word	0x08005f85

080071a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071b8:	887b      	ldrh	r3, [r7, #2]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80071c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071d6:	2b28      	cmp	r3, #40	; 0x28
 80071d8:	d003      	beq.n	80071e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80071e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071e2:	887b      	ldrh	r3, [r7, #2]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00f      	beq.n	800720c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80071f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007200:	2b28      	cmp	r3, #40	; 0x28
 8007202:	d003      	beq.n	800720c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800720a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800720c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da03      	bge.n	800721c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800721a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800721c:	887b      	ldrh	r3, [r7, #2]
 800721e:	2b10      	cmp	r3, #16
 8007220:	d103      	bne.n	800722a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007228:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	2b20      	cmp	r3, #32
 800722e:	d103      	bne.n	8007238 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f043 0320 	orr.w	r3, r3, #32
 8007236:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007238:	887b      	ldrh	r3, [r7, #2]
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d103      	bne.n	8007246 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007244:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6819      	ldr	r1, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	43da      	mvns	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	400a      	ands	r2, r1
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a32      	ldr	r2, [pc, #200]	; (800733c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d012      	beq.n	800729e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a30      	ldr	r2, [pc, #192]	; (8007340 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00d      	beq.n	800729e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a2f      	ldr	r2, [pc, #188]	; (8007344 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d008      	beq.n	800729e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a2d      	ldr	r2, [pc, #180]	; (8007348 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8007296:	215e      	movs	r1, #94	; 0x5e
 8007298:	482c      	ldr	r0, [pc, #176]	; (800734c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800729a:	f7f9 fe19 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d003      	beq.n	80072b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80072ac:	215f      	movs	r1, #95	; 0x5f
 80072ae:	4827      	ldr	r0, [pc, #156]	; (800734c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80072b0:	f7f9 fe0e 	bl	8000ed0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d138      	bne.n	8007332 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e032      	b.n	8007334 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2224      	movs	r2, #36	; 0x24
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0201 	bic.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	e000      	b.n	8007334 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8007332:	2302      	movs	r3, #2
  }
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40005400 	.word	0x40005400
 8007340:	40005800 	.word	0x40005800
 8007344:	40005c00 	.word	0x40005c00
 8007348:	40006000 	.word	0x40006000
 800734c:	0800fc2c 	.word	0x0800fc2c

08007350 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a31      	ldr	r2, [pc, #196]	; (8007424 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d012      	beq.n	800738a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a2f      	ldr	r2, [pc, #188]	; (8007428 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00d      	beq.n	800738a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2e      	ldr	r2, [pc, #184]	; (800742c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d008      	beq.n	800738a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2c      	ldr	r2, [pc, #176]	; (8007430 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8007382:	218c      	movs	r1, #140	; 0x8c
 8007384:	482b      	ldr	r0, [pc, #172]	; (8007434 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8007386:	f7f9 fda3 	bl	8000ed0 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b0f      	cmp	r3, #15
 800738e:	d903      	bls.n	8007398 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8007390:	218d      	movs	r1, #141	; 0x8d
 8007392:	4828      	ldr	r0, [pc, #160]	; (8007434 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8007394:	f7f9 fd9c 	bl	8000ed0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d139      	bne.n	8007418 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e033      	b.n	800741a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2224      	movs	r2, #36	; 0x24
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e000      	b.n	800741a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007418:	2302      	movs	r3, #2
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40005400 	.word	0x40005400
 8007428:	40005800 	.word	0x40005800
 800742c:	40005c00 	.word	0x40005c00
 8007430:	40006000 	.word	0x40006000
 8007434:	0800fc2c 	.word	0x0800fc2c

08007438 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743a:	b08f      	sub	sp, #60	; 0x3c
 800743c:	af0a      	add	r7, sp, #40	; 0x28
 800743e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e124      	b.n	8007694 <HAL_PCD_Init+0x25c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007452:	d008      	beq.n	8007466 <HAL_PCD_Init+0x2e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a90      	ldr	r2, [pc, #576]	; (800769c <HAL_PCD_Init+0x264>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <HAL_PCD_Init+0x2e>
 800745e:	2187      	movs	r1, #135	; 0x87
 8007460:	488f      	ldr	r0, [pc, #572]	; (80076a0 <HAL_PCD_Init+0x268>)
 8007462:	f7f9 fd35 	bl	8000ed0 <assert_failed>

  USBx = hpcd->Instance;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7f9 ffb7 	bl	80013f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2203      	movs	r2, #3
 800748a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007496:	2b00      	cmp	r3, #0
 8007498:	d102      	bne.n	80074a0 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f003 fae7 	bl	800aa78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	687e      	ldr	r6, [r7, #4]
 80074b2:	466d      	mov	r5, sp
 80074b4:	f106 0410 	add.w	r4, r6, #16
 80074b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80074c8:	1d33      	adds	r3, r6, #4
 80074ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074cc:	6838      	ldr	r0, [r7, #0]
 80074ce:	f003 fa7b 	bl	800a9c8 <USB_CoreInit>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0d7      	b.n	8007694 <HAL_PCD_Init+0x25c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f003 fad5 	bl	800aa9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e04a      	b.n	800758c <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80074f6:	7bfa      	ldrb	r2, [r7, #15]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	333d      	adds	r3, #61	; 0x3d
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800750a:	7bfa      	ldrb	r2, [r7, #15]
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	333c      	adds	r3, #60	; 0x3c
 800751a:	7bfa      	ldrb	r2, [r7, #15]
 800751c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800751e:	7bfa      	ldrb	r2, [r7, #15]
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	b298      	uxth	r0, r3
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3344      	adds	r3, #68	; 0x44
 8007532:	4602      	mov	r2, r0
 8007534:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007536:	7bfa      	ldrb	r2, [r7, #15]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	3340      	adds	r3, #64	; 0x40
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800754a:	7bfa      	ldrb	r2, [r7, #15]
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	3348      	adds	r3, #72	; 0x48
 800755a:	2200      	movs	r2, #0
 800755c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800755e:	7bfa      	ldrb	r2, [r7, #15]
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	4613      	mov	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	334c      	adds	r3, #76	; 0x4c
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007572:	7bfa      	ldrb	r2, [r7, #15]
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	3354      	adds	r3, #84	; 0x54
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	3301      	adds	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	7bfa      	ldrb	r2, [r7, #15]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	429a      	cmp	r2, r3
 8007594:	d3af      	bcc.n	80074f6 <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	e044      	b.n	8007626 <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800759c:	7bfa      	ldrb	r2, [r7, #15]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075b2:	7bfa      	ldrb	r2, [r7, #15]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80075c4:	7bfa      	ldrb	r2, [r7, #15]
 80075c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075c8:	7bfa      	ldrb	r2, [r7, #15]
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075de:	7bfa      	ldrb	r2, [r7, #15]
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	440b      	add	r3, r1
 80075ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075f4:	7bfa      	ldrb	r2, [r7, #15]
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800760a:	7bfa      	ldrb	r2, [r7, #15]
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	3301      	adds	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
 8007626:	7bfa      	ldrb	r2, [r7, #15]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d3b5      	bcc.n	800759c <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	687e      	ldr	r6, [r7, #4]
 8007638:	466d      	mov	r5, sp
 800763a:	f106 0410 	add.w	r4, r6, #16
 800763e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007646:	e894 0003 	ldmia.w	r4, {r0, r1}
 800764a:	e885 0003 	stmia.w	r5, {r0, r1}
 800764e:	1d33      	adds	r3, r6, #4
 8007650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007652:	6838      	ldr	r0, [r7, #0]
 8007654:	f003 fa6e 	bl	800ab34 <USB_DevInit>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e014      	b.n	8007694 <HAL_PCD_Init+0x25c>
  }

  hpcd->USB_Address = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b01      	cmp	r3, #1
 8007680:	d102      	bne.n	8007688 <HAL_PCD_Init+0x250>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f80e 	bl	80076a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4618      	mov	r0, r3
 800768e:	f003 fc2c 	bl	800aeea <USB_DevDisconnect>

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	40040000 	.word	0x40040000
 80076a0:	0800fc68 	.word	0x0800fc68

080076a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	10000003 	.word	0x10000003

080076ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a04      	ldr	r2, [pc, #16]	; (8007708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bf00      	nop
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40007000 	.word	0x40007000

0800770c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007716:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	4a22      	ldr	r2, [pc, #136]	; (80077a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800771c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007720:	6413      	str	r3, [r2, #64]	; 0x40
 8007722:	4b20      	ldr	r3, [pc, #128]	; (80077a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800772e:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007738:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800773a:	f7fb fb5d 	bl	8002df8 <HAL_GetTick>
 800773e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007740:	e009      	b.n	8007756 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007742:	f7fb fb59 	bl	8002df8 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007750:	d901      	bls.n	8007756 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e022      	b.n	800779c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800775e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007762:	d1ee      	bne.n	8007742 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007764:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a0f      	ldr	r2, [pc, #60]	; (80077a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800776a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800776e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007770:	f7fb fb42 	bl	8002df8 <HAL_GetTick>
 8007774:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007776:	e009      	b.n	800778c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007778:	f7fb fb3e 	bl	8002df8 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007786:	d901      	bls.n	800778c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e007      	b.n	800779c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007798:	d1ee      	bne.n	8007778 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40023800 	.word	0x40023800
 80077a8:	40007000 	.word	0x40007000

080077ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e35c      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d904      	bls.n	80077d4 <HAL_RCC_OscConfig+0x28>
 80077ca:	f240 1163 	movw	r1, #355	; 0x163
 80077ce:	4892      	ldr	r0, [pc, #584]	; (8007a18 <HAL_RCC_OscConfig+0x26c>)
 80077d0:	f7f9 fb7e 	bl	8000ed0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 809a 	beq.w	8007916 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00e      	beq.n	8007808 <HAL_RCC_OscConfig+0x5c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f2:	d009      	beq.n	8007808 <HAL_RCC_OscConfig+0x5c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077fc:	d004      	beq.n	8007808 <HAL_RCC_OscConfig+0x5c>
 80077fe:	f240 1169 	movw	r1, #361	; 0x169
 8007802:	4885      	ldr	r0, [pc, #532]	; (8007a18 <HAL_RCC_OscConfig+0x26c>)
 8007804:	f7f9 fb64 	bl	8000ed0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007808:	4b84      	ldr	r3, [pc, #528]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 030c 	and.w	r3, r3, #12
 8007810:	2b04      	cmp	r3, #4
 8007812:	d00c      	beq.n	800782e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007814:	4b81      	ldr	r3, [pc, #516]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 030c 	and.w	r3, r3, #12
 800781c:	2b08      	cmp	r3, #8
 800781e:	d112      	bne.n	8007846 <HAL_RCC_OscConfig+0x9a>
 8007820:	4b7e      	ldr	r3, [pc, #504]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800782c:	d10b      	bne.n	8007846 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800782e:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d06c      	beq.n	8007914 <HAL_RCC_OscConfig+0x168>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d168      	bne.n	8007914 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e31a      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784e:	d106      	bne.n	800785e <HAL_RCC_OscConfig+0xb2>
 8007850:	4b72      	ldr	r3, [pc, #456]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a71      	ldr	r2, [pc, #452]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	e02e      	b.n	80078bc <HAL_RCC_OscConfig+0x110>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <HAL_RCC_OscConfig+0xd4>
 8007866:	4b6d      	ldr	r3, [pc, #436]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a6c      	ldr	r2, [pc, #432]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800786c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b6a      	ldr	r3, [pc, #424]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a69      	ldr	r2, [pc, #420]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e01d      	b.n	80078bc <HAL_RCC_OscConfig+0x110>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007888:	d10c      	bne.n	80078a4 <HAL_RCC_OscConfig+0xf8>
 800788a:	4b64      	ldr	r3, [pc, #400]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a63      	ldr	r2, [pc, #396]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	4b61      	ldr	r3, [pc, #388]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a60      	ldr	r2, [pc, #384]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800789c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e00b      	b.n	80078bc <HAL_RCC_OscConfig+0x110>
 80078a4:	4b5d      	ldr	r3, [pc, #372]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5c      	ldr	r2, [pc, #368]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80078aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	4b5a      	ldr	r3, [pc, #360]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a59      	ldr	r2, [pc, #356]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80078b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d013      	beq.n	80078ec <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c4:	f7fb fa98 	bl	8002df8 <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ca:	e008      	b.n	80078de <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078cc:	f7fb fa94 	bl	8002df8 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b64      	cmp	r3, #100	; 0x64
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e2ce      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	4b4f      	ldr	r3, [pc, #316]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0x120>
 80078ea:	e014      	b.n	8007916 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fb fa84 	bl	8002df8 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078f4:	f7fb fa80 	bl	8002df8 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b64      	cmp	r3, #100	; 0x64
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e2ba      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007906:	4b45      	ldr	r3, [pc, #276]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f0      	bne.n	80078f4 <HAL_RCC_OscConfig+0x148>
 8007912:	e000      	b.n	8007916 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8084 	beq.w	8007a2c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d008      	beq.n	800793e <HAL_RCC_OscConfig+0x192>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d004      	beq.n	800793e <HAL_RCC_OscConfig+0x192>
 8007934:	f240 119b 	movw	r1, #411	; 0x19b
 8007938:	4837      	ldr	r0, [pc, #220]	; (8007a18 <HAL_RCC_OscConfig+0x26c>)
 800793a:	f7f9 fac9 	bl	8000ed0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b1f      	cmp	r3, #31
 8007944:	d904      	bls.n	8007950 <HAL_RCC_OscConfig+0x1a4>
 8007946:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800794a:	4833      	ldr	r0, [pc, #204]	; (8007a18 <HAL_RCC_OscConfig+0x26c>)
 800794c:	f7f9 fac0 	bl	8000ed0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007950:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 030c 	and.w	r3, r3, #12
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800795c:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b08      	cmp	r3, #8
 8007966:	d11c      	bne.n	80079a2 <HAL_RCC_OscConfig+0x1f6>
 8007968:	4b2c      	ldr	r3, [pc, #176]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d116      	bne.n	80079a2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007974:	4b29      	ldr	r3, [pc, #164]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_OscConfig+0x1e0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d001      	beq.n	800798c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e277      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798c:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4920      	ldr	r1, [pc, #128]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 800799c:	4313      	orrs	r3, r2
 800799e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a0:	e044      	b.n	8007a2c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d023      	beq.n	80079f2 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079aa:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1b      	ldr	r2, [pc, #108]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b6:	f7fb fa1f 	bl	8002df8 <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079bc:	e008      	b.n	80079d0 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079be:	f7fb fa1b 	bl	8002df8 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e255      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d0:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0f0      	beq.n	80079be <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	490c      	ldr	r1, [pc, #48]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	600b      	str	r3, [r1, #0]
 80079f0:	e01c      	b.n	8007a2c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079f2:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <HAL_RCC_OscConfig+0x270>)
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fe:	f7fb f9fb 	bl	8002df8 <HAL_GetTick>
 8007a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a04:	e00c      	b.n	8007a20 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a06:	f7fb f9f7 	bl	8002df8 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d905      	bls.n	8007a20 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e231      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
 8007a18:	0800fca0 	.word	0x0800fca0
 8007a1c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a20:	4b7e      	ldr	r3, [pc, #504]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ec      	bne.n	8007a06 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d043      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_RCC_OscConfig+0x2a6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d004      	beq.n	8007a52 <HAL_RCC_OscConfig+0x2a6>
 8007a48:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007a4c:	4874      	ldr	r0, [pc, #464]	; (8007c20 <HAL_RCC_OscConfig+0x474>)
 8007a4e:	f7f9 fa3f 	bl	8000ed0 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d019      	beq.n	8007a8e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a5a:	4b70      	ldr	r3, [pc, #448]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	4a6f      	ldr	r2, [pc, #444]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007a60:	f043 0301 	orr.w	r3, r3, #1
 8007a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a66:	f7fb f9c7 	bl	8002df8 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6e:	f7fb f9c3 	bl	8002df8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e1fd      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a80:	4b66      	ldr	r3, [pc, #408]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x2c2>
 8007a8c:	e018      	b.n	8007ac0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a8e:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a92:	4a62      	ldr	r2, [pc, #392]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9a:	f7fb f9ad 	bl	8002df8 <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aa2:	f7fb f9a9 	bl	8002df8 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e1e3      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f0      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80bc 	beq.w	8007c46 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <HAL_RCC_OscConfig+0x344>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d008      	beq.n	8007af0 <HAL_RCC_OscConfig+0x344>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d004      	beq.n	8007af0 <HAL_RCC_OscConfig+0x344>
 8007ae6:	f240 2106 	movw	r1, #518	; 0x206
 8007aea:	484d      	ldr	r0, [pc, #308]	; (8007c20 <HAL_RCC_OscConfig+0x474>)
 8007aec:	f7f9 f9f0 	bl	8000ed0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007af0:	4b4a      	ldr	r3, [pc, #296]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10d      	bne.n	8007b18 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007afc:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	4a46      	ldr	r2, [pc, #280]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b06:	6413      	str	r3, [r2, #64]	; 0x40
 8007b08:	4b44      	ldr	r3, [pc, #272]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b14:	2301      	movs	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b18:	4b42      	ldr	r3, [pc, #264]	; (8007c24 <HAL_RCC_OscConfig+0x478>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d118      	bne.n	8007b56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b24:	4b3f      	ldr	r3, [pc, #252]	; (8007c24 <HAL_RCC_OscConfig+0x478>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a3e      	ldr	r2, [pc, #248]	; (8007c24 <HAL_RCC_OscConfig+0x478>)
 8007b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b30:	f7fb f962 	bl	8002df8 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b38:	f7fb f95e 	bl	8002df8 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b64      	cmp	r3, #100	; 0x64
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e198      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b4a:	4b36      	ldr	r3, [pc, #216]	; (8007c24 <HAL_RCC_OscConfig+0x478>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCC_OscConfig+0x3c0>
 8007b5e:	4b2f      	ldr	r3, [pc, #188]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	4a2e      	ldr	r2, [pc, #184]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70
 8007b6a:	e02d      	b.n	8007bc8 <HAL_RCC_OscConfig+0x41c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10c      	bne.n	8007b8e <HAL_RCC_OscConfig+0x3e2>
 8007b74:	4b29      	ldr	r3, [pc, #164]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	4a28      	ldr	r2, [pc, #160]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b80:	4b26      	ldr	r3, [pc, #152]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	4a25      	ldr	r2, [pc, #148]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b86:	f023 0304 	bic.w	r3, r3, #4
 8007b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b8c:	e01c      	b.n	8007bc8 <HAL_RCC_OscConfig+0x41c>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d10c      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x404>
 8007b96:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9a:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007b9c:	f043 0304 	orr.w	r3, r3, #4
 8007ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ba2:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	6713      	str	r3, [r2, #112]	; 0x70
 8007bae:	e00b      	b.n	8007bc8 <HAL_RCC_OscConfig+0x41c>
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb4:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	6713      	str	r3, [r2, #112]	; 0x70
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007bc2:	f023 0304 	bic.w	r3, r3, #4
 8007bc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d015      	beq.n	8007bfc <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd0:	f7fb f912 	bl	8002df8 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd6:	e00a      	b.n	8007bee <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd8:	f7fb f90e 	bl	8002df8 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e146      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bee:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCC_OscConfig+0x470>)
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0ee      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x42c>
 8007bfa:	e01b      	b.n	8007c34 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bfc:	f7fb f8fc 	bl	8002df8 <HAL_GetTick>
 8007c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c02:	e011      	b.n	8007c28 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c04:	f7fb f8f8 	bl	8002df8 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d908      	bls.n	8007c28 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e130      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	0800fca0 	.word	0x0800fca0
 8007c24:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c28:	4b96      	ldr	r3, [pc, #600]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e7      	bne.n	8007c04 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d105      	bne.n	8007c46 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c3a:	4b92      	ldr	r3, [pc, #584]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	4a91      	ldr	r2, [pc, #580]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <HAL_RCC_OscConfig+0x4bc>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d008      	beq.n	8007c68 <HAL_RCC_OscConfig+0x4bc>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d004      	beq.n	8007c68 <HAL_RCC_OscConfig+0x4bc>
 8007c5e:	f240 214a 	movw	r1, #586	; 0x24a
 8007c62:	4889      	ldr	r0, [pc, #548]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007c64:	f7f9 f934 	bl	8000ed0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8104 	beq.w	8007e7a <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c72:	4b84      	ldr	r3, [pc, #528]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 030c 	and.w	r3, r3, #12
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	f000 80c3 	beq.w	8007e06 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	f040 80a4 	bne.w	8007dd2 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x4fa>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c9a:	d004      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x4fa>
 8007c9c:	f240 2153 	movw	r1, #595	; 0x253
 8007ca0:	4879      	ldr	r0, [pc, #484]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007ca2:	f7f9 f915 	bl	8000ed0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d903      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x50a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8007cb4:	d904      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x514>
 8007cb6:	f44f 7115 	mov.w	r1, #596	; 0x254
 8007cba:	4873      	ldr	r0, [pc, #460]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007cbc:	f7f9 f908 	bl	8000ed0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	2b31      	cmp	r3, #49	; 0x31
 8007cc6:	d904      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x526>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007cd0:	d904      	bls.n	8007cdc <HAL_RCC_OscConfig+0x530>
 8007cd2:	f240 2155 	movw	r1, #597	; 0x255
 8007cd6:	486c      	ldr	r0, [pc, #432]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007cd8:	f7f9 f8fa 	bl	8000ed0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d010      	beq.n	8007d06 <HAL_RCC_OscConfig+0x55a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d00c      	beq.n	8007d06 <HAL_RCC_OscConfig+0x55a>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	2b06      	cmp	r3, #6
 8007cf2:	d008      	beq.n	8007d06 <HAL_RCC_OscConfig+0x55a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d004      	beq.n	8007d06 <HAL_RCC_OscConfig+0x55a>
 8007cfc:	f240 2156 	movw	r1, #598	; 0x256
 8007d00:	4861      	ldr	r0, [pc, #388]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007d02:	f7f9 f8e5 	bl	8000ed0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d903      	bls.n	8007d16 <HAL_RCC_OscConfig+0x56a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d904      	bls.n	8007d20 <HAL_RCC_OscConfig+0x574>
 8007d16:	f240 2157 	movw	r1, #599	; 0x257
 8007d1a:	485b      	ldr	r0, [pc, #364]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007d1c:	f7f9 f8d8 	bl	8000ed0 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d903      	bls.n	8007d30 <HAL_RCC_OscConfig+0x584>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	2b07      	cmp	r3, #7
 8007d2e:	d904      	bls.n	8007d3a <HAL_RCC_OscConfig+0x58e>
 8007d30:	f240 2159 	movw	r1, #601	; 0x259
 8007d34:	4854      	ldr	r0, [pc, #336]	; (8007e88 <HAL_RCC_OscConfig+0x6dc>)
 8007d36:	f7f9 f8cb 	bl	8000ed0 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3a:	4b52      	ldr	r3, [pc, #328]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a51      	ldr	r2, [pc, #324]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d46:	f7fb f857 	bl	8002df8 <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d4e:	f7fb f853 	bl	8002df8 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e08d      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d60:	4b48      	ldr	r3, [pc, #288]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f0      	bne.n	8007d4e <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	019b      	lsls	r3, r3, #6
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	3b01      	subs	r3, #1
 8007d86:	041b      	lsls	r3, r3, #16
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	061b      	lsls	r3, r3, #24
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d96:	071b      	lsls	r3, r3, #28
 8007d98:	493a      	ldr	r1, [pc, #232]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d9e:	4b39      	ldr	r3, [pc, #228]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a38      	ldr	r2, [pc, #224]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007daa:	f7fb f825 	bl	8002df8 <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db2:	f7fb f821 	bl	8002df8 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e05b      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc4:	4b2f      	ldr	r3, [pc, #188]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <HAL_RCC_OscConfig+0x606>
 8007dd0:	e053      	b.n	8007e7a <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd2:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2b      	ldr	r2, [pc, #172]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dde:	f7fb f80b 	bl	8002df8 <HAL_GetTick>
 8007de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007de4:	e008      	b.n	8007df8 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de6:	f7fb f807 	bl	8002df8 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e041      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df8:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f0      	bne.n	8007de6 <HAL_RCC_OscConfig+0x63a>
 8007e04:	e039      	b.n	8007e7a <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e06:	4b1f      	ldr	r3, [pc, #124]	; (8007e84 <HAL_RCC_OscConfig+0x6d8>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d030      	beq.n	8007e76 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d129      	bne.n	8007e76 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d122      	bne.n	8007e76 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e36:	4013      	ands	r3, r2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e3c:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d119      	bne.n	8007e76 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d10f      	bne.n	8007e76 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d107      	bne.n	8007e76 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d001      	beq.n	8007e7a <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40023800 	.word	0x40023800
 8007e88:	0800fca0 	.word	0x0800fca0

08007e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e18c      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x28>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b0f      	cmp	r3, #15
 8007eb2:	d904      	bls.n	8007ebe <HAL_RCC_ClockConfig+0x32>
 8007eb4:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007eb8:	4887      	ldr	r0, [pc, #540]	; (80080d8 <HAL_RCC_ClockConfig+0x24c>)
 8007eba:	f7f9 f809 	bl	8000ed0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d031      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d02e      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d02b      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d028      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d025      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d022      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d01f      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b07      	cmp	r3, #7
 8007eec:	d01c      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d019      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d016      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b0a      	cmp	r3, #10
 8007efe:	d013      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b0b      	cmp	r3, #11
 8007f04:	d010      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b0c      	cmp	r3, #12
 8007f0a:	d00d      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b0d      	cmp	r3, #13
 8007f10:	d00a      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b0e      	cmp	r3, #14
 8007f16:	d007      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b0f      	cmp	r3, #15
 8007f1c:	d004      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x9c>
 8007f1e:	f240 21de 	movw	r1, #734	; 0x2de
 8007f22:	486d      	ldr	r0, [pc, #436]	; (80080d8 <HAL_RCC_ClockConfig+0x24c>)
 8007f24:	f7f8 ffd4 	bl	8000ed0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f28:	4b6c      	ldr	r3, [pc, #432]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d910      	bls.n	8007f58 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f36:	4b69      	ldr	r3, [pc, #420]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f023 020f 	bic.w	r2, r3, #15
 8007f3e:	4967      	ldr	r1, [pc, #412]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f46:	4b65      	ldr	r3, [pc, #404]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e132      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d049      	beq.n	8007ff8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f70:	4b5b      	ldr	r3, [pc, #364]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	4a5a      	ldr	r2, [pc, #360]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f88:	4b55      	ldr	r3, [pc, #340]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	4a54      	ldr	r2, [pc, #336]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d024      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b80      	cmp	r3, #128	; 0x80
 8007fa2:	d020      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b90      	cmp	r3, #144	; 0x90
 8007faa:	d01c      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2ba0      	cmp	r3, #160	; 0xa0
 8007fb2:	d018      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2bb0      	cmp	r3, #176	; 0xb0
 8007fba:	d014      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2bc0      	cmp	r3, #192	; 0xc0
 8007fc2:	d010      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2bd0      	cmp	r3, #208	; 0xd0
 8007fca:	d00c      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2be0      	cmp	r3, #224	; 0xe0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2bf0      	cmp	r3, #240	; 0xf0
 8007fda:	d004      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x15a>
 8007fdc:	f240 3102 	movw	r1, #770	; 0x302
 8007fe0:	483d      	ldr	r0, [pc, #244]	; (80080d8 <HAL_RCC_ClockConfig+0x24c>)
 8007fe2:	f7f8 ff75 	bl	8000ed0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe6:	4b3e      	ldr	r3, [pc, #248]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	493b      	ldr	r1, [pc, #236]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d051      	beq.n	80080a8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00c      	beq.n	8008026 <HAL_RCC_ClockConfig+0x19a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d008      	beq.n	8008026 <HAL_RCC_ClockConfig+0x19a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d004      	beq.n	8008026 <HAL_RCC_ClockConfig+0x19a>
 800801c:	f240 3109 	movw	r1, #777	; 0x309
 8008020:	482d      	ldr	r0, [pc, #180]	; (80080d8 <HAL_RCC_ClockConfig+0x24c>)
 8008022:	f7f8 ff55 	bl	8000ed0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d107      	bne.n	800803e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800802e:	4b2c      	ldr	r3, [pc, #176]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d115      	bne.n	8008066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e0bf      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d107      	bne.n	8008056 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008046:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e0b3      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008056:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e0ab      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008066:	4b1e      	ldr	r3, [pc, #120]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f023 0203 	bic.w	r2, r3, #3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	491b      	ldr	r1, [pc, #108]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008074:	4313      	orrs	r3, r2
 8008076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008078:	f7fa febe 	bl	8002df8 <HAL_GetTick>
 800807c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807e:	e00a      	b.n	8008096 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008080:	f7fa feba 	bl	8002df8 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	f241 3288 	movw	r2, #5000	; 0x1388
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e093      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 020c 	and.w	r2, r3, #12
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d1eb      	bne.n	8008080 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080a8:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d216      	bcs.n	80080e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080b6:	4b09      	ldr	r3, [pc, #36]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f023 020f 	bic.w	r2, r3, #15
 80080be:	4907      	ldr	r1, [pc, #28]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <HAL_RCC_ClockConfig+0x250>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d007      	beq.n	80080e4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e072      	b.n	80081be <HAL_RCC_ClockConfig+0x332>
 80080d8:	0800fca0 	.word	0x0800fca0
 80080dc:	40023c00 	.word	0x40023c00
 80080e0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d025      	beq.n	800813c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d018      	beq.n	800812a <HAL_RCC_ClockConfig+0x29e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008100:	d013      	beq.n	800812a <HAL_RCC_ClockConfig+0x29e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800810a:	d00e      	beq.n	800812a <HAL_RCC_ClockConfig+0x29e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008114:	d009      	beq.n	800812a <HAL_RCC_ClockConfig+0x29e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800811e:	d004      	beq.n	800812a <HAL_RCC_ClockConfig+0x29e>
 8008120:	f240 3146 	movw	r1, #838	; 0x346
 8008124:	4828      	ldr	r0, [pc, #160]	; (80081c8 <HAL_RCC_ClockConfig+0x33c>)
 8008126:	f7f8 fed3 	bl	8000ed0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800812a:	4b28      	ldr	r3, [pc, #160]	; (80081cc <HAL_RCC_ClockConfig+0x340>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	4925      	ldr	r1, [pc, #148]	; (80081cc <HAL_RCC_ClockConfig+0x340>)
 8008138:	4313      	orrs	r3, r2
 800813a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d026      	beq.n	8008196 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d018      	beq.n	8008182 <HAL_RCC_ClockConfig+0x2f6>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008158:	d013      	beq.n	8008182 <HAL_RCC_ClockConfig+0x2f6>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008162:	d00e      	beq.n	8008182 <HAL_RCC_ClockConfig+0x2f6>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800816c:	d009      	beq.n	8008182 <HAL_RCC_ClockConfig+0x2f6>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008176:	d004      	beq.n	8008182 <HAL_RCC_ClockConfig+0x2f6>
 8008178:	f240 314d 	movw	r1, #845	; 0x34d
 800817c:	4812      	ldr	r0, [pc, #72]	; (80081c8 <HAL_RCC_ClockConfig+0x33c>)
 800817e:	f7f8 fea7 	bl	8000ed0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008182:	4b12      	ldr	r3, [pc, #72]	; (80081cc <HAL_RCC_ClockConfig+0x340>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	490e      	ldr	r1, [pc, #56]	; (80081cc <HAL_RCC_ClockConfig+0x340>)
 8008192:	4313      	orrs	r3, r2
 8008194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008196:	f000 f821 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 800819a:	4602      	mov	r2, r0
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <HAL_RCC_ClockConfig+0x340>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	091b      	lsrs	r3, r3, #4
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	490a      	ldr	r1, [pc, #40]	; (80081d0 <HAL_RCC_ClockConfig+0x344>)
 80081a8:	5ccb      	ldrb	r3, [r1, r3]
 80081aa:	fa22 f303 	lsr.w	r3, r2, r3
 80081ae:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <HAL_RCC_ClockConfig+0x348>)
 80081b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <HAL_RCC_ClockConfig+0x34c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f9 f996 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	0800fca0 	.word	0x0800fca0
 80081cc:	40023800 	.word	0x40023800
 80081d0:	0800fe80 	.word	0x0800fe80
 80081d4:	20000004 	.word	0x20000004
 80081d8:	20000008 	.word	0x20000008

080081dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e0:	b094      	sub	sp, #80	; 0x50
 80081e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	647b      	str	r3, [r7, #68]	; 0x44
 80081e8:	2300      	movs	r3, #0
 80081ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ec:	2300      	movs	r3, #0
 80081ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081f4:	4b79      	ldr	r3, [pc, #484]	; (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 030c 	and.w	r3, r3, #12
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d00d      	beq.n	800821c <HAL_RCC_GetSysClockFreq+0x40>
 8008200:	2b08      	cmp	r3, #8
 8008202:	f200 80e1 	bhi.w	80083c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_RCC_GetSysClockFreq+0x34>
 800820a:	2b04      	cmp	r3, #4
 800820c:	d003      	beq.n	8008216 <HAL_RCC_GetSysClockFreq+0x3a>
 800820e:	e0db      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008210:	4b73      	ldr	r3, [pc, #460]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008214:	e0db      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008216:	4b73      	ldr	r3, [pc, #460]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800821a:	e0d8      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800821c:	4b6f      	ldr	r3, [pc, #444]	; (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008224:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008226:	4b6d      	ldr	r3, [pc, #436]	; (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d063      	beq.n	80082fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008232:	4b6a      	ldr	r3, [pc, #424]	; (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	099b      	lsrs	r3, r3, #6
 8008238:	2200      	movs	r2, #0
 800823a:	63bb      	str	r3, [r7, #56]	; 0x38
 800823c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008244:	633b      	str	r3, [r7, #48]	; 0x30
 8008246:	2300      	movs	r3, #0
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
 800824a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800824e:	4622      	mov	r2, r4
 8008250:	462b      	mov	r3, r5
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f04f 0100 	mov.w	r1, #0
 800825a:	0159      	lsls	r1, r3, #5
 800825c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008260:	0150      	lsls	r0, r2, #5
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4621      	mov	r1, r4
 8008268:	1a51      	subs	r1, r2, r1
 800826a:	6139      	str	r1, [r7, #16]
 800826c:	4629      	mov	r1, r5
 800826e:	eb63 0301 	sbc.w	r3, r3, r1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008280:	4659      	mov	r1, fp
 8008282:	018b      	lsls	r3, r1, #6
 8008284:	4651      	mov	r1, sl
 8008286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800828a:	4651      	mov	r1, sl
 800828c:	018a      	lsls	r2, r1, #6
 800828e:	4651      	mov	r1, sl
 8008290:	ebb2 0801 	subs.w	r8, r2, r1
 8008294:	4659      	mov	r1, fp
 8008296:	eb63 0901 	sbc.w	r9, r3, r1
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082ae:	4690      	mov	r8, r2
 80082b0:	4699      	mov	r9, r3
 80082b2:	4623      	mov	r3, r4
 80082b4:	eb18 0303 	adds.w	r3, r8, r3
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	462b      	mov	r3, r5
 80082bc:	eb49 0303 	adc.w	r3, r9, r3
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80082ce:	4629      	mov	r1, r5
 80082d0:	024b      	lsls	r3, r1, #9
 80082d2:	4621      	mov	r1, r4
 80082d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082d8:	4621      	mov	r1, r4
 80082da:	024a      	lsls	r2, r1, #9
 80082dc:	4610      	mov	r0, r2
 80082de:	4619      	mov	r1, r3
 80082e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e2:	2200      	movs	r2, #0
 80082e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80082e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ec:	f7f7 ffee 	bl	80002cc <__aeabi_uldivmod>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4613      	mov	r3, r2
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f8:	e058      	b.n	80083ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082fa:	4b38      	ldr	r3, [pc, #224]	; (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	099b      	lsrs	r3, r3, #6
 8008300:	2200      	movs	r2, #0
 8008302:	4618      	mov	r0, r3
 8008304:	4611      	mov	r1, r2
 8008306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800830a:	623b      	str	r3, [r7, #32]
 800830c:	2300      	movs	r3, #0
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
 8008310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008314:	4642      	mov	r2, r8
 8008316:	464b      	mov	r3, r9
 8008318:	f04f 0000 	mov.w	r0, #0
 800831c:	f04f 0100 	mov.w	r1, #0
 8008320:	0159      	lsls	r1, r3, #5
 8008322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008326:	0150      	lsls	r0, r2, #5
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4641      	mov	r1, r8
 800832e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008332:	4649      	mov	r1, r9
 8008334:	eb63 0b01 	sbc.w	fp, r3, r1
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800834c:	ebb2 040a 	subs.w	r4, r2, sl
 8008350:	eb63 050b 	sbc.w	r5, r3, fp
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	00eb      	lsls	r3, r5, #3
 800835e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008362:	00e2      	lsls	r2, r4, #3
 8008364:	4614      	mov	r4, r2
 8008366:	461d      	mov	r5, r3
 8008368:	4643      	mov	r3, r8
 800836a:	18e3      	adds	r3, r4, r3
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	464b      	mov	r3, r9
 8008370:	eb45 0303 	adc.w	r3, r5, r3
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008382:	4629      	mov	r1, r5
 8008384:	028b      	lsls	r3, r1, #10
 8008386:	4621      	mov	r1, r4
 8008388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800838c:	4621      	mov	r1, r4
 800838e:	028a      	lsls	r2, r1, #10
 8008390:	4610      	mov	r0, r2
 8008392:	4619      	mov	r1, r3
 8008394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008396:	2200      	movs	r2, #0
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	61fa      	str	r2, [r7, #28]
 800839c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083a0:	f7f7 ff94 	bl	80002cc <__aeabi_uldivmod>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4613      	mov	r3, r2
 80083aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	0c1b      	lsrs	r3, r3, #16
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	3301      	adds	r3, #1
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80083bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083c6:	e002      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80083ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3750      	adds	r7, #80	; 0x50
 80083d4:	46bd      	mov	sp, r7
 80083d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	00f42400 	.word	0x00f42400
 80083e4:	007a1200 	.word	0x007a1200

080083e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083ec:	4b03      	ldr	r3, [pc, #12]	; (80083fc <HAL_RCC_GetHCLKFreq+0x14>)
 80083ee:	681b      	ldr	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000004 	.word	0x20000004

08008400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008404:	f7ff fff0 	bl	80083e8 <HAL_RCC_GetHCLKFreq>
 8008408:	4602      	mov	r2, r0
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	0a9b      	lsrs	r3, r3, #10
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	4903      	ldr	r1, [pc, #12]	; (8008424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008416:	5ccb      	ldrb	r3, [r1, r3]
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800841c:	4618      	mov	r0, r3
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40023800 	.word	0x40023800
 8008424:	0800fe90 	.word	0x0800fe90

08008428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800842c:	f7ff ffdc 	bl	80083e8 <HAL_RCC_GetHCLKFreq>
 8008430:	4602      	mov	r2, r0
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	0b5b      	lsrs	r3, r3, #13
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	4903      	ldr	r1, [pc, #12]	; (800844c <HAL_RCC_GetPCLK2Freq+0x24>)
 800843e:	5ccb      	ldrb	r3, [r1, r3]
 8008440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008444:	4618      	mov	r0, r3
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40023800 	.word	0x40023800
 800844c:	0800fe90 	.word	0x0800fe90

08008450 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220f      	movs	r2, #15
 800845e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008460:	4b12      	ldr	r3, [pc, #72]	; (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0203 	and.w	r2, r3, #3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008478:	4b0c      	ldr	r3, [pc, #48]	; (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008484:	4b09      	ldr	r3, [pc, #36]	; (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <HAL_RCC_GetClockConfig+0x60>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 020f 	and.w	r2, r3, #15
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	601a      	str	r2, [r3, #0]
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40023800 	.word	0x40023800
 80084b0:	40023c00 	.word	0x40023c00

080084b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 809e 	bne.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f040 8097 	bne.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f040 8090 	bne.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 8089 	bne.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008510:	2b00      	cmp	r3, #0
 8008512:	f040 8082 	bne.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d17b      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800852a:	2b00      	cmp	r3, #0
 800852c:	d175      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008536:	2b00      	cmp	r3, #0
 8008538:	d16f      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008542:	2b00      	cmp	r3, #0
 8008544:	d169      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d163      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d15d      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d157      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d151      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d14b      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d145      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d13f      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d139      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d133      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d12d      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d127      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d121      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d11b      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d115      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10f      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008612:	2172      	movs	r1, #114	; 0x72
 8008614:	4895      	ldr	r0, [pc, #596]	; (800886c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8008616:	f7f8 fc5b 	bl	8000ed0 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01f      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008636:	d003      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008638:	2178      	movs	r1, #120	; 0x78
 800863a:	488c      	ldr	r0, [pc, #560]	; (800886c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800863c:	f7f8 fc48 	bl	8000ed0 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008640:	4b8b      	ldr	r3, [pc, #556]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	4a8a      	ldr	r2, [pc, #552]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008646:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800864a:	6093      	str	r3, [r2, #8]
 800864c:	4b88      	ldr	r3, [pc, #544]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	4986      	ldr	r1, [pc, #536]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008656:	4313      	orrs	r3, r2
 8008658:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8008662:	2301      	movs	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d02e      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d012      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008682:	d00d      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800868c:	d008      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008696:	d003      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8008698:	2188      	movs	r1, #136	; 0x88
 800869a:	4874      	ldr	r0, [pc, #464]	; (800886c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800869c:	f7f8 fc18 	bl	8000ed0 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086a0:	4b73      	ldr	r3, [pc, #460]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80086a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ae:	4970      	ldr	r1, [pc, #448]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086be:	d101      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 80086c0:	2301      	movs	r3, #1
 80086c2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 80086cc:	2301      	movs	r3, #1
 80086ce:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d02e      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d012      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ec:	d00d      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086f6:	d008      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008700:	d003      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008702:	219c      	movs	r1, #156	; 0x9c
 8008704:	4859      	ldr	r0, [pc, #356]	; (800886c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8008706:	f7f8 fbe3 	bl	8000ed0 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800870a:	4b59      	ldr	r3, [pc, #356]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800870c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008710:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	4955      	ldr	r1, [pc, #340]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800871a:	4313      	orrs	r3, r2
 800871c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008728:	d101      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8008736:	2301      	movs	r3, #1
 8008738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8185 	beq.w	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008760:	f000 80e0 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876c:	f000 80da 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	4a3f      	ldr	r2, [pc, #252]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f000 80d4 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008780:	4a3d      	ldr	r2, [pc, #244]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	f000 80ce 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878c:	4a3b      	ldr	r2, [pc, #236]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	f000 80c8 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	4a39      	ldr	r2, [pc, #228]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	f000 80c2 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	4a37      	ldr	r2, [pc, #220]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	f000 80bc 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b0:	4a35      	ldr	r2, [pc, #212]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	f000 80b6 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087bc:	4a33      	ldr	r2, [pc, #204]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	f000 80b0 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	4a31      	ldr	r2, [pc, #196]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f000 80aa 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	4a2f      	ldr	r2, [pc, #188]	; (8008894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f000 80a4 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	4a2d      	ldr	r2, [pc, #180]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f000 809e 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	4a2b      	ldr	r2, [pc, #172]	; (800889c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f000 8098 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f000 8092 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	4a27      	ldr	r2, [pc, #156]	; (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	f000 808c 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	4a25      	ldr	r2, [pc, #148]	; (80088a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f000 8086 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	4a23      	ldr	r2, [pc, #140]	; (80088ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	f000 8080 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d07a      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	4a20      	ldr	r2, [pc, #128]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d075      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883c:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d070      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	4a1d      	ldr	r2, [pc, #116]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d06b      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	4a1b      	ldr	r2, [pc, #108]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d066      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d061      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	4a18      	ldr	r2, [pc, #96]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d05c      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800886a:	e02f      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800886c:	0800fcd8 	.word	0x0800fcd8
 8008870:	40023800 	.word	0x40023800
 8008874:	00020300 	.word	0x00020300
 8008878:	00030300 	.word	0x00030300
 800887c:	00040300 	.word	0x00040300
 8008880:	00050300 	.word	0x00050300
 8008884:	00060300 	.word	0x00060300
 8008888:	00070300 	.word	0x00070300
 800888c:	00080300 	.word	0x00080300
 8008890:	00090300 	.word	0x00090300
 8008894:	000a0300 	.word	0x000a0300
 8008898:	000b0300 	.word	0x000b0300
 800889c:	000c0300 	.word	0x000c0300
 80088a0:	000d0300 	.word	0x000d0300
 80088a4:	000e0300 	.word	0x000e0300
 80088a8:	000f0300 	.word	0x000f0300
 80088ac:	00100300 	.word	0x00100300
 80088b0:	00110300 	.word	0x00110300
 80088b4:	00120300 	.word	0x00120300
 80088b8:	00130300 	.word	0x00130300
 80088bc:	00140300 	.word	0x00140300
 80088c0:	00150300 	.word	0x00150300
 80088c4:	00160300 	.word	0x00160300
 80088c8:	00170300 	.word	0x00170300
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	4a50      	ldr	r2, [pc, #320]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d026      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	4a4f      	ldr	r2, [pc, #316]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d021      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e4:	4a4d      	ldr	r2, [pc, #308]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01c      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	4a4c      	ldr	r2, [pc, #304]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d017      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	4a4a      	ldr	r2, [pc, #296]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d012      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	4a49      	ldr	r2, [pc, #292]	; (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00d      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	4a47      	ldr	r2, [pc, #284]	; (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d008      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4a46      	ldr	r2, [pc, #280]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800891c:	21b7      	movs	r1, #183	; 0xb7
 800891e:	4845      	ldr	r0, [pc, #276]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8008920:	f7f8 fad6 	bl	8000ed0 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008924:	4b44      	ldr	r3, [pc, #272]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	4a43      	ldr	r2, [pc, #268]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800892a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892e:	6413      	str	r3, [r2, #64]	; 0x40
 8008930:	4b41      	ldr	r3, [pc, #260]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008938:	60bb      	str	r3, [r7, #8]
 800893a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800893c:	4b3f      	ldr	r3, [pc, #252]	; (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a3e      	ldr	r2, [pc, #248]	; (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8008942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008948:	f7fa fa56 	bl	8002df8 <HAL_GetTick>
 800894c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800894e:	e009      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008950:	f7fa fa52 	bl	8002df8 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b64      	cmp	r3, #100	; 0x64
 800895c:	d902      	bls.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	f000 be0a 	b.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008964:	4b35      	ldr	r3, [pc, #212]	; (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0ef      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008970:	4b31      	ldr	r3, [pc, #196]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008978:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d036      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	429a      	cmp	r2, r3
 800898c:	d02f      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800898e:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008996:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008998:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800899a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899c:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800899e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089a2:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089a4:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	4a23      	ldr	r2, [pc, #140]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80089b0:	4a21      	ldr	r2, [pc, #132]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089b6:	4b20      	ldr	r3, [pc, #128]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d115      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x53a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c2:	f7fa fa19 	bl	8002df8 <HAL_GetTick>
 80089c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089c8:	e00b      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ca:	f7fa fa15 	bl	8002df8 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d8:	4293      	cmp	r3, r2
 80089da:	d902      	bls.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
          {
            return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	f000 bdcb 	b.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ed      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x516>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089fa:	d123      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80089fc:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a08:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	490a      	ldr	r1, [pc, #40]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	608b      	str	r3, [r1, #8]
 8008a12:	e01d      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008a14:	00180300 	.word	0x00180300
 8008a18:	00190300 	.word	0x00190300
 8008a1c:	001a0300 	.word	0x001a0300
 8008a20:	001b0300 	.word	0x001b0300
 8008a24:	001c0300 	.word	0x001c0300
 8008a28:	001d0300 	.word	0x001d0300
 8008a2c:	001e0300 	.word	0x001e0300
 8008a30:	001f0300 	.word	0x001f0300
 8008a34:	0800fcd8 	.word	0x0800fcd8
 8008a38:	40023800 	.word	0x40023800
 8008a3c:	40007000 	.word	0x40007000
 8008a40:	0ffffcff 	.word	0x0ffffcff
 8008a44:	4b9a      	ldr	r3, [pc, #616]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	4a99      	ldr	r2, [pc, #612]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a4e:	6093      	str	r3, [r2, #8]
 8008a50:	4b97      	ldr	r3, [pc, #604]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a5c:	4994      	ldr	r1, [pc, #592]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01d      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a7e:	d003      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008a80:	21f1      	movs	r1, #241	; 0xf1
 8008a82:	488c      	ldr	r0, [pc, #560]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008a84:	f7f8 fa24 	bl	8000ed0 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a88:	4b89      	ldr	r3, [pc, #548]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8e:	4a88      	ldr	r2, [pc, #544]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008a98:	4b85      	ldr	r3, [pc, #532]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a9a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	4983      	ldr	r1, [pc, #524]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01c      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00d      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac6:	d008      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad0:	d003      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008ad2:	21fb      	movs	r1, #251	; 0xfb
 8008ad4:	4877      	ldr	r0, [pc, #476]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008ad6:	f7f8 f9fb 	bl	8000ed0 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ada:	4b75      	ldr	r3, [pc, #468]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae8:	4971      	ldr	r1, [pc, #452]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01d      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00e      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b0c:	d009      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b16:	d004      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b18:	f240 1105 	movw	r1, #261	; 0x105
 8008b1c:	4865      	ldr	r0, [pc, #404]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b1e:	f7f8 f9d7 	bl	8000ed0 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b22:	4b63      	ldr	r3, [pc, #396]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b30:	495f      	ldr	r1, [pc, #380]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01d      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00e      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b54:	d009      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b5e:	d004      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008b60:	f240 110f 	movw	r1, #271	; 0x10f
 8008b64:	4853      	ldr	r0, [pc, #332]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b66:	f7f8 f9b3 	bl	8000ed0 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b6a:	4b51      	ldr	r3, [pc, #324]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b78:	494d      	ldr	r1, [pc, #308]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01d      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x714>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00e      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b9c:	d009      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ba6:	d004      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008ba8:	f240 1119 	movw	r1, #281	; 0x119
 8008bac:	4841      	ldr	r0, [pc, #260]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008bae:	f7f8 f98f 	bl	8000ed0 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bb2:	4b3f      	ldr	r3, [pc, #252]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc0:	493b      	ldr	r1, [pc, #236]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01f      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d010      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d00c      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d008      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d004      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008bf4:	f240 1123 	movw	r1, #291	; 0x123
 8008bf8:	482e      	ldr	r0, [pc, #184]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008bfa:	f7f8 f969 	bl	8000ed0 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bfe:	4b2c      	ldr	r3, [pc, #176]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f023 0203 	bic.w	r2, r3, #3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0c:	4928      	ldr	r1, [pc, #160]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01f      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d010      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d00c      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c34:	2b0c      	cmp	r3, #12
 8008c36:	d008      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d004      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c40:	f240 112d 	movw	r1, #301	; 0x12d
 8008c44:	481b      	ldr	r0, [pc, #108]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008c46:	f7f8 f943 	bl	8000ed0 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c4a:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c50:	f023 020c 	bic.w	r2, r3, #12
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c58:	4915      	ldr	r1, [pc, #84]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d025      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x804>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d010      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c78:	2b10      	cmp	r3, #16
 8008c7a:	d00c      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c80:	2b30      	cmp	r3, #48	; 0x30
 8008c82:	d008      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d004      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008c8c:	f240 1137 	movw	r1, #311	; 0x137
 8008c90:	4808      	ldr	r0, [pc, #32]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008c92:	f7f8 f91d 	bl	8000ed0 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c96:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca4:	4902      	ldr	r1, [pc, #8]	; (8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008cac:	e004      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8008cae:	bf00      	nop
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	0800fcd8 	.word	0x0800fcd8
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01f      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x850>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d010      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd0:	2b40      	cmp	r3, #64	; 0x40
 8008cd2:	d00c      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8008cda:	d008      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce0:	2b80      	cmp	r3, #128	; 0x80
 8008ce2:	d004      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008ce4:	f240 1141 	movw	r1, #321	; 0x141
 8008ce8:	48a0      	ldr	r0, [pc, #640]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008cea:	f7f8 f8f1 	bl	8000ed0 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cee:	4ba0      	ldr	r3, [pc, #640]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cfc:	499c      	ldr	r1, [pc, #624]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d022      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d013      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d20:	d00e      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d2a:	d009      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d34:	d004      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d36:	f240 114b 	movw	r1, #331	; 0x14b
 8008d3a:	488c      	ldr	r0, [pc, #560]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008d3c:	f7f8 f8c8 	bl	8000ed0 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d40:	4b8b      	ldr	r3, [pc, #556]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4e:	4988      	ldr	r1, [pc, #544]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d022      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d013      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d72:	d00e      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d7c:	d009      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d86:	d004      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008d88:	f240 1155 	movw	r1, #341	; 0x155
 8008d8c:	4877      	ldr	r0, [pc, #476]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008d8e:	f7f8 f89f 	bl	8000ed0 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008d92:	4b77      	ldr	r3, [pc, #476]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da0:	4973      	ldr	r1, [pc, #460]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d022      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x946>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d013      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d00e      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dce:	d009      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd8:	d004      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008dda:	f240 115f 	movw	r1, #351	; 0x15f
 8008dde:	4863      	ldr	r0, [pc, #396]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008de0:	f7f8 f876 	bl	8000ed0 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008de4:	4b62      	ldr	r3, [pc, #392]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df2:	495f      	ldr	r1, [pc, #380]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d022      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x998>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d013      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e16:	d00e      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e20:	d009      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2a:	d004      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e2c:	f240 1169 	movw	r1, #361	; 0x169
 8008e30:	484e      	ldr	r0, [pc, #312]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008e32:	f7f8 f84d 	bl	8000ed0 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008e36:	4b4e      	ldr	r3, [pc, #312]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e44:	494a      	ldr	r1, [pc, #296]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d018      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e60:	d008      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d004      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008e6a:	f240 1173 	movw	r1, #371	; 0x173
 8008e6e:	483f      	ldr	r0, [pc, #252]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008e70:	f7f8 f82e 	bl	8000ed0 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e74:	4b3e      	ldr	r3, [pc, #248]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e82:	493b      	ldr	r1, [pc, #236]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d01f      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e9e:	d008      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8008ea8:	f240 117d 	movw	r1, #381	; 0x17d
 8008eac:	482f      	ldr	r0, [pc, #188]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008eae:	f7f8 f80f 	bl	8000ed0 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008eb2:	4b2f      	ldr	r3, [pc, #188]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec0:	492b      	ldr	r1, [pc, #172]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ed0:	d101      	bne.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
    {
      pllsaiused = 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    pllsaiused = 1;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d022      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d013      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008efe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f02:	d00e      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0c:	d009      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f16:	d004      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f18:	f240 1195 	movw	r1, #405	; 0x195
 8008f1c:	4813      	ldr	r0, [pc, #76]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008f1e:	f7f7 ffd7 	bl	8000ed0 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f30:	490f      	ldr	r1, [pc, #60]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d020      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xad2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f4e:	d009      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008f5a:	f240 119f 	movw	r1, #415	; 0x19f
 8008f5e:	4803      	ldr	r0, [pc, #12]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008f60:	f7f7 ffb6 	bl	8000ed0 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6a:	e003      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8008f6c:	0800fcd8 	.word	0x0800fcd8
 8008f70:	40023800 	.word	0x40023800
 8008f74:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f7e:	4943      	ldr	r1, [pc, #268]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01b      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9c:	d009      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d004      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8008fa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fac:	4838      	ldr	r0, [pc, #224]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8008fae:	f7f7 ff8f 	bl	8000ed0 <assert_failed>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008fb2:	4b36      	ldr	r3, [pc, #216]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc2:	4932      	ldr	r1, [pc, #200]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01b      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fea:	d004      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8008fec:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8008ff0:	4827      	ldr	r0, [pc, #156]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8008ff2:	f7f7 ff6d 	bl	8000ed0 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ff6:	4b25      	ldr	r3, [pc, #148]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ffc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009006:	4921      	ldr	r1, [pc, #132]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8009008:	4313      	orrs	r3, r2
 800900a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d01b      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00a      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800902e:	d004      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009030:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8009034:	4816      	ldr	r0, [pc, #88]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8009036:	f7f7 ff4b 	bl	8000ed0 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800903a:	4b14      	ldr	r3, [pc, #80]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800903c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009040:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904a:	4910      	ldr	r1, [pc, #64]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800904c:	4313      	orrs	r3, r2
 800904e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d006      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8157 	beq.w	8009314 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a08      	ldr	r2, [pc, #32]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800906c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009072:	f7f9 fec1 	bl	8002df8 <HAL_GetTick>
 8009076:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009078:	e00c      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800907a:	f7f9 febd 	bl	8002df8 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2b64      	cmp	r3, #100	; 0x64
 8009086:	d905      	bls.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e275      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800908c:	40023800 	.word	0x40023800
 8009090:	0800fcd8 	.word	0x0800fcd8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009094:	4b9a      	ldr	r3, [pc, #616]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1ec      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	2b31      	cmp	r3, #49	; 0x31
 80090a6:	d904      	bls.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80090b0:	d904      	bls.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80090b2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80090b6:	4893      	ldr	r0, [pc, #588]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80090b8:	f7f7 ff0a 	bl	8000ed0 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d02e      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d12a      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d903      	bls.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b07      	cmp	r3, #7
 80090de:	d904      	bls.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80090e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80090e4:	4887      	ldr	r0, [pc, #540]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80090e6:	f7f7 fef3 	bl	8000ed0 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80090ea:	4b85      	ldr	r3, [pc, #532]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80090ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f0:	0c1b      	lsrs	r3, r3, #16
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090f8:	4b81      	ldr	r3, [pc, #516]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80090fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fe:	0e1b      	lsrs	r3, r3, #24
 8009100:	f003 030f 	and.w	r3, r3, #15
 8009104:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	019a      	lsls	r2, r3, #6
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	431a      	orrs	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	061b      	lsls	r3, r3, #24
 8009116:	431a      	orrs	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	071b      	lsls	r3, r3, #28
 800911e:	4978      	ldr	r1, [pc, #480]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009120:	4313      	orrs	r3, r2
 8009122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800913a:	d00a      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009144:	2b00      	cmp	r3, #0
 8009146:	d048      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009150:	d143      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d903      	bls.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	2b0f      	cmp	r3, #15
 8009160:	d904      	bls.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8009162:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009166:	4867      	ldr	r0, [pc, #412]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009168:	f7f7 feb2 	bl	8000ed0 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b20      	cmp	r3, #32
 800917a:	d904      	bls.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800917c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8009180:	4860      	ldr	r0, [pc, #384]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009182:	f7f7 fea5 	bl	8000ed0 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009186:	4b5e      	ldr	r3, [pc, #376]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918c:	0c1b      	lsrs	r3, r3, #16
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009194:	4b5a      	ldr	r3, [pc, #360]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919a:	0f1b      	lsrs	r3, r3, #28
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	019a      	lsls	r2, r3, #6
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	061b      	lsls	r3, r3, #24
 80091b4:	431a      	orrs	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	071b      	lsls	r3, r3, #28
 80091ba:	4951      	ldr	r1, [pc, #324]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80091c2:	4b4f      	ldr	r3, [pc, #316]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c8:	f023 021f 	bic.w	r2, r3, #31
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	3b01      	subs	r3, #1
 80091d2:	494b      	ldr	r1, [pc, #300]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d032      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d010      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d00c      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d008      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b03      	cmp	r3, #3
 8009204:	d004      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8009206:	f240 2105 	movw	r1, #517	; 0x205
 800920a:	483e      	ldr	r0, [pc, #248]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 800920c:	f7f7 fe60 	bl	8000ed0 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009210:	4b3b      	ldr	r3, [pc, #236]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009216:	0e1b      	lsrs	r3, r3, #24
 8009218:	f003 030f 	and.w	r3, r3, #15
 800921c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800921e:	4b38      	ldr	r3, [pc, #224]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009224:	0f1b      	lsrs	r3, r3, #28
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	019a      	lsls	r2, r3, #6
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	431a      	orrs	r2, r3
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	061b      	lsls	r3, r3, #24
 800923e:	431a      	orrs	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	071b      	lsls	r3, r3, #28
 8009244:	492e      	ldr	r1, [pc, #184]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009246:	4313      	orrs	r3, r2
 8009248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d040      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d010      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d00c      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d008      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d004      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009278:	f44f 7105 	mov.w	r1, #532	; 0x214
 800927c:	4821      	ldr	r0, [pc, #132]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 800927e:	f7f7 fe27 	bl	8000ed0 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d903      	bls.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b07      	cmp	r3, #7
 8009290:	d904      	bls.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8009292:	f240 2115 	movw	r1, #533	; 0x215
 8009296:	481b      	ldr	r0, [pc, #108]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009298:	f7f7 fe1a 	bl	8000ed0 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d903      	bls.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	2b0f      	cmp	r3, #15
 80092aa:	d904      	bls.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80092ac:	f240 2116 	movw	r1, #534	; 0x216
 80092b0:	4814      	ldr	r0, [pc, #80]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80092b2:	f7f7 fe0d 	bl	8000ed0 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	019a      	lsls	r2, r3, #6
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	041b      	lsls	r3, r3, #16
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	061b      	lsls	r3, r3, #24
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	071b      	lsls	r3, r3, #28
 80092d2:	490b      	ldr	r1, [pc, #44]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a08      	ldr	r2, [pc, #32]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80092e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e6:	f7f9 fd87 	bl	8002df8 <HAL_GetTick>
 80092ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092ec:	e00c      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092ee:	f7f9 fd83 	bl	8002df8 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b64      	cmp	r3, #100	; 0x64
 80092fa:	d905      	bls.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xe54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e13b      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8009300:	40023800 	.word	0x40023800
 8009304:	0800fcd8 	.word	0x0800fcd8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009308:	4b9d      	ldr	r3, [pc, #628]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0ec      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b01      	cmp	r3, #1
 8009318:	f040 812d 	bne.w	8009576 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800931c:	4b98      	ldr	r3, [pc, #608]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a97      	ldr	r2, [pc, #604]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009328:	f7f9 fd66 	bl	8002df8 <HAL_GetTick>
 800932c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800932e:	e008      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009330:	f7f9 fd62 	bl	8002df8 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	; 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e11a      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009342:	4b8f      	ldr	r3, [pc, #572]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800934e:	d0ef      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	2b31      	cmp	r3, #49	; 0x31
 8009356:	d904      	bls.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009360:	d904      	bls.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xeb8>
 8009362:	f44f 7111 	mov.w	r1, #580	; 0x244
 8009366:	4887      	ldr	r0, [pc, #540]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8009368:	f7f7 fdb2 	bl	8000ed0 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xecc>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d009      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xee0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009388:	2b00      	cmp	r3, #0
 800938a:	d048      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009390:	2b00      	cmp	r3, #0
 8009392:	d144      	bne.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d903      	bls.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xef0>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b0f      	cmp	r3, #15
 80093a2:	d904      	bls.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xefa>
 80093a4:	f240 214b 	movw	r1, #587	; 0x24b
 80093a8:	4876      	ldr	r0, [pc, #472]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80093aa:	f7f7 fd91 	bl	8000ed0 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xf0a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d904      	bls.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xf14>
 80093be:	f240 214d 	movw	r1, #589	; 0x24d
 80093c2:	4870      	ldr	r0, [pc, #448]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80093c4:	f7f7 fd84 	bl	8000ed0 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093c8:	4b6d      	ldr	r3, [pc, #436]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ce:	0c1b      	lsrs	r3, r3, #16
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093d6:	4b6a      	ldr	r3, [pc, #424]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093dc:	0f1b      	lsrs	r3, r3, #28
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	019a      	lsls	r2, r3, #6
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	041b      	lsls	r3, r3, #16
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	061b      	lsls	r3, r3, #24
 80093f6:	431a      	orrs	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	071b      	lsls	r3, r3, #28
 80093fc:	4960      	ldr	r1, [pc, #384]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009404:	4b5e      	ldr	r3, [pc, #376]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800940a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009412:	3b01      	subs	r3, #1
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	495a      	ldr	r1, [pc, #360]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d037      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800942e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009432:	d132      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d010      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d00c      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d008      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d004      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8009454:	f44f 7118 	mov.w	r1, #608	; 0x260
 8009458:	484a      	ldr	r0, [pc, #296]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800945a:	f7f7 fd39 	bl	8000ed0 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800945e:	4b48      	ldr	r3, [pc, #288]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009464:	0e1b      	lsrs	r3, r3, #24
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800946c:	4b44      	ldr	r3, [pc, #272]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800946e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009472:	0f1b      	lsrs	r3, r3, #28
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	019a      	lsls	r2, r3, #6
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	431a      	orrs	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	061b      	lsls	r3, r3, #24
 800948c:	431a      	orrs	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	071b      	lsls	r3, r3, #28
 8009492:	493b      	ldr	r1, [pc, #236]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009494:	4313      	orrs	r3, r2
 8009496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0308 	and.w	r3, r3, #8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d04d      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x108e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d903      	bls.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1002>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	d904      	bls.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x100c>
 80094b6:	f240 216f 	movw	r1, #623	; 0x26f
 80094ba:	4832      	ldr	r0, [pc, #200]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80094bc:	f7f7 fd08 	bl	8000ed0 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d013      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d0:	d00e      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094da:	d009      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094e4:	d004      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80094e6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80094ea:	4826      	ldr	r0, [pc, #152]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80094ec:	f7f7 fcf0 	bl	8000ed0 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094f0:	4b23      	ldr	r3, [pc, #140]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f6:	0e1b      	lsrs	r3, r3, #24
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80094fe:	4b20      	ldr	r3, [pc, #128]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	019a      	lsls	r2, r3, #6
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	431a      	orrs	r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	071b      	lsls	r3, r3, #28
 8009524:	4916      	ldr	r1, [pc, #88]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009526:	4313      	orrs	r3, r2
 8009528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800952c:	4b14      	ldr	r3, [pc, #80]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800952e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	4911      	ldr	r1, [pc, #68]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800953c:	4313      	orrs	r3, r2
 800953e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a0e      	ldr	r2, [pc, #56]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800954c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954e:	f7f9 fc53 	bl	8002df8 <HAL_GetTick>
 8009552:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009554:	e008      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009556:	f7f9 fc4f 	bl	8002df8 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	2b64      	cmp	r3, #100	; 0x64
 8009562:	d901      	bls.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e007      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009574:	d1ef      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x10a2>
      }
    }
  }
  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	40023800 	.word	0x40023800
 8009584:	0800fcd8 	.word	0x0800fcd8

08009588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e0f5      	b.n	8009786 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a7c      	ldr	r2, [pc, #496]	; (8009790 <HAL_TIM_Base_Init+0x208>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d045      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ac:	d040      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a78      	ldr	r2, [pc, #480]	; (8009794 <HAL_TIM_Base_Init+0x20c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d03b      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a76      	ldr	r2, [pc, #472]	; (8009798 <HAL_TIM_Base_Init+0x210>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d036      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a75      	ldr	r2, [pc, #468]	; (800979c <HAL_TIM_Base_Init+0x214>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d031      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a73      	ldr	r2, [pc, #460]	; (80097a0 <HAL_TIM_Base_Init+0x218>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d02c      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a72      	ldr	r2, [pc, #456]	; (80097a4 <HAL_TIM_Base_Init+0x21c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d027      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a70      	ldr	r2, [pc, #448]	; (80097a8 <HAL_TIM_Base_Init+0x220>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d022      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a6f      	ldr	r2, [pc, #444]	; (80097ac <HAL_TIM_Base_Init+0x224>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d01d      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a6d      	ldr	r2, [pc, #436]	; (80097b0 <HAL_TIM_Base_Init+0x228>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d018      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a6c      	ldr	r2, [pc, #432]	; (80097b4 <HAL_TIM_Base_Init+0x22c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d013      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a6a      	ldr	r2, [pc, #424]	; (80097b8 <HAL_TIM_Base_Init+0x230>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d00e      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a69      	ldr	r2, [pc, #420]	; (80097bc <HAL_TIM_Base_Init+0x234>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d009      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a67      	ldr	r2, [pc, #412]	; (80097c0 <HAL_TIM_Base_Init+0x238>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d004      	beq.n	8009630 <HAL_TIM_Base_Init+0xa8>
 8009626:	f44f 718b 	mov.w	r1, #278	; 0x116
 800962a:	4866      	ldr	r0, [pc, #408]	; (80097c4 <HAL_TIM_Base_Init+0x23c>)
 800962c:	f7f7 fc50 	bl	8000ed0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d014      	beq.n	8009662 <HAL_TIM_Base_Init+0xda>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	2b10      	cmp	r3, #16
 800963e:	d010      	beq.n	8009662 <HAL_TIM_Base_Init+0xda>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b20      	cmp	r3, #32
 8009646:	d00c      	beq.n	8009662 <HAL_TIM_Base_Init+0xda>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	2b40      	cmp	r3, #64	; 0x40
 800964e:	d008      	beq.n	8009662 <HAL_TIM_Base_Init+0xda>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	2b60      	cmp	r3, #96	; 0x60
 8009656:	d004      	beq.n	8009662 <HAL_TIM_Base_Init+0xda>
 8009658:	f240 1117 	movw	r1, #279	; 0x117
 800965c:	4859      	ldr	r0, [pc, #356]	; (80097c4 <HAL_TIM_Base_Init+0x23c>)
 800965e:	f7f7 fc37 	bl	8000ed0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00e      	beq.n	8009688 <HAL_TIM_Base_Init+0x100>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009672:	d009      	beq.n	8009688 <HAL_TIM_Base_Init+0x100>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800967c:	d004      	beq.n	8009688 <HAL_TIM_Base_Init+0x100>
 800967e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009682:	4850      	ldr	r0, [pc, #320]	; (80097c4 <HAL_TIM_Base_Init+0x23c>)
 8009684:	f7f7 fc24 	bl	8000ed0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009690:	d004      	beq.n	800969c <HAL_TIM_Base_Init+0x114>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a41      	ldr	r2, [pc, #260]	; (800979c <HAL_TIM_Base_Init+0x214>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d107      	bne.n	80096ac <HAL_TIM_Base_Init+0x124>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bf14      	ite	ne
 80096a4:	2301      	movne	r3, #1
 80096a6:	2300      	moveq	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	e00e      	b.n	80096ca <HAL_TIM_Base_Init+0x142>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <HAL_TIM_Base_Init+0x13a>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096bc:	d201      	bcs.n	80096c2 <HAL_TIM_Base_Init+0x13a>
 80096be:	2301      	movs	r3, #1
 80096c0:	e000      	b.n	80096c4 <HAL_TIM_Base_Init+0x13c>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d104      	bne.n	80096d8 <HAL_TIM_Base_Init+0x150>
 80096ce:	f240 1119 	movw	r1, #281	; 0x119
 80096d2:	483c      	ldr	r0, [pc, #240]	; (80097c4 <HAL_TIM_Base_Init+0x23c>)
 80096d4:	f7f7 fbfc 	bl	8000ed0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <HAL_TIM_Base_Init+0x16a>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	2b80      	cmp	r3, #128	; 0x80
 80096e6:	d004      	beq.n	80096f2 <HAL_TIM_Base_Init+0x16a>
 80096e8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80096ec:	4835      	ldr	r0, [pc, #212]	; (80097c4 <HAL_TIM_Base_Init+0x23c>)
 80096ee:	f7f7 fbef 	bl	8000ed0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f85e 	bl	80097c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f000 fa72 	bl	8009c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40010000 	.word	0x40010000
 8009794:	40000400 	.word	0x40000400
 8009798:	40000800 	.word	0x40000800
 800979c:	40000c00 	.word	0x40000c00
 80097a0:	40001000 	.word	0x40001000
 80097a4:	40001400 	.word	0x40001400
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800
 80097b8:	40001800 	.word	0x40001800
 80097bc:	40001c00 	.word	0x40001c00
 80097c0:	40002000 	.word	0x40002000
 80097c4:	0800fd14 	.word	0x0800fd14

080097c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a54      	ldr	r2, [pc, #336]	; (800993c <HAL_TIM_Base_Start_IT+0x160>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d045      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f6:	d040      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a50      	ldr	r2, [pc, #320]	; (8009940 <HAL_TIM_Base_Start_IT+0x164>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d03b      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a4f      	ldr	r2, [pc, #316]	; (8009944 <HAL_TIM_Base_Start_IT+0x168>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d036      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a4d      	ldr	r2, [pc, #308]	; (8009948 <HAL_TIM_Base_Start_IT+0x16c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d031      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a4c      	ldr	r2, [pc, #304]	; (800994c <HAL_TIM_Base_Start_IT+0x170>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d02c      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a4a      	ldr	r2, [pc, #296]	; (8009950 <HAL_TIM_Base_Start_IT+0x174>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d027      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a49      	ldr	r2, [pc, #292]	; (8009954 <HAL_TIM_Base_Start_IT+0x178>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d022      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a47      	ldr	r2, [pc, #284]	; (8009958 <HAL_TIM_Base_Start_IT+0x17c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d01d      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a46      	ldr	r2, [pc, #280]	; (800995c <HAL_TIM_Base_Start_IT+0x180>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d018      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a44      	ldr	r2, [pc, #272]	; (8009960 <HAL_TIM_Base_Start_IT+0x184>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d013      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a43      	ldr	r2, [pc, #268]	; (8009964 <HAL_TIM_Base_Start_IT+0x188>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00e      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a41      	ldr	r2, [pc, #260]	; (8009968 <HAL_TIM_Base_Start_IT+0x18c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d009      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a40      	ldr	r2, [pc, #256]	; (800996c <HAL_TIM_Base_Start_IT+0x190>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d004      	beq.n	800987a <HAL_TIM_Base_Start_IT+0x9e>
 8009870:	f240 11d3 	movw	r1, #467	; 0x1d3
 8009874:	483e      	ldr	r0, [pc, #248]	; (8009970 <HAL_TIM_Base_Start_IT+0x194>)
 8009876:	f7f7 fb2b 	bl	8000ed0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b01      	cmp	r3, #1
 8009884:	d001      	beq.n	800988a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e054      	b.n	8009934 <HAL_TIM_Base_Start_IT+0x158>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2202      	movs	r2, #2
 800988e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68da      	ldr	r2, [r3, #12]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f042 0201 	orr.w	r2, r2, #1
 80098a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a25      	ldr	r2, [pc, #148]	; (800993c <HAL_TIM_Base_Start_IT+0x160>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d022      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b4:	d01d      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a21      	ldr	r2, [pc, #132]	; (8009940 <HAL_TIM_Base_Start_IT+0x164>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d018      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a1f      	ldr	r2, [pc, #124]	; (8009944 <HAL_TIM_Base_Start_IT+0x168>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a1e      	ldr	r2, [pc, #120]	; (8009948 <HAL_TIM_Base_Start_IT+0x16c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00e      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a1e      	ldr	r2, [pc, #120]	; (8009954 <HAL_TIM_Base_Start_IT+0x178>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d009      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <HAL_TIM_Base_Start_IT+0x17c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d004      	beq.n	80098f2 <HAL_TIM_Base_Start_IT+0x116>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <HAL_TIM_Base_Start_IT+0x188>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d115      	bne.n	800991e <HAL_TIM_Base_Start_IT+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	4b1e      	ldr	r3, [pc, #120]	; (8009974 <HAL_TIM_Base_Start_IT+0x198>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b06      	cmp	r3, #6
 8009902:	d015      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x154>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800990a:	d011      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x154>
    {
      __HAL_TIM_ENABLE(htim);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800991c:	e008      	b.n	8009930 <HAL_TIM_Base_Start_IT+0x154>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0201 	orr.w	r2, r2, #1
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e000      	b.n	8009932 <HAL_TIM_Base_Start_IT+0x156>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009930:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	40010000 	.word	0x40010000
 8009940:	40000400 	.word	0x40000400
 8009944:	40000800 	.word	0x40000800
 8009948:	40000c00 	.word	0x40000c00
 800994c:	40001000 	.word	0x40001000
 8009950:	40001400 	.word	0x40001400
 8009954:	40010400 	.word	0x40010400
 8009958:	40014000 	.word	0x40014000
 800995c:	40014400 	.word	0x40014400
 8009960:	40014800 	.word	0x40014800
 8009964:	40001800 	.word	0x40001800
 8009968:	40001c00 	.word	0x40001c00
 800996c:	40002000 	.word	0x40002000
 8009970:	0800fd14 	.word	0x0800fd14
 8009974:	00010007 	.word	0x00010007

08009978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b02      	cmp	r3, #2
 800998c:	d122      	bne.n	80099d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b02      	cmp	r3, #2
 800999a:	d11b      	bne.n	80099d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f06f 0202 	mvn.w	r2, #2
 80099a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f905 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
 80099c0:	e005      	b.n	80099ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f8f7 	bl	8009bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f908 	bl	8009bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d122      	bne.n	8009a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d11b      	bne.n	8009a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f06f 0204 	mvn.w	r2, #4
 80099f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2202      	movs	r2, #2
 80099fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f8db 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
 8009a14:	e005      	b.n	8009a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f8cd 	bl	8009bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f8de 	bl	8009bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d122      	bne.n	8009a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f003 0308 	and.w	r3, r3, #8
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d11b      	bne.n	8009a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f06f 0208 	mvn.w	r2, #8
 8009a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2204      	movs	r2, #4
 8009a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f8b1 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
 8009a68:	e005      	b.n	8009a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8a3 	bl	8009bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f8b4 	bl	8009bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0310 	and.w	r3, r3, #16
 8009a86:	2b10      	cmp	r3, #16
 8009a88:	d122      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f003 0310 	and.w	r3, r3, #16
 8009a94:	2b10      	cmp	r3, #16
 8009a96:	d11b      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0210 	mvn.w	r2, #16
 8009aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2208      	movs	r2, #8
 8009aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f887 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
 8009abc:	e005      	b.n	8009aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f879 	bl	8009bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f88a 	bl	8009bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d10e      	bne.n	8009afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d107      	bne.n	8009afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f06f 0201 	mvn.w	r2, #1
 8009af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7f7 f9d2 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b06:	2b80      	cmp	r3, #128	; 0x80
 8009b08:	d10e      	bne.n	8009b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b14:	2b80      	cmp	r3, #128	; 0x80
 8009b16:	d107      	bne.n	8009b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f91a 	bl	8009d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b36:	d10e      	bne.n	8009b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b42:	2b80      	cmp	r3, #128	; 0x80
 8009b44:	d107      	bne.n	8009b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f90d 	bl	8009d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b60:	2b40      	cmp	r3, #64	; 0x40
 8009b62:	d10e      	bne.n	8009b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6e:	2b40      	cmp	r3, #64	; 0x40
 8009b70:	d107      	bne.n	8009b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f838 	bl	8009bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	d10e      	bne.n	8009bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f003 0320 	and.w	r3, r3, #32
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d107      	bne.n	8009bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f06f 0220 	mvn.w	r2, #32
 8009ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f8cd 	bl	8009d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a40      	ldr	r2, [pc, #256]	; (8009d1c <TIM_Base_SetConfig+0x114>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d013      	beq.n	8009c48 <TIM_Base_SetConfig+0x40>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c26:	d00f      	beq.n	8009c48 <TIM_Base_SetConfig+0x40>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a3d      	ldr	r2, [pc, #244]	; (8009d20 <TIM_Base_SetConfig+0x118>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d00b      	beq.n	8009c48 <TIM_Base_SetConfig+0x40>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a3c      	ldr	r2, [pc, #240]	; (8009d24 <TIM_Base_SetConfig+0x11c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d007      	beq.n	8009c48 <TIM_Base_SetConfig+0x40>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a3b      	ldr	r2, [pc, #236]	; (8009d28 <TIM_Base_SetConfig+0x120>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d003      	beq.n	8009c48 <TIM_Base_SetConfig+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3a      	ldr	r2, [pc, #232]	; (8009d2c <TIM_Base_SetConfig+0x124>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d108      	bne.n	8009c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a2f      	ldr	r2, [pc, #188]	; (8009d1c <TIM_Base_SetConfig+0x114>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d02b      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c68:	d027      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a2c      	ldr	r2, [pc, #176]	; (8009d20 <TIM_Base_SetConfig+0x118>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d023      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a2b      	ldr	r2, [pc, #172]	; (8009d24 <TIM_Base_SetConfig+0x11c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d01f      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a2a      	ldr	r2, [pc, #168]	; (8009d28 <TIM_Base_SetConfig+0x120>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d01b      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a29      	ldr	r2, [pc, #164]	; (8009d2c <TIM_Base_SetConfig+0x124>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d017      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a28      	ldr	r2, [pc, #160]	; (8009d30 <TIM_Base_SetConfig+0x128>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a27      	ldr	r2, [pc, #156]	; (8009d34 <TIM_Base_SetConfig+0x12c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d00f      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a26      	ldr	r2, [pc, #152]	; (8009d38 <TIM_Base_SetConfig+0x130>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00b      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a25      	ldr	r2, [pc, #148]	; (8009d3c <TIM_Base_SetConfig+0x134>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d007      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a24      	ldr	r2, [pc, #144]	; (8009d40 <TIM_Base_SetConfig+0x138>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d003      	beq.n	8009cba <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a23      	ldr	r2, [pc, #140]	; (8009d44 <TIM_Base_SetConfig+0x13c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d108      	bne.n	8009ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689a      	ldr	r2, [r3, #8]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <TIM_Base_SetConfig+0x114>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d003      	beq.n	8009d00 <TIM_Base_SetConfig+0xf8>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a0c      	ldr	r2, [pc, #48]	; (8009d2c <TIM_Base_SetConfig+0x124>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d103      	bne.n	8009d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	691a      	ldr	r2, [r3, #16]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	615a      	str	r2, [r3, #20]
}
 8009d0e:	bf00      	nop
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	40010000 	.word	0x40010000
 8009d20:	40000400 	.word	0x40000400
 8009d24:	40000800 	.word	0x40000800
 8009d28:	40000c00 	.word	0x40000c00
 8009d2c:	40010400 	.word	0x40010400
 8009d30:	40014000 	.word	0x40014000
 8009d34:	40014400 	.word	0x40014400
 8009d38:	40014800 	.word	0x40014800
 8009d3c:	40001800 	.word	0x40001800
 8009d40:	40001c00 	.word	0x40001c00
 8009d44:	40002000 	.word	0x40002000

08009d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e09f      	b.n	8009ed6 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d02d      	beq.n	8009dfa <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a4f      	ldr	r2, [pc, #316]	; (8009ee0 <HAL_UART_Init+0x15c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d055      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a4d      	ldr	r2, [pc, #308]	; (8009ee4 <HAL_UART_Init+0x160>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d050      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a4c      	ldr	r2, [pc, #304]	; (8009ee8 <HAL_UART_Init+0x164>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d04b      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a4a      	ldr	r2, [pc, #296]	; (8009eec <HAL_UART_Init+0x168>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d046      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a49      	ldr	r2, [pc, #292]	; (8009ef0 <HAL_UART_Init+0x16c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d041      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a47      	ldr	r2, [pc, #284]	; (8009ef4 <HAL_UART_Init+0x170>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d03c      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a46      	ldr	r2, [pc, #280]	; (8009ef8 <HAL_UART_Init+0x174>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d037      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a44      	ldr	r2, [pc, #272]	; (8009efc <HAL_UART_Init+0x178>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d032      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009dee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009df2:	4843      	ldr	r0, [pc, #268]	; (8009f00 <HAL_UART_Init+0x17c>)
 8009df4:	f7f7 f86c 	bl	8000ed0 <assert_failed>
 8009df8:	e02c      	b.n	8009e54 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a38      	ldr	r2, [pc, #224]	; (8009ee0 <HAL_UART_Init+0x15c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d027      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a36      	ldr	r2, [pc, #216]	; (8009ee4 <HAL_UART_Init+0x160>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d022      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a35      	ldr	r2, [pc, #212]	; (8009ee8 <HAL_UART_Init+0x164>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d01d      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a33      	ldr	r2, [pc, #204]	; (8009eec <HAL_UART_Init+0x168>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d018      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a32      	ldr	r2, [pc, #200]	; (8009ef0 <HAL_UART_Init+0x16c>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d013      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a30      	ldr	r2, [pc, #192]	; (8009ef4 <HAL_UART_Init+0x170>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d00e      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a2f      	ldr	r2, [pc, #188]	; (8009ef8 <HAL_UART_Init+0x174>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d009      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a2d      	ldr	r2, [pc, #180]	; (8009efc <HAL_UART_Init+0x178>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d004      	beq.n	8009e54 <HAL_UART_Init+0xd0>
 8009e4a:	f240 1131 	movw	r1, #305	; 0x131
 8009e4e:	482c      	ldr	r0, [pc, #176]	; (8009f00 <HAL_UART_Init+0x17c>)
 8009e50:	f7f7 f83e 	bl	8000ed0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d106      	bne.n	8009e6a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7f7 fa65 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2224      	movs	r2, #36	; 0x24
 8009e6e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0201 	bic.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f83f 	bl	8009f04 <UART_SetConfig>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d101      	bne.n	8009e90 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e022      	b.n	8009ed6 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fb29 	bl	800a4f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ebc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0201 	orr.w	r2, r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fc66 	bl	800a7a0 <UART_CheckIdleState>
 8009ed4:	4603      	mov	r3, r0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40011000 	.word	0x40011000
 8009ee4:	40004400 	.word	0x40004400
 8009ee8:	40004800 	.word	0x40004800
 8009eec:	40004c00 	.word	0x40004c00
 8009ef0:	40005000 	.word	0x40005000
 8009ef4:	40011400 	.word	0x40011400
 8009ef8:	40007800 	.word	0x40007800
 8009efc:	40007c00 	.word	0x40007c00
 8009f00:	0800fd4c 	.word	0x0800fd4c

08009f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4aa0      	ldr	r2, [pc, #640]	; (800a198 <UART_SetConfig+0x294>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d904      	bls.n	8009f24 <UART_SetConfig+0x20>
 8009f1a:	f640 315d 	movw	r1, #2909	; 0xb5d
 8009f1e:	489f      	ldr	r0, [pc, #636]	; (800a19c <UART_SetConfig+0x298>)
 8009f20:	f7f6 ffd6 	bl	8000ed0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f2c:	d00d      	beq.n	8009f4a <UART_SetConfig+0x46>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <UART_SetConfig+0x46>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f3e:	d004      	beq.n	8009f4a <UART_SetConfig+0x46>
 8009f40:	f640 315e 	movw	r1, #2910	; 0xb5e
 8009f44:	4895      	ldr	r0, [pc, #596]	; (800a19c <UART_SetConfig+0x298>)
 8009f46:	f7f6 ffc3 	bl	8000ed0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f52:	d012      	beq.n	8009f7a <UART_SetConfig+0x76>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00e      	beq.n	8009f7a <UART_SetConfig+0x76>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f64:	d009      	beq.n	8009f7a <UART_SetConfig+0x76>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f6e:	d004      	beq.n	8009f7a <UART_SetConfig+0x76>
 8009f70:	f640 315f 	movw	r1, #2911	; 0xb5f
 8009f74:	4889      	ldr	r0, [pc, #548]	; (800a19c <UART_SetConfig+0x298>)
 8009f76:	f7f6 ffab 	bl	8000ed0 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d009      	beq.n	8009f96 <UART_SetConfig+0x92>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f8a:	d004      	beq.n	8009f96 <UART_SetConfig+0x92>
 8009f8c:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8009f90:	4882      	ldr	r0, [pc, #520]	; (800a19c <UART_SetConfig+0x298>)
 8009f92:	f7f6 ff9d 	bl	8000ed0 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00e      	beq.n	8009fbc <UART_SetConfig+0xb8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa6:	d009      	beq.n	8009fbc <UART_SetConfig+0xb8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009fb0:	d004      	beq.n	8009fbc <UART_SetConfig+0xb8>
 8009fb2:	f640 3162 	movw	r1, #2914	; 0xb62
 8009fb6:	4879      	ldr	r0, [pc, #484]	; (800a19c <UART_SetConfig+0x298>)
 8009fb8:	f7f6 ff8a 	bl	8000ed0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f023 030c 	bic.w	r3, r3, #12
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d103      	bne.n	8009fd0 <UART_SetConfig+0xcc>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <UART_SetConfig+0xd6>
 8009fd0:	f640 3163 	movw	r1, #2915	; 0xb63
 8009fd4:	4871      	ldr	r0, [pc, #452]	; (800a19c <UART_SetConfig+0x298>)
 8009fd6:	f7f6 ff7b 	bl	8000ed0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d013      	beq.n	800a00a <UART_SetConfig+0x106>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fea:	d00e      	beq.n	800a00a <UART_SetConfig+0x106>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff4:	d009      	beq.n	800a00a <UART_SetConfig+0x106>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ffe:	d004      	beq.n	800a00a <UART_SetConfig+0x106>
 800a000:	f640 3164 	movw	r1, #2916	; 0xb64
 800a004:	4865      	ldr	r0, [pc, #404]	; (800a19c <UART_SetConfig+0x298>)
 800a006:	f7f6 ff63 	bl	8000ed0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d009      	beq.n	800a026 <UART_SetConfig+0x122>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a01a:	d004      	beq.n	800a026 <UART_SetConfig+0x122>
 800a01c:	f640 3165 	movw	r1, #2917	; 0xb65
 800a020:	485e      	ldr	r0, [pc, #376]	; (800a19c <UART_SetConfig+0x298>)
 800a022:	f7f6 ff55 	bl	8000ed0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	4b56      	ldr	r3, [pc, #344]	; (800a1a0 <UART_SetConfig+0x29c>)
 800a046:	4013      	ands	r3, r2
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	6979      	ldr	r1, [r7, #20]
 800a04e:	430b      	orrs	r3, r1
 800a050:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	4313      	orrs	r3, r2
 800a076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	430a      	orrs	r2, r1
 800a08a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a44      	ldr	r2, [pc, #272]	; (800a1a4 <UART_SetConfig+0x2a0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d121      	bne.n	800a0da <UART_SetConfig+0x1d6>
 800a096:	4b44      	ldr	r3, [pc, #272]	; (800a1a8 <UART_SetConfig+0x2a4>)
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d817      	bhi.n	800a0d4 <UART_SetConfig+0x1d0>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <UART_SetConfig+0x1a8>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0bd 	.word	0x0800a0bd
 800a0b0:	0800a0c9 	.word	0x0800a0c9
 800a0b4:	0800a0c3 	.word	0x0800a0c3
 800a0b8:	0800a0cf 	.word	0x0800a0cf
 800a0bc:	2301      	movs	r3, #1
 800a0be:	77fb      	strb	r3, [r7, #31]
 800a0c0:	e14c      	b.n	800a35c <UART_SetConfig+0x458>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	77fb      	strb	r3, [r7, #31]
 800a0c6:	e149      	b.n	800a35c <UART_SetConfig+0x458>
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	77fb      	strb	r3, [r7, #31]
 800a0cc:	e146      	b.n	800a35c <UART_SetConfig+0x458>
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	77fb      	strb	r3, [r7, #31]
 800a0d2:	e143      	b.n	800a35c <UART_SetConfig+0x458>
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e140      	b.n	800a35c <UART_SetConfig+0x458>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a33      	ldr	r2, [pc, #204]	; (800a1ac <UART_SetConfig+0x2a8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d132      	bne.n	800a14a <UART_SetConfig+0x246>
 800a0e4:	4b30      	ldr	r3, [pc, #192]	; (800a1a8 <UART_SetConfig+0x2a4>)
 800a0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ea:	f003 030c 	and.w	r3, r3, #12
 800a0ee:	2b0c      	cmp	r3, #12
 800a0f0:	d828      	bhi.n	800a144 <UART_SetConfig+0x240>
 800a0f2:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <UART_SetConfig+0x1f4>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a12d 	.word	0x0800a12d
 800a0fc:	0800a145 	.word	0x0800a145
 800a100:	0800a145 	.word	0x0800a145
 800a104:	0800a145 	.word	0x0800a145
 800a108:	0800a139 	.word	0x0800a139
 800a10c:	0800a145 	.word	0x0800a145
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a145 	.word	0x0800a145
 800a118:	0800a133 	.word	0x0800a133
 800a11c:	0800a145 	.word	0x0800a145
 800a120:	0800a145 	.word	0x0800a145
 800a124:	0800a145 	.word	0x0800a145
 800a128:	0800a13f 	.word	0x0800a13f
 800a12c:	2300      	movs	r3, #0
 800a12e:	77fb      	strb	r3, [r7, #31]
 800a130:	e114      	b.n	800a35c <UART_SetConfig+0x458>
 800a132:	2302      	movs	r3, #2
 800a134:	77fb      	strb	r3, [r7, #31]
 800a136:	e111      	b.n	800a35c <UART_SetConfig+0x458>
 800a138:	2304      	movs	r3, #4
 800a13a:	77fb      	strb	r3, [r7, #31]
 800a13c:	e10e      	b.n	800a35c <UART_SetConfig+0x458>
 800a13e:	2308      	movs	r3, #8
 800a140:	77fb      	strb	r3, [r7, #31]
 800a142:	e10b      	b.n	800a35c <UART_SetConfig+0x458>
 800a144:	2310      	movs	r3, #16
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e108      	b.n	800a35c <UART_SetConfig+0x458>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a18      	ldr	r2, [pc, #96]	; (800a1b0 <UART_SetConfig+0x2ac>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d12f      	bne.n	800a1b4 <UART_SetConfig+0x2b0>
 800a154:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <UART_SetConfig+0x2a4>)
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a15e:	2b30      	cmp	r3, #48	; 0x30
 800a160:	d013      	beq.n	800a18a <UART_SetConfig+0x286>
 800a162:	2b30      	cmp	r3, #48	; 0x30
 800a164:	d814      	bhi.n	800a190 <UART_SetConfig+0x28c>
 800a166:	2b20      	cmp	r3, #32
 800a168:	d009      	beq.n	800a17e <UART_SetConfig+0x27a>
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d810      	bhi.n	800a190 <UART_SetConfig+0x28c>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <UART_SetConfig+0x274>
 800a172:	2b10      	cmp	r3, #16
 800a174:	d006      	beq.n	800a184 <UART_SetConfig+0x280>
 800a176:	e00b      	b.n	800a190 <UART_SetConfig+0x28c>
 800a178:	2300      	movs	r3, #0
 800a17a:	77fb      	strb	r3, [r7, #31]
 800a17c:	e0ee      	b.n	800a35c <UART_SetConfig+0x458>
 800a17e:	2302      	movs	r3, #2
 800a180:	77fb      	strb	r3, [r7, #31]
 800a182:	e0eb      	b.n	800a35c <UART_SetConfig+0x458>
 800a184:	2304      	movs	r3, #4
 800a186:	77fb      	strb	r3, [r7, #31]
 800a188:	e0e8      	b.n	800a35c <UART_SetConfig+0x458>
 800a18a:	2308      	movs	r3, #8
 800a18c:	77fb      	strb	r3, [r7, #31]
 800a18e:	e0e5      	b.n	800a35c <UART_SetConfig+0x458>
 800a190:	2310      	movs	r3, #16
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e0e2      	b.n	800a35c <UART_SetConfig+0x458>
 800a196:	bf00      	nop
 800a198:	019bfcc0 	.word	0x019bfcc0
 800a19c:	0800fd4c 	.word	0x0800fd4c
 800a1a0:	efff69f3 	.word	0xefff69f3
 800a1a4:	40011000 	.word	0x40011000
 800a1a8:	40023800 	.word	0x40023800
 800a1ac:	40004400 	.word	0x40004400
 800a1b0:	40004800 	.word	0x40004800
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4aa5      	ldr	r2, [pc, #660]	; (800a450 <UART_SetConfig+0x54c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d120      	bne.n	800a200 <UART_SetConfig+0x2fc>
 800a1be:	4ba5      	ldr	r3, [pc, #660]	; (800a454 <UART_SetConfig+0x550>)
 800a1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1c8:	2bc0      	cmp	r3, #192	; 0xc0
 800a1ca:	d013      	beq.n	800a1f4 <UART_SetConfig+0x2f0>
 800a1cc:	2bc0      	cmp	r3, #192	; 0xc0
 800a1ce:	d814      	bhi.n	800a1fa <UART_SetConfig+0x2f6>
 800a1d0:	2b80      	cmp	r3, #128	; 0x80
 800a1d2:	d009      	beq.n	800a1e8 <UART_SetConfig+0x2e4>
 800a1d4:	2b80      	cmp	r3, #128	; 0x80
 800a1d6:	d810      	bhi.n	800a1fa <UART_SetConfig+0x2f6>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <UART_SetConfig+0x2de>
 800a1dc:	2b40      	cmp	r3, #64	; 0x40
 800a1de:	d006      	beq.n	800a1ee <UART_SetConfig+0x2ea>
 800a1e0:	e00b      	b.n	800a1fa <UART_SetConfig+0x2f6>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	77fb      	strb	r3, [r7, #31]
 800a1e6:	e0b9      	b.n	800a35c <UART_SetConfig+0x458>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	e0b6      	b.n	800a35c <UART_SetConfig+0x458>
 800a1ee:	2304      	movs	r3, #4
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e0b3      	b.n	800a35c <UART_SetConfig+0x458>
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	e0b0      	b.n	800a35c <UART_SetConfig+0x458>
 800a1fa:	2310      	movs	r3, #16
 800a1fc:	77fb      	strb	r3, [r7, #31]
 800a1fe:	e0ad      	b.n	800a35c <UART_SetConfig+0x458>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a94      	ldr	r2, [pc, #592]	; (800a458 <UART_SetConfig+0x554>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d125      	bne.n	800a256 <UART_SetConfig+0x352>
 800a20a:	4b92      	ldr	r3, [pc, #584]	; (800a454 <UART_SetConfig+0x550>)
 800a20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a218:	d017      	beq.n	800a24a <UART_SetConfig+0x346>
 800a21a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a21e:	d817      	bhi.n	800a250 <UART_SetConfig+0x34c>
 800a220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a224:	d00b      	beq.n	800a23e <UART_SetConfig+0x33a>
 800a226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a22a:	d811      	bhi.n	800a250 <UART_SetConfig+0x34c>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <UART_SetConfig+0x334>
 800a230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a234:	d006      	beq.n	800a244 <UART_SetConfig+0x340>
 800a236:	e00b      	b.n	800a250 <UART_SetConfig+0x34c>
 800a238:	2300      	movs	r3, #0
 800a23a:	77fb      	strb	r3, [r7, #31]
 800a23c:	e08e      	b.n	800a35c <UART_SetConfig+0x458>
 800a23e:	2302      	movs	r3, #2
 800a240:	77fb      	strb	r3, [r7, #31]
 800a242:	e08b      	b.n	800a35c <UART_SetConfig+0x458>
 800a244:	2304      	movs	r3, #4
 800a246:	77fb      	strb	r3, [r7, #31]
 800a248:	e088      	b.n	800a35c <UART_SetConfig+0x458>
 800a24a:	2308      	movs	r3, #8
 800a24c:	77fb      	strb	r3, [r7, #31]
 800a24e:	e085      	b.n	800a35c <UART_SetConfig+0x458>
 800a250:	2310      	movs	r3, #16
 800a252:	77fb      	strb	r3, [r7, #31]
 800a254:	e082      	b.n	800a35c <UART_SetConfig+0x458>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a80      	ldr	r2, [pc, #512]	; (800a45c <UART_SetConfig+0x558>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d125      	bne.n	800a2ac <UART_SetConfig+0x3a8>
 800a260:	4b7c      	ldr	r3, [pc, #496]	; (800a454 <UART_SetConfig+0x550>)
 800a262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a266:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a26a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a26e:	d017      	beq.n	800a2a0 <UART_SetConfig+0x39c>
 800a270:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a274:	d817      	bhi.n	800a2a6 <UART_SetConfig+0x3a2>
 800a276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27a:	d00b      	beq.n	800a294 <UART_SetConfig+0x390>
 800a27c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a280:	d811      	bhi.n	800a2a6 <UART_SetConfig+0x3a2>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <UART_SetConfig+0x38a>
 800a286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a28a:	d006      	beq.n	800a29a <UART_SetConfig+0x396>
 800a28c:	e00b      	b.n	800a2a6 <UART_SetConfig+0x3a2>
 800a28e:	2301      	movs	r3, #1
 800a290:	77fb      	strb	r3, [r7, #31]
 800a292:	e063      	b.n	800a35c <UART_SetConfig+0x458>
 800a294:	2302      	movs	r3, #2
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e060      	b.n	800a35c <UART_SetConfig+0x458>
 800a29a:	2304      	movs	r3, #4
 800a29c:	77fb      	strb	r3, [r7, #31]
 800a29e:	e05d      	b.n	800a35c <UART_SetConfig+0x458>
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e05a      	b.n	800a35c <UART_SetConfig+0x458>
 800a2a6:	2310      	movs	r3, #16
 800a2a8:	77fb      	strb	r3, [r7, #31]
 800a2aa:	e057      	b.n	800a35c <UART_SetConfig+0x458>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a6b      	ldr	r2, [pc, #428]	; (800a460 <UART_SetConfig+0x55c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d125      	bne.n	800a302 <UART_SetConfig+0x3fe>
 800a2b6:	4b67      	ldr	r3, [pc, #412]	; (800a454 <UART_SetConfig+0x550>)
 800a2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a2c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2c4:	d017      	beq.n	800a2f6 <UART_SetConfig+0x3f2>
 800a2c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2ca:	d817      	bhi.n	800a2fc <UART_SetConfig+0x3f8>
 800a2cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d0:	d00b      	beq.n	800a2ea <UART_SetConfig+0x3e6>
 800a2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d6:	d811      	bhi.n	800a2fc <UART_SetConfig+0x3f8>
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <UART_SetConfig+0x3e0>
 800a2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e0:	d006      	beq.n	800a2f0 <UART_SetConfig+0x3ec>
 800a2e2:	e00b      	b.n	800a2fc <UART_SetConfig+0x3f8>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	77fb      	strb	r3, [r7, #31]
 800a2e8:	e038      	b.n	800a35c <UART_SetConfig+0x458>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e035      	b.n	800a35c <UART_SetConfig+0x458>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	e032      	b.n	800a35c <UART_SetConfig+0x458>
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	77fb      	strb	r3, [r7, #31]
 800a2fa:	e02f      	b.n	800a35c <UART_SetConfig+0x458>
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	77fb      	strb	r3, [r7, #31]
 800a300:	e02c      	b.n	800a35c <UART_SetConfig+0x458>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a57      	ldr	r2, [pc, #348]	; (800a464 <UART_SetConfig+0x560>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d125      	bne.n	800a358 <UART_SetConfig+0x454>
 800a30c:	4b51      	ldr	r3, [pc, #324]	; (800a454 <UART_SetConfig+0x550>)
 800a30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a312:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a316:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a31a:	d017      	beq.n	800a34c <UART_SetConfig+0x448>
 800a31c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a320:	d817      	bhi.n	800a352 <UART_SetConfig+0x44e>
 800a322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a326:	d00b      	beq.n	800a340 <UART_SetConfig+0x43c>
 800a328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a32c:	d811      	bhi.n	800a352 <UART_SetConfig+0x44e>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <UART_SetConfig+0x436>
 800a332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a336:	d006      	beq.n	800a346 <UART_SetConfig+0x442>
 800a338:	e00b      	b.n	800a352 <UART_SetConfig+0x44e>
 800a33a:	2300      	movs	r3, #0
 800a33c:	77fb      	strb	r3, [r7, #31]
 800a33e:	e00d      	b.n	800a35c <UART_SetConfig+0x458>
 800a340:	2302      	movs	r3, #2
 800a342:	77fb      	strb	r3, [r7, #31]
 800a344:	e00a      	b.n	800a35c <UART_SetConfig+0x458>
 800a346:	2304      	movs	r3, #4
 800a348:	77fb      	strb	r3, [r7, #31]
 800a34a:	e007      	b.n	800a35c <UART_SetConfig+0x458>
 800a34c:	2308      	movs	r3, #8
 800a34e:	77fb      	strb	r3, [r7, #31]
 800a350:	e004      	b.n	800a35c <UART_SetConfig+0x458>
 800a352:	2310      	movs	r3, #16
 800a354:	77fb      	strb	r3, [r7, #31]
 800a356:	e001      	b.n	800a35c <UART_SetConfig+0x458>
 800a358:	2310      	movs	r3, #16
 800a35a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a364:	d15c      	bne.n	800a420 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a366:	7ffb      	ldrb	r3, [r7, #31]
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d828      	bhi.n	800a3be <UART_SetConfig+0x4ba>
 800a36c:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <UART_SetConfig+0x470>)
 800a36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a372:	bf00      	nop
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	0800a3bf 	.word	0x0800a3bf
 800a384:	0800a3af 	.word	0x0800a3af
 800a388:	0800a3bf 	.word	0x0800a3bf
 800a38c:	0800a3bf 	.word	0x0800a3bf
 800a390:	0800a3bf 	.word	0x0800a3bf
 800a394:	0800a3b7 	.word	0x0800a3b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a398:	f7fe f832 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 800a39c:	61b8      	str	r0, [r7, #24]
        break;
 800a39e:	e013      	b.n	800a3c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3a0:	f7fe f842 	bl	8008428 <HAL_RCC_GetPCLK2Freq>
 800a3a4:	61b8      	str	r0, [r7, #24]
        break;
 800a3a6:	e00f      	b.n	800a3c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3a8:	4b2f      	ldr	r3, [pc, #188]	; (800a468 <UART_SetConfig+0x564>)
 800a3aa:	61bb      	str	r3, [r7, #24]
        break;
 800a3ac:	e00c      	b.n	800a3c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ae:	f7fd ff15 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 800a3b2:	61b8      	str	r0, [r7, #24]
        break;
 800a3b4:	e008      	b.n	800a3c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ba:	61bb      	str	r3, [r7, #24]
        break;
 800a3bc:	e004      	b.n	800a3c8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a3c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 8082 	beq.w	800a4d4 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	005a      	lsls	r2, r3, #1
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	085b      	lsrs	r3, r3, #1
 800a3da:	441a      	add	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2b0f      	cmp	r3, #15
 800a3ea:	d916      	bls.n	800a41a <UART_SetConfig+0x516>
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f2:	d212      	bcs.n	800a41a <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f023 030f 	bic.w	r3, r3, #15
 800a3fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	b29b      	uxth	r3, r3
 800a404:	f003 0307 	and.w	r3, r3, #7
 800a408:	b29a      	uxth	r2, r3
 800a40a:	89fb      	ldrh	r3, [r7, #14]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	89fa      	ldrh	r2, [r7, #14]
 800a416:	60da      	str	r2, [r3, #12]
 800a418:	e05c      	b.n	800a4d4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	77bb      	strb	r3, [r7, #30]
 800a41e:	e059      	b.n	800a4d4 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a420:	7ffb      	ldrb	r3, [r7, #31]
 800a422:	2b08      	cmp	r3, #8
 800a424:	d835      	bhi.n	800a492 <UART_SetConfig+0x58e>
 800a426:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <UART_SetConfig+0x528>)
 800a428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42c:	0800a46d 	.word	0x0800a46d
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a47d 	.word	0x0800a47d
 800a438:	0800a493 	.word	0x0800a493
 800a43c:	0800a483 	.word	0x0800a483
 800a440:	0800a493 	.word	0x0800a493
 800a444:	0800a493 	.word	0x0800a493
 800a448:	0800a493 	.word	0x0800a493
 800a44c:	0800a48b 	.word	0x0800a48b
 800a450:	40004c00 	.word	0x40004c00
 800a454:	40023800 	.word	0x40023800
 800a458:	40005000 	.word	0x40005000
 800a45c:	40011400 	.word	0x40011400
 800a460:	40007800 	.word	0x40007800
 800a464:	40007c00 	.word	0x40007c00
 800a468:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a46c:	f7fd ffc8 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 800a470:	61b8      	str	r0, [r7, #24]
        break;
 800a472:	e013      	b.n	800a49c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a474:	f7fd ffd8 	bl	8008428 <HAL_RCC_GetPCLK2Freq>
 800a478:	61b8      	str	r0, [r7, #24]
        break;
 800a47a:	e00f      	b.n	800a49c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a47c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ec <UART_SetConfig+0x5e8>)
 800a47e:	61bb      	str	r3, [r7, #24]
        break;
 800a480:	e00c      	b.n	800a49c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a482:	f7fd feab 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 800a486:	61b8      	str	r0, [r7, #24]
        break;
 800a488:	e008      	b.n	800a49c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a48a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a48e:	61bb      	str	r3, [r7, #24]
        break;
 800a490:	e004      	b.n	800a49c <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	77bb      	strb	r3, [r7, #30]
        break;
 800a49a:	bf00      	nop
    }

    if (pclk != 0U)
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	085a      	lsrs	r2, r3, #1
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b0f      	cmp	r3, #15
 800a4ba:	d909      	bls.n	800a4d0 <UART_SetConfig+0x5cc>
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c2:	d205      	bcs.n	800a4d0 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60da      	str	r2, [r3, #12]
 800a4ce:	e001      	b.n	800a4d4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a4e0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	00f42400 	.word	0x00f42400

0800a4f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2bff      	cmp	r3, #255	; 0xff
 800a4fe:	d904      	bls.n	800a50a <UART_AdvFeatureConfig+0x1a>
 800a500:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a504:	488e      	ldr	r0, [pc, #568]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a506:	f7f6 fce3 	bl	8000ed0 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d018      	beq.n	800a548 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d009      	beq.n	800a532 <UART_AdvFeatureConfig+0x42>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a526:	d004      	beq.n	800a532 <UART_AdvFeatureConfig+0x42>
 800a528:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a52c:	4884      	ldr	r0, [pc, #528]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a52e:	f7f6 fccf 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	f003 0302 	and.w	r3, r3, #2
 800a550:	2b00      	cmp	r3, #0
 800a552:	d018      	beq.n	800a586 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <UART_AdvFeatureConfig+0x80>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a564:	d004      	beq.n	800a570 <UART_AdvFeatureConfig+0x80>
 800a566:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a56a:	4875      	ldr	r0, [pc, #468]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a56c:	f7f6 fcb0 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d018      	beq.n	800a5c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <UART_AdvFeatureConfig+0xbe>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5a2:	d004      	beq.n	800a5ae <UART_AdvFeatureConfig+0xbe>
 800a5a4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a5a8:	4865      	ldr	r0, [pc, #404]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a5aa:	f7f6 fc91 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	f003 0308 	and.w	r3, r3, #8
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d018      	beq.n	800a602 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <UART_AdvFeatureConfig+0xfc>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5e0:	d004      	beq.n	800a5ec <UART_AdvFeatureConfig+0xfc>
 800a5e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a5e6:	4856      	ldr	r0, [pc, #344]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a5e8:	f7f6 fc72 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	f003 0310 	and.w	r3, r3, #16
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d018      	beq.n	800a640 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <UART_AdvFeatureConfig+0x13a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61e:	d004      	beq.n	800a62a <UART_AdvFeatureConfig+0x13a>
 800a620:	f640 4107 	movw	r1, #3079	; 0xc07
 800a624:	4846      	ldr	r0, [pc, #280]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a626:	f7f6 fc53 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	f003 0320 	and.w	r3, r3, #32
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d018      	beq.n	800a67e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d009      	beq.n	800a668 <UART_AdvFeatureConfig+0x178>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65c:	d004      	beq.n	800a668 <UART_AdvFeatureConfig+0x178>
 800a65e:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a662:	4837      	ldr	r0, [pc, #220]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a664:	f7f6 fc34 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d064      	beq.n	800a754 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <UART_AdvFeatureConfig+0x254>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d013      	beq.n	800a6bc <UART_AdvFeatureConfig+0x1cc>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a2b      	ldr	r2, [pc, #172]	; (800a748 <UART_AdvFeatureConfig+0x258>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d00e      	beq.n	800a6bc <UART_AdvFeatureConfig+0x1cc>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a2a      	ldr	r2, [pc, #168]	; (800a74c <UART_AdvFeatureConfig+0x25c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d009      	beq.n	800a6bc <UART_AdvFeatureConfig+0x1cc>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a28      	ldr	r2, [pc, #160]	; (800a750 <UART_AdvFeatureConfig+0x260>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d004      	beq.n	800a6bc <UART_AdvFeatureConfig+0x1cc>
 800a6b2:	f640 4115 	movw	r1, #3093	; 0xc15
 800a6b6:	4822      	ldr	r0, [pc, #136]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a6b8:	f7f6 fc0a 	bl	8000ed0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <UART_AdvFeatureConfig+0x1e8>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6cc:	d004      	beq.n	800a6d8 <UART_AdvFeatureConfig+0x1e8>
 800a6ce:	f640 4116 	movw	r1, #3094	; 0xc16
 800a6d2:	481b      	ldr	r0, [pc, #108]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a6d4:	f7f6 fbfc 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6f6:	d12d      	bne.n	800a754 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d013      	beq.n	800a728 <UART_AdvFeatureConfig+0x238>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a708:	d00e      	beq.n	800a728 <UART_AdvFeatureConfig+0x238>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a712:	d009      	beq.n	800a728 <UART_AdvFeatureConfig+0x238>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a718:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a71c:	d004      	beq.n	800a728 <UART_AdvFeatureConfig+0x238>
 800a71e:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a722:	4807      	ldr	r0, [pc, #28]	; (800a740 <UART_AdvFeatureConfig+0x250>)
 800a724:	f7f6 fbd4 	bl	8000ed0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	605a      	str	r2, [r3, #4]
 800a73e:	e009      	b.n	800a754 <UART_AdvFeatureConfig+0x264>
 800a740:	0800fd4c 	.word	0x0800fd4c
 800a744:	40011000 	.word	0x40011000
 800a748:	40004400 	.word	0x40004400
 800a74c:	40004800 	.word	0x40004800
 800a750:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d018      	beq.n	800a792 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a764:	2b00      	cmp	r3, #0
 800a766:	d009      	beq.n	800a77c <UART_AdvFeatureConfig+0x28c>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a770:	d004      	beq.n	800a77c <UART_AdvFeatureConfig+0x28c>
 800a772:	f640 4123 	movw	r1, #3107	; 0xc23
 800a776:	4809      	ldr	r0, [pc, #36]	; (800a79c <UART_AdvFeatureConfig+0x2ac>)
 800a778:	f7f6 fbaa 	bl	8000ed0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
  }
}
 800a792:	bf00      	nop
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	0800fd4c 	.word	0x0800fd4c

0800a7a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7b0:	f7f8 fb22 	bl	8002df8 <HAL_GetTick>
 800a7b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0308 	and.w	r3, r3, #8
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d10e      	bne.n	800a7e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f831 	bl	800a83a <UART_WaitOnFlagUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e027      	b.n	800a832 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d10e      	bne.n	800a80e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f81b 	bl	800a83a <UART_WaitOnFlagUntilTimeout>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e011      	b.n	800a832 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b09c      	sub	sp, #112	; 0x70
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	603b      	str	r3, [r7, #0]
 800a846:	4613      	mov	r3, r2
 800a848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a84a:	e0a7      	b.n	800a99c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a84c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	f000 80a3 	beq.w	800a99c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a856:	f7f8 facf 	bl	8002df8 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a862:	429a      	cmp	r2, r3
 800a864:	d302      	bcc.n	800a86c <UART_WaitOnFlagUntilTimeout+0x32>
 800a866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d13f      	bne.n	800a8ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a87c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a880:	667b      	str	r3, [r7, #100]	; 0x64
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a88a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a88c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	f023 0301 	bic.w	r3, r3, #1
 800a8b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8be:	64ba      	str	r2, [r7, #72]	; 0x48
 800a8c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e5      	bne.n	800a89e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e068      	b.n	800a9be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d050      	beq.n	800a99c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a908:	d148      	bne.n	800a99c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a912:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a932:	637b      	str	r3, [r7, #52]	; 0x34
 800a934:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e6      	bne.n	800a914 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	613b      	str	r3, [r7, #16]
   return(result);
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3308      	adds	r3, #8
 800a964:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a966:	623a      	str	r2, [r7, #32]
 800a968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	69f9      	ldr	r1, [r7, #28]
 800a96c:	6a3a      	ldr	r2, [r7, #32]
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	61bb      	str	r3, [r7, #24]
   return(result);
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e5      	bne.n	800a946 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2220      	movs	r2, #32
 800a97e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2220      	movs	r2, #32
 800a984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2220      	movs	r2, #32
 800a98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e010      	b.n	800a9be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69da      	ldr	r2, [r3, #28]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2301      	moveq	r3, #1
 800a9ae:	2300      	movne	r3, #0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	f43f af48 	beq.w	800a84c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3770      	adds	r7, #112	; 0x70
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	f107 001c 	add.w	r0, r7, #28
 800a9d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d120      	bne.n	800aa22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <USB_CoreInit+0xac>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d105      	bne.n	800aa16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fa96 	bl	800af48 <USB_CoreReset>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]
 800aa20:	e010      	b.n	800aa44 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa8a 	bl	800af48 <USB_CoreReset>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10b      	bne.n	800aa62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f043 0206 	orr.w	r2, r3, #6
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa6e:	b004      	add	sp, #16
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	ffbdffbf 	.word	0xffbdffbf

0800aa78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f023 0201 	bic.w	r2, r3, #1
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d115      	bne.n	800aae8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aac8:	2001      	movs	r0, #1
 800aaca:	f7f8 f9a1 	bl	8002e10 <HAL_Delay>
      ms++;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3301      	adds	r3, #1
 800aad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fa29 	bl	800af2c <USB_GetMode>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d01e      	beq.n	800ab1e <USB_SetCurrentMode+0x84>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b31      	cmp	r3, #49	; 0x31
 800aae4:	d9f0      	bls.n	800aac8 <USB_SetCurrentMode+0x2e>
 800aae6:	e01a      	b.n	800ab1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d115      	bne.n	800ab1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aafa:	2001      	movs	r0, #1
 800aafc:	f7f8 f988 	bl	8002e10 <HAL_Delay>
      ms++;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa10 	bl	800af2c <USB_GetMode>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d005      	beq.n	800ab1e <USB_SetCurrentMode+0x84>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b31      	cmp	r3, #49	; 0x31
 800ab16:	d9f0      	bls.n	800aafa <USB_SetCurrentMode+0x60>
 800ab18:	e001      	b.n	800ab1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e005      	b.n	800ab2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b32      	cmp	r3, #50	; 0x32
 800ab22:	d101      	bne.n	800ab28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	e000      	b.n	800ab2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab34:	b084      	sub	sp, #16
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ab42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ab4e:	2300      	movs	r3, #0
 800ab50:	613b      	str	r3, [r7, #16]
 800ab52:	e009      	b.n	800ab68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	3340      	adds	r3, #64	; 0x40
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	3301      	adds	r3, #1
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2b0e      	cmp	r3, #14
 800ab6c:	d9f2      	bls.n	800ab54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ab6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11c      	bne.n	800abae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab82:	f043 0302 	orr.w	r3, r3, #2
 800ab86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	e005      	b.n	800abba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abc0:	461a      	mov	r2, r3
 800abc2:	2300      	movs	r3, #0
 800abc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abcc:	4619      	mov	r1, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd4:	461a      	mov	r2, r3
 800abd6:	680b      	ldr	r3, [r1, #0]
 800abd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d10c      	bne.n	800abfa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d104      	bne.n	800abf0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800abe6:	2100      	movs	r1, #0
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f965 	bl	800aeb8 <USB_SetDevSpeed>
 800abee:	e008      	b.n	800ac02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800abf0:	2101      	movs	r1, #1
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f960 	bl	800aeb8 <USB_SetDevSpeed>
 800abf8:	e003      	b.n	800ac02 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800abfa:	2103      	movs	r1, #3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f95b 	bl	800aeb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac02:	2110      	movs	r1, #16
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f8f3 	bl	800adf0 <USB_FlushTxFifo>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f91f 	bl	800ae58 <USB_FlushRxFifo>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	461a      	mov	r2, r3
 800ac38:	2300      	movs	r3, #0
 800ac3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac42:	461a      	mov	r2, r3
 800ac44:	2300      	movs	r3, #0
 800ac46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
 800ac4c:	e043      	b.n	800acd6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac64:	d118      	bne.n	800ac98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	e013      	b.n	800acaa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e008      	b.n	800acaa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca4:	461a      	mov	r2, r3
 800aca6:	2300      	movs	r3, #0
 800aca8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb6:	461a      	mov	r2, r3
 800acb8:	2300      	movs	r3, #0
 800acba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc8:	461a      	mov	r2, r3
 800acca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800acce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	3301      	adds	r3, #1
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d3b7      	bcc.n	800ac4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	e043      	b.n	800ad6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acfa:	d118      	bne.n	800ad2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	e013      	b.n	800ad40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad24:	461a      	mov	r2, r3
 800ad26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	e008      	b.n	800ad40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ad64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	613b      	str	r3, [r7, #16]
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d3b7      	bcc.n	800ace4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ad94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d105      	bne.n	800ada8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	f043 0210 	orr.w	r2, r3, #16
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	699a      	ldr	r2, [r3, #24]
 800adac:	4b0e      	ldr	r3, [pc, #56]	; (800ade8 <USB_DevInit+0x2b4>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800adb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d005      	beq.n	800adc6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f043 0208 	orr.w	r2, r3, #8
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800adc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d105      	bne.n	800add8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	699a      	ldr	r2, [r3, #24]
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <USB_DevInit+0x2b8>)
 800add2:	4313      	orrs	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ade4:	b004      	add	sp, #16
 800ade6:	4770      	bx	lr
 800ade8:	803c3800 	.word	0x803c3800
 800adec:	40000004 	.word	0x40000004

0800adf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <USB_FlushTxFifo+0x64>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d901      	bls.n	800ae10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e01b      	b.n	800ae48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	daf2      	bge.n	800adfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	019b      	lsls	r3, r3, #6
 800ae20:	f043 0220 	orr.w	r2, r3, #32
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	4a08      	ldr	r2, [pc, #32]	; (800ae54 <USB_FlushTxFifo+0x64>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d901      	bls.n	800ae3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e006      	b.n	800ae48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	d0f0      	beq.n	800ae28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	00030d40 	.word	0x00030d40

0800ae58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3301      	adds	r3, #1
 800ae68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4a11      	ldr	r2, [pc, #68]	; (800aeb4 <USB_FlushRxFifo+0x5c>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d901      	bls.n	800ae76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e018      	b.n	800aea8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	daf2      	bge.n	800ae64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2210      	movs	r2, #16
 800ae86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	4a08      	ldr	r2, [pc, #32]	; (800aeb4 <USB_FlushRxFifo+0x5c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d901      	bls.n	800ae9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e006      	b.n	800aea8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f003 0310 	and.w	r3, r3, #16
 800aea2:	2b10      	cmp	r3, #16
 800aea4:	d0f0      	beq.n	800ae88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	00030d40 	.word	0x00030d40

0800aeb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aed8:	4313      	orrs	r3, r2
 800aeda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b085      	sub	sp, #20
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af04:	f023 0303 	bic.w	r3, r3, #3
 800af08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	f003 0301 	and.w	r3, r3, #1
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	4a13      	ldr	r2, [pc, #76]	; (800afac <USB_CoreReset+0x64>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d901      	bls.n	800af66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e01b      	b.n	800af9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	daf2      	bge.n	800af54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	f043 0201 	orr.w	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4a09      	ldr	r2, [pc, #36]	; (800afac <USB_CoreReset+0x64>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d901      	bls.n	800af90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e006      	b.n	800af9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d0f0      	beq.n	800af7e <USB_CoreReset+0x36>

  return HAL_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	00030d40 	.word	0x00030d40

0800afb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800afb4:	bf00      	nop
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
	...

0800afc0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afc6:	f3ef 8305 	mrs	r3, IPSR
 800afca:	60bb      	str	r3, [r7, #8]
  return(result);
 800afcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10f      	bne.n	800aff2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afd2:	f3ef 8310 	mrs	r3, PRIMASK
 800afd6:	607b      	str	r3, [r7, #4]
  return(result);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d105      	bne.n	800afea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afde:	f3ef 8311 	mrs	r3, BASEPRI
 800afe2:	603b      	str	r3, [r7, #0]
  return(result);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <osKernelInitialize+0x3a>
 800afea:	4b0e      	ldr	r3, [pc, #56]	; (800b024 <osKernelInitialize+0x64>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d103      	bne.n	800affa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aff2:	f06f 0305 	mvn.w	r3, #5
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	e00c      	b.n	800b014 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800affa:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <osKernelInitialize+0x64>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d105      	bne.n	800b00e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b002:	4b08      	ldr	r3, [pc, #32]	; (800b024 <osKernelInitialize+0x64>)
 800b004:	2201      	movs	r2, #1
 800b006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e002      	b.n	800b014 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b00e:	f04f 33ff 	mov.w	r3, #4294967295
 800b012:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b014:	68fb      	ldr	r3, [r7, #12]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20000b30 	.word	0x20000b30

0800b028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b02e:	f3ef 8305 	mrs	r3, IPSR
 800b032:	60bb      	str	r3, [r7, #8]
  return(result);
 800b034:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10f      	bne.n	800b05a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b03a:	f3ef 8310 	mrs	r3, PRIMASK
 800b03e:	607b      	str	r3, [r7, #4]
  return(result);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d105      	bne.n	800b052 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b046:	f3ef 8311 	mrs	r3, BASEPRI
 800b04a:	603b      	str	r3, [r7, #0]
  return(result);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d007      	beq.n	800b062 <osKernelStart+0x3a>
 800b052:	4b0f      	ldr	r3, [pc, #60]	; (800b090 <osKernelStart+0x68>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d103      	bne.n	800b062 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b05a:	f06f 0305 	mvn.w	r3, #5
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	e010      	b.n	800b084 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <osKernelStart+0x68>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d109      	bne.n	800b07e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b06a:	f7ff ffa1 	bl	800afb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b06e:	4b08      	ldr	r3, [pc, #32]	; (800b090 <osKernelStart+0x68>)
 800b070:	2202      	movs	r2, #2
 800b072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b074:	f001 f966 	bl	800c344 <vTaskStartScheduler>
      stat = osOK;
 800b078:	2300      	movs	r3, #0
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	e002      	b.n	800b084 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b07e:	f04f 33ff 	mov.w	r3, #4294967295
 800b082:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b084:	68fb      	ldr	r3, [r7, #12]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000b30 	.word	0x20000b30

0800b094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b094:	b580      	push	{r7, lr}
 800b096:	b090      	sub	sp, #64	; 0x40
 800b098:	af04      	add	r7, sp, #16
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a4:	f3ef 8305 	mrs	r3, IPSR
 800b0a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800b0aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f040 808f 	bne.w	800b1d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b0b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0be:	f3ef 8311 	mrs	r3, BASEPRI
 800b0c2:	617b      	str	r3, [r7, #20]
  return(result);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <osThreadNew+0x3e>
 800b0ca:	4b44      	ldr	r3, [pc, #272]	; (800b1dc <osThreadNew+0x148>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d07e      	beq.n	800b1d0 <osThreadNew+0x13c>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d07b      	beq.n	800b1d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b0d8:	2380      	movs	r3, #128	; 0x80
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b0dc:	2318      	movs	r3, #24
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d045      	beq.n	800b17c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <osThreadNew+0x6a>
        name = attr->name;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d008      	beq.n	800b124 <osThreadNew+0x90>
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	2b38      	cmp	r3, #56	; 0x38
 800b116:	d805      	bhi.n	800b124 <osThreadNew+0x90>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <osThreadNew+0x94>
        return (NULL);
 800b124:	2300      	movs	r3, #0
 800b126:	e054      	b.n	800b1d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	695b      	ldr	r3, [r3, #20]
 800b134:	089b      	lsrs	r3, r3, #2
 800b136:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00e      	beq.n	800b15e <osThreadNew+0xca>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	2bbb      	cmp	r3, #187	; 0xbb
 800b146:	d90a      	bls.n	800b15e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d006      	beq.n	800b15e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <osThreadNew+0xca>
        mem = 1;
 800b158:	2301      	movs	r3, #1
 800b15a:	623b      	str	r3, [r7, #32]
 800b15c:	e010      	b.n	800b180 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10c      	bne.n	800b180 <osThreadNew+0xec>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d108      	bne.n	800b180 <osThreadNew+0xec>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d104      	bne.n	800b180 <osThreadNew+0xec>
          mem = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	623b      	str	r3, [r7, #32]
 800b17a:	e001      	b.n	800b180 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d110      	bne.n	800b1a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b18e:	9202      	str	r2, [sp, #8]
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 feb9 	bl	800bf14 <xTaskCreateStatic>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	e013      	b.n	800b1d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d110      	bne.n	800b1d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	f107 0310 	add.w	r3, r7, #16
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 ff0a 	bl	800bfda <xTaskCreate>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d001      	beq.n	800b1d0 <osThreadNew+0x13c>
          hTask = NULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1d0:	693b      	ldr	r3, [r7, #16]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3730      	adds	r7, #48	; 0x30
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000b30 	.word	0x20000b30

0800b1e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1e8:	f3ef 8305 	mrs	r3, IPSR
 800b1ec:	613b      	str	r3, [r7, #16]
  return(result);
 800b1ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10f      	bne.n	800b214 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d105      	bne.n	800b20c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b200:	f3ef 8311 	mrs	r3, BASEPRI
 800b204:	60bb      	str	r3, [r7, #8]
  return(result);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d007      	beq.n	800b21c <osDelay+0x3c>
 800b20c:	4b0a      	ldr	r3, [pc, #40]	; (800b238 <osDelay+0x58>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d103      	bne.n	800b21c <osDelay+0x3c>
    stat = osErrorISR;
 800b214:	f06f 0305 	mvn.w	r3, #5
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	e007      	b.n	800b22c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d002      	beq.n	800b22c <osDelay+0x4c>
      vTaskDelay(ticks);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f001 f852 	bl	800c2d0 <vTaskDelay>
    }
  }

  return (stat);
 800b22c:	697b      	ldr	r3, [r7, #20]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20000b30 	.word	0x20000b30

0800b23c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a07      	ldr	r2, [pc, #28]	; (800b268 <vApplicationGetIdleTaskMemory+0x2c>)
 800b24c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4a06      	ldr	r2, [pc, #24]	; (800b26c <vApplicationGetIdleTaskMemory+0x30>)
 800b252:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2280      	movs	r2, #128	; 0x80
 800b258:	601a      	str	r2, [r3, #0]
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20000b34 	.word	0x20000b34
 800b26c:	20000bf0 	.word	0x20000bf0

0800b270 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4a07      	ldr	r2, [pc, #28]	; (800b29c <vApplicationGetTimerTaskMemory+0x2c>)
 800b280:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	4a06      	ldr	r2, [pc, #24]	; (800b2a0 <vApplicationGetTimerTaskMemory+0x30>)
 800b286:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b28e:	601a      	str	r2, [r3, #0]
}
 800b290:	bf00      	nop
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	20000df0 	.word	0x20000df0
 800b2a0:	20000eac 	.word	0x20000eac

0800b2a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f103 0208 	add.w	r2, r3, #8
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f103 0208 	add.w	r2, r3, #8
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f103 0208 	add.w	r2, r3, #8
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]
}
 800b33a:	bf00      	nop
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35c:	d103      	bne.n	800b366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	e00c      	b.n	800b380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3308      	adds	r3, #8
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e002      	b.n	800b374 <vListInsert+0x2e>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d2f6      	bcs.n	800b36e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	601a      	str	r2, [r3, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6892      	ldr	r2, [r2, #8]
 800b3ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	6852      	ldr	r2, [r2, #4]
 800b3d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d103      	bne.n	800b3ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	1e5a      	subs	r2, r3, #1
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10c      	bne.n	800b43a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	b672      	cpsid	i
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	b662      	cpsie	i
 800b434:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b43a:	f002 f9c7 	bl	800d7cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	68f9      	ldr	r1, [r7, #12]
 800b448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b44a:	fb01 f303 	mul.w	r3, r1, r3
 800b44e:	441a      	add	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46a:	3b01      	subs	r3, #1
 800b46c:	68f9      	ldr	r1, [r7, #12]
 800b46e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b470:	fb01 f303 	mul.w	r3, r1, r3
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	22ff      	movs	r2, #255	; 0xff
 800b47e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	22ff      	movs	r2, #255	; 0xff
 800b486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d114      	bne.n	800b4ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01a      	beq.n	800b4ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3310      	adds	r3, #16
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 fa3b 	bl	800c918 <xTaskRemoveFromEventList>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <xQueueGenericReset+0xd0>)
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	e009      	b.n	800b4ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3310      	adds	r3, #16
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff fef0 	bl	800b2a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3324      	adds	r3, #36	; 0x24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff feeb 	bl	800b2a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4ce:	f002 f9b1 	bl	800d834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4d2:	2301      	movs	r3, #1
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	e000ed04 	.word	0xe000ed04

0800b4e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08e      	sub	sp, #56	; 0x38
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10c      	bne.n	800b50e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	b672      	cpsid	i
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	b662      	cpsie	i
 800b508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10c      	bne.n	800b52e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	b672      	cpsid	i
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	b662      	cpsie	i
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <xQueueGenericCreateStatic+0x5a>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <xQueueGenericCreateStatic+0x5e>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <xQueueGenericCreateStatic+0x60>
 800b53e:	2300      	movs	r3, #0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10c      	bne.n	800b55e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	b672      	cpsid	i
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	b662      	cpsie	i
 800b558:	623b      	str	r3, [r7, #32]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <xQueueGenericCreateStatic+0x8a>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <xQueueGenericCreateStatic+0x8e>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e000      	b.n	800b570 <xQueueGenericCreateStatic+0x90>
 800b56e:	2300      	movs	r3, #0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10c      	bne.n	800b58e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	b672      	cpsid	i
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	b662      	cpsie	i
 800b588:	61fb      	str	r3, [r7, #28]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b58e:	2350      	movs	r3, #80	; 0x50
 800b590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b50      	cmp	r3, #80	; 0x50
 800b596:	d00c      	beq.n	800b5b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	b672      	cpsid	i
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	b662      	cpsie	i
 800b5ac:	61bb      	str	r3, [r7, #24]
}
 800b5ae:	bf00      	nop
 800b5b0:	e7fe      	b.n	800b5b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f805 	bl	800b5e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3730      	adds	r7, #48	; 0x30
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	e002      	b.n	800b606 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b612:	2101      	movs	r1, #1
 800b614:	69b8      	ldr	r0, [r7, #24]
 800b616:	f7ff fef9 	bl	800b40c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	78fa      	ldrb	r2, [r7, #3]
 800b61e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	68f9      	ldr	r1, [r7, #12]
 800b628:	2073      	movs	r0, #115	; 0x73
 800b62a:	f003 f949 	bl	800e8c0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800b62e:	bf00      	nop
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b090      	sub	sp, #64	; 0x40
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b646:	2300      	movs	r3, #0
 800b648:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10c      	bne.n	800b66e <xQueueGenericSend+0x36>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	b672      	cpsid	i
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	b662      	cpsie	i
 800b668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d103      	bne.n	800b67c <xQueueGenericSend+0x44>
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <xQueueGenericSend+0x48>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <xQueueGenericSend+0x4a>
 800b680:	2300      	movs	r3, #0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10c      	bne.n	800b6a0 <xQueueGenericSend+0x68>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	b672      	cpsid	i
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	b662      	cpsie	i
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d103      	bne.n	800b6ae <xQueueGenericSend+0x76>
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d101      	bne.n	800b6b2 <xQueueGenericSend+0x7a>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <xQueueGenericSend+0x7c>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10c      	bne.n	800b6d2 <xQueueGenericSend+0x9a>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	b672      	cpsid	i
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	b662      	cpsie	i
 800b6cc:	623b      	str	r3, [r7, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6d2:	f001 fb27 	bl	800cd24 <xTaskGetSchedulerState>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <xQueueGenericSend+0xaa>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <xQueueGenericSend+0xae>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e000      	b.n	800b6e8 <xQueueGenericSend+0xb0>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10c      	bne.n	800b706 <xQueueGenericSend+0xce>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	b672      	cpsid	i
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	b662      	cpsie	i
 800b700:	61fb      	str	r3, [r7, #28]
}
 800b702:	bf00      	nop
 800b704:	e7fe      	b.n	800b704 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b706:	f002 f861 	bl	800d7cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b712:	429a      	cmp	r2, r3
 800b714:	d302      	bcc.n	800b71c <xQueueGenericSend+0xe4>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d136      	bne.n	800b78a <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	4618      	mov	r0, r3
 800b720:	f003 fd8a 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	460b      	mov	r3, r1
 800b72e:	4601      	mov	r1, r0
 800b730:	205a      	movs	r0, #90	; 0x5a
 800b732:	f003 f93b 	bl	800e9ac <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	68b9      	ldr	r1, [r7, #8]
 800b73a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b73c:	f000 fa74 	bl	800bc28 <prvCopyDataToQueue>
 800b740:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2b00      	cmp	r3, #0
 800b748:	d010      	beq.n	800b76c <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	3324      	adds	r3, #36	; 0x24
 800b74e:	4618      	mov	r0, r3
 800b750:	f001 f8e2 	bl	800c918 <xTaskRemoveFromEventList>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d013      	beq.n	800b782 <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b75a:	4b4d      	ldr	r3, [pc, #308]	; (800b890 <xQueueGenericSend+0x258>)
 800b75c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	e00a      	b.n	800b782 <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b772:	4b47      	ldr	r3, [pc, #284]	; (800b890 <xQueueGenericSend+0x258>)
 800b774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b782:	f002 f857 	bl	800d834 <vPortExitCritical>
				return pdPASS;
 800b786:	2301      	movs	r3, #1
 800b788:	e07d      	b.n	800b886 <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d110      	bne.n	800b7b2 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b790:	f002 f850 	bl	800d834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	4618      	mov	r0, r3
 800b798:	f003 fd4e 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	205a      	movs	r0, #90	; 0x5a
 800b7aa:	f003 f8ff 	bl	800e9ac <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e069      	b.n	800b886 <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7b8:	f107 0314 	add.w	r3, r7, #20
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 f915 	bl	800c9ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7c6:	f002 f835 	bl	800d834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7ca:	f000 fe41 	bl	800c450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7ce:	f001 fffd 	bl	800d7cc <vPortEnterCritical>
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7d8:	b25b      	sxtb	r3, r3
 800b7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7de:	d103      	bne.n	800b7e8 <xQueueGenericSend+0x1b0>
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ee:	b25b      	sxtb	r3, r3
 800b7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f4:	d103      	bne.n	800b7fe <xQueueGenericSend+0x1c6>
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7fe:	f002 f819 	bl	800d834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b802:	1d3a      	adds	r2, r7, #4
 800b804:	f107 0314 	add.w	r3, r7, #20
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f001 f904 	bl	800ca18 <xTaskCheckForTimeOut>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d124      	bne.n	800b860 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b818:	f000 fafe 	bl	800be18 <prvIsQueueFull>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d018      	beq.n	800b854 <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	3310      	adds	r3, #16
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 f81e 	bl	800c86c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b832:	f000 fa89 	bl	800bd48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b836:	f000 fe19 	bl	800c46c <xTaskResumeAll>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f47f af62 	bne.w	800b706 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b842:	4b13      	ldr	r3, [pc, #76]	; (800b890 <xQueueGenericSend+0x258>)
 800b844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	e758      	b.n	800b706 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b856:	f000 fa77 	bl	800bd48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b85a:	f000 fe07 	bl	800c46c <xTaskResumeAll>
 800b85e:	e752      	b.n	800b706 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b862:	f000 fa71 	bl	800bd48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b866:	f000 fe01 	bl	800c46c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	4618      	mov	r0, r3
 800b86e:	f003 fce3 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	460b      	mov	r3, r1
 800b87c:	4601      	mov	r1, r0
 800b87e:	205a      	movs	r0, #90	; 0x5a
 800b880:	f003 f894 	bl	800e9ac <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800b884:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b886:	4618      	mov	r0, r3
 800b888:	3738      	adds	r7, #56	; 0x38
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	e000ed04 	.word	0xe000ed04

0800b894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08e      	sub	sp, #56	; 0x38
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10c      	bne.n	800b8c6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	b672      	cpsid	i
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	b662      	cpsie	i
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d103      	bne.n	800b8d4 <xQueueGenericSendFromISR+0x40>
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <xQueueGenericSendFromISR+0x44>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e000      	b.n	800b8da <xQueueGenericSendFromISR+0x46>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10c      	bne.n	800b8f8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	b672      	cpsid	i
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	b662      	cpsie	i
 800b8f2:	623b      	str	r3, [r7, #32]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d103      	bne.n	800b906 <xQueueGenericSendFromISR+0x72>
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <xQueueGenericSendFromISR+0x76>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <xQueueGenericSendFromISR+0x78>
 800b90a:	2300      	movs	r3, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10c      	bne.n	800b92a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	b672      	cpsid	i
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	b662      	cpsie	i
 800b924:	61fb      	str	r3, [r7, #28]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b92a:	f002 f837 	bl	800d99c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b92e:	f3ef 8211 	mrs	r2, BASEPRI
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	b672      	cpsid	i
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	b662      	cpsie	i
 800b946:	61ba      	str	r2, [r7, #24]
 800b948:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b94a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b956:	429a      	cmp	r2, r3
 800b958:	d302      	bcc.n	800b960 <xQueueGenericSendFromISR+0xcc>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d136      	bne.n	800b9ce <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	4618      	mov	r0, r3
 800b96e:	f003 fc63 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800b972:	4601      	mov	r1, r0
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	461a      	mov	r2, r3
 800b978:	2060      	movs	r0, #96	; 0x60
 800b97a:	f002 ff47 	bl	800e80c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b984:	f000 f950 	bl	800bc28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b988:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b990:	d112      	bne.n	800b9b8 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	d016      	beq.n	800b9c8 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	3324      	adds	r3, #36	; 0x24
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 ffba 	bl	800c918 <xTaskRemoveFromEventList>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00e      	beq.n	800b9c8 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	e007      	b.n	800b9c8 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9bc:	3301      	adds	r3, #1
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	b25a      	sxtb	r2, r3
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b9cc:	e00b      	b.n	800b9e6 <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f003 fc31 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	2060      	movs	r0, #96	; 0x60
 800b9de:	f002 ff15 	bl	800e80c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3738      	adds	r7, #56	; 0x38
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9fc:	b590      	push	{r4, r7, lr}
 800b9fe:	b08f      	sub	sp, #60	; 0x3c
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10c      	bne.n	800ba30 <xQueueReceive+0x34>
	__asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	b672      	cpsid	i
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	b662      	cpsie	i
 800ba2a:	623b      	str	r3, [r7, #32]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d103      	bne.n	800ba3e <xQueueReceive+0x42>
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <xQueueReceive+0x46>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e000      	b.n	800ba44 <xQueueReceive+0x48>
 800ba42:	2300      	movs	r3, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10c      	bne.n	800ba62 <xQueueReceive+0x66>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	b672      	cpsid	i
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	b662      	cpsie	i
 800ba5c:	61fb      	str	r3, [r7, #28]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba62:	f001 f95f 	bl	800cd24 <xTaskGetSchedulerState>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <xQueueReceive+0x76>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <xQueueReceive+0x7a>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e000      	b.n	800ba78 <xQueueReceive+0x7c>
 800ba76:	2300      	movs	r3, #0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10c      	bne.n	800ba96 <xQueueReceive+0x9a>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	61bb      	str	r3, [r7, #24]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba96:	f001 fe99 	bl	800d7cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d02f      	beq.n	800bb06 <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800baa6:	68b9      	ldr	r1, [r7, #8]
 800baa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baaa:	f000 f927 	bl	800bcfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	4618      	mov	r0, r3
 800bab2:	f003 fbc1 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800bab6:	4604      	mov	r4, r0
 800bab8:	2000      	movs	r0, #0
 800baba:	f003 fbbd 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800babe:	4602      	mov	r2, r0
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2101      	movs	r1, #1
 800bac4:	9100      	str	r1, [sp, #0]
 800bac6:	4621      	mov	r1, r4
 800bac8:	205c      	movs	r0, #92	; 0x5c
 800baca:	f002 ff6f 	bl	800e9ac <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00f      	beq.n	800bafe <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	3310      	adds	r3, #16
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 ff18 	bl	800c918 <xTaskRemoveFromEventList>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800baee:	4b4d      	ldr	r3, [pc, #308]	; (800bc24 <xQueueReceive+0x228>)
 800baf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bafe:	f001 fe99 	bl	800d834 <vPortExitCritical>
				return pdPASS;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e08a      	b.n	800bc1c <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d113      	bne.n	800bb34 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb0c:	f001 fe92 	bl	800d834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	4618      	mov	r0, r3
 800bb14:	f003 fb90 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	f003 fb8c 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800bb20:	4602      	mov	r2, r0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2101      	movs	r1, #1
 800bb26:	9100      	str	r1, [sp, #0]
 800bb28:	4621      	mov	r1, r4
 800bb2a:	205c      	movs	r0, #92	; 0x5c
 800bb2c:	f002 ff3e 	bl	800e9ac <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800bb30:	2300      	movs	r3, #0
 800bb32:	e073      	b.n	800bc1c <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb3a:	f107 0310 	add.w	r3, r7, #16
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 ff54 	bl	800c9ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb44:	2301      	movs	r3, #1
 800bb46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb48:	f001 fe74 	bl	800d834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb4c:	f000 fc80 	bl	800c450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb50:	f001 fe3c 	bl	800d7cc <vPortEnterCritical>
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb5a:	b25b      	sxtb	r3, r3
 800bb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb60:	d103      	bne.n	800bb6a <xQueueReceive+0x16e>
 800bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb70:	b25b      	sxtb	r3, r3
 800bb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb76:	d103      	bne.n	800bb80 <xQueueReceive+0x184>
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb80:	f001 fe58 	bl	800d834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb84:	1d3a      	adds	r2, r7, #4
 800bb86:	f107 0310 	add.w	r3, r7, #16
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 ff43 	bl	800ca18 <xTaskCheckForTimeOut>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d124      	bne.n	800bbe2 <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb9a:	f000 f927 	bl	800bdec <prvIsQueueEmpty>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d018      	beq.n	800bbd6 <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	3324      	adds	r3, #36	; 0x24
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fe5d 	bl	800c86c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb4:	f000 f8c8 	bl	800bd48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbb8:	f000 fc58 	bl	800c46c <xTaskResumeAll>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f47f af69 	bne.w	800ba96 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bbc4:	4b17      	ldr	r3, [pc, #92]	; (800bc24 <xQueueReceive+0x228>)
 800bbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	e75f      	b.n	800ba96 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbd8:	f000 f8b6 	bl	800bd48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbdc:	f000 fc46 	bl	800c46c <xTaskResumeAll>
 800bbe0:	e759      	b.n	800ba96 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbe4:	f000 f8b0 	bl	800bd48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbe8:	f000 fc40 	bl	800c46c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbee:	f000 f8fd 	bl	800bdec <prvIsQueueEmpty>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f43f af4e 	beq.w	800ba96 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f003 fb1b 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800bc02:	4604      	mov	r4, r0
 800bc04:	2000      	movs	r0, #0
 800bc06:	f003 fb17 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2101      	movs	r1, #1
 800bc10:	9100      	str	r1, [sp, #0]
 800bc12:	4621      	mov	r1, r4
 800bc14:	205c      	movs	r0, #92	; 0x5c
 800bc16:	f002 fec9 	bl	800e9ac <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800bc1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3734      	adds	r7, #52	; 0x34
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd90      	pop	{r4, r7, pc}
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10d      	bne.n	800bc62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d14d      	bne.n	800bcea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 f884 	bl	800cd60 <xTaskPriorityDisinherit>
 800bc58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	609a      	str	r2, [r3, #8]
 800bc60:	e043      	b.n	800bcea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d119      	bne.n	800bc9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6858      	ldr	r0, [r3, #4]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc70:	461a      	mov	r2, r3
 800bc72:	68b9      	ldr	r1, [r7, #8]
 800bc74:	f003 fdc4 	bl	800f800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc80:	441a      	add	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d32b      	bcc.n	800bcea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	605a      	str	r2, [r3, #4]
 800bc9a:	e026      	b.n	800bcea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	68d8      	ldr	r0, [r3, #12]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca4:	461a      	mov	r2, r3
 800bca6:	68b9      	ldr	r1, [r7, #8]
 800bca8:	f003 fdaa 	bl	800f800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68da      	ldr	r2, [r3, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb4:	425b      	negs	r3, r3
 800bcb6:	441a      	add	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	68da      	ldr	r2, [r3, #12]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d207      	bcs.n	800bcd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	689a      	ldr	r2, [r3, #8]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd0:	425b      	negs	r3, r3
 800bcd2:	441a      	add	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	d105      	bne.n	800bcea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcf2:	697b      	ldr	r3, [r7, #20]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d018      	beq.n	800bd40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd16:	441a      	add	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d303      	bcc.n	800bd30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	68d9      	ldr	r1, [r3, #12]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd38:	461a      	mov	r2, r3
 800bd3a:	6838      	ldr	r0, [r7, #0]
 800bd3c:	f003 fd60 	bl	800f800 <memcpy>
	}
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd50:	f001 fd3c 	bl	800d7cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd5c:	e011      	b.n	800bd82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d012      	beq.n	800bd8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3324      	adds	r3, #36	; 0x24
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fdd4 	bl	800c918 <xTaskRemoveFromEventList>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd76:	f000 feb5 	bl	800cae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	dce9      	bgt.n	800bd5e <prvUnlockQueue+0x16>
 800bd8a:	e000      	b.n	800bd8e <prvUnlockQueue+0x46>
					break;
 800bd8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	22ff      	movs	r2, #255	; 0xff
 800bd92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd96:	f001 fd4d 	bl	800d834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd9a:	f001 fd17 	bl	800d7cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bda6:	e011      	b.n	800bdcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d012      	beq.n	800bdd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3310      	adds	r3, #16
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fdaf 	bl	800c918 <xTaskRemoveFromEventList>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdc0:	f000 fe90 	bl	800cae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dce9      	bgt.n	800bda8 <prvUnlockQueue+0x60>
 800bdd4:	e000      	b.n	800bdd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	22ff      	movs	r2, #255	; 0xff
 800bddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bde0:	f001 fd28 	bl	800d834 <vPortExitCritical>
}
 800bde4:	bf00      	nop
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdf4:	f001 fcea 	bl	800d7cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be00:	2301      	movs	r3, #1
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	e001      	b.n	800be0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be06:	2300      	movs	r3, #0
 800be08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be0a:	f001 fd13 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800be0e:	68fb      	ldr	r3, [r7, #12]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be20:	f001 fcd4 	bl	800d7cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d102      	bne.n	800be36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be30:	2301      	movs	r3, #1
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	e001      	b.n	800be3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be3a:	f001 fcfb 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800be3e:	68fb      	ldr	r3, [r7, #12]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	e01e      	b.n	800be96 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be58:	4a13      	ldr	r2, [pc, #76]	; (800bea8 <vQueueAddToRegistry+0x60>)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d115      	bne.n	800be90 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800be64:	4910      	ldr	r1, [pc, #64]	; (800bea8 <vQueueAddToRegistry+0x60>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800be6e:	4a0e      	ldr	r2, [pc, #56]	; (800bea8 <vQueueAddToRegistry+0x60>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	4413      	add	r3, r2
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f003 f9db 	bl	800f238 <SEGGER_SYSVIEW_ShrinkId>
 800be82:	4601      	mov	r1, r0
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	2071      	movs	r0, #113	; 0x71
 800be8a:	f002 fcbf 	bl	800e80c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800be8e:	e006      	b.n	800be9e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b07      	cmp	r3, #7
 800be9a:	d9dd      	bls.n	800be58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	200012ac 	.word	0x200012ac

0800beac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bebc:	f001 fc86 	bl	800d7cc <vPortEnterCritical>
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bec6:	b25b      	sxtb	r3, r3
 800bec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800becc:	d103      	bne.n	800bed6 <vQueueWaitForMessageRestricted+0x2a>
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bedc:	b25b      	sxtb	r3, r3
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d103      	bne.n	800beec <vQueueWaitForMessageRestricted+0x40>
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800beec:	f001 fca2 	bl	800d834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d106      	bne.n	800bf06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	3324      	adds	r3, #36	; 0x24
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 fcd9 	bl	800c8b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf06:	6978      	ldr	r0, [r7, #20]
 800bf08:	f7ff ff1e 	bl	800bd48 <prvUnlockQueue>
	}
 800bf0c:	bf00      	nop
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08e      	sub	sp, #56	; 0x38
 800bf18:	af04      	add	r7, sp, #16
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10c      	bne.n	800bf42 <xTaskCreateStatic+0x2e>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	b672      	cpsid	i
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	b662      	cpsie	i
 800bf3c:	623b      	str	r3, [r7, #32]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10c      	bne.n	800bf62 <xTaskCreateStatic+0x4e>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	b672      	cpsid	i
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	b662      	cpsie	i
 800bf5c:	61fb      	str	r3, [r7, #28]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf62:	23bc      	movs	r3, #188	; 0xbc
 800bf64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	2bbc      	cmp	r3, #188	; 0xbc
 800bf6a:	d00c      	beq.n	800bf86 <xTaskCreateStatic+0x72>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	b672      	cpsid	i
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	b662      	cpsie	i
 800bf80:	61bb      	str	r3, [r7, #24]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d01e      	beq.n	800bfcc <xTaskCreateStatic+0xb8>
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d01b      	beq.n	800bfcc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9303      	str	r3, [sp, #12]
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	9302      	str	r3, [sp, #8]
 800bfae:	f107 0314 	add.w	r3, r7, #20
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 f850 	bl	800c064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfc6:	f000 f8f5 	bl	800c1b4 <prvAddNewTaskToReadyList>
 800bfca:	e001      	b.n	800bfd0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfd0:	697b      	ldr	r3, [r7, #20]
	}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3728      	adds	r7, #40	; 0x28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b08c      	sub	sp, #48	; 0x30
 800bfde:	af04      	add	r7, sp, #16
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 fd18 	bl	800da24 <pvPortMalloc>
 800bff4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00e      	beq.n	800c01a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bffc:	20bc      	movs	r0, #188	; 0xbc
 800bffe:	f001 fd11 	bl	800da24 <pvPortMalloc>
 800c002:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	631a      	str	r2, [r3, #48]	; 0x30
 800c010:	e005      	b.n	800c01e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c012:	6978      	ldr	r0, [r7, #20]
 800c014:	f001 fdd0 	bl	800dbb8 <vPortFree>
 800c018:	e001      	b.n	800c01e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d017      	beq.n	800c054 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c02c:	88fa      	ldrh	r2, [r7, #6]
 800c02e:	2300      	movs	r3, #0
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	9302      	str	r3, [sp, #8]
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	68b9      	ldr	r1, [r7, #8]
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f000 f80e 	bl	800c064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c048:	69f8      	ldr	r0, [r7, #28]
 800c04a:	f000 f8b3 	bl	800c1b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c04e:	2301      	movs	r3, #1
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	e002      	b.n	800c05a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c054:	f04f 33ff 	mov.w	r3, #4294967295
 800c058:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c05a:	69bb      	ldr	r3, [r7, #24]
	}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3720      	adds	r7, #32
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	461a      	mov	r2, r3
 800c07c:	21a5      	movs	r1, #165	; 0xa5
 800c07e:	f003 fbcd 	bl	800f81c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c08c:	440b      	add	r3, r1
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	f023 0307 	bic.w	r3, r3, #7
 800c09a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00c      	beq.n	800c0c0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	b672      	cpsid	i
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	b662      	cpsie	i
 800c0ba:	617b      	str	r3, [r7, #20]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d01f      	beq.n	800c106 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	e012      	b.n	800c0f2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	7819      	ldrb	r1, [r3, #0]
 800c0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	3334      	adds	r3, #52	; 0x34
 800c0dc:	460a      	mov	r2, r1
 800c0de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d006      	beq.n	800c0fa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	2b0f      	cmp	r3, #15
 800c0f6:	d9e9      	bls.n	800c0cc <prvInitialiseNewTask+0x68>
 800c0f8:	e000      	b.n	800c0fc <prvInitialiseNewTask+0x98>
			{
				break;
 800c0fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c104:	e003      	b.n	800c10e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c110:	2b37      	cmp	r3, #55	; 0x37
 800c112:	d901      	bls.n	800c118 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c114:	2337      	movs	r3, #55	; 0x37
 800c116:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c11c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c122:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	2200      	movs	r2, #0
 800c128:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	3304      	adds	r3, #4
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff f8d8 	bl	800b2e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	3318      	adds	r3, #24
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff f8d3 	bl	800b2e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c152:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	2200      	movs	r2, #0
 800c158:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	3354      	adds	r3, #84	; 0x54
 800c168:	2260      	movs	r2, #96	; 0x60
 800c16a:	2100      	movs	r1, #0
 800c16c:	4618      	mov	r0, r3
 800c16e:	f003 fb55 	bl	800f81c <memset>
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	4a0c      	ldr	r2, [pc, #48]	; (800c1a8 <prvInitialiseNewTask+0x144>)
 800c176:	659a      	str	r2, [r3, #88]	; 0x58
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	4a0c      	ldr	r2, [pc, #48]	; (800c1ac <prvInitialiseNewTask+0x148>)
 800c17c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	4a0b      	ldr	r2, [pc, #44]	; (800c1b0 <prvInitialiseNewTask+0x14c>)
 800c182:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	68f9      	ldr	r1, [r7, #12]
 800c188:	69b8      	ldr	r0, [r7, #24]
 800c18a:	f001 fa13 	bl	800d5b4 <pxPortInitialiseStack>
 800c18e:	4602      	mov	r2, r0
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c19e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1a0:	bf00      	nop
 800c1a2:	3720      	adds	r7, #32
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	0800fed4 	.word	0x0800fed4
 800c1ac:	0800fef4 	.word	0x0800fef4
 800c1b0:	0800feb4 	.word	0x0800feb4

0800c1b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c1b4:	b5b0      	push	{r4, r5, r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af02      	add	r7, sp, #8
 800c1ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1bc:	f001 fb06 	bl	800d7cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c1c0:	4b3c      	ldr	r3, [pc, #240]	; (800c2b4 <prvAddNewTaskToReadyList+0x100>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	4a3b      	ldr	r2, [pc, #236]	; (800c2b4 <prvAddNewTaskToReadyList+0x100>)
 800c1c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c1ca:	4b3b      	ldr	r3, [pc, #236]	; (800c2b8 <prvAddNewTaskToReadyList+0x104>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d109      	bne.n	800c1e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1d2:	4a39      	ldr	r2, [pc, #228]	; (800c2b8 <prvAddNewTaskToReadyList+0x104>)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1d8:	4b36      	ldr	r3, [pc, #216]	; (800c2b4 <prvAddNewTaskToReadyList+0x100>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d110      	bne.n	800c202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1e0:	f000 fca4 	bl	800cb2c <prvInitialiseTaskLists>
 800c1e4:	e00d      	b.n	800c202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1e6:	4b35      	ldr	r3, [pc, #212]	; (800c2bc <prvAddNewTaskToReadyList+0x108>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d109      	bne.n	800c202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1ee:	4b32      	ldr	r3, [pc, #200]	; (800c2b8 <prvAddNewTaskToReadyList+0x104>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d802      	bhi.n	800c202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1fc:	4a2e      	ldr	r2, [pc, #184]	; (800c2b8 <prvAddNewTaskToReadyList+0x104>)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c202:	4b2f      	ldr	r3, [pc, #188]	; (800c2c0 <prvAddNewTaskToReadyList+0x10c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	4a2d      	ldr	r2, [pc, #180]	; (800c2c0 <prvAddNewTaskToReadyList+0x10c>)
 800c20a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c20c:	4b2c      	ldr	r3, [pc, #176]	; (800c2c0 <prvAddNewTaskToReadyList+0x10c>)
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d016      	beq.n	800c248 <prvAddNewTaskToReadyList+0x94>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f002 ff3f 	bl	800f0a0 <SEGGER_SYSVIEW_OnTaskCreate>
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	461d      	mov	r5, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	461c      	mov	r4, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c23e:	1ae3      	subs	r3, r4, r3
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	462b      	mov	r3, r5
 800c244:	f003 fa1c 	bl	800f680 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f002 ffb0 	bl	800f1b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c254:	4b1b      	ldr	r3, [pc, #108]	; (800c2c4 <prvAddNewTaskToReadyList+0x110>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d903      	bls.n	800c264 <prvAddNewTaskToReadyList+0xb0>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	4a18      	ldr	r2, [pc, #96]	; (800c2c4 <prvAddNewTaskToReadyList+0x110>)
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4a15      	ldr	r2, [pc, #84]	; (800c2c8 <prvAddNewTaskToReadyList+0x114>)
 800c272:	441a      	add	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3304      	adds	r3, #4
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	f7ff f83f 	bl	800b2fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c280:	f001 fad8 	bl	800d834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c284:	4b0d      	ldr	r3, [pc, #52]	; (800c2bc <prvAddNewTaskToReadyList+0x108>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00e      	beq.n	800c2aa <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c28c:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <prvAddNewTaskToReadyList+0x104>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	429a      	cmp	r2, r3
 800c298:	d207      	bcs.n	800c2aa <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <prvAddNewTaskToReadyList+0x118>)
 800c29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	200017c0 	.word	0x200017c0
 800c2b8:	200012ec 	.word	0x200012ec
 800c2bc:	200017cc 	.word	0x200017cc
 800c2c0:	200017dc 	.word	0x200017dc
 800c2c4:	200017c8 	.word	0x200017c8
 800c2c8:	200012f0 	.word	0x200012f0
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01d      	beq.n	800c31e <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2e2:	4b16      	ldr	r3, [pc, #88]	; (800c33c <vTaskDelay+0x6c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00c      	beq.n	800c304 <vTaskDelay+0x34>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	b672      	cpsid	i
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	b662      	cpsie	i
 800c2fe:	60bb      	str	r3, [r7, #8]
}
 800c300:	bf00      	nop
 800c302:	e7fe      	b.n	800c302 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c304:	f000 f8a4 	bl	800c450 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800c308:	6879      	ldr	r1, [r7, #4]
 800c30a:	2023      	movs	r0, #35	; 0x23
 800c30c:	f002 fa42 	bl	800e794 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c310:	2100      	movs	r1, #0
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fd9e 	bl	800ce54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c318:	f000 f8a8 	bl	800c46c <xTaskResumeAll>
 800c31c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d107      	bne.n	800c334 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <vTaskDelay+0x70>)
 800c326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c334:	bf00      	nop
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	200017e8 	.word	0x200017e8
 800c340:	e000ed04 	.word	0xe000ed04

0800c344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08a      	sub	sp, #40	; 0x28
 800c348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c34a:	2300      	movs	r3, #0
 800c34c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c352:	463a      	mov	r2, r7
 800c354:	1d39      	adds	r1, r7, #4
 800c356:	f107 0308 	add.w	r3, r7, #8
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe ff6e 	bl	800b23c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	9202      	str	r2, [sp, #8]
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	2300      	movs	r3, #0
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	2300      	movs	r3, #0
 800c370:	460a      	mov	r2, r1
 800c372:	492f      	ldr	r1, [pc, #188]	; (800c430 <vTaskStartScheduler+0xec>)
 800c374:	482f      	ldr	r0, [pc, #188]	; (800c434 <vTaskStartScheduler+0xf0>)
 800c376:	f7ff fdcd 	bl	800bf14 <xTaskCreateStatic>
 800c37a:	4603      	mov	r3, r0
 800c37c:	4a2e      	ldr	r2, [pc, #184]	; (800c438 <vTaskStartScheduler+0xf4>)
 800c37e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c380:	4b2d      	ldr	r3, [pc, #180]	; (800c438 <vTaskStartScheduler+0xf4>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c388:	2301      	movs	r3, #1
 800c38a:	617b      	str	r3, [r7, #20]
 800c38c:	e001      	b.n	800c392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c38e:	2300      	movs	r3, #0
 800c390:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d102      	bne.n	800c39e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c398:	f000 fdb0 	bl	800cefc <xTimerCreateTimerTask>
 800c39c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d130      	bne.n	800c406 <vTaskStartScheduler+0xc2>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	b672      	cpsid	i
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	b662      	cpsie	i
 800c3b8:	613b      	str	r3, [r7, #16]
}
 800c3ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3bc:	4b1f      	ldr	r3, [pc, #124]	; (800c43c <vTaskStartScheduler+0xf8>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3354      	adds	r3, #84	; 0x54
 800c3c2:	4a1f      	ldr	r2, [pc, #124]	; (800c440 <vTaskStartScheduler+0xfc>)
 800c3c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3c6:	4b1f      	ldr	r3, [pc, #124]	; (800c444 <vTaskStartScheduler+0x100>)
 800c3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3ce:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <vTaskStartScheduler+0x104>)
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3d4:	4b1d      	ldr	r3, [pc, #116]	; (800c44c <vTaskStartScheduler+0x108>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800c3da:	4b18      	ldr	r3, [pc, #96]	; (800c43c <vTaskStartScheduler+0xf8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3334      	adds	r3, #52	; 0x34
 800c3e0:	2205      	movs	r2, #5
 800c3e2:	4913      	ldr	r1, [pc, #76]	; (800c430 <vTaskStartScheduler+0xec>)
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f003 f9fb 	bl	800f7e0 <memcmp>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <vTaskStartScheduler+0xb8>
 800c3f0:	4b12      	ldr	r3, [pc, #72]	; (800c43c <vTaskStartScheduler+0xf8>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f002 fe97 	bl	800f128 <SEGGER_SYSVIEW_OnTaskStartExec>
 800c3fa:	e001      	b.n	800c400 <vTaskStartScheduler+0xbc>
 800c3fc:	f002 fe34 	bl	800f068 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c400:	f001 f966 	bl	800d6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c404:	e010      	b.n	800c428 <vTaskStartScheduler+0xe4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40c:	d10c      	bne.n	800c428 <vTaskStartScheduler+0xe4>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	b672      	cpsid	i
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	b662      	cpsie	i
 800c422:	60fb      	str	r3, [r7, #12]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <vTaskStartScheduler+0xe2>
}
 800c428:	bf00      	nop
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	0800fd88 	.word	0x0800fd88
 800c434:	0800cafd 	.word	0x0800cafd
 800c438:	200017e4 	.word	0x200017e4
 800c43c:	200012ec 	.word	0x200012ec
 800c440:	20000014 	.word	0x20000014
 800c444:	200017e0 	.word	0x200017e0
 800c448:	200017cc 	.word	0x200017cc
 800c44c:	200017c4 	.word	0x200017c4

0800c450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c450:	b480      	push	{r7}
 800c452:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c454:	4b04      	ldr	r3, [pc, #16]	; (800c468 <vTaskSuspendAll+0x18>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	3301      	adds	r3, #1
 800c45a:	4a03      	ldr	r2, [pc, #12]	; (800c468 <vTaskSuspendAll+0x18>)
 800c45c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c45e:	bf00      	nop
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	200017e8 	.word	0x200017e8

0800c46c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c476:	2300      	movs	r3, #0
 800c478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c47a:	4b45      	ldr	r3, [pc, #276]	; (800c590 <xTaskResumeAll+0x124>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10c      	bne.n	800c49c <xTaskResumeAll+0x30>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	b672      	cpsid	i
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	b662      	cpsie	i
 800c496:	603b      	str	r3, [r7, #0]
}
 800c498:	bf00      	nop
 800c49a:	e7fe      	b.n	800c49a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c49c:	f001 f996 	bl	800d7cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4a0:	4b3b      	ldr	r3, [pc, #236]	; (800c590 <xTaskResumeAll+0x124>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	4a3a      	ldr	r2, [pc, #232]	; (800c590 <xTaskResumeAll+0x124>)
 800c4a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4aa:	4b39      	ldr	r3, [pc, #228]	; (800c590 <xTaskResumeAll+0x124>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d166      	bne.n	800c580 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4b2:	4b38      	ldr	r3, [pc, #224]	; (800c594 <xTaskResumeAll+0x128>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d062      	beq.n	800c580 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4ba:	e033      	b.n	800c524 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4bc:	4b36      	ldr	r3, [pc, #216]	; (800c598 <xTaskResumeAll+0x12c>)
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3318      	adds	r3, #24
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fe ff75 	bl	800b3b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fe ff70 	bl	800b3b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f002 fe68 	bl	800f1b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e4:	4b2d      	ldr	r3, [pc, #180]	; (800c59c <xTaskResumeAll+0x130>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d903      	bls.n	800c4f4 <xTaskResumeAll+0x88>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f0:	4a2a      	ldr	r2, [pc, #168]	; (800c59c <xTaskResumeAll+0x130>)
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4a27      	ldr	r2, [pc, #156]	; (800c5a0 <xTaskResumeAll+0x134>)
 800c502:	441a      	add	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3304      	adds	r3, #4
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7fe fef7 	bl	800b2fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c514:	4b23      	ldr	r3, [pc, #140]	; (800c5a4 <xTaskResumeAll+0x138>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d302      	bcc.n	800c524 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 800c51e:	4b22      	ldr	r3, [pc, #136]	; (800c5a8 <xTaskResumeAll+0x13c>)
 800c520:	2201      	movs	r2, #1
 800c522:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c524:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <xTaskResumeAll+0x12c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1c7      	bne.n	800c4bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c532:	f000 fbd7 	bl	800cce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c536:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <xTaskResumeAll+0x140>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d010      	beq.n	800c564 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c542:	f000 f859 	bl	800c5f8 <xTaskIncrementTick>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 800c54c:	4b16      	ldr	r3, [pc, #88]	; (800c5a8 <xTaskResumeAll+0x13c>)
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3b01      	subs	r3, #1
 800c556:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1f1      	bne.n	800c542 <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <xTaskResumeAll+0x140>)
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c564:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <xTaskResumeAll+0x13c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d009      	beq.n	800c580 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c56c:	2301      	movs	r3, #1
 800c56e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <xTaskResumeAll+0x144>)
 800c572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c580:	f001 f958 	bl	800d834 <vPortExitCritical>

	return xAlreadyYielded;
 800c584:	68bb      	ldr	r3, [r7, #8]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	200017e8 	.word	0x200017e8
 800c594:	200017c0 	.word	0x200017c0
 800c598:	20001780 	.word	0x20001780
 800c59c:	200017c8 	.word	0x200017c8
 800c5a0:	200012f0 	.word	0x200012f0
 800c5a4:	200012ec 	.word	0x200012ec
 800c5a8:	200017d4 	.word	0x200017d4
 800c5ac:	200017d0 	.word	0x200017d0
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5ba:	4b05      	ldr	r3, [pc, #20]	; (800c5d0 <xTaskGetTickCount+0x1c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5c0:	687b      	ldr	r3, [r7, #4]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	200017c4 	.word	0x200017c4

0800c5d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5da:	f001 f9df 	bl	800d99c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c5de:	2300      	movs	r3, #0
 800c5e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c5e2:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <xTaskGetTickCountFromISR+0x20>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5e8:	683b      	ldr	r3, [r7, #0]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200017c4 	.word	0x200017c4

0800c5f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5fe:	2300      	movs	r3, #0
 800c600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c602:	4b52      	ldr	r3, [pc, #328]	; (800c74c <xTaskIncrementTick+0x154>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f040 808f 	bne.w	800c72a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c60c:	4b50      	ldr	r3, [pc, #320]	; (800c750 <xTaskIncrementTick+0x158>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3301      	adds	r3, #1
 800c612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c614:	4a4e      	ldr	r2, [pc, #312]	; (800c750 <xTaskIncrementTick+0x158>)
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d122      	bne.n	800c666 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c620:	4b4c      	ldr	r3, [pc, #304]	; (800c754 <xTaskIncrementTick+0x15c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00c      	beq.n	800c644 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	b672      	cpsid	i
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	b662      	cpsie	i
 800c63e:	603b      	str	r3, [r7, #0]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <xTaskIncrementTick+0x4a>
 800c644:	4b43      	ldr	r3, [pc, #268]	; (800c754 <xTaskIncrementTick+0x15c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	4b43      	ldr	r3, [pc, #268]	; (800c758 <xTaskIncrementTick+0x160>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a41      	ldr	r2, [pc, #260]	; (800c754 <xTaskIncrementTick+0x15c>)
 800c650:	6013      	str	r3, [r2, #0]
 800c652:	4a41      	ldr	r2, [pc, #260]	; (800c758 <xTaskIncrementTick+0x160>)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	4b40      	ldr	r3, [pc, #256]	; (800c75c <xTaskIncrementTick+0x164>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3301      	adds	r3, #1
 800c65e:	4a3f      	ldr	r2, [pc, #252]	; (800c75c <xTaskIncrementTick+0x164>)
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	f000 fb3f 	bl	800cce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c666:	4b3e      	ldr	r3, [pc, #248]	; (800c760 <xTaskIncrementTick+0x168>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d34d      	bcc.n	800c70c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c670:	4b38      	ldr	r3, [pc, #224]	; (800c754 <xTaskIncrementTick+0x15c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67a:	4b39      	ldr	r3, [pc, #228]	; (800c760 <xTaskIncrementTick+0x168>)
 800c67c:	f04f 32ff 	mov.w	r2, #4294967295
 800c680:	601a      	str	r2, [r3, #0]
					break;
 800c682:	e043      	b.n	800c70c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c684:	4b33      	ldr	r3, [pc, #204]	; (800c754 <xTaskIncrementTick+0x15c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d203      	bcs.n	800c6a4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c69c:	4a30      	ldr	r2, [pc, #192]	; (800c760 <xTaskIncrementTick+0x168>)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6a2:	e033      	b.n	800c70c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fe fe85 	bl	800b3b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d004      	beq.n	800c6c0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	3318      	adds	r3, #24
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe fe7c 	bl	800b3b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f002 fd74 	bl	800f1b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6cc:	4b25      	ldr	r3, [pc, #148]	; (800c764 <xTaskIncrementTick+0x16c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d903      	bls.n	800c6dc <xTaskIncrementTick+0xe4>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d8:	4a22      	ldr	r2, [pc, #136]	; (800c764 <xTaskIncrementTick+0x16c>)
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4a1f      	ldr	r2, [pc, #124]	; (800c768 <xTaskIncrementTick+0x170>)
 800c6ea:	441a      	add	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	f7fe fe03 	bl	800b2fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fc:	4b1b      	ldr	r3, [pc, #108]	; (800c76c <xTaskIncrementTick+0x174>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	429a      	cmp	r2, r3
 800c704:	d3b4      	bcc.n	800c670 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c706:	2301      	movs	r3, #1
 800c708:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c70a:	e7b1      	b.n	800c670 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c70c:	4b17      	ldr	r3, [pc, #92]	; (800c76c <xTaskIncrementTick+0x174>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c712:	4915      	ldr	r1, [pc, #84]	; (800c768 <xTaskIncrementTick+0x170>)
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d907      	bls.n	800c734 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c724:	2301      	movs	r3, #1
 800c726:	617b      	str	r3, [r7, #20]
 800c728:	e004      	b.n	800c734 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c72a:	4b11      	ldr	r3, [pc, #68]	; (800c770 <xTaskIncrementTick+0x178>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3301      	adds	r3, #1
 800c730:	4a0f      	ldr	r2, [pc, #60]	; (800c770 <xTaskIncrementTick+0x178>)
 800c732:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c734:	4b0f      	ldr	r3, [pc, #60]	; (800c774 <xTaskIncrementTick+0x17c>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c740:	697b      	ldr	r3, [r7, #20]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	200017e8 	.word	0x200017e8
 800c750:	200017c4 	.word	0x200017c4
 800c754:	20001778 	.word	0x20001778
 800c758:	2000177c 	.word	0x2000177c
 800c75c:	200017d8 	.word	0x200017d8
 800c760:	200017e0 	.word	0x200017e0
 800c764:	200017c8 	.word	0x200017c8
 800c768:	200012f0 	.word	0x200012f0
 800c76c:	200012ec 	.word	0x200012ec
 800c770:	200017d0 	.word	0x200017d0
 800c774:	200017d4 	.word	0x200017d4

0800c778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c77e:	4b34      	ldr	r3, [pc, #208]	; (800c850 <vTaskSwitchContext+0xd8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c786:	4b33      	ldr	r3, [pc, #204]	; (800c854 <vTaskSwitchContext+0xdc>)
 800c788:	2201      	movs	r2, #1
 800c78a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c78c:	e05b      	b.n	800c846 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 800c78e:	4b31      	ldr	r3, [pc, #196]	; (800c854 <vTaskSwitchContext+0xdc>)
 800c790:	2200      	movs	r2, #0
 800c792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c794:	4b30      	ldr	r3, [pc, #192]	; (800c858 <vTaskSwitchContext+0xe0>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	60fb      	str	r3, [r7, #12]
 800c79a:	e012      	b.n	800c7c2 <vTaskSwitchContext+0x4a>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10c      	bne.n	800c7bc <vTaskSwitchContext+0x44>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	b672      	cpsid	i
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	b662      	cpsie	i
 800c7b6:	607b      	str	r3, [r7, #4]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <vTaskSwitchContext+0x42>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	4926      	ldr	r1, [pc, #152]	; (800c85c <vTaskSwitchContext+0xe4>)
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	440b      	add	r3, r1
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0e2      	beq.n	800c79c <vTaskSwitchContext+0x24>
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	4a1e      	ldr	r2, [pc, #120]	; (800c85c <vTaskSwitchContext+0xe4>)
 800c7e2:	4413      	add	r3, r2
 800c7e4:	60bb      	str	r3, [r7, #8]
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	605a      	str	r2, [r3, #4]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d104      	bne.n	800c806 <vTaskSwitchContext+0x8e>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	605a      	str	r2, [r3, #4]
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	4a14      	ldr	r2, [pc, #80]	; (800c860 <vTaskSwitchContext+0xe8>)
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	4a11      	ldr	r2, [pc, #68]	; (800c858 <vTaskSwitchContext+0xe0>)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800c816:	4b12      	ldr	r3, [pc, #72]	; (800c860 <vTaskSwitchContext+0xe8>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	3334      	adds	r3, #52	; 0x34
 800c81c:	2205      	movs	r2, #5
 800c81e:	4911      	ldr	r1, [pc, #68]	; (800c864 <vTaskSwitchContext+0xec>)
 800c820:	4618      	mov	r0, r3
 800c822:	f002 ffdd 	bl	800f7e0 <memcmp>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <vTaskSwitchContext+0xc0>
 800c82c:	4b0c      	ldr	r3, [pc, #48]	; (800c860 <vTaskSwitchContext+0xe8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4618      	mov	r0, r3
 800c832:	f002 fc79 	bl	800f128 <SEGGER_SYSVIEW_OnTaskStartExec>
 800c836:	e001      	b.n	800c83c <vTaskSwitchContext+0xc4>
 800c838:	f002 fc16 	bl	800f068 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c83c:	4b08      	ldr	r3, [pc, #32]	; (800c860 <vTaskSwitchContext+0xe8>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3354      	adds	r3, #84	; 0x54
 800c842:	4a09      	ldr	r2, [pc, #36]	; (800c868 <vTaskSwitchContext+0xf0>)
 800c844:	6013      	str	r3, [r2, #0]
}
 800c846:	bf00      	nop
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	200017e8 	.word	0x200017e8
 800c854:	200017d4 	.word	0x200017d4
 800c858:	200017c8 	.word	0x200017c8
 800c85c:	200012f0 	.word	0x200012f0
 800c860:	200012ec 	.word	0x200012ec
 800c864:	0800fd88 	.word	0x0800fd88
 800c868:	20000014 	.word	0x20000014

0800c86c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10c      	bne.n	800c896 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	b672      	cpsid	i
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	b662      	cpsie	i
 800c890:	60fb      	str	r3, [r7, #12]
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c896:	4b07      	ldr	r3, [pc, #28]	; (800c8b4 <vTaskPlaceOnEventList+0x48>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3318      	adds	r3, #24
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7fe fd51 	bl	800b346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8a4:	2101      	movs	r1, #1
 800c8a6:	6838      	ldr	r0, [r7, #0]
 800c8a8:	f000 fad4 	bl	800ce54 <prvAddCurrentTaskToDelayedList>
}
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	200012ec 	.word	0x200012ec

0800c8b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10c      	bne.n	800c8e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	b672      	cpsid	i
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	b662      	cpsie	i
 800c8de:	617b      	str	r3, [r7, #20]
}
 800c8e0:	bf00      	nop
 800c8e2:	e7fe      	b.n	800c8e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <vTaskPlaceOnEventListRestricted+0x5c>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3318      	adds	r3, #24
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f7fe fd06 	bl	800b2fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d002      	beq.n	800c8fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800c8fe:	2024      	movs	r0, #36	; 0x24
 800c900:	f001 ff2a 	bl	800e758 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	68b8      	ldr	r0, [r7, #8]
 800c908:	f000 faa4 	bl	800ce54 <prvAddCurrentTaskToDelayedList>
	}
 800c90c:	bf00      	nop
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	200012ec 	.word	0x200012ec

0800c918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10c      	bne.n	800c948 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	b672      	cpsid	i
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	b662      	cpsie	i
 800c942:	60fb      	str	r3, [r7, #12]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	3318      	adds	r3, #24
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fd33 	bl	800b3b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c952:	4b20      	ldr	r3, [pc, #128]	; (800c9d4 <xTaskRemoveFromEventList+0xbc>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d121      	bne.n	800c99e <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fd2a 	bl	800b3b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4618      	mov	r0, r3
 800c968:	f002 fc22 	bl	800f1b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c970:	4b19      	ldr	r3, [pc, #100]	; (800c9d8 <xTaskRemoveFromEventList+0xc0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	429a      	cmp	r2, r3
 800c976:	d903      	bls.n	800c980 <xTaskRemoveFromEventList+0x68>
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	4a16      	ldr	r2, [pc, #88]	; (800c9d8 <xTaskRemoveFromEventList+0xc0>)
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c984:	4613      	mov	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4413      	add	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4a13      	ldr	r2, [pc, #76]	; (800c9dc <xTaskRemoveFromEventList+0xc4>)
 800c98e:	441a      	add	r2, r3
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	3304      	adds	r3, #4
 800c994:	4619      	mov	r1, r3
 800c996:	4610      	mov	r0, r2
 800c998:	f7fe fcb1 	bl	800b2fe <vListInsertEnd>
 800c99c:	e005      	b.n	800c9aa <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	3318      	adds	r3, #24
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	480e      	ldr	r0, [pc, #56]	; (800c9e0 <xTaskRemoveFromEventList+0xc8>)
 800c9a6:	f7fe fcaa 	bl	800b2fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ae:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <xTaskRemoveFromEventList+0xcc>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d905      	bls.n	800c9c4 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <xTaskRemoveFromEventList+0xd0>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e001      	b.n	800c9c8 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9c8:	697b      	ldr	r3, [r7, #20]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	200017e8 	.word	0x200017e8
 800c9d8:	200017c8 	.word	0x200017c8
 800c9dc:	200012f0 	.word	0x200012f0
 800c9e0:	20001780 	.word	0x20001780
 800c9e4:	200012ec 	.word	0x200012ec
 800c9e8:	200017d4 	.word	0x200017d4

0800c9ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9f4:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <vTaskInternalSetTimeOutState+0x24>)
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <vTaskInternalSetTimeOutState+0x28>)
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	605a      	str	r2, [r3, #4]
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	200017d8 	.word	0x200017d8
 800ca14:	200017c4 	.word	0x200017c4

0800ca18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b088      	sub	sp, #32
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10c      	bne.n	800ca42 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	b672      	cpsid	i
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	b662      	cpsie	i
 800ca3c:	613b      	str	r3, [r7, #16]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10c      	bne.n	800ca62 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	b672      	cpsid	i
 800ca4e:	f383 8811 	msr	BASEPRI, r3
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	f3bf 8f4f 	dsb	sy
 800ca5a:	b662      	cpsie	i
 800ca5c:	60fb      	str	r3, [r7, #12]
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ca62:	f000 feb3 	bl	800d7cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca66:	4b1d      	ldr	r3, [pc, #116]	; (800cadc <xTaskCheckForTimeOut+0xc4>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7e:	d102      	bne.n	800ca86 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e023      	b.n	800cace <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <xTaskCheckForTimeOut+0xc8>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d007      	beq.n	800caa2 <xTaskCheckForTimeOut+0x8a>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d302      	bcc.n	800caa2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	e015      	b.n	800cace <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d20b      	bcs.n	800cac4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	1ad2      	subs	r2, r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff ff97 	bl	800c9ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	e004      	b.n	800cace <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800caca:	2301      	movs	r3, #1
 800cacc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cace:	f000 feb1 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800cad2:	69fb      	ldr	r3, [r7, #28]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3720      	adds	r7, #32
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	200017c4 	.word	0x200017c4
 800cae0:	200017d8 	.word	0x200017d8

0800cae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cae8:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <vTaskMissedYield+0x14>)
 800caea:	2201      	movs	r2, #1
 800caec:	601a      	str	r2, [r3, #0]
}
 800caee:	bf00      	nop
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	200017d4 	.word	0x200017d4

0800cafc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb04:	f000 f852 	bl	800cbac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb08:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <prvIdleTask+0x28>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d9f9      	bls.n	800cb04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <prvIdleTask+0x2c>)
 800cb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb16:	601a      	str	r2, [r3, #0]
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb20:	e7f0      	b.n	800cb04 <prvIdleTask+0x8>
 800cb22:	bf00      	nop
 800cb24:	200012f0 	.word	0x200012f0
 800cb28:	e000ed04 	.word	0xe000ed04

0800cb2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb32:	2300      	movs	r3, #0
 800cb34:	607b      	str	r3, [r7, #4]
 800cb36:	e00c      	b.n	800cb52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4a12      	ldr	r2, [pc, #72]	; (800cb8c <prvInitialiseTaskLists+0x60>)
 800cb44:	4413      	add	r3, r2
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fe fbac 	bl	800b2a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	607b      	str	r3, [r7, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b37      	cmp	r3, #55	; 0x37
 800cb56:	d9ef      	bls.n	800cb38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb58:	480d      	ldr	r0, [pc, #52]	; (800cb90 <prvInitialiseTaskLists+0x64>)
 800cb5a:	f7fe fba3 	bl	800b2a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb5e:	480d      	ldr	r0, [pc, #52]	; (800cb94 <prvInitialiseTaskLists+0x68>)
 800cb60:	f7fe fba0 	bl	800b2a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb64:	480c      	ldr	r0, [pc, #48]	; (800cb98 <prvInitialiseTaskLists+0x6c>)
 800cb66:	f7fe fb9d 	bl	800b2a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb6a:	480c      	ldr	r0, [pc, #48]	; (800cb9c <prvInitialiseTaskLists+0x70>)
 800cb6c:	f7fe fb9a 	bl	800b2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb70:	480b      	ldr	r0, [pc, #44]	; (800cba0 <prvInitialiseTaskLists+0x74>)
 800cb72:	f7fe fb97 	bl	800b2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb76:	4b0b      	ldr	r3, [pc, #44]	; (800cba4 <prvInitialiseTaskLists+0x78>)
 800cb78:	4a05      	ldr	r2, [pc, #20]	; (800cb90 <prvInitialiseTaskLists+0x64>)
 800cb7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb7c:	4b0a      	ldr	r3, [pc, #40]	; (800cba8 <prvInitialiseTaskLists+0x7c>)
 800cb7e:	4a05      	ldr	r2, [pc, #20]	; (800cb94 <prvInitialiseTaskLists+0x68>)
 800cb80:	601a      	str	r2, [r3, #0]
}
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	200012f0 	.word	0x200012f0
 800cb90:	20001750 	.word	0x20001750
 800cb94:	20001764 	.word	0x20001764
 800cb98:	20001780 	.word	0x20001780
 800cb9c:	20001794 	.word	0x20001794
 800cba0:	200017ac 	.word	0x200017ac
 800cba4:	20001778 	.word	0x20001778
 800cba8:	2000177c 	.word	0x2000177c

0800cbac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbb2:	e019      	b.n	800cbe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbb4:	f000 fe0a 	bl	800d7cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb8:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <prvCheckTasksWaitingTermination+0x50>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fbf7 	bl	800b3b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <prvCheckTasksWaitingTermination+0x54>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	4a0b      	ldr	r2, [pc, #44]	; (800cc00 <prvCheckTasksWaitingTermination+0x54>)
 800cbd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbd4:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <prvCheckTasksWaitingTermination+0x58>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	4a0a      	ldr	r2, [pc, #40]	; (800cc04 <prvCheckTasksWaitingTermination+0x58>)
 800cbdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbde:	f000 fe29 	bl	800d834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f848 	bl	800cc78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbe8:	4b06      	ldr	r3, [pc, #24]	; (800cc04 <prvCheckTasksWaitingTermination+0x58>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e1      	bne.n	800cbb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20001794 	.word	0x20001794
 800cc00:	200017c0 	.word	0x200017c0
 800cc04:	200017a8 	.word	0x200017a8

0800cc08 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cc14:	e005      	b.n	800cc22 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2ba5      	cmp	r3, #165	; 0xa5
 800cc28:	d0f5      	beq.n	800cc16 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	089b      	lsrs	r3, r3, #2
 800cc2e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	b29b      	uxth	r3, r3
	}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <uxTaskGetStackHighWaterMark+0x14>
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <uxTaskGetStackHighWaterMark+0x34>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	e000      	b.n	800cc56 <uxTaskGetStackHighWaterMark+0x16>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800cc5e:	6938      	ldr	r0, [r7, #16]
 800cc60:	f7ff ffd2 	bl	800cc08 <prvTaskCheckFreeStackSpace>
 800cc64:	4603      	mov	r3, r0
 800cc66:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800cc68:	68fb      	ldr	r3, [r7, #12]
	}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	200012ec 	.word	0x200012ec

0800cc78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3354      	adds	r3, #84	; 0x54
 800cc84:	4618      	mov	r0, r3
 800cc86:	f002 fddf 	bl	800f848 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d108      	bne.n	800cca6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 ff8d 	bl	800dbb8 <vPortFree>
				vPortFree( pxTCB );
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 ff8a 	bl	800dbb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cca4:	e01a      	b.n	800ccdc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d103      	bne.n	800ccb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 ff81 	bl	800dbb8 <vPortFree>
	}
 800ccb6:	e011      	b.n	800ccdc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d00c      	beq.n	800ccdc <prvDeleteTCB+0x64>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	b672      	cpsid	i
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	b662      	cpsie	i
 800ccd6:	60fb      	str	r3, [r7, #12]
}
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <prvDeleteTCB+0x62>
	}
 800ccdc:	bf00      	nop
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccea:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <prvResetNextTaskUnblockTime+0x38>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d104      	bne.n	800ccfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <prvResetNextTaskUnblockTime+0x3c>)
 800ccf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ccfc:	e008      	b.n	800cd10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccfe:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <prvResetNextTaskUnblockTime+0x38>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	4a04      	ldr	r2, [pc, #16]	; (800cd20 <prvResetNextTaskUnblockTime+0x3c>)
 800cd0e:	6013      	str	r3, [r2, #0]
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	20001778 	.word	0x20001778
 800cd20:	200017e0 	.word	0x200017e0

0800cd24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd2a:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <xTaskGetSchedulerState+0x34>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd32:	2301      	movs	r3, #1
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	e008      	b.n	800cd4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd38:	4b08      	ldr	r3, [pc, #32]	; (800cd5c <xTaskGetSchedulerState+0x38>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd40:	2302      	movs	r3, #2
 800cd42:	607b      	str	r3, [r7, #4]
 800cd44:	e001      	b.n	800cd4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd46:	2300      	movs	r3, #0
 800cd48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd4a:	687b      	ldr	r3, [r7, #4]
	}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	200017cc 	.word	0x200017cc
 800cd5c:	200017e8 	.word	0x200017e8

0800cd60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d063      	beq.n	800ce3e <xTaskPriorityDisinherit+0xde>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd76:	4b34      	ldr	r3, [pc, #208]	; (800ce48 <xTaskPriorityDisinherit+0xe8>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d00c      	beq.n	800cd9a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	b672      	cpsid	i
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	b662      	cpsie	i
 800cd94:	60fb      	str	r3, [r7, #12]
}
 800cd96:	bf00      	nop
 800cd98:	e7fe      	b.n	800cd98 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10c      	bne.n	800cdbc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	b672      	cpsid	i
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	b662      	cpsie	i
 800cdb6:	60bb      	str	r3, [r7, #8]
}
 800cdb8:	bf00      	nop
 800cdba:	e7fe      	b.n	800cdba <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc0:	1e5a      	subs	r2, r3, #1
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d035      	beq.n	800ce3e <xTaskPriorityDisinherit+0xde>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d131      	bne.n	800ce3e <xTaskPriorityDisinherit+0xde>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe faea 	bl	800b3b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4619      	mov	r1, r3
 800cde8:	204a      	movs	r0, #74	; 0x4a
 800cdea:	f001 fcd3 	bl	800e794 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f002 f9d3 	bl	800f1b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0e:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <xTaskPriorityDisinherit+0xec>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d903      	bls.n	800ce1e <xTaskPriorityDisinherit+0xbe>
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1a:	4a0c      	ldr	r2, [pc, #48]	; (800ce4c <xTaskPriorityDisinherit+0xec>)
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4a09      	ldr	r2, [pc, #36]	; (800ce50 <xTaskPriorityDisinherit+0xf0>)
 800ce2c:	441a      	add	r2, r3
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	3304      	adds	r3, #4
 800ce32:	4619      	mov	r1, r3
 800ce34:	4610      	mov	r0, r2
 800ce36:	f7fe fa62 	bl	800b2fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce3e:	697b      	ldr	r3, [r7, #20]
	}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	200012ec 	.word	0x200012ec
 800ce4c:	200017c8 	.word	0x200017c8
 800ce50:	200012f0 	.word	0x200012f0

0800ce54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce5e:	4b21      	ldr	r3, [pc, #132]	; (800cee4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce64:	4b20      	ldr	r3, [pc, #128]	; (800cee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3304      	adds	r3, #4
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe faa4 	bl	800b3b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce76:	d10a      	bne.n	800ce8e <prvAddCurrentTaskToDelayedList+0x3a>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce7e:	4b1a      	ldr	r3, [pc, #104]	; (800cee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	3304      	adds	r3, #4
 800ce84:	4619      	mov	r1, r3
 800ce86:	4819      	ldr	r0, [pc, #100]	; (800ceec <prvAddCurrentTaskToDelayedList+0x98>)
 800ce88:	f7fe fa39 	bl	800b2fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce8c:	e026      	b.n	800cedc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4413      	add	r3, r2
 800ce94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce96:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d209      	bcs.n	800ceba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cea6:	4b12      	ldr	r3, [pc, #72]	; (800cef0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	3304      	adds	r3, #4
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fe fa47 	bl	800b346 <vListInsert>
}
 800ceb8:	e010      	b.n	800cedc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceba:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f7fe fa3d 	bl	800b346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d202      	bcs.n	800cedc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ced6:	4a08      	ldr	r2, [pc, #32]	; (800cef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	6013      	str	r3, [r2, #0]
}
 800cedc:	bf00      	nop
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	200017c4 	.word	0x200017c4
 800cee8:	200012ec 	.word	0x200012ec
 800ceec:	200017ac 	.word	0x200017ac
 800cef0:	2000177c 	.word	0x2000177c
 800cef4:	20001778 	.word	0x20001778
 800cef8:	200017e0 	.word	0x200017e0

0800cefc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08a      	sub	sp, #40	; 0x28
 800cf00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf06:	f000 fb15 	bl	800d534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <xTimerCreateTimerTask+0x84>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d021      	beq.n	800cf56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf16:	2300      	movs	r3, #0
 800cf18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf1a:	1d3a      	adds	r2, r7, #4
 800cf1c:	f107 0108 	add.w	r1, r7, #8
 800cf20:	f107 030c 	add.w	r3, r7, #12
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe f9a3 	bl	800b270 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	9202      	str	r2, [sp, #8]
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	2302      	movs	r3, #2
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	460a      	mov	r2, r1
 800cf3c:	4911      	ldr	r1, [pc, #68]	; (800cf84 <xTimerCreateTimerTask+0x88>)
 800cf3e:	4812      	ldr	r0, [pc, #72]	; (800cf88 <xTimerCreateTimerTask+0x8c>)
 800cf40:	f7fe ffe8 	bl	800bf14 <xTaskCreateStatic>
 800cf44:	4603      	mov	r3, r0
 800cf46:	4a11      	ldr	r2, [pc, #68]	; (800cf8c <xTimerCreateTimerTask+0x90>)
 800cf48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf4a:	4b10      	ldr	r3, [pc, #64]	; (800cf8c <xTimerCreateTimerTask+0x90>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf52:	2301      	movs	r3, #1
 800cf54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10c      	bne.n	800cf76 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	b672      	cpsid	i
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	b662      	cpsie	i
 800cf70:	613b      	str	r3, [r7, #16]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800cf76:	697b      	ldr	r3, [r7, #20]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	2000181c 	.word	0x2000181c
 800cf84:	0800fd90 	.word	0x0800fd90
 800cf88:	0800d0cd 	.word	0x0800d0cd
 800cf8c:	20001820 	.word	0x20001820

0800cf90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10c      	bne.n	800cfc2 <xTimerGenericCommand+0x32>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	b672      	cpsid	i
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	b662      	cpsie	i
 800cfbc:	623b      	str	r3, [r7, #32]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cfc2:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <xTimerGenericCommand+0x9c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d02a      	beq.n	800d020 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	2b05      	cmp	r3, #5
 800cfda:	dc18      	bgt.n	800d00e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cfdc:	f7ff fea2 	bl	800cd24 <xTaskGetSchedulerState>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d109      	bne.n	800cffa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cfe6:	4b11      	ldr	r3, [pc, #68]	; (800d02c <xTimerGenericCommand+0x9c>)
 800cfe8:	6818      	ldr	r0, [r3, #0]
 800cfea:	f107 0110 	add.w	r1, r7, #16
 800cfee:	2300      	movs	r3, #0
 800cff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cff2:	f7fe fb21 	bl	800b638 <xQueueGenericSend>
 800cff6:	6278      	str	r0, [r7, #36]	; 0x24
 800cff8:	e012      	b.n	800d020 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cffa:	4b0c      	ldr	r3, [pc, #48]	; (800d02c <xTimerGenericCommand+0x9c>)
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	f107 0110 	add.w	r1, r7, #16
 800d002:	2300      	movs	r3, #0
 800d004:	2200      	movs	r2, #0
 800d006:	f7fe fb17 	bl	800b638 <xQueueGenericSend>
 800d00a:	6278      	str	r0, [r7, #36]	; 0x24
 800d00c:	e008      	b.n	800d020 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d00e:	4b07      	ldr	r3, [pc, #28]	; (800d02c <xTimerGenericCommand+0x9c>)
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	f107 0110 	add.w	r1, r7, #16
 800d016:	2300      	movs	r3, #0
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	f7fe fc3b 	bl	800b894 <xQueueGenericSendFromISR>
 800d01e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d022:	4618      	mov	r0, r3
 800d024:	3728      	adds	r7, #40	; 0x28
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	2000181c 	.word	0x2000181c

0800d030 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b088      	sub	sp, #32
 800d034:	af02      	add	r7, sp, #8
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d03a:	4b23      	ldr	r3, [pc, #140]	; (800d0c8 <prvProcessExpiredTimer+0x98>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	3304      	adds	r3, #4
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe f9b5 	bl	800b3b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d054:	f003 0304 	and.w	r3, r3, #4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d024      	beq.n	800d0a6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	699a      	ldr	r2, [r3, #24]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	18d1      	adds	r1, r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	6978      	ldr	r0, [r7, #20]
 800d06a:	f000 f8d3 	bl	800d214 <prvInsertTimerInActiveList>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d021      	beq.n	800d0b8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d074:	2300      	movs	r3, #0
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	2300      	movs	r3, #0
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	2100      	movs	r1, #0
 800d07e:	6978      	ldr	r0, [r7, #20]
 800d080:	f7ff ff86 	bl	800cf90 <xTimerGenericCommand>
 800d084:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d115      	bne.n	800d0b8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d090:	b672      	cpsid	i
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	b662      	cpsie	i
 800d0a0:	60fb      	str	r3, [r7, #12]
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ac:	f023 0301 	bic.w	r3, r3, #1
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	6a1b      	ldr	r3, [r3, #32]
 800d0bc:	6978      	ldr	r0, [r7, #20]
 800d0be:	4798      	blx	r3
}
 800d0c0:	bf00      	nop
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	20001814 	.word	0x20001814

0800d0cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0d4:	f107 0308 	add.w	r3, r7, #8
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 f857 	bl	800d18c <prvGetNextExpireTime>
 800d0de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f000 f803 	bl	800d0f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d0ea:	f000 f8d5 	bl	800d298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0ee:	e7f1      	b.n	800d0d4 <prvTimerTask+0x8>

0800d0f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d0fa:	f7ff f9a9 	bl	800c450 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0fe:	f107 0308 	add.w	r3, r7, #8
 800d102:	4618      	mov	r0, r3
 800d104:	f000 f866 	bl	800d1d4 <prvSampleTimeNow>
 800d108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d130      	bne.n	800d172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <prvProcessTimerOrBlockTask+0x3c>
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d806      	bhi.n	800d12c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d11e:	f7ff f9a5 	bl	800c46c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d122:	68f9      	ldr	r1, [r7, #12]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff ff83 	bl	800d030 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d12a:	e024      	b.n	800d176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d008      	beq.n	800d144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d132:	4b13      	ldr	r3, [pc, #76]	; (800d180 <prvProcessTimerOrBlockTask+0x90>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <prvProcessTimerOrBlockTask+0x50>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e000      	b.n	800d142 <prvProcessTimerOrBlockTask+0x52>
 800d140:	2300      	movs	r3, #0
 800d142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d144:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <prvProcessTimerOrBlockTask+0x94>)
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	4619      	mov	r1, r3
 800d152:	f7fe feab 	bl	800beac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d156:	f7ff f989 	bl	800c46c <xTaskResumeAll>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d160:	4b09      	ldr	r3, [pc, #36]	; (800d188 <prvProcessTimerOrBlockTask+0x98>)
 800d162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	f3bf 8f6f 	isb	sy
}
 800d170:	e001      	b.n	800d176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d172:	f7ff f97b 	bl	800c46c <xTaskResumeAll>
}
 800d176:	bf00      	nop
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20001818 	.word	0x20001818
 800d184:	2000181c 	.word	0x2000181c
 800d188:	e000ed04 	.word	0xe000ed04

0800d18c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d194:	4b0e      	ldr	r3, [pc, #56]	; (800d1d0 <prvGetNextExpireTime+0x44>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d101      	bne.n	800d1a2 <prvGetNextExpireTime+0x16>
 800d19e:	2201      	movs	r2, #1
 800d1a0:	e000      	b.n	800d1a4 <prvGetNextExpireTime+0x18>
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d105      	bne.n	800d1bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <prvGetNextExpireTime+0x44>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	60fb      	str	r3, [r7, #12]
 800d1ba:	e001      	b.n	800d1c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20001814 	.word	0x20001814

0800d1d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d1dc:	f7ff f9ea 	bl	800c5b4 <xTaskGetTickCount>
 800d1e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d1e2:	4b0b      	ldr	r3, [pc, #44]	; (800d210 <prvSampleTimeNow+0x3c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d205      	bcs.n	800d1f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d1ec:	f000 f93c 	bl	800d468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	e002      	b.n	800d1fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d1fe:	4a04      	ldr	r2, [pc, #16]	; (800d210 <prvSampleTimeNow+0x3c>)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d204:	68fb      	ldr	r3, [r7, #12]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20001824 	.word	0x20001824

0800d214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d222:	2300      	movs	r3, #0
 800d224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	429a      	cmp	r2, r3
 800d238:	d812      	bhi.n	800d260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	1ad2      	subs	r2, r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	429a      	cmp	r2, r3
 800d246:	d302      	bcc.n	800d24e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d248:	2301      	movs	r3, #1
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	e01b      	b.n	800d286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d24e:	4b10      	ldr	r3, [pc, #64]	; (800d290 <prvInsertTimerInActiveList+0x7c>)
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	3304      	adds	r3, #4
 800d256:	4619      	mov	r1, r3
 800d258:	4610      	mov	r0, r2
 800d25a:	f7fe f874 	bl	800b346 <vListInsert>
 800d25e:	e012      	b.n	800d286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	d206      	bcs.n	800d276 <prvInsertTimerInActiveList+0x62>
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d302      	bcc.n	800d276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d270:	2301      	movs	r3, #1
 800d272:	617b      	str	r3, [r7, #20]
 800d274:	e007      	b.n	800d286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d276:	4b07      	ldr	r3, [pc, #28]	; (800d294 <prvInsertTimerInActiveList+0x80>)
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7fe f860 	bl	800b346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d286:	697b      	ldr	r3, [r7, #20]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3718      	adds	r7, #24
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	20001818 	.word	0x20001818
 800d294:	20001814 	.word	0x20001814

0800d298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08e      	sub	sp, #56	; 0x38
 800d29c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d29e:	e0d0      	b.n	800d442 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	da1a      	bge.n	800d2dc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d2a6:	1d3b      	adds	r3, r7, #4
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10c      	bne.n	800d2cc <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	b672      	cpsid	i
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	b662      	cpsie	i
 800d2c6:	61fb      	str	r3, [r7, #28]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2d2:	6850      	ldr	r0, [r2, #4]
 800d2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2d6:	6892      	ldr	r2, [r2, #8]
 800d2d8:	4611      	mov	r1, r2
 800d2da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f2c0 80ae 	blt.w	800d440 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	695b      	ldr	r3, [r3, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d004      	beq.n	800d2fa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe f85f 	bl	800b3b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2fa:	463b      	mov	r3, r7
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff ff69 	bl	800d1d4 <prvSampleTimeNow>
 800d302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b09      	cmp	r3, #9
 800d308:	f200 809b 	bhi.w	800d442 <prvProcessReceivedCommands+0x1aa>
 800d30c:	a201      	add	r2, pc, #4	; (adr r2, 800d314 <prvProcessReceivedCommands+0x7c>)
 800d30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d312:	bf00      	nop
 800d314:	0800d33d 	.word	0x0800d33d
 800d318:	0800d33d 	.word	0x0800d33d
 800d31c:	0800d33d 	.word	0x0800d33d
 800d320:	0800d3b5 	.word	0x0800d3b5
 800d324:	0800d3c9 	.word	0x0800d3c9
 800d328:	0800d417 	.word	0x0800d417
 800d32c:	0800d33d 	.word	0x0800d33d
 800d330:	0800d33d 	.word	0x0800d33d
 800d334:	0800d3b5 	.word	0x0800d3b5
 800d338:	0800d3c9 	.word	0x0800d3c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d342:	f043 0301 	orr.w	r3, r3, #1
 800d346:	b2da      	uxtb	r2, r3
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	18d1      	adds	r1, r2, r3
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d35a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d35c:	f7ff ff5a 	bl	800d214 <prvInsertTimerInActiveList>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d06d      	beq.n	800d442 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d36c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d374:	f003 0304 	and.w	r3, r3, #4
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d062      	beq.n	800d442 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	441a      	add	r2, r3
 800d384:	2300      	movs	r3, #0
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	2300      	movs	r3, #0
 800d38a:	2100      	movs	r1, #0
 800d38c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d38e:	f7ff fdff 	bl	800cf90 <xTimerGenericCommand>
 800d392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d153      	bne.n	800d442 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	b672      	cpsid	i
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	b662      	cpsie	i
 800d3ae:	61bb      	str	r3, [r7, #24]
}
 800d3b0:	bf00      	nop
 800d3b2:	e7fe      	b.n	800d3b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3ba:	f023 0301 	bic.w	r3, r3, #1
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d3c6:	e03c      	b.n	800d442 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10c      	bne.n	800d402 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ec:	b672      	cpsid	i
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	b662      	cpsie	i
 800d3fc:	617b      	str	r3, [r7, #20]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	699a      	ldr	r2, [r3, #24]
 800d406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d408:	18d1      	adds	r1, r2, r3
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d410:	f7ff ff00 	bl	800d214 <prvInsertTimerInActiveList>
					break;
 800d414:	e015      	b.n	800d442 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d41c:	f003 0302 	and.w	r3, r3, #2
 800d420:	2b00      	cmp	r3, #0
 800d422:	d103      	bne.n	800d42c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d426:	f000 fbc7 	bl	800dbb8 <vPortFree>
 800d42a:	e00a      	b.n	800d442 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d432:	f023 0301 	bic.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d43e:	e000      	b.n	800d442 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <prvProcessReceivedCommands+0x1cc>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	1d39      	adds	r1, r7, #4
 800d448:	2200      	movs	r2, #0
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fad6 	bl	800b9fc <xQueueReceive>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	f47f af24 	bne.w	800d2a0 <prvProcessReceivedCommands+0x8>
	}
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	3730      	adds	r7, #48	; 0x30
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	2000181c 	.word	0x2000181c

0800d468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d46e:	e04a      	b.n	800d506 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d470:	4b2e      	ldr	r3, [pc, #184]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d47a:	4b2c      	ldr	r3, [pc, #176]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3304      	adds	r3, #4
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fd ff95 	bl	800b3b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d030      	beq.n	800d506 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d90e      	bls.n	800d4d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4c2:	4b1a      	ldr	r3, [pc, #104]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	f7fd ff3a 	bl	800b346 <vListInsert>
 800d4d2:	e018      	b.n	800d506 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	2100      	movs	r1, #0
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7ff fd56 	bl	800cf90 <xTimerGenericCommand>
 800d4e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10c      	bne.n	800d506 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	b672      	cpsid	i
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	b662      	cpsie	i
 800d500:	603b      	str	r3, [r7, #0]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d506:	4b09      	ldr	r3, [pc, #36]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1af      	bne.n	800d470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d510:	4b06      	ldr	r3, [pc, #24]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d516:	4b06      	ldr	r3, [pc, #24]	; (800d530 <prvSwitchTimerLists+0xc8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a04      	ldr	r2, [pc, #16]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d51c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d51e:	4a04      	ldr	r2, [pc, #16]	; (800d530 <prvSwitchTimerLists+0xc8>)
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	6013      	str	r3, [r2, #0]
}
 800d524:	bf00      	nop
 800d526:	3718      	adds	r7, #24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20001814 	.word	0x20001814
 800d530:	20001818 	.word	0x20001818

0800d534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d53a:	f000 f947 	bl	800d7cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d53e:	4b15      	ldr	r3, [pc, #84]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d120      	bne.n	800d588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d546:	4814      	ldr	r0, [pc, #80]	; (800d598 <prvCheckForValidListAndQueue+0x64>)
 800d548:	f7fd feac 	bl	800b2a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d54c:	4813      	ldr	r0, [pc, #76]	; (800d59c <prvCheckForValidListAndQueue+0x68>)
 800d54e:	f7fd fea9 	bl	800b2a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d552:	4b13      	ldr	r3, [pc, #76]	; (800d5a0 <prvCheckForValidListAndQueue+0x6c>)
 800d554:	4a10      	ldr	r2, [pc, #64]	; (800d598 <prvCheckForValidListAndQueue+0x64>)
 800d556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d558:	4b12      	ldr	r3, [pc, #72]	; (800d5a4 <prvCheckForValidListAndQueue+0x70>)
 800d55a:	4a10      	ldr	r2, [pc, #64]	; (800d59c <prvCheckForValidListAndQueue+0x68>)
 800d55c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d55e:	2300      	movs	r3, #0
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	4b11      	ldr	r3, [pc, #68]	; (800d5a8 <prvCheckForValidListAndQueue+0x74>)
 800d564:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <prvCheckForValidListAndQueue+0x78>)
 800d566:	2110      	movs	r1, #16
 800d568:	200a      	movs	r0, #10
 800d56a:	f7fd ffb9 	bl	800b4e0 <xQueueGenericCreateStatic>
 800d56e:	4603      	mov	r3, r0
 800d570:	4a08      	ldr	r2, [pc, #32]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d572:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d574:	4b07      	ldr	r3, [pc, #28]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d57c:	4b05      	ldr	r3, [pc, #20]	; (800d594 <prvCheckForValidListAndQueue+0x60>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	490b      	ldr	r1, [pc, #44]	; (800d5b0 <prvCheckForValidListAndQueue+0x7c>)
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe fc60 	bl	800be48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d588:	f000 f954 	bl	800d834 <vPortExitCritical>
}
 800d58c:	bf00      	nop
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	2000181c 	.word	0x2000181c
 800d598:	200017ec 	.word	0x200017ec
 800d59c:	20001800 	.word	0x20001800
 800d5a0:	20001814 	.word	0x20001814
 800d5a4:	20001818 	.word	0x20001818
 800d5a8:	200018c8 	.word	0x200018c8
 800d5ac:	20001828 	.word	0x20001828
 800d5b0:	0800fd98 	.word	0x0800fd98

0800d5b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3b04      	subs	r3, #4
 800d5c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3b04      	subs	r3, #4
 800d5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f023 0201 	bic.w	r2, r3, #1
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3b04      	subs	r3, #4
 800d5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5e4:	4a0c      	ldr	r2, [pc, #48]	; (800d618 <pxPortInitialiseStack+0x64>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3b14      	subs	r3, #20
 800d5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3b04      	subs	r3, #4
 800d5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f06f 0202 	mvn.w	r2, #2
 800d602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3b20      	subs	r3, #32
 800d608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d60a:	68fb      	ldr	r3, [r7, #12]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	0800d61d 	.word	0x0800d61d

0800d61c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d626:	4b14      	ldr	r3, [pc, #80]	; (800d678 <prvTaskExitError+0x5c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d00c      	beq.n	800d64a <prvTaskExitError+0x2e>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	b672      	cpsid	i
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	b662      	cpsie	i
 800d644:	60fb      	str	r3, [r7, #12]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <prvTaskExitError+0x2c>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	b672      	cpsid	i
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	b662      	cpsie	i
 800d65e:	60bb      	str	r3, [r7, #8]
}
 800d660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d662:	bf00      	nop
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0fc      	beq.n	800d664 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d66a:	bf00      	nop
 800d66c:	bf00      	nop
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	20000010 	.word	0x20000010
 800d67c:	00000000 	.word	0x00000000

0800d680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <pxCurrentTCBConst2>)
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	6808      	ldr	r0, [r1, #0]
 800d686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	f380 8809 	msr	PSP, r0
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f380 8811 	msr	BASEPRI, r0
 800d69a:	4770      	bx	lr
 800d69c:	f3af 8000 	nop.w

0800d6a0 <pxCurrentTCBConst2>:
 800d6a0:	200012ec 	.word	0x200012ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop

0800d6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6a8:	4808      	ldr	r0, [pc, #32]	; (800d6cc <prvPortStartFirstTask+0x24>)
 800d6aa:	6800      	ldr	r0, [r0, #0]
 800d6ac:	6800      	ldr	r0, [r0, #0]
 800d6ae:	f380 8808 	msr	MSP, r0
 800d6b2:	f04f 0000 	mov.w	r0, #0
 800d6b6:	f380 8814 	msr	CONTROL, r0
 800d6ba:	b662      	cpsie	i
 800d6bc:	b661      	cpsie	f
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	df00      	svc	0
 800d6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6ca:	bf00      	nop
 800d6cc:	e000ed08 	.word	0xe000ed08

0800d6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6d6:	4b37      	ldr	r3, [pc, #220]	; (800d7b4 <xPortStartScheduler+0xe4>)
 800d6d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	22ff      	movs	r2, #255	; 0xff
 800d6e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	4b2f      	ldr	r3, [pc, #188]	; (800d7b8 <xPortStartScheduler+0xe8>)
 800d6fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6fe:	4b2f      	ldr	r3, [pc, #188]	; (800d7bc <xPortStartScheduler+0xec>)
 800d700:	2207      	movs	r2, #7
 800d702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d704:	e009      	b.n	800d71a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d706:	4b2d      	ldr	r3, [pc, #180]	; (800d7bc <xPortStartScheduler+0xec>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	4a2b      	ldr	r2, [pc, #172]	; (800d7bc <xPortStartScheduler+0xec>)
 800d70e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	b2db      	uxtb	r3, r3
 800d718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d71a:	78fb      	ldrb	r3, [r7, #3]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d722:	2b80      	cmp	r3, #128	; 0x80
 800d724:	d0ef      	beq.n	800d706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d726:	4b25      	ldr	r3, [pc, #148]	; (800d7bc <xPortStartScheduler+0xec>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f1c3 0307 	rsb	r3, r3, #7
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d00c      	beq.n	800d74c <xPortStartScheduler+0x7c>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	b672      	cpsid	i
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	b662      	cpsie	i
 800d746:	60bb      	str	r3, [r7, #8]
}
 800d748:	bf00      	nop
 800d74a:	e7fe      	b.n	800d74a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d74c:	4b1b      	ldr	r3, [pc, #108]	; (800d7bc <xPortStartScheduler+0xec>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	021b      	lsls	r3, r3, #8
 800d752:	4a1a      	ldr	r2, [pc, #104]	; (800d7bc <xPortStartScheduler+0xec>)
 800d754:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d756:	4b19      	ldr	r3, [pc, #100]	; (800d7bc <xPortStartScheduler+0xec>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d75e:	4a17      	ldr	r2, [pc, #92]	; (800d7bc <xPortStartScheduler+0xec>)
 800d760:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	b2da      	uxtb	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d76a:	4b15      	ldr	r3, [pc, #84]	; (800d7c0 <xPortStartScheduler+0xf0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a14      	ldr	r2, [pc, #80]	; (800d7c0 <xPortStartScheduler+0xf0>)
 800d770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d774:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d776:	4b12      	ldr	r3, [pc, #72]	; (800d7c0 <xPortStartScheduler+0xf0>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a11      	ldr	r2, [pc, #68]	; (800d7c0 <xPortStartScheduler+0xf0>)
 800d77c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d780:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d782:	f000 f8dd 	bl	800d940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d786:	4b0f      	ldr	r3, [pc, #60]	; (800d7c4 <xPortStartScheduler+0xf4>)
 800d788:	2200      	movs	r2, #0
 800d78a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d78c:	f000 f8fc 	bl	800d988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d790:	4b0d      	ldr	r3, [pc, #52]	; (800d7c8 <xPortStartScheduler+0xf8>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a0c      	ldr	r2, [pc, #48]	; (800d7c8 <xPortStartScheduler+0xf8>)
 800d796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d79a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d79c:	f7ff ff84 	bl	800d6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7a0:	f7fe ffea 	bl	800c778 <vTaskSwitchContext>
	prvTaskExitError();
 800d7a4:	f7ff ff3a 	bl	800d61c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	e000e400 	.word	0xe000e400
 800d7b8:	20001918 	.word	0x20001918
 800d7bc:	2000191c 	.word	0x2000191c
 800d7c0:	e000ed20 	.word	0xe000ed20
 800d7c4:	20000010 	.word	0x20000010
 800d7c8:	e000ef34 	.word	0xe000ef34

0800d7cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	b672      	cpsid	i
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	b662      	cpsie	i
 800d7e6:	607b      	str	r3, [r7, #4]
}
 800d7e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7ea:	4b10      	ldr	r3, [pc, #64]	; (800d82c <vPortEnterCritical+0x60>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	4a0e      	ldr	r2, [pc, #56]	; (800d82c <vPortEnterCritical+0x60>)
 800d7f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7f4:	4b0d      	ldr	r3, [pc, #52]	; (800d82c <vPortEnterCritical+0x60>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d111      	bne.n	800d820 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d7fc:	4b0c      	ldr	r3, [pc, #48]	; (800d830 <vPortEnterCritical+0x64>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00c      	beq.n	800d820 <vPortEnterCritical+0x54>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	b672      	cpsid	i
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	b662      	cpsie	i
 800d81a:	603b      	str	r3, [r7, #0]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <vPortEnterCritical+0x52>
	}
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	20000010 	.word	0x20000010
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d83a:	4b13      	ldr	r3, [pc, #76]	; (800d888 <vPortExitCritical+0x54>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10c      	bne.n	800d85c <vPortExitCritical+0x28>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	b672      	cpsid	i
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	b662      	cpsie	i
 800d856:	607b      	str	r3, [r7, #4]
}
 800d858:	bf00      	nop
 800d85a:	e7fe      	b.n	800d85a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d85c:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <vPortExitCritical+0x54>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	4a09      	ldr	r2, [pc, #36]	; (800d888 <vPortExitCritical+0x54>)
 800d864:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d866:	4b08      	ldr	r3, [pc, #32]	; (800d888 <vPortExitCritical+0x54>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d105      	bne.n	800d87a <vPortExitCritical+0x46>
 800d86e:	2300      	movs	r3, #0
 800d870:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	f383 8811 	msr	BASEPRI, r3
}
 800d878:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d87a:	bf00      	nop
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	20000010 	.word	0x20000010
 800d88c:	00000000 	.word	0x00000000

0800d890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d890:	f3ef 8009 	mrs	r0, PSP
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	4b15      	ldr	r3, [pc, #84]	; (800d8f0 <pxCurrentTCBConst>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	f01e 0f10 	tst.w	lr, #16
 800d8a0:	bf08      	it	eq
 800d8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8aa:	6010      	str	r0, [r2, #0]
 800d8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8b4:	b672      	cpsid	i
 800d8b6:	f380 8811 	msr	BASEPRI, r0
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	b662      	cpsie	i
 800d8c4:	f7fe ff58 	bl	800c778 <vTaskSwitchContext>
 800d8c8:	f04f 0000 	mov.w	r0, #0
 800d8cc:	f380 8811 	msr	BASEPRI, r0
 800d8d0:	bc09      	pop	{r0, r3}
 800d8d2:	6819      	ldr	r1, [r3, #0]
 800d8d4:	6808      	ldr	r0, [r1, #0]
 800d8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8da:	f01e 0f10 	tst.w	lr, #16
 800d8de:	bf08      	it	eq
 800d8e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8e4:	f380 8809 	msr	PSP, r0
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop

0800d8f0 <pxCurrentTCBConst>:
 800d8f0:	200012ec 	.word	0x200012ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop

0800d8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	b672      	cpsid	i
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	b662      	cpsie	i
 800d912:	607b      	str	r3, [r7, #4]
}
 800d914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d916:	f7fe fe6f 	bl	800c5f8 <xTaskIncrementTick>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d920:	4b06      	ldr	r3, [pc, #24]	; (800d93c <SysTick_Handler+0x44>)
 800d922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	2300      	movs	r3, #0
 800d92a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	f383 8811 	msr	BASEPRI, r3
}
 800d932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	e000ed04 	.word	0xe000ed04

0800d940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d944:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <vPortSetupTimerInterrupt+0x34>)
 800d946:	2200      	movs	r2, #0
 800d948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d94a:	4b0b      	ldr	r3, [pc, #44]	; (800d978 <vPortSetupTimerInterrupt+0x38>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d950:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <vPortSetupTimerInterrupt+0x3c>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a0a      	ldr	r2, [pc, #40]	; (800d980 <vPortSetupTimerInterrupt+0x40>)
 800d956:	fba2 2303 	umull	r2, r3, r2, r3
 800d95a:	099b      	lsrs	r3, r3, #6
 800d95c:	4a09      	ldr	r2, [pc, #36]	; (800d984 <vPortSetupTimerInterrupt+0x44>)
 800d95e:	3b01      	subs	r3, #1
 800d960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d962:	4b04      	ldr	r3, [pc, #16]	; (800d974 <vPortSetupTimerInterrupt+0x34>)
 800d964:	2207      	movs	r2, #7
 800d966:	601a      	str	r2, [r3, #0]
}
 800d968:	bf00      	nop
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	e000e010 	.word	0xe000e010
 800d978:	e000e018 	.word	0xe000e018
 800d97c:	20000004 	.word	0x20000004
 800d980:	10624dd3 	.word	0x10624dd3
 800d984:	e000e014 	.word	0xe000e014

0800d988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d988:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d998 <vPortEnableVFP+0x10>
 800d98c:	6801      	ldr	r1, [r0, #0]
 800d98e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d992:	6001      	str	r1, [r0, #0]
 800d994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d996:	bf00      	nop
 800d998:	e000ed88 	.word	0xe000ed88

0800d99c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9a2:	f3ef 8305 	mrs	r3, IPSR
 800d9a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2b0f      	cmp	r3, #15
 800d9ac:	d916      	bls.n	800d9dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9ae:	4a19      	ldr	r2, [pc, #100]	; (800da14 <vPortValidateInterruptPriority+0x78>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9b8:	4b17      	ldr	r3, [pc, #92]	; (800da18 <vPortValidateInterruptPriority+0x7c>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	7afa      	ldrb	r2, [r7, #11]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d20c      	bcs.n	800d9dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c6:	b672      	cpsid	i
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	b662      	cpsie	i
 800d9d6:	607b      	str	r3, [r7, #4]
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d9dc:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <vPortValidateInterruptPriority+0x80>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9e4:	4b0e      	ldr	r3, [pc, #56]	; (800da20 <vPortValidateInterruptPriority+0x84>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d90c      	bls.n	800da06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	b672      	cpsid	i
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	b662      	cpsie	i
 800da00:	603b      	str	r3, [r7, #0]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <vPortValidateInterruptPriority+0x68>
	}
 800da06:	bf00      	nop
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	e000e3f0 	.word	0xe000e3f0
 800da18:	20001918 	.word	0x20001918
 800da1c:	e000ed0c 	.word	0xe000ed0c
 800da20:	2000191c 	.word	0x2000191c

0800da24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08a      	sub	sp, #40	; 0x28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da30:	f7fe fd0e 	bl	800c450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da34:	4b5b      	ldr	r3, [pc, #364]	; (800dba4 <pvPortMalloc+0x180>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d101      	bne.n	800da40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da3c:	f000 f91a 	bl	800dc74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da40:	4b59      	ldr	r3, [pc, #356]	; (800dba8 <pvPortMalloc+0x184>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4013      	ands	r3, r2
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f040 8092 	bne.w	800db72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d01f      	beq.n	800da94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800da54:	2208      	movs	r2, #8
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4413      	add	r3, r2
 800da5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f003 0307 	and.w	r3, r3, #7
 800da62:	2b00      	cmp	r3, #0
 800da64:	d016      	beq.n	800da94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f023 0307 	bic.w	r3, r3, #7
 800da6c:	3308      	adds	r3, #8
 800da6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f003 0307 	and.w	r3, r3, #7
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00c      	beq.n	800da94 <pvPortMalloc+0x70>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	b672      	cpsid	i
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	b662      	cpsie	i
 800da8e:	617b      	str	r3, [r7, #20]
}
 800da90:	bf00      	nop
 800da92:	e7fe      	b.n	800da92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d06b      	beq.n	800db72 <pvPortMalloc+0x14e>
 800da9a:	4b44      	ldr	r3, [pc, #272]	; (800dbac <pvPortMalloc+0x188>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d866      	bhi.n	800db72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800daa4:	4b42      	ldr	r3, [pc, #264]	; (800dbb0 <pvPortMalloc+0x18c>)
 800daa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800daa8:	4b41      	ldr	r3, [pc, #260]	; (800dbb0 <pvPortMalloc+0x18c>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daae:	e004      	b.n	800daba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d903      	bls.n	800dacc <pvPortMalloc+0xa8>
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1f1      	bne.n	800dab0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dacc:	4b35      	ldr	r3, [pc, #212]	; (800dba4 <pvPortMalloc+0x180>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d04d      	beq.n	800db72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2208      	movs	r2, #8
 800dadc:	4413      	add	r3, r2
 800dade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	685a      	ldr	r2, [r3, #4]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	1ad2      	subs	r2, r2, r3
 800daf0:	2308      	movs	r3, #8
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d921      	bls.n	800db3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800daf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4413      	add	r3, r2
 800dafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	f003 0307 	and.w	r3, r3, #7
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00c      	beq.n	800db24 <pvPortMalloc+0x100>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	b672      	cpsid	i
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	b662      	cpsie	i
 800db1e:	613b      	str	r3, [r7, #16]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	685a      	ldr	r2, [r3, #4]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	1ad2      	subs	r2, r2, r3
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db36:	69b8      	ldr	r0, [r7, #24]
 800db38:	f000 f8fe 	bl	800dd38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db3c:	4b1b      	ldr	r3, [pc, #108]	; (800dbac <pvPortMalloc+0x188>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	4a19      	ldr	r2, [pc, #100]	; (800dbac <pvPortMalloc+0x188>)
 800db48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db4a:	4b18      	ldr	r3, [pc, #96]	; (800dbac <pvPortMalloc+0x188>)
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	4b19      	ldr	r3, [pc, #100]	; (800dbb4 <pvPortMalloc+0x190>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	429a      	cmp	r2, r3
 800db54:	d203      	bcs.n	800db5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db56:	4b15      	ldr	r3, [pc, #84]	; (800dbac <pvPortMalloc+0x188>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a16      	ldr	r2, [pc, #88]	; (800dbb4 <pvPortMalloc+0x190>)
 800db5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	4b11      	ldr	r3, [pc, #68]	; (800dba8 <pvPortMalloc+0x184>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	431a      	orrs	r2, r3
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	2200      	movs	r2, #0
 800db70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db72:	f7fe fc7b 	bl	800c46c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	f003 0307 	and.w	r3, r3, #7
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00c      	beq.n	800db9a <pvPortMalloc+0x176>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	b672      	cpsid	i
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	b662      	cpsie	i
 800db94:	60fb      	str	r3, [r7, #12]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <pvPortMalloc+0x174>
	return pvReturn;
 800db9a:	69fb      	ldr	r3, [r7, #28]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3728      	adds	r7, #40	; 0x28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	20005528 	.word	0x20005528
 800dba8:	20005534 	.word	0x20005534
 800dbac:	2000552c 	.word	0x2000552c
 800dbb0:	20005520 	.word	0x20005520
 800dbb4:	20005530 	.word	0x20005530

0800dbb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d04c      	beq.n	800dc64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbca:	2308      	movs	r3, #8
 800dbcc:	425b      	negs	r3, r3
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	4b23      	ldr	r3, [pc, #140]	; (800dc6c <vPortFree+0xb4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10c      	bne.n	800dc00 <vPortFree+0x48>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	b672      	cpsid	i
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	b662      	cpsie	i
 800dbfa:	60fb      	str	r3, [r7, #12]
}
 800dbfc:	bf00      	nop
 800dbfe:	e7fe      	b.n	800dbfe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00c      	beq.n	800dc22 <vPortFree+0x6a>
	__asm volatile
 800dc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0c:	b672      	cpsid	i
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	b662      	cpsie	i
 800dc1c:	60bb      	str	r3, [r7, #8]
}
 800dc1e:	bf00      	nop
 800dc20:	e7fe      	b.n	800dc20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	4b11      	ldr	r3, [pc, #68]	; (800dc6c <vPortFree+0xb4>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4013      	ands	r3, r2
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d019      	beq.n	800dc64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d115      	bne.n	800dc64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	4b0b      	ldr	r3, [pc, #44]	; (800dc6c <vPortFree+0xb4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	43db      	mvns	r3, r3
 800dc42:	401a      	ands	r2, r3
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc48:	f7fe fc02 	bl	800c450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	685a      	ldr	r2, [r3, #4]
 800dc50:	4b07      	ldr	r3, [pc, #28]	; (800dc70 <vPortFree+0xb8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4413      	add	r3, r2
 800dc56:	4a06      	ldr	r2, [pc, #24]	; (800dc70 <vPortFree+0xb8>)
 800dc58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc5a:	6938      	ldr	r0, [r7, #16]
 800dc5c:	f000 f86c 	bl	800dd38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dc60:	f7fe fc04 	bl	800c46c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc64:	bf00      	nop
 800dc66:	3718      	adds	r7, #24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	20005534 	.word	0x20005534
 800dc70:	2000552c 	.word	0x2000552c

0800dc74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc80:	4b27      	ldr	r3, [pc, #156]	; (800dd20 <prvHeapInit+0xac>)
 800dc82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f003 0307 	and.w	r3, r3, #7
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00c      	beq.n	800dca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	3307      	adds	r3, #7
 800dc92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f023 0307 	bic.w	r3, r3, #7
 800dc9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	4a1f      	ldr	r2, [pc, #124]	; (800dd20 <prvHeapInit+0xac>)
 800dca4:	4413      	add	r3, r2
 800dca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcac:	4a1d      	ldr	r2, [pc, #116]	; (800dd24 <prvHeapInit+0xb0>)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcb2:	4b1c      	ldr	r3, [pc, #112]	; (800dd24 <prvHeapInit+0xb0>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dcc0:	2208      	movs	r2, #8
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f023 0307 	bic.w	r3, r3, #7
 800dcce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	4a15      	ldr	r2, [pc, #84]	; (800dd28 <prvHeapInit+0xb4>)
 800dcd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcd6:	4b14      	ldr	r3, [pc, #80]	; (800dd28 <prvHeapInit+0xb4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dcde:	4b12      	ldr	r3, [pc, #72]	; (800dd28 <prvHeapInit+0xb4>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	1ad2      	subs	r2, r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcf4:	4b0c      	ldr	r3, [pc, #48]	; (800dd28 <prvHeapInit+0xb4>)
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	4a0a      	ldr	r2, [pc, #40]	; (800dd2c <prvHeapInit+0xb8>)
 800dd02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <prvHeapInit+0xbc>)
 800dd0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd0c:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <prvHeapInit+0xc0>)
 800dd0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd12:	601a      	str	r2, [r3, #0]
}
 800dd14:	bf00      	nop
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	20001920 	.word	0x20001920
 800dd24:	20005520 	.word	0x20005520
 800dd28:	20005528 	.word	0x20005528
 800dd2c:	20005530 	.word	0x20005530
 800dd30:	2000552c 	.word	0x2000552c
 800dd34:	20005534 	.word	0x20005534

0800dd38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd40:	4b28      	ldr	r3, [pc, #160]	; (800dde4 <prvInsertBlockIntoFreeList+0xac>)
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	e002      	b.n	800dd4c <prvInsertBlockIntoFreeList+0x14>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d8f7      	bhi.n	800dd46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	4413      	add	r3, r2
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d108      	bne.n	800dd7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	441a      	add	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	441a      	add	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d118      	bne.n	800ddc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	4b15      	ldr	r3, [pc, #84]	; (800dde8 <prvInsertBlockIntoFreeList+0xb0>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d00d      	beq.n	800ddb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	685a      	ldr	r2, [r3, #4]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	441a      	add	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	e008      	b.n	800ddc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddb6:	4b0c      	ldr	r3, [pc, #48]	; (800dde8 <prvInsertBlockIntoFreeList+0xb0>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	e003      	b.n	800ddc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d002      	beq.n	800ddd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddd6:	bf00      	nop
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	20005520 	.word	0x20005520
 800dde8:	20005528 	.word	0x20005528

0800ddec <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800ddf2:	4b21      	ldr	r3, [pc, #132]	; (800de78 <_DoInit+0x8c>)
 800ddf4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2203      	movs	r2, #3
 800ddfa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2203      	movs	r2, #3
 800de00:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a1d      	ldr	r2, [pc, #116]	; (800de7c <_DoInit+0x90>)
 800de06:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a1d      	ldr	r2, [pc, #116]	; (800de80 <_DoInit+0x94>)
 800de0c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de14:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a14      	ldr	r2, [pc, #80]	; (800de7c <_DoInit+0x90>)
 800de2c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a14      	ldr	r2, [pc, #80]	; (800de84 <_DoInit+0x98>)
 800de32:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2210      	movs	r2, #16
 800de38:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3307      	adds	r3, #7
 800de50:	4a0d      	ldr	r2, [pc, #52]	; (800de88 <_DoInit+0x9c>)
 800de52:	6810      	ldr	r0, [r2, #0]
 800de54:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a0c      	ldr	r2, [pc, #48]	; (800de8c <_DoInit+0xa0>)
 800de5a:	6810      	ldr	r0, [r2, #0]
 800de5c:	6018      	str	r0, [r3, #0]
 800de5e:	8891      	ldrh	r1, [r2, #4]
 800de60:	7992      	ldrb	r2, [r2, #6]
 800de62:	8099      	strh	r1, [r3, #4]
 800de64:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2220      	movs	r2, #32
 800de6a:	719a      	strb	r2, [r3, #6]
}
 800de6c:	bf00      	nop
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	20005538 	.word	0x20005538
 800de7c:	0800fda0 	.word	0x0800fda0
 800de80:	200055e0 	.word	0x200055e0
 800de84:	200059e0 	.word	0x200059e0
 800de88:	0800fdac 	.word	0x0800fdac
 800de8c:	0800fdb0 	.word	0x0800fdb0

0800de90 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800de90:	b580      	push	{r7, lr}
 800de92:	b08a      	sub	sp, #40	; 0x28
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800de9c:	4b3c      	ldr	r3, [pc, #240]	; (800df90 <SEGGER_RTT_ReadNoLock+0x100>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <SEGGER_RTT_ReadNoLock+0x18>
 800dea4:	f7ff ffa2 	bl	800ddec <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	4613      	mov	r3, r2
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	4413      	add	r3, r2
 800deb0:	00db      	lsls	r3, r3, #3
 800deb2:	3360      	adds	r3, #96	; 0x60
 800deb4:	4a36      	ldr	r2, [pc, #216]	; (800df90 <SEGGER_RTT_ReadNoLock+0x100>)
 800deb6:	4413      	add	r3, r2
 800deb8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800deca:	2300      	movs	r3, #0
 800decc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800dece:	6a3a      	ldr	r2, [r7, #32]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d92a      	bls.n	800df2c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	689a      	ldr	r2, [r3, #8]
 800deda:	6a3b      	ldr	r3, [r7, #32]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4293      	cmp	r3, r2
 800dee6:	bf28      	it	cs
 800dee8:	4613      	movcs	r3, r2
 800deea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	4413      	add	r3, r2
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	4619      	mov	r1, r3
 800def8:	69f8      	ldr	r0, [r7, #28]
 800defa:	f001 fc81 	bl	800f800 <memcpy>
    NumBytesRead += NumBytesRem;
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	4413      	add	r3, r2
 800df04:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800df06:	69fa      	ldr	r2, [r7, #28]
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	4413      	add	r3, r2
 800df0c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800df16:	6a3a      	ldr	r2, [r7, #32]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	4413      	add	r3, r2
 800df1c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	6a3a      	ldr	r2, [r7, #32]
 800df24:	429a      	cmp	r2, r3
 800df26:	d101      	bne.n	800df2c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800df28:	2300      	movs	r3, #0
 800df2a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	6a3b      	ldr	r3, [r7, #32]
 800df30:	1ad3      	subs	r3, r2, r3
 800df32:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4293      	cmp	r3, r2
 800df3a:	bf28      	it	cs
 800df3c:	4613      	movcs	r3, r2
 800df3e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d018      	beq.n	800df78 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	4413      	add	r3, r2
 800df4e:	693a      	ldr	r2, [r7, #16]
 800df50:	4619      	mov	r1, r3
 800df52:	69f8      	ldr	r0, [r7, #28]
 800df54:	f001 fc54 	bl	800f800 <memcpy>
    NumBytesRead += NumBytesRem;
 800df58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	4413      	add	r3, r2
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	4413      	add	r3, r2
 800df66:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800df70:	6a3a      	ldr	r2, [r7, #32]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	4413      	add	r3, r2
 800df76:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	6a3a      	ldr	r2, [r7, #32]
 800df82:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df86:	4618      	mov	r0, r3
 800df88:	3728      	adds	r7, #40	; 0x28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	20005538 	.word	0x20005538

0800df94 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
 800dfa0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800dfa2:	4b30      	ldr	r3, [pc, #192]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800dfaa:	f7ff ff1f 	bl	800ddec <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800dfae:	4b2d      	ldr	r3, [pc, #180]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d24c      	bcs.n	800e054 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800dfba:	f3ef 8311 	mrs	r3, BASEPRI
 800dfbe:	f04f 0120 	mov.w	r1, #32
 800dfc2:	f381 8811 	msr	BASEPRI, r1
 800dfc6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d032      	beq.n	800e034 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800dfce:	4925      	ldr	r1, [pc, #148]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	005b      	lsls	r3, r3, #1
 800dfd8:	4413      	add	r3, r2
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	440b      	add	r3, r1
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800dfe2:	4920      	ldr	r1, [pc, #128]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	4613      	mov	r3, r2
 800dfea:	005b      	lsls	r3, r3, #1
 800dfec:	4413      	add	r3, r2
 800dfee:	00db      	lsls	r3, r3, #3
 800dff0:	440b      	add	r3, r1
 800dff2:	3304      	adds	r3, #4
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800dff8:	491a      	ldr	r1, [pc, #104]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	4613      	mov	r3, r2
 800dffe:	005b      	lsls	r3, r3, #1
 800e000:	4413      	add	r3, r2
 800e002:	00db      	lsls	r3, r3, #3
 800e004:	440b      	add	r3, r1
 800e006:	3320      	adds	r3, #32
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800e00c:	4915      	ldr	r1, [pc, #84]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	4613      	mov	r3, r2
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	4413      	add	r3, r2
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	440b      	add	r3, r1
 800e01a:	3328      	adds	r3, #40	; 0x28
 800e01c:	2200      	movs	r2, #0
 800e01e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800e020:	4910      	ldr	r1, [pc, #64]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	4613      	mov	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	4413      	add	r3, r2
 800e02a:	00db      	lsls	r3, r3, #3
 800e02c:	440b      	add	r3, r1
 800e02e:	3324      	adds	r3, #36	; 0x24
 800e030:	2200      	movs	r2, #0
 800e032:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800e034:	490b      	ldr	r1, [pc, #44]	; (800e064 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	4613      	mov	r3, r2
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	4413      	add	r3, r2
 800e03e:	00db      	lsls	r3, r3, #3
 800e040:	440b      	add	r3, r1
 800e042:	332c      	adds	r3, #44	; 0x2c
 800e044:	6a3a      	ldr	r2, [r7, #32]
 800e046:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	e002      	b.n	800e05a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800e054:	f04f 33ff 	mov.w	r3, #4294967295
 800e058:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e05a:	697b      	ldr	r3, [r7, #20]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20005538 	.word	0x20005538

0800e068 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800e076:	4b30      	ldr	r3, [pc, #192]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800e07e:	f7ff feb5 	bl	800ddec <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800e082:	4b2d      	ldr	r3, [pc, #180]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	461a      	mov	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d24b      	bcs.n	800e126 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800e08e:	f3ef 8311 	mrs	r3, BASEPRI
 800e092:	f04f 0120 	mov.w	r1, #32
 800e096:	f381 8811 	msr	BASEPRI, r1
 800e09a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d031      	beq.n	800e106 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800e0a2:	4925      	ldr	r1, [pc, #148]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	4413      	add	r3, r2
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3360      	adds	r3, #96	; 0x60
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800e0b6:	4920      	ldr	r1, [pc, #128]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	005b      	lsls	r3, r3, #1
 800e0be:	4413      	add	r3, r2
 800e0c0:	00db      	lsls	r3, r3, #3
 800e0c2:	440b      	add	r3, r1
 800e0c4:	3364      	adds	r3, #100	; 0x64
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800e0ca:	491b      	ldr	r1, [pc, #108]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	4413      	add	r3, r2
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	440b      	add	r3, r1
 800e0d8:	3368      	adds	r3, #104	; 0x68
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800e0de:	4916      	ldr	r1, [pc, #88]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	4413      	add	r3, r2
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3370      	adds	r3, #112	; 0x70
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800e0f2:	4911      	ldr	r1, [pc, #68]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0f4:	68fa      	ldr	r2, [r7, #12]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	4413      	add	r3, r2
 800e0fc:	00db      	lsls	r3, r3, #3
 800e0fe:	440b      	add	r3, r1
 800e100:	336c      	adds	r3, #108	; 0x6c
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800e106:	490c      	ldr	r1, [pc, #48]	; (800e138 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	440b      	add	r3, r1
 800e114:	3374      	adds	r3, #116	; 0x74
 800e116:	6a3a      	ldr	r2, [r7, #32]
 800e118:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800e120:	2300      	movs	r3, #0
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	e002      	b.n	800e12c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800e126:	f04f 33ff 	mov.w	r3, #4294967295
 800e12a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e12c:	697b      	ldr	r3, [r7, #20]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3718      	adds	r7, #24
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	20005538 	.word	0x20005538

0800e13c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800e13c:	b480      	push	{r7}
 800e13e:	b087      	sub	sp, #28
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e14c:	e002      	b.n	800e154 <_EncodeStr+0x18>
    Len++;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	3301      	adds	r3, #1
 800e152:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	4413      	add	r3, r2
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1f6      	bne.n	800e14e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	429a      	cmp	r2, r3
 800e166:	d901      	bls.n	800e16c <_EncodeStr+0x30>
    Len = Limit;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	2bfe      	cmp	r3, #254	; 0xfe
 800e170:	d806      	bhi.n	800e180 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	60fa      	str	r2, [r7, #12]
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	b2d2      	uxtb	r2, r2
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	e011      	b.n	800e1a4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	60fa      	str	r2, [r7, #12]
 800e186:	22ff      	movs	r2, #255	; 0xff
 800e188:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	60fa      	str	r2, [r7, #12]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	b2d2      	uxtb	r2, r2
 800e194:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	0a19      	lsrs	r1, r3, #8
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	60fa      	str	r2, [r7, #12]
 800e1a0:	b2ca      	uxtb	r2, r1
 800e1a2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e1a8:	e00a      	b.n	800e1c0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	1c53      	adds	r3, r2, #1
 800e1ae:	60bb      	str	r3, [r7, #8]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	1c59      	adds	r1, r3, #1
 800e1b4:	60f9      	str	r1, [r7, #12]
 800e1b6:	7812      	ldrb	r2, [r2, #0]
 800e1b8:	701a      	strb	r2, [r3, #0]
    n++;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e1c0:	697a      	ldr	r2, [r7, #20]
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d3f0      	bcc.n	800e1aa <_EncodeStr+0x6e>
  }
  return pPayload;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	371c      	adds	r7, #28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800e1d6:	b480      	push	{r7}
 800e1d8:	b083      	sub	sp, #12
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3304      	adds	r3, #4
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	370c      	adds	r7, #12
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
	...

0800e1f0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e1f6:	1cfb      	adds	r3, r7, #3
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	f7ff fe47 	bl	800de90 <SEGGER_RTT_ReadNoLock>
 800e202:	4603      	mov	r3, r0
 800e204:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dd4c      	ble.n	800e2a6 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800e20c:	78fb      	ldrb	r3, [r7, #3]
 800e20e:	2b07      	cmp	r3, #7
 800e210:	dc16      	bgt.n	800e240 <_HandleIncomingPacket+0x50>
 800e212:	2b00      	cmp	r3, #0
 800e214:	dd3c      	ble.n	800e290 <_HandleIncomingPacket+0xa0>
 800e216:	3b01      	subs	r3, #1
 800e218:	2b06      	cmp	r3, #6
 800e21a:	d839      	bhi.n	800e290 <_HandleIncomingPacket+0xa0>
 800e21c:	a201      	add	r2, pc, #4	; (adr r2, 800e224 <_HandleIncomingPacket+0x34>)
 800e21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e222:	bf00      	nop
 800e224:	0800e247 	.word	0x0800e247
 800e228:	0800e24d 	.word	0x0800e24d
 800e22c:	0800e253 	.word	0x0800e253
 800e230:	0800e259 	.word	0x0800e259
 800e234:	0800e25f 	.word	0x0800e25f
 800e238:	0800e265 	.word	0x0800e265
 800e23c:	0800e26b 	.word	0x0800e26b
 800e240:	2b80      	cmp	r3, #128	; 0x80
 800e242:	d015      	beq.n	800e270 <_HandleIncomingPacket+0x80>
 800e244:	e024      	b.n	800e290 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800e246:	f000 fc43 	bl	800ead0 <SEGGER_SYSVIEW_Start>
      break;
 800e24a:	e031      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800e24c:	f000 fcfc 	bl	800ec48 <SEGGER_SYSVIEW_Stop>
      break;
 800e250:	e02e      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800e252:	f000 fed7 	bl	800f004 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800e256:	e02b      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800e258:	f000 fe9c 	bl	800ef94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800e25c:	e028      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800e25e:	f000 fd19 	bl	800ec94 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800e262:	e025      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800e264:	f001 f898 	bl	800f398 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800e268:	e022      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800e26a:	f001 f877 	bl	800f35c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800e26e:	e01f      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e270:	1cfb      	adds	r3, r7, #3
 800e272:	2201      	movs	r2, #1
 800e274:	4619      	mov	r1, r3
 800e276:	2001      	movs	r0, #1
 800e278:	f7ff fe0a 	bl	800de90 <SEGGER_RTT_ReadNoLock>
 800e27c:	4603      	mov	r3, r0
 800e27e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	dd11      	ble.n	800e2aa <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800e286:	78fb      	ldrb	r3, [r7, #3]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 ffe7 	bl	800f25c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800e28e:	e00c      	b.n	800e2aa <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800e290:	78fb      	ldrb	r3, [r7, #3]
 800e292:	b25b      	sxtb	r3, r3
 800e294:	2b00      	cmp	r3, #0
 800e296:	da0a      	bge.n	800e2ae <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e298:	1cfb      	adds	r3, r7, #3
 800e29a:	2201      	movs	r2, #1
 800e29c:	4619      	mov	r1, r3
 800e29e:	2001      	movs	r0, #1
 800e2a0:	f7ff fdf6 	bl	800de90 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800e2a4:	e003      	b.n	800e2ae <_HandleIncomingPacket+0xbe>
    }
  }
 800e2a6:	bf00      	nop
 800e2a8:	e002      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
      break;
 800e2aa:	bf00      	nop
 800e2ac:	e000      	b.n	800e2b0 <_HandleIncomingPacket+0xc0>
      break;
 800e2ae:	bf00      	nop
}
 800e2b0:	bf00      	nop
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08c      	sub	sp, #48	; 0x30
 800e2bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800e2be:	2301      	movs	r3, #1
 800e2c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800e2c2:	1d3b      	adds	r3, r7, #4
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2cc:	4b30      	ldr	r3, [pc, #192]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e2ce:	695b      	ldr	r3, [r3, #20]
 800e2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2d2:	e00b      	b.n	800e2ec <_TrySendOverflowPacket+0x34>
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	1c59      	adds	r1, r3, #1
 800e2dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e2de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
 800e2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e8:	09db      	lsrs	r3, r3, #7
 800e2ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ee:	2b7f      	cmp	r3, #127	; 0x7f
 800e2f0:	d8f0      	bhi.n	800e2d4 <_TrySendOverflowPacket+0x1c>
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2fa:	b2d2      	uxtb	r2, r2
 800e2fc:	701a      	strb	r2, [r3, #0]
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e302:	4b24      	ldr	r3, [pc, #144]	; (800e394 <_TrySendOverflowPacket+0xdc>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e308:	4b21      	ldr	r3, [pc, #132]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	69ba      	ldr	r2, [r7, #24]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	627b      	str	r3, [r7, #36]	; 0x24
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	623b      	str	r3, [r7, #32]
 800e31a:	e00b      	b.n	800e334 <_TrySendOverflowPacket+0x7c>
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	1c59      	adds	r1, r3, #1
 800e324:	6279      	str	r1, [r7, #36]	; 0x24
 800e326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e32a:	b2d2      	uxtb	r2, r2
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	09db      	lsrs	r3, r3, #7
 800e332:	623b      	str	r3, [r7, #32]
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	2b7f      	cmp	r3, #127	; 0x7f
 800e338:	d8f0      	bhi.n	800e31c <_TrySendOverflowPacket+0x64>
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	1c5a      	adds	r2, r3, #1
 800e33e:	627a      	str	r2, [r7, #36]	; 0x24
 800e340:	6a3a      	ldr	r2, [r7, #32]
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800e34a:	1d3b      	adds	r3, r7, #4
 800e34c:	69fa      	ldr	r2, [r7, #28]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	461a      	mov	r2, r3
 800e352:	1d3b      	adds	r3, r7, #4
 800e354:	4619      	mov	r1, r3
 800e356:	2001      	movs	r0, #1
 800e358:	f7f1 ff72 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e35c:	4603      	mov	r3, r0
 800e35e:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e366:	4a0a      	ldr	r2, [pc, #40]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800e36c:	4b08      	ldr	r3, [pc, #32]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	3b01      	subs	r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	4b06      	ldr	r3, [pc, #24]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e376:	701a      	strb	r2, [r3, #0]
 800e378:	e004      	b.n	800e384 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800e37a:	4b05      	ldr	r3, [pc, #20]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e37c:	695b      	ldr	r3, [r3, #20]
 800e37e:	3301      	adds	r3, #1
 800e380:	4a03      	ldr	r2, [pc, #12]	; (800e390 <_TrySendOverflowPacket+0xd8>)
 800e382:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800e384:	693b      	ldr	r3, [r7, #16]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3730      	adds	r7, #48	; 0x30
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	20005df8 	.word	0x20005df8
 800e394:	e0001004 	.word	0xe0001004

0800e398 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08a      	sub	sp, #40	; 0x28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800e3a4:	4b63      	ldr	r3, [pc, #396]	; (800e534 <_SendPacket+0x19c>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d010      	beq.n	800e3ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e3ac:	4b61      	ldr	r3, [pc, #388]	; (800e534 <_SendPacket+0x19c>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 80a1 	beq.w	800e4f8 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800e3b6:	4b5f      	ldr	r3, [pc, #380]	; (800e534 <_SendPacket+0x19c>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d109      	bne.n	800e3d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800e3be:	f7ff ff7b 	bl	800e2b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800e3c2:	4b5c      	ldr	r3, [pc, #368]	; (800e534 <_SendPacket+0x19c>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	f040 8098 	bne.w	800e4fc <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800e3cc:	e001      	b.n	800e3d2 <_SendPacket+0x3a>
    goto Send;
 800e3ce:	bf00      	nop
 800e3d0:	e000      	b.n	800e3d4 <_SendPacket+0x3c>
Send:
 800e3d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b1f      	cmp	r3, #31
 800e3d8:	d809      	bhi.n	800e3ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800e3da:	4b56      	ldr	r3, [pc, #344]	; (800e534 <_SendPacket+0x19c>)
 800e3dc:	69da      	ldr	r2, [r3, #28]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3e4:	f003 0301 	and.w	r3, r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f040 8089 	bne.w	800e500 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b17      	cmp	r3, #23
 800e3f2:	d807      	bhi.n	800e404 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	701a      	strb	r2, [r3, #0]
 800e402:	e03d      	b.n	800e480 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	2b7f      	cmp	r3, #127	; 0x7f
 800e410:	d912      	bls.n	800e438 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	09da      	lsrs	r2, r3, #7
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	3b01      	subs	r3, #1
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	b2db      	uxtb	r3, r3
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	3a01      	subs	r2, #1
 800e42a:	60fa      	str	r2, [r7, #12]
 800e42c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e430:	b2da      	uxtb	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	701a      	strb	r2, [r3, #0]
 800e436:	e006      	b.n	800e446 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3b01      	subs	r3, #1
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	b2da      	uxtb	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b7f      	cmp	r3, #127	; 0x7f
 800e44a:	d912      	bls.n	800e472 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	09da      	lsrs	r2, r3, #7
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	3b01      	subs	r3, #1
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	3a01      	subs	r2, #1
 800e464:	60fa      	str	r2, [r7, #12]
 800e466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	e006      	b.n	800e480 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3b01      	subs	r3, #1
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e480:	4b2d      	ldr	r3, [pc, #180]	; (800e538 <_SendPacket+0x1a0>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e486:	4b2b      	ldr	r3, [pc, #172]	; (800e534 <_SendPacket+0x19c>)
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	69ba      	ldr	r2, [r7, #24]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	623b      	str	r3, [r7, #32]
 800e498:	e00b      	b.n	800e4b2 <_SendPacket+0x11a>
 800e49a:	6a3b      	ldr	r3, [r7, #32]
 800e49c:	b2da      	uxtb	r2, r3
 800e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a0:	1c59      	adds	r1, r3, #1
 800e4a2:	6279      	str	r1, [r7, #36]	; 0x24
 800e4a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	701a      	strb	r2, [r3, #0]
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
 800e4ae:	09db      	lsrs	r3, r3, #7
 800e4b0:	623b      	str	r3, [r7, #32]
 800e4b2:	6a3b      	ldr	r3, [r7, #32]
 800e4b4:	2b7f      	cmp	r3, #127	; 0x7f
 800e4b6:	d8f0      	bhi.n	800e49a <_SendPacket+0x102>
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	627a      	str	r2, [r7, #36]	; 0x24
 800e4be:	6a3a      	ldr	r2, [r7, #32]
 800e4c0:	b2d2      	uxtb	r2, r2
 800e4c2:	701a      	strb	r2, [r3, #0]
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	68f9      	ldr	r1, [r7, #12]
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	f7f1 feb4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d003      	beq.n	800e4ea <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e4e2:	4a14      	ldr	r2, [pc, #80]	; (800e534 <_SendPacket+0x19c>)
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	60d3      	str	r3, [r2, #12]
 800e4e8:	e00b      	b.n	800e502 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800e4ea:	4b12      	ldr	r3, [pc, #72]	; (800e534 <_SendPacket+0x19c>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	4b10      	ldr	r3, [pc, #64]	; (800e534 <_SendPacket+0x19c>)
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	e004      	b.n	800e502 <_SendPacket+0x16a>
    goto SendDone;
 800e4f8:	bf00      	nop
 800e4fa:	e002      	b.n	800e502 <_SendPacket+0x16a>
      goto SendDone;
 800e4fc:	bf00      	nop
 800e4fe:	e000      	b.n	800e502 <_SendPacket+0x16a>
      goto SendDone;
 800e500:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800e502:	4b0e      	ldr	r3, [pc, #56]	; (800e53c <_SendPacket+0x1a4>)
 800e504:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e508:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <_SendPacket+0x1a4>)
 800e50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e50e:	429a      	cmp	r2, r3
 800e510:	d00b      	beq.n	800e52a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800e512:	4b08      	ldr	r3, [pc, #32]	; (800e534 <_SendPacket+0x19c>)
 800e514:	789b      	ldrb	r3, [r3, #2]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d107      	bne.n	800e52a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800e51a:	4b06      	ldr	r3, [pc, #24]	; (800e534 <_SendPacket+0x19c>)
 800e51c:	2201      	movs	r2, #1
 800e51e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800e520:	f7ff fe66 	bl	800e1f0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800e524:	4b03      	ldr	r3, [pc, #12]	; (800e534 <_SendPacket+0x19c>)
 800e526:	2200      	movs	r2, #0
 800e528:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800e52a:	bf00      	nop
 800e52c:	3728      	adds	r7, #40	; 0x28
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20005df8 	.word	0x20005df8
 800e538:	e0001004 	.word	0xe0001004
 800e53c:	20005538 	.word	0x20005538

0800e540 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800e540:	b580      	push	{r7, lr}
 800e542:	b0a2      	sub	sp, #136	; 0x88
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800e556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800e562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e566:	2b00      	cmp	r3, #0
 800e568:	d01d      	beq.n	800e5a6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800e56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e56e:	2b25      	cmp	r3, #37	; 0x25
 800e570:	d1f1      	bne.n	800e556 <_VPrintHost+0x16>
      c = *p;
 800e572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	1d19      	adds	r1, r3, #4
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	6011      	str	r1, [r2, #0]
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e58a:	1c5a      	adds	r2, r3, #1
 800e58c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e590:	460a      	mov	r2, r1
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	3388      	adds	r3, #136	; 0x88
 800e596:	443b      	add	r3, r7
 800e598:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800e59c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e5a0:	2b10      	cmp	r3, #16
 800e5a2:	d002      	beq.n	800e5aa <_VPrintHost+0x6a>
    c = *p++;
 800e5a4:	e7d7      	b.n	800e556 <_VPrintHost+0x16>
      break;
 800e5a6:	bf00      	nop
 800e5a8:	e000      	b.n	800e5ac <_VPrintHost+0x6c>
        break;
 800e5aa:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800e5ac:	f3ef 8311 	mrs	r3, BASEPRI
 800e5b0:	f04f 0120 	mov.w	r1, #32
 800e5b4:	f381 8811 	msr	BASEPRI, r1
 800e5b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5ba:	483f      	ldr	r0, [pc, #252]	; (800e6b8 <_VPrintHost+0x178>)
 800e5bc:	f7ff fe0b 	bl	800e1d6 <_PreparePacket>
 800e5c0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e5c2:	2280      	movs	r2, #128	; 0x80
 800e5c4:	68f9      	ldr	r1, [r7, #12]
 800e5c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e5c8:	f7ff fdb8 	bl	800e13c <_EncodeStr>
 800e5cc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800e5ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5d0:	677b      	str	r3, [r7, #116]	; 0x74
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	673b      	str	r3, [r7, #112]	; 0x70
 800e5d6:	e00b      	b.n	800e5f0 <_VPrintHost+0xb0>
 800e5d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5de:	1c59      	adds	r1, r3, #1
 800e5e0:	6779      	str	r1, [r7, #116]	; 0x74
 800e5e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e5e6:	b2d2      	uxtb	r2, r2
 800e5e8:	701a      	strb	r2, [r3, #0]
 800e5ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5ec:	09db      	lsrs	r3, r3, #7
 800e5ee:	673b      	str	r3, [r7, #112]	; 0x70
 800e5f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5f2:	2b7f      	cmp	r3, #127	; 0x7f
 800e5f4:	d8f0      	bhi.n	800e5d8 <_VPrintHost+0x98>
 800e5f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	677a      	str	r2, [r7, #116]	; 0x74
 800e5fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e5fe:	b2d2      	uxtb	r2, r2
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e604:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800e606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e60a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e60e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e610:	e00b      	b.n	800e62a <_VPrintHost+0xea>
 800e612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e614:	b2da      	uxtb	r2, r3
 800e616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e618:	1c59      	adds	r1, r3, #1
 800e61a:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e61c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e620:	b2d2      	uxtb	r2, r2
 800e622:	701a      	strb	r2, [r3, #0]
 800e624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e626:	09db      	lsrs	r3, r3, #7
 800e628:	66bb      	str	r3, [r7, #104]	; 0x68
 800e62a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e62c:	2b7f      	cmp	r3, #127	; 0x7f
 800e62e:	d8f0      	bhi.n	800e612 <_VPrintHost+0xd2>
 800e630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e638:	b2d2      	uxtb	r2, r2
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e63e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800e640:	f107 0314 	add.w	r3, r7, #20
 800e644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e648:	e022      	b.n	800e690 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800e64a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e64c:	667b      	str	r3, [r7, #100]	; 0x64
 800e64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	663b      	str	r3, [r7, #96]	; 0x60
 800e656:	e00b      	b.n	800e670 <_VPrintHost+0x130>
 800e658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e65e:	1c59      	adds	r1, r3, #1
 800e660:	6679      	str	r1, [r7, #100]	; 0x64
 800e662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e666:	b2d2      	uxtb	r2, r2
 800e668:	701a      	strb	r2, [r3, #0]
 800e66a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e66c:	09db      	lsrs	r3, r3, #7
 800e66e:	663b      	str	r3, [r7, #96]	; 0x60
 800e670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e672:	2b7f      	cmp	r3, #127	; 0x7f
 800e674:	d8f0      	bhi.n	800e658 <_VPrintHost+0x118>
 800e676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	667a      	str	r2, [r7, #100]	; 0x64
 800e67c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e67e:	b2d2      	uxtb	r2, r2
 800e680:	701a      	strb	r2, [r3, #0]
 800e682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e684:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800e686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e68a:	3304      	adds	r3, #4
 800e68c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e694:	1e5a      	subs	r2, r3, #1
 800e696:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1d5      	bne.n	800e64a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e69e:	221a      	movs	r2, #26
 800e6a0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e6a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e6a4:	f7ff fe78 	bl	800e398 <_SendPacket>
    RECORD_END();
 800e6a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6aa:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3788      	adds	r7, #136	; 0x88
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20005e28 	.word	0x20005e28

0800e6bc <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af02      	add	r7, sp, #8
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d2:	4a14      	ldr	r2, [pc, #80]	; (800e724 <SEGGER_SYSVIEW_Init+0x68>)
 800e6d4:	4914      	ldr	r1, [pc, #80]	; (800e728 <SEGGER_SYSVIEW_Init+0x6c>)
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	f7ff fc5c 	bl	800df94 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	2308      	movs	r3, #8
 800e6e2:	4a12      	ldr	r2, [pc, #72]	; (800e72c <SEGGER_SYSVIEW_Init+0x70>)
 800e6e4:	4910      	ldr	r1, [pc, #64]	; (800e728 <SEGGER_SYSVIEW_Init+0x6c>)
 800e6e6:	2001      	movs	r0, #1
 800e6e8:	f7ff fcbe 	bl	800e068 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800e6ec:	4b10      	ldr	r3, [pc, #64]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f2:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e6f4:	4b0f      	ldr	r3, [pc, #60]	; (800e734 <SEGGER_SYSVIEW_Init+0x78>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a0d      	ldr	r2, [pc, #52]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e6fa:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800e6fc:	4a0c      	ldr	r2, [pc, #48]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800e702:	4a0b      	ldr	r2, [pc, #44]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800e708:	4a09      	ldr	r2, [pc, #36]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800e70e:	4a08      	ldr	r2, [pc, #32]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800e714:	4b06      	ldr	r3, [pc, #24]	; (800e730 <SEGGER_SYSVIEW_Init+0x74>)
 800e716:	2200      	movs	r2, #0
 800e718:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	200059f0 	.word	0x200059f0
 800e728:	0800fdb8 	.word	0x0800fdb8
 800e72c:	20005df0 	.word	0x20005df0
 800e730:	20005df8 	.word	0x20005df8
 800e734:	e0001004 	.word	0xe0001004

0800e738 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800e740:	4a04      	ldr	r2, [pc, #16]	; (800e754 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6113      	str	r3, [r2, #16]
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	20005df8 	.word	0x20005df8

0800e758 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e760:	f3ef 8311 	mrs	r3, BASEPRI
 800e764:	f04f 0120 	mov.w	r1, #32
 800e768:	f381 8811 	msr	BASEPRI, r1
 800e76c:	60fb      	str	r3, [r7, #12]
 800e76e:	4808      	ldr	r0, [pc, #32]	; (800e790 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800e770:	f7ff fd31 	bl	800e1d6 <_PreparePacket>
 800e774:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	68b9      	ldr	r1, [r7, #8]
 800e77a:	68b8      	ldr	r0, [r7, #8]
 800e77c:	f7ff fe0c 	bl	800e398 <_SendPacket>
  RECORD_END();
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f383 8811 	msr	BASEPRI, r3
}
 800e786:	bf00      	nop
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20005e28 	.word	0x20005e28

0800e794 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e79e:	f3ef 8311 	mrs	r3, BASEPRI
 800e7a2:	f04f 0120 	mov.w	r1, #32
 800e7a6:	f381 8811 	msr	BASEPRI, r1
 800e7aa:	617b      	str	r3, [r7, #20]
 800e7ac:	4816      	ldr	r0, [pc, #88]	; (800e808 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800e7ae:	f7ff fd12 	bl	800e1d6 <_PreparePacket>
 800e7b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	61fb      	str	r3, [r7, #28]
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	61bb      	str	r3, [r7, #24]
 800e7c0:	e00b      	b.n	800e7da <SEGGER_SYSVIEW_RecordU32+0x46>
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	1c59      	adds	r1, r3, #1
 800e7ca:	61f9      	str	r1, [r7, #28]
 800e7cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e7d0:	b2d2      	uxtb	r2, r2
 800e7d2:	701a      	strb	r2, [r3, #0]
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	09db      	lsrs	r3, r3, #7
 800e7d8:	61bb      	str	r3, [r7, #24]
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	2b7f      	cmp	r3, #127	; 0x7f
 800e7de:	d8f0      	bhi.n	800e7c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	61fa      	str	r2, [r7, #28]
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	b2d2      	uxtb	r2, r2
 800e7ea:	701a      	strb	r2, [r3, #0]
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	68f9      	ldr	r1, [r7, #12]
 800e7f4:	6938      	ldr	r0, [r7, #16]
 800e7f6:	f7ff fdcf 	bl	800e398 <_SendPacket>
  RECORD_END();
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f383 8811 	msr	BASEPRI, r3
}
 800e800:	bf00      	nop
 800e802:	3720      	adds	r7, #32
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20005e28 	.word	0x20005e28

0800e80c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08c      	sub	sp, #48	; 0x30
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e818:	f3ef 8311 	mrs	r3, BASEPRI
 800e81c:	f04f 0120 	mov.w	r1, #32
 800e820:	f381 8811 	msr	BASEPRI, r1
 800e824:	61fb      	str	r3, [r7, #28]
 800e826:	4825      	ldr	r0, [pc, #148]	; (800e8bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800e828:	f7ff fcd5 	bl	800e1d6 <_PreparePacket>
 800e82c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	62bb      	str	r3, [r7, #40]	; 0x28
 800e83a:	e00b      	b.n	800e854 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	1c59      	adds	r1, r3, #1
 800e844:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e84a:	b2d2      	uxtb	r2, r2
 800e84c:	701a      	strb	r2, [r3, #0]
 800e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e850:	09db      	lsrs	r3, r3, #7
 800e852:	62bb      	str	r3, [r7, #40]	; 0x28
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	2b7f      	cmp	r3, #127	; 0x7f
 800e858:	d8f0      	bhi.n	800e83c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	1c5a      	adds	r2, r3, #1
 800e85e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e862:	b2d2      	uxtb	r2, r2
 800e864:	701a      	strb	r2, [r3, #0]
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	623b      	str	r3, [r7, #32]
 800e872:	e00b      	b.n	800e88c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	b2da      	uxtb	r2, r3
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	1c59      	adds	r1, r3, #1
 800e87c:	6279      	str	r1, [r7, #36]	; 0x24
 800e87e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e882:	b2d2      	uxtb	r2, r2
 800e884:	701a      	strb	r2, [r3, #0]
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	09db      	lsrs	r3, r3, #7
 800e88a:	623b      	str	r3, [r7, #32]
 800e88c:	6a3b      	ldr	r3, [r7, #32]
 800e88e:	2b7f      	cmp	r3, #127	; 0x7f
 800e890:	d8f0      	bhi.n	800e874 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	627a      	str	r2, [r7, #36]	; 0x24
 800e898:	6a3a      	ldr	r2, [r7, #32]
 800e89a:	b2d2      	uxtb	r2, r2
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	6979      	ldr	r1, [r7, #20]
 800e8a6:	69b8      	ldr	r0, [r7, #24]
 800e8a8:	f7ff fd76 	bl	800e398 <_SendPacket>
  RECORD_END();
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	f383 8811 	msr	BASEPRI, r3
}
 800e8b2:	bf00      	nop
 800e8b4:	3730      	adds	r7, #48	; 0x30
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20005e28 	.word	0x20005e28

0800e8c0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08e      	sub	sp, #56	; 0x38
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800e8ce:	f3ef 8311 	mrs	r3, BASEPRI
 800e8d2:	f04f 0120 	mov.w	r1, #32
 800e8d6:	f381 8811 	msr	BASEPRI, r1
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	4832      	ldr	r0, [pc, #200]	; (800e9a8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800e8de:	f7ff fc7a 	bl	800e1d6 <_PreparePacket>
 800e8e2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	633b      	str	r3, [r7, #48]	; 0x30
 800e8f0:	e00b      	b.n	800e90a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f8:	1c59      	adds	r1, r3, #1
 800e8fa:	6379      	str	r1, [r7, #52]	; 0x34
 800e8fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e900:	b2d2      	uxtb	r2, r2
 800e902:	701a      	strb	r2, [r3, #0]
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	09db      	lsrs	r3, r3, #7
 800e908:	633b      	str	r3, [r7, #48]	; 0x30
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	2b7f      	cmp	r3, #127	; 0x7f
 800e90e:	d8f0      	bhi.n	800e8f2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800e910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	637a      	str	r2, [r7, #52]	; 0x34
 800e916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e918:	b2d2      	uxtb	r2, r2
 800e91a:	701a      	strb	r2, [r3, #0]
 800e91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28
 800e928:	e00b      	b.n	800e942 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e930:	1c59      	adds	r1, r3, #1
 800e932:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e934:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e938:	b2d2      	uxtb	r2, r2
 800e93a:	701a      	strb	r2, [r3, #0]
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	09db      	lsrs	r3, r3, #7
 800e940:	62bb      	str	r3, [r7, #40]	; 0x28
 800e942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e944:	2b7f      	cmp	r3, #127	; 0x7f
 800e946:	d8f0      	bhi.n	800e92a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	1c5a      	adds	r2, r3, #1
 800e94c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	627b      	str	r3, [r7, #36]	; 0x24
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	623b      	str	r3, [r7, #32]
 800e960:	e00b      	b.n	800e97a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	b2da      	uxtb	r2, r3
 800e966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e968:	1c59      	adds	r1, r3, #1
 800e96a:	6279      	str	r1, [r7, #36]	; 0x24
 800e96c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e970:	b2d2      	uxtb	r2, r2
 800e972:	701a      	strb	r2, [r3, #0]
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	09db      	lsrs	r3, r3, #7
 800e978:	623b      	str	r3, [r7, #32]
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	2b7f      	cmp	r3, #127	; 0x7f
 800e97e:	d8f0      	bhi.n	800e962 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	627a      	str	r2, [r7, #36]	; 0x24
 800e986:	6a3a      	ldr	r2, [r7, #32]
 800e988:	b2d2      	uxtb	r2, r2
 800e98a:	701a      	strb	r2, [r3, #0]
 800e98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	6979      	ldr	r1, [r7, #20]
 800e994:	69b8      	ldr	r0, [r7, #24]
 800e996:	f7ff fcff 	bl	800e398 <_SendPacket>
  RECORD_END();
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	f383 8811 	msr	BASEPRI, r3
}
 800e9a0:	bf00      	nop
 800e9a2:	3738      	adds	r7, #56	; 0x38
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	20005e28 	.word	0x20005e28

0800e9ac <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b090      	sub	sp, #64	; 0x40
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800e9ba:	f3ef 8311 	mrs	r3, BASEPRI
 800e9be:	f04f 0120 	mov.w	r1, #32
 800e9c2:	f381 8811 	msr	BASEPRI, r1
 800e9c6:	61fb      	str	r3, [r7, #28]
 800e9c8:	4840      	ldr	r0, [pc, #256]	; (800eacc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800e9ca:	f7ff fc04 	bl	800e1d6 <_PreparePacket>
 800e9ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9dc:	e00b      	b.n	800e9f6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800e9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e4:	1c59      	adds	r1, r3, #1
 800e9e6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e9e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e9ec:	b2d2      	uxtb	r2, r2
 800e9ee:	701a      	strb	r2, [r3, #0]
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f2:	09db      	lsrs	r3, r3, #7
 800e9f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	2b7f      	cmp	r3, #127	; 0x7f
 800e9fa:	d8f0      	bhi.n	800e9de <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800e9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fe:	1c5a      	adds	r2, r3, #1
 800ea00:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea04:	b2d2      	uxtb	r2, r2
 800ea06:	701a      	strb	r2, [r3, #0]
 800ea08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	633b      	str	r3, [r7, #48]	; 0x30
 800ea14:	e00b      	b.n	800ea2e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ea16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	1c59      	adds	r1, r3, #1
 800ea1e:	6379      	str	r1, [r7, #52]	; 0x34
 800ea20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea24:	b2d2      	uxtb	r2, r2
 800ea26:	701a      	strb	r2, [r3, #0]
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	09db      	lsrs	r3, r3, #7
 800ea2c:	633b      	str	r3, [r7, #48]	; 0x30
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	2b7f      	cmp	r3, #127	; 0x7f
 800ea32:	d8f0      	bhi.n	800ea16 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ea34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	637a      	str	r2, [r7, #52]	; 0x34
 800ea3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea3c:	b2d2      	uxtb	r2, r2
 800ea3e:	701a      	strb	r2, [r3, #0]
 800ea40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea4c:	e00b      	b.n	800ea66 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea54:	1c59      	adds	r1, r3, #1
 800ea56:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ea58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	701a      	strb	r2, [r3, #0]
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	09db      	lsrs	r3, r3, #7
 800ea64:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea68:	2b7f      	cmp	r3, #127	; 0x7f
 800ea6a:	d8f0      	bhi.n	800ea4e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ea6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea74:	b2d2      	uxtb	r2, r2
 800ea76:	701a      	strb	r2, [r3, #0]
 800ea78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea82:	623b      	str	r3, [r7, #32]
 800ea84:	e00b      	b.n	800ea9e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	1c59      	adds	r1, r3, #1
 800ea8e:	6279      	str	r1, [r7, #36]	; 0x24
 800ea90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea94:	b2d2      	uxtb	r2, r2
 800ea96:	701a      	strb	r2, [r3, #0]
 800ea98:	6a3b      	ldr	r3, [r7, #32]
 800ea9a:	09db      	lsrs	r3, r3, #7
 800ea9c:	623b      	str	r3, [r7, #32]
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	2b7f      	cmp	r3, #127	; 0x7f
 800eaa2:	d8f0      	bhi.n	800ea86 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa6:	1c5a      	adds	r2, r3, #1
 800eaa8:	627a      	str	r2, [r7, #36]	; 0x24
 800eaaa:	6a3a      	ldr	r2, [r7, #32]
 800eaac:	b2d2      	uxtb	r2, r2
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	6979      	ldr	r1, [r7, #20]
 800eab8:	69b8      	ldr	r0, [r7, #24]
 800eaba:	f7ff fc6d 	bl	800e398 <_SendPacket>
  RECORD_END();
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	f383 8811 	msr	BASEPRI, r3
}
 800eac4:	bf00      	nop
 800eac6:	3740      	adds	r7, #64	; 0x40
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	20005e28 	.word	0x20005e28

0800ead0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08c      	sub	sp, #48	; 0x30
 800ead4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800ead6:	4b59      	ldr	r3, [pc, #356]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f040 80aa 	bne.w	800ec34 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800eae0:	4b56      	ldr	r3, [pc, #344]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800eae2:	2201      	movs	r2, #1
 800eae4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800eae6:	f3ef 8311 	mrs	r3, BASEPRI
 800eaea:	f04f 0120 	mov.w	r1, #32
 800eaee:	f381 8811 	msr	BASEPRI, r1
 800eaf2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800eaf4:	220a      	movs	r2, #10
 800eaf6:	4952      	ldr	r1, [pc, #328]	; (800ec40 <SEGGER_SYSVIEW_Start+0x170>)
 800eaf8:	2001      	movs	r0, #1
 800eafa:	f7f1 fba1 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800eb04:	200a      	movs	r0, #10
 800eb06:	f7ff fe27 	bl	800e758 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800eb0a:	f3ef 8311 	mrs	r3, BASEPRI
 800eb0e:	f04f 0120 	mov.w	r1, #32
 800eb12:	f381 8811 	msr	BASEPRI, r1
 800eb16:	60bb      	str	r3, [r7, #8]
 800eb18:	484a      	ldr	r0, [pc, #296]	; (800ec44 <SEGGER_SYSVIEW_Start+0x174>)
 800eb1a:	f7ff fb5c 	bl	800e1d6 <_PreparePacket>
 800eb1e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb28:	4b44      	ldr	r3, [pc, #272]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb2e:	e00b      	b.n	800eb48 <SEGGER_SYSVIEW_Start+0x78>
 800eb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	1c59      	adds	r1, r3, #1
 800eb38:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eb3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb3e:	b2d2      	uxtb	r2, r2
 800eb40:	701a      	strb	r2, [r3, #0]
 800eb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb44:	09db      	lsrs	r3, r3, #7
 800eb46:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4a:	2b7f      	cmp	r3, #127	; 0x7f
 800eb4c:	d8f0      	bhi.n	800eb30 <SEGGER_SYSVIEW_Start+0x60>
 800eb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb50:	1c5a      	adds	r2, r3, #1
 800eb52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb56:	b2d2      	uxtb	r2, r2
 800eb58:	701a      	strb	r2, [r3, #0]
 800eb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	627b      	str	r3, [r7, #36]	; 0x24
 800eb62:	4b36      	ldr	r3, [pc, #216]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	623b      	str	r3, [r7, #32]
 800eb68:	e00b      	b.n	800eb82 <SEGGER_SYSVIEW_Start+0xb2>
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	b2da      	uxtb	r2, r3
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb70:	1c59      	adds	r1, r3, #1
 800eb72:	6279      	str	r1, [r7, #36]	; 0x24
 800eb74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb78:	b2d2      	uxtb	r2, r2
 800eb7a:	701a      	strb	r2, [r3, #0]
 800eb7c:	6a3b      	ldr	r3, [r7, #32]
 800eb7e:	09db      	lsrs	r3, r3, #7
 800eb80:	623b      	str	r3, [r7, #32]
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	2b7f      	cmp	r3, #127	; 0x7f
 800eb86:	d8f0      	bhi.n	800eb6a <SEGGER_SYSVIEW_Start+0x9a>
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	627a      	str	r2, [r7, #36]	; 0x24
 800eb8e:	6a3a      	ldr	r2, [r7, #32]
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	61fb      	str	r3, [r7, #28]
 800eb9c:	4b27      	ldr	r3, [pc, #156]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	61bb      	str	r3, [r7, #24]
 800eba2:	e00b      	b.n	800ebbc <SEGGER_SYSVIEW_Start+0xec>
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	1c59      	adds	r1, r3, #1
 800ebac:	61f9      	str	r1, [r7, #28]
 800ebae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	09db      	lsrs	r3, r3, #7
 800ebba:	61bb      	str	r3, [r7, #24]
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	2b7f      	cmp	r3, #127	; 0x7f
 800ebc0:	d8f0      	bhi.n	800eba4 <SEGGER_SYSVIEW_Start+0xd4>
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	1c5a      	adds	r2, r3, #1
 800ebc6:	61fa      	str	r2, [r7, #28]
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	b2d2      	uxtb	r2, r2
 800ebcc:	701a      	strb	r2, [r3, #0]
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	617b      	str	r3, [r7, #20]
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	613b      	str	r3, [r7, #16]
 800ebda:	e00b      	b.n	800ebf4 <SEGGER_SYSVIEW_Start+0x124>
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	1c59      	adds	r1, r3, #1
 800ebe4:	6179      	str	r1, [r7, #20]
 800ebe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebea:	b2d2      	uxtb	r2, r2
 800ebec:	701a      	strb	r2, [r3, #0]
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	09db      	lsrs	r3, r3, #7
 800ebf2:	613b      	str	r3, [r7, #16]
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b7f      	cmp	r3, #127	; 0x7f
 800ebf8:	d8f0      	bhi.n	800ebdc <SEGGER_SYSVIEW_Start+0x10c>
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	617a      	str	r2, [r7, #20]
 800ec00:	693a      	ldr	r2, [r7, #16]
 800ec02:	b2d2      	uxtb	r2, r2
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ec0a:	2218      	movs	r2, #24
 800ec0c:	6839      	ldr	r1, [r7, #0]
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7ff fbc2 	bl	800e398 <_SendPacket>
      RECORD_END();
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ec1a:	4b08      	ldr	r3, [pc, #32]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800ec1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800ec22:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <SEGGER_SYSVIEW_Start+0x16c>)
 800ec24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec26:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800ec28:	f000 f9ec 	bl	800f004 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800ec2c:	f000 f9b2 	bl	800ef94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800ec30:	f000 fbb2 	bl	800f398 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800ec34:	bf00      	nop
 800ec36:	3730      	adds	r7, #48	; 0x30
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20005df8 	.word	0x20005df8
 800ec40:	0800fea0 	.word	0x0800fea0
 800ec44:	20005e28 	.word	0x20005e28

0800ec48 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ec4e:	f3ef 8311 	mrs	r3, BASEPRI
 800ec52:	f04f 0120 	mov.w	r1, #32
 800ec56:	f381 8811 	msr	BASEPRI, r1
 800ec5a:	607b      	str	r3, [r7, #4]
 800ec5c:	480b      	ldr	r0, [pc, #44]	; (800ec8c <SEGGER_SYSVIEW_Stop+0x44>)
 800ec5e:	f7ff faba 	bl	800e1d6 <_PreparePacket>
 800ec62:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ec64:	4b0a      	ldr	r3, [pc, #40]	; (800ec90 <SEGGER_SYSVIEW_Stop+0x48>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d007      	beq.n	800ec7c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800ec6c:	220b      	movs	r2, #11
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6838      	ldr	r0, [r7, #0]
 800ec72:	f7ff fb91 	bl	800e398 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ec76:	4b06      	ldr	r3, [pc, #24]	; (800ec90 <SEGGER_SYSVIEW_Stop+0x48>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f383 8811 	msr	BASEPRI, r3
}
 800ec82:	bf00      	nop
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20005e28 	.word	0x20005e28
 800ec90:	20005df8 	.word	0x20005df8

0800ec94 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b08c      	sub	sp, #48	; 0x30
 800ec98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ec9a:	f3ef 8311 	mrs	r3, BASEPRI
 800ec9e:	f04f 0120 	mov.w	r1, #32
 800eca2:	f381 8811 	msr	BASEPRI, r1
 800eca6:	60fb      	str	r3, [r7, #12]
 800eca8:	4845      	ldr	r0, [pc, #276]	; (800edc0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ecaa:	f7ff fa94 	bl	800e1d6 <_PreparePacket>
 800ecae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecb8:	4b42      	ldr	r3, [pc, #264]	; (800edc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecbe:	e00b      	b.n	800ecd8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc6:	1c59      	adds	r1, r3, #1
 800ecc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ecca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ecce:	b2d2      	uxtb	r2, r2
 800ecd0:	701a      	strb	r2, [r3, #0]
 800ecd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd4:	09db      	lsrs	r3, r3, #7
 800ecd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	2b7f      	cmp	r3, #127	; 0x7f
 800ecdc:	d8f0      	bhi.n	800ecc0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ecde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ece4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	701a      	strb	r2, [r3, #0]
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	627b      	str	r3, [r7, #36]	; 0x24
 800ecf2:	4b34      	ldr	r3, [pc, #208]	; (800edc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	623b      	str	r3, [r7, #32]
 800ecf8:	e00b      	b.n	800ed12 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed00:	1c59      	adds	r1, r3, #1
 800ed02:	6279      	str	r1, [r7, #36]	; 0x24
 800ed04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	701a      	strb	r2, [r3, #0]
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	09db      	lsrs	r3, r3, #7
 800ed10:	623b      	str	r3, [r7, #32]
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	2b7f      	cmp	r3, #127	; 0x7f
 800ed16:	d8f0      	bhi.n	800ecfa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	627a      	str	r2, [r7, #36]	; 0x24
 800ed1e:	6a3a      	ldr	r2, [r7, #32]
 800ed20:	b2d2      	uxtb	r2, r2
 800ed22:	701a      	strb	r2, [r3, #0]
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	61fb      	str	r3, [r7, #28]
 800ed2c:	4b25      	ldr	r3, [pc, #148]	; (800edc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	61bb      	str	r3, [r7, #24]
 800ed32:	e00b      	b.n	800ed4c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	1c59      	adds	r1, r3, #1
 800ed3c:	61f9      	str	r1, [r7, #28]
 800ed3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed42:	b2d2      	uxtb	r2, r2
 800ed44:	701a      	strb	r2, [r3, #0]
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	09db      	lsrs	r3, r3, #7
 800ed4a:	61bb      	str	r3, [r7, #24]
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ed50:	d8f0      	bhi.n	800ed34 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	61fa      	str	r2, [r7, #28]
 800ed58:	69ba      	ldr	r2, [r7, #24]
 800ed5a:	b2d2      	uxtb	r2, r2
 800ed5c:	701a      	strb	r2, [r3, #0]
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	2302      	movs	r3, #2
 800ed68:	613b      	str	r3, [r7, #16]
 800ed6a:	e00b      	b.n	800ed84 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	1c59      	adds	r1, r3, #1
 800ed74:	6179      	str	r1, [r7, #20]
 800ed76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed7a:	b2d2      	uxtb	r2, r2
 800ed7c:	701a      	strb	r2, [r3, #0]
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	09db      	lsrs	r3, r3, #7
 800ed82:	613b      	str	r3, [r7, #16]
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	2b7f      	cmp	r3, #127	; 0x7f
 800ed88:	d8f0      	bhi.n	800ed6c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	1c5a      	adds	r2, r3, #1
 800ed8e:	617a      	str	r2, [r7, #20]
 800ed90:	693a      	ldr	r2, [r7, #16]
 800ed92:	b2d2      	uxtb	r2, r2
 800ed94:	701a      	strb	r2, [r3, #0]
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ed9a:	2218      	movs	r2, #24
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	68b8      	ldr	r0, [r7, #8]
 800eda0:	f7ff fafa 	bl	800e398 <_SendPacket>
  RECORD_END();
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800edaa:	4b06      	ldr	r3, [pc, #24]	; (800edc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800edac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d002      	beq.n	800edb8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800edb2:	4b04      	ldr	r3, [pc, #16]	; (800edc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800edb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb6:	4798      	blx	r3
  }
}
 800edb8:	bf00      	nop
 800edba:	3730      	adds	r7, #48	; 0x30
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	20005e28 	.word	0x20005e28
 800edc4:	20005df8 	.word	0x20005df8

0800edc8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800edc8:	b580      	push	{r7, lr}
 800edca:	b092      	sub	sp, #72	; 0x48
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800edd0:	f3ef 8311 	mrs	r3, BASEPRI
 800edd4:	f04f 0120 	mov.w	r1, #32
 800edd8:	f381 8811 	msr	BASEPRI, r1
 800eddc:	617b      	str	r3, [r7, #20]
 800edde:	486b      	ldr	r0, [pc, #428]	; (800ef8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ede0:	f7ff f9f9 	bl	800e1d6 <_PreparePacket>
 800ede4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	647b      	str	r3, [r7, #68]	; 0x44
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	4b67      	ldr	r3, [pc, #412]	; (800ef90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	089b      	lsrs	r3, r3, #2
 800edfa:	643b      	str	r3, [r7, #64]	; 0x40
 800edfc:	e00b      	b.n	800ee16 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800edfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee04:	1c59      	adds	r1, r3, #1
 800ee06:	6479      	str	r1, [r7, #68]	; 0x44
 800ee08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee0c:	b2d2      	uxtb	r2, r2
 800ee0e:	701a      	strb	r2, [r3, #0]
 800ee10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee12:	09db      	lsrs	r3, r3, #7
 800ee14:	643b      	str	r3, [r7, #64]	; 0x40
 800ee16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee18:	2b7f      	cmp	r3, #127	; 0x7f
 800ee1a:	d8f0      	bhi.n	800edfe <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800ee1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee1e:	1c5a      	adds	r2, r3, #1
 800ee20:	647a      	str	r2, [r7, #68]	; 0x44
 800ee22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee24:	b2d2      	uxtb	r2, r2
 800ee26:	701a      	strb	r2, [r3, #0]
 800ee28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee36:	e00b      	b.n	800ee50 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800ee38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee3e:	1c59      	adds	r1, r3, #1
 800ee40:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ee42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee46:	b2d2      	uxtb	r2, r2
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4c:	09db      	lsrs	r3, r3, #7
 800ee4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	2b7f      	cmp	r3, #127	; 0x7f
 800ee54:	d8f0      	bhi.n	800ee38 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800ee56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ee5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee5e:	b2d2      	uxtb	r2, r2
 800ee60:	701a      	strb	r2, [r3, #0]
 800ee62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee64:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	2220      	movs	r2, #32
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff f964 	bl	800e13c <_EncodeStr>
 800ee74:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800ee76:	2209      	movs	r2, #9
 800ee78:	68f9      	ldr	r1, [r7, #12]
 800ee7a:	6938      	ldr	r0, [r7, #16]
 800ee7c:	f7ff fa8c 	bl	800e398 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	637b      	str	r3, [r7, #52]	; 0x34
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	4b40      	ldr	r3, [pc, #256]	; (800ef90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	089b      	lsrs	r3, r3, #2
 800ee94:	633b      	str	r3, [r7, #48]	; 0x30
 800ee96:	e00b      	b.n	800eeb0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800ee98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee9e:	1c59      	adds	r1, r3, #1
 800eea0:	6379      	str	r1, [r7, #52]	; 0x34
 800eea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eea6:	b2d2      	uxtb	r2, r2
 800eea8:	701a      	strb	r2, [r3, #0]
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	09db      	lsrs	r3, r3, #7
 800eeae:	633b      	str	r3, [r7, #48]	; 0x30
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb2:	2b7f      	cmp	r3, #127	; 0x7f
 800eeb4:	d8f0      	bhi.n	800ee98 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800eeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	637a      	str	r2, [r7, #52]	; 0x34
 800eebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eebe:	b2d2      	uxtb	r2, r2
 800eec0:	701a      	strb	r2, [r3, #0]
 800eec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	62bb      	str	r3, [r7, #40]	; 0x28
 800eed0:	e00b      	b.n	800eeea <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed8:	1c59      	adds	r1, r3, #1
 800eeda:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eedc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eee0:	b2d2      	uxtb	r2, r2
 800eee2:	701a      	strb	r2, [r3, #0]
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	09db      	lsrs	r3, r3, #7
 800eee8:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	2b7f      	cmp	r3, #127	; 0x7f
 800eeee:	d8f0      	bhi.n	800eed2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eef8:	b2d2      	uxtb	r2, r2
 800eefa:	701a      	strb	r2, [r3, #0]
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	627b      	str	r3, [r7, #36]	; 0x24
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	623b      	str	r3, [r7, #32]
 800ef0a:	e00b      	b.n	800ef24 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800ef0c:	6a3b      	ldr	r3, [r7, #32]
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	1c59      	adds	r1, r3, #1
 800ef14:	6279      	str	r1, [r7, #36]	; 0x24
 800ef16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef1a:	b2d2      	uxtb	r2, r2
 800ef1c:	701a      	strb	r2, [r3, #0]
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	09db      	lsrs	r3, r3, #7
 800ef22:	623b      	str	r3, [r7, #32]
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	2b7f      	cmp	r3, #127	; 0x7f
 800ef28:	d8f0      	bhi.n	800ef0c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	1c5a      	adds	r2, r3, #1
 800ef2e:	627a      	str	r2, [r7, #36]	; 0x24
 800ef30:	6a3a      	ldr	r2, [r7, #32]
 800ef32:	b2d2      	uxtb	r2, r2
 800ef34:	701a      	strb	r2, [r3, #0]
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	61fb      	str	r3, [r7, #28]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	61bb      	str	r3, [r7, #24]
 800ef42:	e00b      	b.n	800ef5c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	1c59      	adds	r1, r3, #1
 800ef4c:	61f9      	str	r1, [r7, #28]
 800ef4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef52:	b2d2      	uxtb	r2, r2
 800ef54:	701a      	strb	r2, [r3, #0]
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	09db      	lsrs	r3, r3, #7
 800ef5a:	61bb      	str	r3, [r7, #24]
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ef60:	d8f0      	bhi.n	800ef44 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	61fa      	str	r2, [r7, #28]
 800ef68:	69ba      	ldr	r2, [r7, #24]
 800ef6a:	b2d2      	uxtb	r2, r2
 800ef6c:	701a      	strb	r2, [r3, #0]
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ef72:	2215      	movs	r2, #21
 800ef74:	68f9      	ldr	r1, [r7, #12]
 800ef76:	6938      	ldr	r0, [r7, #16]
 800ef78:	f7ff fa0e 	bl	800e398 <_SendPacket>
  RECORD_END();
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f383 8811 	msr	BASEPRI, r3
}
 800ef82:	bf00      	nop
 800ef84:	3748      	adds	r7, #72	; 0x48
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20005e28 	.word	0x20005e28
 800ef90:	20005df8 	.word	0x20005df8

0800ef94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800ef98:	4b07      	ldr	r3, [pc, #28]	; (800efb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ef9a:	6a1b      	ldr	r3, [r3, #32]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d008      	beq.n	800efb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800efa2:	6a1b      	ldr	r3, [r3, #32]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d003      	beq.n	800efb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800efaa:	4b03      	ldr	r3, [pc, #12]	; (800efb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800efac:	6a1b      	ldr	r3, [r3, #32]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4798      	blx	r3
  }
}
 800efb2:	bf00      	nop
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	20005df8 	.word	0x20005df8

0800efbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b086      	sub	sp, #24
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800efc4:	f3ef 8311 	mrs	r3, BASEPRI
 800efc8:	f04f 0120 	mov.w	r1, #32
 800efcc:	f381 8811 	msr	BASEPRI, r1
 800efd0:	617b      	str	r3, [r7, #20]
 800efd2:	480b      	ldr	r0, [pc, #44]	; (800f000 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800efd4:	f7ff f8ff 	bl	800e1d6 <_PreparePacket>
 800efd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800efda:	2280      	movs	r2, #128	; 0x80
 800efdc:	6879      	ldr	r1, [r7, #4]
 800efde:	6938      	ldr	r0, [r7, #16]
 800efe0:	f7ff f8ac 	bl	800e13c <_EncodeStr>
 800efe4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800efe6:	220e      	movs	r2, #14
 800efe8:	68f9      	ldr	r1, [r7, #12]
 800efea:	6938      	ldr	r0, [r7, #16]
 800efec:	f7ff f9d4 	bl	800e398 <_SendPacket>
  RECORD_END();
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f383 8811 	msr	BASEPRI, r3
}
 800eff6:	bf00      	nop
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20005e28 	.word	0x20005e28

0800f004 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800f004:	b590      	push	{r4, r7, lr}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800f00a:	4b15      	ldr	r3, [pc, #84]	; (800f060 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d01a      	beq.n	800f048 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800f012:	4b13      	ldr	r3, [pc, #76]	; (800f060 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f014:	6a1b      	ldr	r3, [r3, #32]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d015      	beq.n	800f048 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800f01c:	4b10      	ldr	r3, [pc, #64]	; (800f060 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4798      	blx	r3
 800f024:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f028:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800f02a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f02e:	f04f 0200 	mov.w	r2, #0
 800f032:	f04f 0300 	mov.w	r3, #0
 800f036:	000a      	movs	r2, r1
 800f038:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f03a:	4613      	mov	r3, r2
 800f03c:	461a      	mov	r2, r3
 800f03e:	4621      	mov	r1, r4
 800f040:	200d      	movs	r0, #13
 800f042:	f7ff fbe3 	bl	800e80c <SEGGER_SYSVIEW_RecordU32x2>
 800f046:	e006      	b.n	800f056 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800f048:	4b06      	ldr	r3, [pc, #24]	; (800f064 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4619      	mov	r1, r3
 800f04e:	200c      	movs	r0, #12
 800f050:	f7ff fba0 	bl	800e794 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd90      	pop	{r4, r7, pc}
 800f05e:	bf00      	nop
 800f060:	20005df8 	.word	0x20005df8
 800f064:	e0001004 	.word	0xe0001004

0800f068 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f06e:	f3ef 8311 	mrs	r3, BASEPRI
 800f072:	f04f 0120 	mov.w	r1, #32
 800f076:	f381 8811 	msr	BASEPRI, r1
 800f07a:	607b      	str	r3, [r7, #4]
 800f07c:	4807      	ldr	r0, [pc, #28]	; (800f09c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800f07e:	f7ff f8aa 	bl	800e1d6 <_PreparePacket>
 800f082:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800f084:	2211      	movs	r2, #17
 800f086:	6839      	ldr	r1, [r7, #0]
 800f088:	6838      	ldr	r0, [r7, #0]
 800f08a:	f7ff f985 	bl	800e398 <_SendPacket>
  RECORD_END();
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f383 8811 	msr	BASEPRI, r3
}
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	20005e28 	.word	0x20005e28

0800f0a0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b088      	sub	sp, #32
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f0a8:	f3ef 8311 	mrs	r3, BASEPRI
 800f0ac:	f04f 0120 	mov.w	r1, #32
 800f0b0:	f381 8811 	msr	BASEPRI, r1
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	481a      	ldr	r0, [pc, #104]	; (800f120 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800f0b8:	f7ff f88d 	bl	800e1d6 <_PreparePacket>
 800f0bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f0c2:	4b18      	ldr	r3, [pc, #96]	; (800f124 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	089b      	lsrs	r3, r3, #2
 800f0cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	61fb      	str	r3, [r7, #28]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	61bb      	str	r3, [r7, #24]
 800f0d6:	e00b      	b.n	800f0f0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	b2da      	uxtb	r2, r3
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	1c59      	adds	r1, r3, #1
 800f0e0:	61f9      	str	r1, [r7, #28]
 800f0e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0e6:	b2d2      	uxtb	r2, r2
 800f0e8:	701a      	strb	r2, [r3, #0]
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	09db      	lsrs	r3, r3, #7
 800f0ee:	61bb      	str	r3, [r7, #24]
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2b7f      	cmp	r3, #127	; 0x7f
 800f0f4:	d8f0      	bhi.n	800f0d8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	1c5a      	adds	r2, r3, #1
 800f0fa:	61fa      	str	r2, [r7, #28]
 800f0fc:	69ba      	ldr	r2, [r7, #24]
 800f0fe:	b2d2      	uxtb	r2, r2
 800f100:	701a      	strb	r2, [r3, #0]
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800f106:	2208      	movs	r2, #8
 800f108:	68f9      	ldr	r1, [r7, #12]
 800f10a:	6938      	ldr	r0, [r7, #16]
 800f10c:	f7ff f944 	bl	800e398 <_SendPacket>
  RECORD_END();
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	f383 8811 	msr	BASEPRI, r3
}
 800f116:	bf00      	nop
 800f118:	3720      	adds	r7, #32
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20005e28 	.word	0x20005e28
 800f124:	20005df8 	.word	0x20005df8

0800f128 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800f128:	b580      	push	{r7, lr}
 800f12a:	b088      	sub	sp, #32
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f130:	f3ef 8311 	mrs	r3, BASEPRI
 800f134:	f04f 0120 	mov.w	r1, #32
 800f138:	f381 8811 	msr	BASEPRI, r1
 800f13c:	617b      	str	r3, [r7, #20]
 800f13e:	481a      	ldr	r0, [pc, #104]	; (800f1a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800f140:	f7ff f849 	bl	800e1d6 <_PreparePacket>
 800f144:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f14a:	4b18      	ldr	r3, [pc, #96]	; (800f1ac <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	089b      	lsrs	r3, r3, #2
 800f154:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	61fb      	str	r3, [r7, #28]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	61bb      	str	r3, [r7, #24]
 800f15e:	e00b      	b.n	800f178 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	b2da      	uxtb	r2, r3
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	1c59      	adds	r1, r3, #1
 800f168:	61f9      	str	r1, [r7, #28]
 800f16a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f16e:	b2d2      	uxtb	r2, r2
 800f170:	701a      	strb	r2, [r3, #0]
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	09db      	lsrs	r3, r3, #7
 800f176:	61bb      	str	r3, [r7, #24]
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	2b7f      	cmp	r3, #127	; 0x7f
 800f17c:	d8f0      	bhi.n	800f160 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	1c5a      	adds	r2, r3, #1
 800f182:	61fa      	str	r2, [r7, #28]
 800f184:	69ba      	ldr	r2, [r7, #24]
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	701a      	strb	r2, [r3, #0]
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800f18e:	2204      	movs	r2, #4
 800f190:	68f9      	ldr	r1, [r7, #12]
 800f192:	6938      	ldr	r0, [r7, #16]
 800f194:	f7ff f900 	bl	800e398 <_SendPacket>
  RECORD_END();
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f383 8811 	msr	BASEPRI, r3
}
 800f19e:	bf00      	nop
 800f1a0:	3720      	adds	r7, #32
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20005e28 	.word	0x20005e28
 800f1ac:	20005df8 	.word	0x20005df8

0800f1b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f1b8:	f3ef 8311 	mrs	r3, BASEPRI
 800f1bc:	f04f 0120 	mov.w	r1, #32
 800f1c0:	f381 8811 	msr	BASEPRI, r1
 800f1c4:	617b      	str	r3, [r7, #20]
 800f1c6:	481a      	ldr	r0, [pc, #104]	; (800f230 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800f1c8:	f7ff f805 	bl	800e1d6 <_PreparePacket>
 800f1cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f1d2:	4b18      	ldr	r3, [pc, #96]	; (800f234 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	089b      	lsrs	r3, r3, #2
 800f1dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	61fb      	str	r3, [r7, #28]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	61bb      	str	r3, [r7, #24]
 800f1e6:	e00b      	b.n	800f200 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	b2da      	uxtb	r2, r3
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	1c59      	adds	r1, r3, #1
 800f1f0:	61f9      	str	r1, [r7, #28]
 800f1f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1f6:	b2d2      	uxtb	r2, r2
 800f1f8:	701a      	strb	r2, [r3, #0]
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	09db      	lsrs	r3, r3, #7
 800f1fe:	61bb      	str	r3, [r7, #24]
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	2b7f      	cmp	r3, #127	; 0x7f
 800f204:	d8f0      	bhi.n	800f1e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	61fa      	str	r2, [r7, #28]
 800f20c:	69ba      	ldr	r2, [r7, #24]
 800f20e:	b2d2      	uxtb	r2, r2
 800f210:	701a      	strb	r2, [r3, #0]
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800f216:	2206      	movs	r2, #6
 800f218:	68f9      	ldr	r1, [r7, #12]
 800f21a:	6938      	ldr	r0, [r7, #16]
 800f21c:	f7ff f8bc 	bl	800e398 <_SendPacket>
  RECORD_END();
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f383 8811 	msr	BASEPRI, r3
}
 800f226:	bf00      	nop
 800f228:	3720      	adds	r7, #32
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	20005e28 	.word	0x20005e28
 800f234:	20005df8 	.word	0x20005df8

0800f238 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800f240:	4b05      	ldr	r3, [pc, #20]	; (800f258 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	089b      	lsrs	r3, r3, #2
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	20005df8 	.word	0x20005df8

0800f25c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08c      	sub	sp, #48	; 0x30
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800f266:	4b3b      	ldr	r3, [pc, #236]	; (800f354 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d06d      	beq.n	800f34a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800f26e:	4b39      	ldr	r3, [pc, #228]	; (800f354 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800f274:	2300      	movs	r3, #0
 800f276:	62bb      	str	r3, [r7, #40]	; 0x28
 800f278:	e008      	b.n	800f28c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	2b00      	cmp	r3, #0
 800f284:	d007      	beq.n	800f296 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	3301      	adds	r3, #1
 800f28a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f28c:	79fb      	ldrb	r3, [r7, #7]
 800f28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f290:	429a      	cmp	r2, r3
 800f292:	d3f2      	bcc.n	800f27a <SEGGER_SYSVIEW_SendModule+0x1e>
 800f294:	e000      	b.n	800f298 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800f296:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d055      	beq.n	800f34a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f29e:	f3ef 8311 	mrs	r3, BASEPRI
 800f2a2:	f04f 0120 	mov.w	r1, #32
 800f2a6:	f381 8811 	msr	BASEPRI, r1
 800f2aa:	617b      	str	r3, [r7, #20]
 800f2ac:	482a      	ldr	r0, [pc, #168]	; (800f358 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800f2ae:	f7fe ff92 	bl	800e1d6 <_PreparePacket>
 800f2b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	623b      	str	r3, [r7, #32]
 800f2c0:	e00b      	b.n	800f2da <SEGGER_SYSVIEW_SendModule+0x7e>
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	1c59      	adds	r1, r3, #1
 800f2ca:	6279      	str	r1, [r7, #36]	; 0x24
 800f2cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f2d0:	b2d2      	uxtb	r2, r2
 800f2d2:	701a      	strb	r2, [r3, #0]
 800f2d4:	6a3b      	ldr	r3, [r7, #32]
 800f2d6:	09db      	lsrs	r3, r3, #7
 800f2d8:	623b      	str	r3, [r7, #32]
 800f2da:	6a3b      	ldr	r3, [r7, #32]
 800f2dc:	2b7f      	cmp	r3, #127	; 0x7f
 800f2de:	d8f0      	bhi.n	800f2c2 <SEGGER_SYSVIEW_SendModule+0x66>
 800f2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	627a      	str	r2, [r7, #36]	; 0x24
 800f2e6:	6a3a      	ldr	r2, [r7, #32]
 800f2e8:	b2d2      	uxtb	r2, r2
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	61fb      	str	r3, [r7, #28]
 800f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	61bb      	str	r3, [r7, #24]
 800f2fa:	e00b      	b.n	800f314 <SEGGER_SYSVIEW_SendModule+0xb8>
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	1c59      	adds	r1, r3, #1
 800f304:	61f9      	str	r1, [r7, #28]
 800f306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f30a:	b2d2      	uxtb	r2, r2
 800f30c:	701a      	strb	r2, [r3, #0]
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	09db      	lsrs	r3, r3, #7
 800f312:	61bb      	str	r3, [r7, #24]
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	2b7f      	cmp	r3, #127	; 0x7f
 800f318:	d8f0      	bhi.n	800f2fc <SEGGER_SYSVIEW_SendModule+0xa0>
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	61fa      	str	r2, [r7, #28]
 800f320:	69ba      	ldr	r2, [r7, #24]
 800f322:	b2d2      	uxtb	r2, r2
 800f324:	701a      	strb	r2, [r3, #0]
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2280      	movs	r2, #128	; 0x80
 800f330:	4619      	mov	r1, r3
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7fe ff02 	bl	800e13c <_EncodeStr>
 800f338:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800f33a:	2216      	movs	r2, #22
 800f33c:	68f9      	ldr	r1, [r7, #12]
 800f33e:	6938      	ldr	r0, [r7, #16]
 800f340:	f7ff f82a 	bl	800e398 <_SendPacket>
      RECORD_END();
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800f34a:	bf00      	nop
 800f34c:	3730      	adds	r7, #48	; 0x30
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	20005e20 	.word	0x20005e20
 800f358:	20005e28 	.word	0x20005e28

0800f35c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800f362:	4b0c      	ldr	r3, [pc, #48]	; (800f394 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00f      	beq.n	800f38a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800f36a:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1f2      	bne.n	800f370 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800f38a:	bf00      	nop
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20005e20 	.word	0x20005e20

0800f398 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f39e:	f3ef 8311 	mrs	r3, BASEPRI
 800f3a2:	f04f 0120 	mov.w	r1, #32
 800f3a6:	f381 8811 	msr	BASEPRI, r1
 800f3aa:	60fb      	str	r3, [r7, #12]
 800f3ac:	4817      	ldr	r0, [pc, #92]	; (800f40c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800f3ae:	f7fe ff12 	bl	800e1d6 <_PreparePacket>
 800f3b2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	617b      	str	r3, [r7, #20]
 800f3bc:	4b14      	ldr	r3, [pc, #80]	; (800f410 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	613b      	str	r3, [r7, #16]
 800f3c2:	e00b      	b.n	800f3dc <SEGGER_SYSVIEW_SendNumModules+0x44>
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	1c59      	adds	r1, r3, #1
 800f3cc:	6179      	str	r1, [r7, #20]
 800f3ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f3d2:	b2d2      	uxtb	r2, r2
 800f3d4:	701a      	strb	r2, [r3, #0]
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	09db      	lsrs	r3, r3, #7
 800f3da:	613b      	str	r3, [r7, #16]
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	2b7f      	cmp	r3, #127	; 0x7f
 800f3e0:	d8f0      	bhi.n	800f3c4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	1c5a      	adds	r2, r3, #1
 800f3e6:	617a      	str	r2, [r7, #20]
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	b2d2      	uxtb	r2, r2
 800f3ec:	701a      	strb	r2, [r3, #0]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f3f2:	221b      	movs	r2, #27
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	68b8      	ldr	r0, [r7, #8]
 800f3f8:	f7fe ffce 	bl	800e398 <_SendPacket>
  RECORD_END();
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f383 8811 	msr	BASEPRI, r3
}
 800f402:	bf00      	nop
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20005e28 	.word	0x20005e28
 800f410:	20005e24 	.word	0x20005e24

0800f414 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800f414:	b40f      	push	{r0, r1, r2, r3}
 800f416:	b580      	push	{r7, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800f41c:	f107 0314 	add.w	r3, r7, #20
 800f420:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800f422:	1d3b      	adds	r3, r7, #4
 800f424:	461a      	mov	r2, r3
 800f426:	2100      	movs	r1, #0
 800f428:	6938      	ldr	r0, [r7, #16]
 800f42a:	f7ff f889 	bl	800e540 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800f42e:	bf00      	nop
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f438:	b004      	add	sp, #16
 800f43a:	4770      	bx	lr

0800f43c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f444:	f3ef 8311 	mrs	r3, BASEPRI
 800f448:	f04f 0120 	mov.w	r1, #32
 800f44c:	f381 8811 	msr	BASEPRI, r1
 800f450:	617b      	str	r3, [r7, #20]
 800f452:	4827      	ldr	r0, [pc, #156]	; (800f4f0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800f454:	f7fe febf 	bl	800e1d6 <_PreparePacket>
 800f458:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f45a:	2280      	movs	r2, #128	; 0x80
 800f45c:	6879      	ldr	r1, [r7, #4]
 800f45e:	6938      	ldr	r0, [r7, #16]
 800f460:	f7fe fe6c 	bl	800e13c <_EncodeStr>
 800f464:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	627b      	str	r3, [r7, #36]	; 0x24
 800f46a:	2301      	movs	r3, #1
 800f46c:	623b      	str	r3, [r7, #32]
 800f46e:	e00b      	b.n	800f488 <SEGGER_SYSVIEW_Warn+0x4c>
 800f470:	6a3b      	ldr	r3, [r7, #32]
 800f472:	b2da      	uxtb	r2, r3
 800f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f476:	1c59      	adds	r1, r3, #1
 800f478:	6279      	str	r1, [r7, #36]	; 0x24
 800f47a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f47e:	b2d2      	uxtb	r2, r2
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	09db      	lsrs	r3, r3, #7
 800f486:	623b      	str	r3, [r7, #32]
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	2b7f      	cmp	r3, #127	; 0x7f
 800f48c:	d8f0      	bhi.n	800f470 <SEGGER_SYSVIEW_Warn+0x34>
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	627a      	str	r2, [r7, #36]	; 0x24
 800f494:	6a3a      	ldr	r2, [r7, #32]
 800f496:	b2d2      	uxtb	r2, r2
 800f498:	701a      	strb	r2, [r3, #0]
 800f49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	61fb      	str	r3, [r7, #28]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	61bb      	str	r3, [r7, #24]
 800f4a6:	e00b      	b.n	800f4c0 <SEGGER_SYSVIEW_Warn+0x84>
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	b2da      	uxtb	r2, r3
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	1c59      	adds	r1, r3, #1
 800f4b0:	61f9      	str	r1, [r7, #28]
 800f4b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	09db      	lsrs	r3, r3, #7
 800f4be:	61bb      	str	r3, [r7, #24]
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	2b7f      	cmp	r3, #127	; 0x7f
 800f4c4:	d8f0      	bhi.n	800f4a8 <SEGGER_SYSVIEW_Warn+0x6c>
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	1c5a      	adds	r2, r3, #1
 800f4ca:	61fa      	str	r2, [r7, #28]
 800f4cc:	69ba      	ldr	r2, [r7, #24]
 800f4ce:	b2d2      	uxtb	r2, r2
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800f4d6:	221a      	movs	r2, #26
 800f4d8:	68f9      	ldr	r1, [r7, #12]
 800f4da:	6938      	ldr	r0, [r7, #16]
 800f4dc:	f7fe ff5c 	bl	800e398 <_SendPacket>
  RECORD_END();
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	f383 8811 	msr	BASEPRI, r3
}
 800f4e6:	bf00      	nop
 800f4e8:	3728      	adds	r7, #40	; 0x28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20005e28 	.word	0x20005e28

0800f4f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800f4f8:	4803      	ldr	r0, [pc, #12]	; (800f508 <_cbSendSystemDesc+0x14>)
 800f4fa:	f7ff fd5f 	bl	800efbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800f4fe:	4803      	ldr	r0, [pc, #12]	; (800f50c <_cbSendSystemDesc+0x18>)
 800f500:	f7ff fd5c 	bl	800efbc <SEGGER_SYSVIEW_SendSysDesc>
}
 800f504:	bf00      	nop
 800f506:	bd80      	pop	{r7, pc}
 800f508:	0800fdc0 	.word	0x0800fdc0
 800f50c:	0800fdf4 	.word	0x0800fdf4

0800f510 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800f510:	b580      	push	{r7, lr}
 800f512:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800f514:	4b06      	ldr	r3, [pc, #24]	; (800f530 <SEGGER_SYSVIEW_Conf+0x20>)
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	4b05      	ldr	r3, [pc, #20]	; (800f530 <SEGGER_SYSVIEW_Conf+0x20>)
 800f51a:	6819      	ldr	r1, [r3, #0]
 800f51c:	4b05      	ldr	r3, [pc, #20]	; (800f534 <SEGGER_SYSVIEW_Conf+0x24>)
 800f51e:	4a06      	ldr	r2, [pc, #24]	; (800f538 <SEGGER_SYSVIEW_Conf+0x28>)
 800f520:	f7ff f8cc 	bl	800e6bc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800f524:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f528:	f7ff f906 	bl	800e738 <SEGGER_SYSVIEW_SetRAMBase>
}
 800f52c:	bf00      	nop
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	20000004 	.word	0x20000004
 800f534:	0800f4f5 	.word	0x0800f4f5
 800f538:	0800feac 	.word	0x0800feac

0800f53c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800f53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f53e:	b085      	sub	sp, #20
 800f540:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800f542:	2300      	movs	r3, #0
 800f544:	607b      	str	r3, [r7, #4]
 800f546:	e048      	b.n	800f5da <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800f548:	4929      	ldr	r1, [pc, #164]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	4613      	mov	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	440b      	add	r3, r1
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fd fb71 	bl	800cc40 <uxTaskGetStackHighWaterMark>
 800f55e:	4601      	mov	r1, r0
 800f560:	4823      	ldr	r0, [pc, #140]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	4613      	mov	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4403      	add	r3, r0
 800f56e:	3310      	adds	r3, #16
 800f570:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800f572:	491f      	ldr	r1, [pc, #124]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	4613      	mov	r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	4413      	add	r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	440b      	add	r3, r1
 800f580:	6818      	ldr	r0, [r3, #0]
 800f582:	491b      	ldr	r1, [pc, #108]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	440b      	add	r3, r1
 800f590:	3304      	adds	r3, #4
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	4c16      	ldr	r4, [pc, #88]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	4423      	add	r3, r4
 800f5a2:	3308      	adds	r3, #8
 800f5a4:	681c      	ldr	r4, [r3, #0]
 800f5a6:	4d12      	ldr	r5, [pc, #72]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	442b      	add	r3, r5
 800f5b4:	330c      	adds	r3, #12
 800f5b6:	681d      	ldr	r5, [r3, #0]
 800f5b8:	4e0d      	ldr	r6, [pc, #52]	; (800f5f0 <_cbSendTaskList+0xb4>)
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4433      	add	r3, r6
 800f5c6:	3310      	adds	r3, #16
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	462b      	mov	r3, r5
 800f5ce:	4622      	mov	r2, r4
 800f5d0:	f000 f8be 	bl	800f750 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	607b      	str	r3, [r7, #4]
 800f5da:	4b06      	ldr	r3, [pc, #24]	; (800f5f4 <_cbSendTaskList+0xb8>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d3b1      	bcc.n	800f548 <_cbSendTaskList+0xc>
  }
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	20005f0c 	.word	0x20005f0c
 800f5f4:	20005fac 	.word	0x20005fac

0800f5f8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800f5f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800f600:	f7fc ffe8 	bl	800c5d4 <xTaskGetTickCountFromISR>
 800f604:	4603      	mov	r3, r0
 800f606:	2200      	movs	r2, #0
 800f608:	469a      	mov	sl, r3
 800f60a:	4693      	mov	fp, r2
 800f60c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800f610:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	f04f 0a00 	mov.w	sl, #0
 800f61c:	f04f 0b00 	mov.w	fp, #0
 800f620:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f624:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800f628:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800f62c:	4652      	mov	r2, sl
 800f62e:	465b      	mov	r3, fp
 800f630:	1a14      	subs	r4, r2, r0
 800f632:	eb63 0501 	sbc.w	r5, r3, r1
 800f636:	f04f 0200 	mov.w	r2, #0
 800f63a:	f04f 0300 	mov.w	r3, #0
 800f63e:	00ab      	lsls	r3, r5, #2
 800f640:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f644:	00a2      	lsls	r2, r4, #2
 800f646:	4614      	mov	r4, r2
 800f648:	461d      	mov	r5, r3
 800f64a:	eb14 0800 	adds.w	r8, r4, r0
 800f64e:	eb45 0901 	adc.w	r9, r5, r1
 800f652:	f04f 0200 	mov.w	r2, #0
 800f656:	f04f 0300 	mov.w	r3, #0
 800f65a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f65e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f666:	4690      	mov	r8, r2
 800f668:	4699      	mov	r9, r3
 800f66a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800f66e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f672:	4610      	mov	r0, r2
 800f674:	4619      	mov	r1, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800f680 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af02      	add	r7, sp, #8
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
 800f68c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f68e:	2205      	movs	r2, #5
 800f690:	492b      	ldr	r1, [pc, #172]	; (800f740 <SYSVIEW_AddTask+0xc0>)
 800f692:	68b8      	ldr	r0, [r7, #8]
 800f694:	f000 f8a4 	bl	800f7e0 <memcmp>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d04b      	beq.n	800f736 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f69e:	4b29      	ldr	r3, [pc, #164]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b07      	cmp	r3, #7
 800f6a4:	d903      	bls.n	800f6ae <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f6a6:	4828      	ldr	r0, [pc, #160]	; (800f748 <SYSVIEW_AddTask+0xc8>)
 800f6a8:	f7ff fec8 	bl	800f43c <SEGGER_SYSVIEW_Warn>
    return;
 800f6ac:	e044      	b.n	800f738 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f6ae:	4b25      	ldr	r3, [pc, #148]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	4926      	ldr	r1, [pc, #152]	; (800f74c <SYSVIEW_AddTask+0xcc>)
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	4413      	add	r3, r2
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	440b      	add	r3, r1
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800f6c2:	4b20      	ldr	r3, [pc, #128]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	4921      	ldr	r1, [pc, #132]	; (800f74c <SYSVIEW_AddTask+0xcc>)
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	4413      	add	r3, r2
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	440b      	add	r3, r1
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f6d8:	4b1a      	ldr	r3, [pc, #104]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	491b      	ldr	r1, [pc, #108]	; (800f74c <SYSVIEW_AddTask+0xcc>)
 800f6de:	4613      	mov	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3308      	adds	r3, #8
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800f6ee:	4b15      	ldr	r3, [pc, #84]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	4916      	ldr	r1, [pc, #88]	; (800f74c <SYSVIEW_AddTask+0xcc>)
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4413      	add	r3, r2
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	440b      	add	r3, r1
 800f6fe:	330c      	adds	r3, #12
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f704:	4b0f      	ldr	r3, [pc, #60]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	4910      	ldr	r1, [pc, #64]	; (800f74c <SYSVIEW_AddTask+0xcc>)
 800f70a:	4613      	mov	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4413      	add	r3, r2
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	440b      	add	r3, r1
 800f714:	3310      	adds	r3, #16
 800f716:	69ba      	ldr	r2, [r7, #24]
 800f718:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800f71a:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	3301      	adds	r3, #1
 800f720:	4a08      	ldr	r2, [pc, #32]	; (800f744 <SYSVIEW_AddTask+0xc4>)
 800f722:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	68b9      	ldr	r1, [r7, #8]
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f000 f80e 	bl	800f750 <SYSVIEW_SendTaskInfo>
 800f734:	e000      	b.n	800f738 <SYSVIEW_AddTask+0xb8>
    return;
 800f736:	bf00      	nop

}
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	0800fe04 	.word	0x0800fe04
 800f744:	20005fac 	.word	0x20005fac
 800f748:	0800fe0c 	.word	0x0800fe0c
 800f74c:	20005f0c 	.word	0x20005f0c

0800f750 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
 800f75c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800f75e:	f107 0314 	add.w	r3, r7, #20
 800f762:	2214      	movs	r2, #20
 800f764:	2100      	movs	r1, #0
 800f766:	4618      	mov	r0, r3
 800f768:	f000 f858 	bl	800f81c <memset>
  TaskInfo.TaskID     = TaskID;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f780:	f107 0314 	add.w	r3, r7, #20
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fb1f 	bl	800edc8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f78a:	bf00      	nop
 800f78c:	3728      	adds	r7, #40	; 0x28
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
	...

0800f794 <__libc_init_array>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	4d0d      	ldr	r5, [pc, #52]	; (800f7cc <__libc_init_array+0x38>)
 800f798:	4c0d      	ldr	r4, [pc, #52]	; (800f7d0 <__libc_init_array+0x3c>)
 800f79a:	1b64      	subs	r4, r4, r5
 800f79c:	10a4      	asrs	r4, r4, #2
 800f79e:	2600      	movs	r6, #0
 800f7a0:	42a6      	cmp	r6, r4
 800f7a2:	d109      	bne.n	800f7b8 <__libc_init_array+0x24>
 800f7a4:	4d0b      	ldr	r5, [pc, #44]	; (800f7d4 <__libc_init_array+0x40>)
 800f7a6:	4c0c      	ldr	r4, [pc, #48]	; (800f7d8 <__libc_init_array+0x44>)
 800f7a8:	f000 f902 	bl	800f9b0 <_init>
 800f7ac:	1b64      	subs	r4, r4, r5
 800f7ae:	10a4      	asrs	r4, r4, #2
 800f7b0:	2600      	movs	r6, #0
 800f7b2:	42a6      	cmp	r6, r4
 800f7b4:	d105      	bne.n	800f7c2 <__libc_init_array+0x2e>
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7bc:	4798      	blx	r3
 800f7be:	3601      	adds	r6, #1
 800f7c0:	e7ee      	b.n	800f7a0 <__libc_init_array+0xc>
 800f7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c6:	4798      	blx	r3
 800f7c8:	3601      	adds	r6, #1
 800f7ca:	e7f2      	b.n	800f7b2 <__libc_init_array+0x1e>
 800f7cc:	0800ff1c 	.word	0x0800ff1c
 800f7d0:	0800ff1c 	.word	0x0800ff1c
 800f7d4:	0800ff1c 	.word	0x0800ff1c
 800f7d8:	0800ff20 	.word	0x0800ff20

0800f7dc <__retarget_lock_acquire_recursive>:
 800f7dc:	4770      	bx	lr

0800f7de <__retarget_lock_release_recursive>:
 800f7de:	4770      	bx	lr

0800f7e0 <memcmp>:
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	3901      	subs	r1, #1
 800f7e4:	4402      	add	r2, r0
 800f7e6:	4290      	cmp	r0, r2
 800f7e8:	d101      	bne.n	800f7ee <memcmp+0xe>
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	e005      	b.n	800f7fa <memcmp+0x1a>
 800f7ee:	7803      	ldrb	r3, [r0, #0]
 800f7f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	d001      	beq.n	800f7fc <memcmp+0x1c>
 800f7f8:	1b18      	subs	r0, r3, r4
 800f7fa:	bd10      	pop	{r4, pc}
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	e7f2      	b.n	800f7e6 <memcmp+0x6>

0800f800 <memcpy>:
 800f800:	440a      	add	r2, r1
 800f802:	4291      	cmp	r1, r2
 800f804:	f100 33ff 	add.w	r3, r0, #4294967295
 800f808:	d100      	bne.n	800f80c <memcpy+0xc>
 800f80a:	4770      	bx	lr
 800f80c:	b510      	push	{r4, lr}
 800f80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f816:	4291      	cmp	r1, r2
 800f818:	d1f9      	bne.n	800f80e <memcpy+0xe>
 800f81a:	bd10      	pop	{r4, pc}

0800f81c <memset>:
 800f81c:	4402      	add	r2, r0
 800f81e:	4603      	mov	r3, r0
 800f820:	4293      	cmp	r3, r2
 800f822:	d100      	bne.n	800f826 <memset+0xa>
 800f824:	4770      	bx	lr
 800f826:	f803 1b01 	strb.w	r1, [r3], #1
 800f82a:	e7f9      	b.n	800f820 <memset+0x4>

0800f82c <cleanup_glue>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	460c      	mov	r4, r1
 800f830:	6809      	ldr	r1, [r1, #0]
 800f832:	4605      	mov	r5, r0
 800f834:	b109      	cbz	r1, 800f83a <cleanup_glue+0xe>
 800f836:	f7ff fff9 	bl	800f82c <cleanup_glue>
 800f83a:	4621      	mov	r1, r4
 800f83c:	4628      	mov	r0, r5
 800f83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f842:	f000 b869 	b.w	800f918 <_free_r>
	...

0800f848 <_reclaim_reent>:
 800f848:	4b2c      	ldr	r3, [pc, #176]	; (800f8fc <_reclaim_reent+0xb4>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4283      	cmp	r3, r0
 800f84e:	b570      	push	{r4, r5, r6, lr}
 800f850:	4604      	mov	r4, r0
 800f852:	d051      	beq.n	800f8f8 <_reclaim_reent+0xb0>
 800f854:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f856:	b143      	cbz	r3, 800f86a <_reclaim_reent+0x22>
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d14a      	bne.n	800f8f4 <_reclaim_reent+0xac>
 800f85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f860:	6819      	ldr	r1, [r3, #0]
 800f862:	b111      	cbz	r1, 800f86a <_reclaim_reent+0x22>
 800f864:	4620      	mov	r0, r4
 800f866:	f000 f857 	bl	800f918 <_free_r>
 800f86a:	6961      	ldr	r1, [r4, #20]
 800f86c:	b111      	cbz	r1, 800f874 <_reclaim_reent+0x2c>
 800f86e:	4620      	mov	r0, r4
 800f870:	f000 f852 	bl	800f918 <_free_r>
 800f874:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f876:	b111      	cbz	r1, 800f87e <_reclaim_reent+0x36>
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 f84d 	bl	800f918 <_free_r>
 800f87e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f880:	b111      	cbz	r1, 800f888 <_reclaim_reent+0x40>
 800f882:	4620      	mov	r0, r4
 800f884:	f000 f848 	bl	800f918 <_free_r>
 800f888:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f88a:	b111      	cbz	r1, 800f892 <_reclaim_reent+0x4a>
 800f88c:	4620      	mov	r0, r4
 800f88e:	f000 f843 	bl	800f918 <_free_r>
 800f892:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f894:	b111      	cbz	r1, 800f89c <_reclaim_reent+0x54>
 800f896:	4620      	mov	r0, r4
 800f898:	f000 f83e 	bl	800f918 <_free_r>
 800f89c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f89e:	b111      	cbz	r1, 800f8a6 <_reclaim_reent+0x5e>
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f000 f839 	bl	800f918 <_free_r>
 800f8a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f8a8:	b111      	cbz	r1, 800f8b0 <_reclaim_reent+0x68>
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f000 f834 	bl	800f918 <_free_r>
 800f8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8b2:	b111      	cbz	r1, 800f8ba <_reclaim_reent+0x72>
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f000 f82f 	bl	800f918 <_free_r>
 800f8ba:	69a3      	ldr	r3, [r4, #24]
 800f8bc:	b1e3      	cbz	r3, 800f8f8 <_reclaim_reent+0xb0>
 800f8be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	4798      	blx	r3
 800f8c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f8c6:	b1b9      	cbz	r1, 800f8f8 <_reclaim_reent+0xb0>
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8ce:	f7ff bfad 	b.w	800f82c <cleanup_glue>
 800f8d2:	5949      	ldr	r1, [r1, r5]
 800f8d4:	b941      	cbnz	r1, 800f8e8 <_reclaim_reent+0xa0>
 800f8d6:	3504      	adds	r5, #4
 800f8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8da:	2d80      	cmp	r5, #128	; 0x80
 800f8dc:	68d9      	ldr	r1, [r3, #12]
 800f8de:	d1f8      	bne.n	800f8d2 <_reclaim_reent+0x8a>
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 f819 	bl	800f918 <_free_r>
 800f8e6:	e7ba      	b.n	800f85e <_reclaim_reent+0x16>
 800f8e8:	680e      	ldr	r6, [r1, #0]
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 f814 	bl	800f918 <_free_r>
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	e7ef      	b.n	800f8d4 <_reclaim_reent+0x8c>
 800f8f4:	2500      	movs	r5, #0
 800f8f6:	e7ef      	b.n	800f8d8 <_reclaim_reent+0x90>
 800f8f8:	bd70      	pop	{r4, r5, r6, pc}
 800f8fa:	bf00      	nop
 800f8fc:	20000014 	.word	0x20000014

0800f900 <__malloc_lock>:
 800f900:	4801      	ldr	r0, [pc, #4]	; (800f908 <__malloc_lock+0x8>)
 800f902:	f7ff bf6b 	b.w	800f7dc <__retarget_lock_acquire_recursive>
 800f906:	bf00      	nop
 800f908:	20005fb0 	.word	0x20005fb0

0800f90c <__malloc_unlock>:
 800f90c:	4801      	ldr	r0, [pc, #4]	; (800f914 <__malloc_unlock+0x8>)
 800f90e:	f7ff bf66 	b.w	800f7de <__retarget_lock_release_recursive>
 800f912:	bf00      	nop
 800f914:	20005fb0 	.word	0x20005fb0

0800f918 <_free_r>:
 800f918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f91a:	2900      	cmp	r1, #0
 800f91c:	d044      	beq.n	800f9a8 <_free_r+0x90>
 800f91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f922:	9001      	str	r0, [sp, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	f1a1 0404 	sub.w	r4, r1, #4
 800f92a:	bfb8      	it	lt
 800f92c:	18e4      	addlt	r4, r4, r3
 800f92e:	f7ff ffe7 	bl	800f900 <__malloc_lock>
 800f932:	4a1e      	ldr	r2, [pc, #120]	; (800f9ac <_free_r+0x94>)
 800f934:	9801      	ldr	r0, [sp, #4]
 800f936:	6813      	ldr	r3, [r2, #0]
 800f938:	b933      	cbnz	r3, 800f948 <_free_r+0x30>
 800f93a:	6063      	str	r3, [r4, #4]
 800f93c:	6014      	str	r4, [r2, #0]
 800f93e:	b003      	add	sp, #12
 800f940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f944:	f7ff bfe2 	b.w	800f90c <__malloc_unlock>
 800f948:	42a3      	cmp	r3, r4
 800f94a:	d908      	bls.n	800f95e <_free_r+0x46>
 800f94c:	6825      	ldr	r5, [r4, #0]
 800f94e:	1961      	adds	r1, r4, r5
 800f950:	428b      	cmp	r3, r1
 800f952:	bf01      	itttt	eq
 800f954:	6819      	ldreq	r1, [r3, #0]
 800f956:	685b      	ldreq	r3, [r3, #4]
 800f958:	1949      	addeq	r1, r1, r5
 800f95a:	6021      	streq	r1, [r4, #0]
 800f95c:	e7ed      	b.n	800f93a <_free_r+0x22>
 800f95e:	461a      	mov	r2, r3
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	b10b      	cbz	r3, 800f968 <_free_r+0x50>
 800f964:	42a3      	cmp	r3, r4
 800f966:	d9fa      	bls.n	800f95e <_free_r+0x46>
 800f968:	6811      	ldr	r1, [r2, #0]
 800f96a:	1855      	adds	r5, r2, r1
 800f96c:	42a5      	cmp	r5, r4
 800f96e:	d10b      	bne.n	800f988 <_free_r+0x70>
 800f970:	6824      	ldr	r4, [r4, #0]
 800f972:	4421      	add	r1, r4
 800f974:	1854      	adds	r4, r2, r1
 800f976:	42a3      	cmp	r3, r4
 800f978:	6011      	str	r1, [r2, #0]
 800f97a:	d1e0      	bne.n	800f93e <_free_r+0x26>
 800f97c:	681c      	ldr	r4, [r3, #0]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	6053      	str	r3, [r2, #4]
 800f982:	4421      	add	r1, r4
 800f984:	6011      	str	r1, [r2, #0]
 800f986:	e7da      	b.n	800f93e <_free_r+0x26>
 800f988:	d902      	bls.n	800f990 <_free_r+0x78>
 800f98a:	230c      	movs	r3, #12
 800f98c:	6003      	str	r3, [r0, #0]
 800f98e:	e7d6      	b.n	800f93e <_free_r+0x26>
 800f990:	6825      	ldr	r5, [r4, #0]
 800f992:	1961      	adds	r1, r4, r5
 800f994:	428b      	cmp	r3, r1
 800f996:	bf04      	itt	eq
 800f998:	6819      	ldreq	r1, [r3, #0]
 800f99a:	685b      	ldreq	r3, [r3, #4]
 800f99c:	6063      	str	r3, [r4, #4]
 800f99e:	bf04      	itt	eq
 800f9a0:	1949      	addeq	r1, r1, r5
 800f9a2:	6021      	streq	r1, [r4, #0]
 800f9a4:	6054      	str	r4, [r2, #4]
 800f9a6:	e7ca      	b.n	800f93e <_free_r+0x26>
 800f9a8:	b003      	add	sp, #12
 800f9aa:	bd30      	pop	{r4, r5, pc}
 800f9ac:	20005fb4 	.word	0x20005fb4

0800f9b0 <_init>:
 800f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b2:	bf00      	nop
 800f9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b6:	bc08      	pop	{r3}
 800f9b8:	469e      	mov	lr, r3
 800f9ba:	4770      	bx	lr

0800f9bc <_fini>:
 800f9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9be:	bf00      	nop
 800f9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c2:	bc08      	pop	{r3}
 800f9c4:	469e      	mov	lr, r3
 800f9c6:	4770      	bx	lr
