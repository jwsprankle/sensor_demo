
sensor_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f698  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800f898  0800f898  0001f898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fda4  0800fda4  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fda4  0800fda4  0001fda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdac  0800fdac  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdac  0800fdac  0001fdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdb0  0800fdb0  0001fdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800fdb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  0800fe2c  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  0800fecc  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e00  200001b8  0800ff6c  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005fb8  0800ff6c  00025fb8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043c2d  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006107  00000000  00000000  00063e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003420  00000000  00000000  00069f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003198  00000000  00000000  0006d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e2f9  00000000  00000000  000704d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000355ca  00000000  00000000  0009e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011f732  00000000  00000000  000d3d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f34cd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e400  00000000  00000000  001f3520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f880 	.word	0x0800f880

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	0800f880 	.word	0x0800f880

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80002c8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d32e      	bcc.n	80002ba <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d312      	bcc.n	800028c <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000284:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000286:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028a:	4770      	bx	lr

0800028c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800028c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800028e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000290:	d317      	bcc.n	80002c2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000292:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000294:	1b12      	subs	r2, r2, r4

08000296 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000296:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800029e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a0:	d1f9      	bne.n	8000296 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a4:	d005      	beq.n	80002b2 <_No2ChunkNeeded>

080002a6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002aa:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002ae:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b0:	d1f9      	bne.n	80002a6 <_LoopCopyAfterWrapAround>

080002b2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002b2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002b4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002b8:	4770      	bx	lr

080002ba <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002ba:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002bc:	3801      	subs	r0, #1
        CMP      R0,R2
 80002be:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c0:	d2d1      	bcs.n	8000266 <_Case4>

080002c2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002c2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002c4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002c6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002c8:	20005538 	.word	0x20005538

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295
 80002e0:	f000 b974 	b.w	80005cc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f000 f806 	bl	80002fc <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__udivmoddi4>:
 80002fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000300:	9d08      	ldr	r5, [sp, #32]
 8000302:	4604      	mov	r4, r0
 8000304:	468e      	mov	lr, r1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d14d      	bne.n	80003a6 <__udivmoddi4+0xaa>
 800030a:	428a      	cmp	r2, r1
 800030c:	4694      	mov	ip, r2
 800030e:	d969      	bls.n	80003e4 <__udivmoddi4+0xe8>
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	b152      	cbz	r2, 800032c <__udivmoddi4+0x30>
 8000316:	fa01 f302 	lsl.w	r3, r1, r2
 800031a:	f1c2 0120 	rsb	r1, r2, #32
 800031e:	fa20 f101 	lsr.w	r1, r0, r1
 8000322:	fa0c fc02 	lsl.w	ip, ip, r2
 8000326:	ea41 0e03 	orr.w	lr, r1, r3
 800032a:	4094      	lsls	r4, r2
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	0c21      	lsrs	r1, r4, #16
 8000332:	fbbe f6f8 	udiv	r6, lr, r8
 8000336:	fa1f f78c 	uxth.w	r7, ip
 800033a:	fb08 e316 	mls	r3, r8, r6, lr
 800033e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000342:	fb06 f107 	mul.w	r1, r6, r7
 8000346:	4299      	cmp	r1, r3
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x64>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 811f 	bcs.w	8000594 <__udivmoddi4+0x298>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 811c 	bls.w	8000594 <__udivmoddi4+0x298>
 800035c:	3e02      	subs	r6, #2
 800035e:	4463      	add	r3, ip
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 f707 	mul.w	r7, r0, r7
 8000374:	42a7      	cmp	r7, r4
 8000376:	d90a      	bls.n	800038e <__udivmoddi4+0x92>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	f080 810a 	bcs.w	8000598 <__udivmoddi4+0x29c>
 8000384:	42a7      	cmp	r7, r4
 8000386:	f240 8107 	bls.w	8000598 <__udivmoddi4+0x29c>
 800038a:	4464      	add	r4, ip
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	1be4      	subs	r4, r4, r7
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa4>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xc2>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	f000 80ef 	beq.w	800058e <__udivmoddi4+0x292>
 80003b0:	2600      	movs	r6, #0
 80003b2:	e9c5 0100 	strd	r0, r1, [r5]
 80003b6:	4630      	mov	r0, r6
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f683 	clz	r6, r3
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d14a      	bne.n	800045c <__udivmoddi4+0x160>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd4>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80f9 	bhi.w	80005c2 <__udivmoddi4+0x2c6>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	469e      	mov	lr, r3
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa4>
 80003de:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa4>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xec>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 8092 	bne.w	8000516 <__udivmoddi4+0x21a>
 80003f2:	eba1 010c 	sub.w	r1, r1, ip
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2601      	movs	r6, #1
 8000400:	0c20      	lsrs	r0, r4, #16
 8000402:	fbb1 f3f7 	udiv	r3, r1, r7
 8000406:	fb07 1113 	mls	r1, r7, r3, r1
 800040a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040e:	fb0e f003 	mul.w	r0, lr, r3
 8000412:	4288      	cmp	r0, r1
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x12c>
 8000416:	eb1c 0101 	adds.w	r1, ip, r1
 800041a:	f103 38ff 	add.w	r8, r3, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x12a>
 8000420:	4288      	cmp	r0, r1
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2c0>
 8000426:	4643      	mov	r3, r8
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1110 	mls	r1, r7, r0, r1
 8000434:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x156>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x154>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2ca>
 8000450:	4608      	mov	r0, r1
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045a:	e79c      	b.n	8000396 <__udivmoddi4+0x9a>
 800045c:	f1c6 0720 	rsb	r7, r6, #32
 8000460:	40b3      	lsls	r3, r6
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa20 f407 	lsr.w	r4, r0, r7
 800046e:	fa01 f306 	lsl.w	r3, r1, r6
 8000472:	431c      	orrs	r4, r3
 8000474:	40f9      	lsrs	r1, r7
 8000476:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047a:	fa00 f306 	lsl.w	r3, r0, r6
 800047e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000482:	0c20      	lsrs	r0, r4, #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fb09 1118 	mls	r1, r9, r8, r1
 800048c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000490:	fb08 f00e 	mul.w	r0, r8, lr
 8000494:	4288      	cmp	r0, r1
 8000496:	fa02 f206 	lsl.w	r2, r2, r6
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b8>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2bc>
 80004a8:	4288      	cmp	r0, r1
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2bc>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004bc:	fb09 1110 	mls	r1, r9, r0, r1
 80004c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c8:	458e      	cmp	lr, r1
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1e2>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2b4>
 80004d6:	458e      	cmp	lr, r1
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2b4>
 80004da:	3802      	subs	r0, #2
 80004dc:	4461      	add	r1, ip
 80004de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e2:	fba0 9402 	umull	r9, r4, r0, r2
 80004e6:	eba1 010e 	sub.w	r1, r1, lr
 80004ea:	42a1      	cmp	r1, r4
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46a6      	mov	lr, r4
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x2a4>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x2a0>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x212>
 80004f6:	ebb3 0208 	subs.w	r2, r3, r8
 80004fa:	eb61 010e 	sbc.w	r1, r1, lr
 80004fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000502:	fa22 f306 	lsr.w	r3, r2, r6
 8000506:	40f1      	lsrs	r1, r6
 8000508:	431f      	orrs	r7, r3
 800050a:	e9c5 7100 	strd	r7, r1, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	f1c2 0320 	rsb	r3, r2, #32
 800051a:	40d8      	lsrs	r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa21 f303 	lsr.w	r3, r1, r3
 8000524:	4091      	lsls	r1, r2
 8000526:	4301      	orrs	r1, r0
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb3 f0f7 	udiv	r0, r3, r7
 8000534:	fb07 3610 	mls	r6, r7, r0, r3
 8000538:	0c0b      	lsrs	r3, r1, #16
 800053a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053e:	fb00 f60e 	mul.w	r6, r0, lr
 8000542:	429e      	cmp	r6, r3
 8000544:	fa04 f402 	lsl.w	r4, r4, r2
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x260>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b8>
 8000554:	429e      	cmp	r6, r3
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b8>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1b9b      	subs	r3, r3, r6
 800055e:	b289      	uxth	r1, r1
 8000560:	fbb3 f6f7 	udiv	r6, r3, r7
 8000564:	fb07 3316 	mls	r3, r7, r6, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb06 f30e 	mul.w	r3, r6, lr
 8000570:	428b      	cmp	r3, r1
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x28a>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f106 38ff 	add.w	r8, r6, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2b0>
 800057e:	428b      	cmp	r3, r1
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2b0>
 8000582:	3e02      	subs	r6, #2
 8000584:	4461      	add	r1, ip
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0x104>
 800058e:	462e      	mov	r6, r5
 8000590:	4628      	mov	r0, r5
 8000592:	e705      	b.n	80003a0 <__udivmoddi4+0xa4>
 8000594:	4606      	mov	r6, r0
 8000596:	e6e3      	b.n	8000360 <__udivmoddi4+0x64>
 8000598:	4618      	mov	r0, r3
 800059a:	e6f8      	b.n	800038e <__udivmoddi4+0x92>
 800059c:	454b      	cmp	r3, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f8>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a8:	3801      	subs	r0, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f8>
 80005ac:	4646      	mov	r6, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x28a>
 80005b0:	4620      	mov	r0, r4
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1e2>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x260>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b8>
 80005bc:	3b02      	subs	r3, #2
 80005be:	4461      	add	r1, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x12c>
 80005c2:	4630      	mov	r0, r6
 80005c4:	e709      	b.n	80003da <__udivmoddi4+0xde>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x156>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <bsp_lsm303agr_init>:
#include "main.h"
#include "non_block_queue_ndx.h"

static LSM303AGR_MAG_Object_t bsp_mag_lsm303agr_Obj = { 0 };

int32_t bsp_lsm303agr_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
	LSM303AGR_IO_t mag_io_ctx;
	uint8_t id;

	mag_io_ctx.BusType = LSM303AGR_I2C_BUS;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	mag_io_ctx.Address = LSM303AGR_I2C_ADD_MG;
 80005da:	233d      	movs	r3, #61	; 0x3d
 80005dc:	743b      	strb	r3, [r7, #16]
	mag_io_ctx.Init = BSP_I2C1_Init;
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <bsp_lsm303agr_init+0xc8>)
 80005e0:	607b      	str	r3, [r7, #4]
	mag_io_ctx.DeInit = BSP_I2C1_DeInit;
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <bsp_lsm303agr_init+0xcc>)
 80005e4:	60bb      	str	r3, [r7, #8]
	mag_io_ctx.ReadReg = BSP_I2C1_ReadReg;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <bsp_lsm303agr_init+0xd0>)
 80005e8:	61bb      	str	r3, [r7, #24]
	mag_io_ctx.WriteReg = BSP_I2C1_WriteReg;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <bsp_lsm303agr_init+0xd4>)
 80005ec:	617b      	str	r3, [r7, #20]
	mag_io_ctx.GetTick = BSP_GetTick;
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <bsp_lsm303agr_init+0xd8>)
 80005f0:	61fb      	str	r3, [r7, #28]

	if (LSM303AGR_MAG_RegisterBusIO(&bsp_mag_lsm303agr_Obj,
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	482d      	ldr	r0, [pc, #180]	; (80006ac <bsp_lsm303agr_init+0xdc>)
 80005f8:	f001 f9f8 	bl	80019ec <LSM303AGR_MAG_RegisterBusIO>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <bsp_lsm303agr_init+0x38>
			&mag_io_ctx) != LSM303AGR_OK) {
		return LSM303AGR_ERROR;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e042      	b.n	800068e <bsp_lsm303agr_init+0xbe>
	}

	// Vefify sensor ID (Just to verify that connection is make to chip)
	if (LSM303AGR_MAG_ReadID(&bsp_mag_lsm303agr_Obj, &id) != LSM303AGR_OK) {
 8000608:	1cfb      	adds	r3, r7, #3
 800060a:	4619      	mov	r1, r3
 800060c:	4827      	ldr	r0, [pc, #156]	; (80006ac <bsp_lsm303agr_init+0xdc>)
 800060e:	f001 fa8e 	bl	8001b2e <LSM303AGR_MAG_ReadID>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <bsp_lsm303agr_init+0x4e>
		return LSM303AGR_ERROR;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	e037      	b.n	800068e <bsp_lsm303agr_init+0xbe>
	}

	if (id != LSM303AGR_ID_MG) {
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	2b40      	cmp	r3, #64	; 0x40
 8000622:	d002      	beq.n	800062a <bsp_lsm303agr_init+0x5a>
		return LSM303AGR_ERROR;
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	e031      	b.n	800068e <bsp_lsm303agr_init+0xbe>
	}

	// Reset device and wait for powerup
	if (lsm303agr_mag_boot_set(&bsp_mag_lsm303agr_Obj.Ctx, 1) != LSM303AGR_OK) {
 800062a:	2101      	movs	r1, #1
 800062c:	4820      	ldr	r0, [pc, #128]	; (80006b0 <bsp_lsm303agr_init+0xe0>)
 800062e:	f001 fbc9 	bl	8001dc4 <lsm303agr_mag_boot_set>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <bsp_lsm303agr_init+0x6e>
		return LSM303AGR_ERROR;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	e027      	b.n	800068e <bsp_lsm303agr_init+0xbe>
	}
	HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f002 fb4a 	bl	8002cd8 <HAL_Delay>

	// Vefify sensor ID (This is to just verify that connection is make to chip)
	if (LSM303AGR_MAG_ReadID(&bsp_mag_lsm303agr_Obj, &id) != LSM303AGR_OK) {
 8000644:	1cfb      	adds	r3, r7, #3
 8000646:	4619      	mov	r1, r3
 8000648:	4818      	ldr	r0, [pc, #96]	; (80006ac <bsp_lsm303agr_init+0xdc>)
 800064a:	f001 fa70 	bl	8001b2e <LSM303AGR_MAG_ReadID>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <bsp_lsm303agr_init+0x8a>
		return LSM303AGR_ERROR;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	e019      	b.n	800068e <bsp_lsm303agr_init+0xbe>
	} else {
		if (id != LSM303AGR_ID_MG) {
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	2b40      	cmp	r3, #64	; 0x40
 800065e:	d002      	beq.n	8000666 <bsp_lsm303agr_init+0x96>
			return LSM303AGR_ERROR;
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	e013      	b.n	800068e <bsp_lsm303agr_init+0xbe>
		}
	}

	// Standard init
	if (LSM303AGR_MAG_Init(&bsp_mag_lsm303agr_Obj) != LSM303AGR_OK) {
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <bsp_lsm303agr_init+0xdc>)
 8000668:	f001 fa24 	bl	8001ab4 <LSM303AGR_MAG_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <bsp_lsm303agr_init+0xa8>
		return LSM303AGR_ERROR;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e00a      	b.n	800068e <bsp_lsm303agr_init+0xbe>
	}

	// Setup interrupt on data ready

	if (lsm303agr_mag_drdy_on_pin_set(&bsp_mag_lsm303agr_Obj.Ctx,
 8000678:	2101      	movs	r1, #1
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <bsp_lsm303agr_init+0xe0>)
 800067c:	f001 fbee 	bl	8001e5c <lsm303agr_mag_drdy_on_pin_set>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <bsp_lsm303agr_init+0xbc>
			1) != LSM303AGR_OK) {
		return LSM303AGR_ERROR;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e000      	b.n	800068e <bsp_lsm303agr_init+0xbe>
//  if (lsm303agr_mag_data_rate_set(&(bsp_mag_lsm303agr_Obj.Ctx), LSM303AGR_MG_ODR_50Hz) != LSM303AGR_OK)
//  {
//    return LSM303AGR_ERROR;
//  }

	return LSM303AGR_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08001555 	.word	0x08001555
 800069c:	080015d1 	.word	0x080015d1
 80006a0:	08001685 	.word	0x08001685
 80006a4:	08001621 	.word	0x08001621
 80006a8:	080016e9 	.word	0x080016e9
 80006ac:	200001d4 	.word	0x200001d4
 80006b0:	200001f0 	.word	0x200001f0

080006b4 <bsp_lsm303agr_enable>:

int32_t bsp_lsm303agr_enable(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	// Start up mag
	if (LSM303AGR_MAG_Enable(&bsp_mag_lsm303agr_Obj) != LSM303AGR_OK) {
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <bsp_lsm303agr_enable+0x1c>)
 80006ba:	f001 fa4e 	bl	8001b5a <LSM303AGR_MAG_Enable>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <bsp_lsm303agr_enable+0x16>
		return LSM303AGR_ERROR;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	e000      	b.n	80006cc <bsp_lsm303agr_enable+0x18>
	}

	return LSM303AGR_OK;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200001d4 	.word	0x200001d4

080006d4 <bsp_lsm6dsl_init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */

int32_t bsp_lsm6dsl_init() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	lsm6dsl_ctrl3_c_t ctrl3_c;
	uint8_t id;

	io_ctx.BusType = LSM6DSL_I2C_BUS;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
	io_ctx.Address = LSM6DSL_I2C_ADD_H;
 80006de:	23d7      	movs	r3, #215	; 0xd7
 80006e0:	763b      	strb	r3, [r7, #24]
	io_ctx.Init = BSP_I2C1_Init;
 80006e2:	4b56      	ldr	r3, [pc, #344]	; (800083c <bsp_lsm6dsl_init+0x168>)
 80006e4:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit = BSP_I2C1_DeInit;
 80006e6:	4b56      	ldr	r3, [pc, #344]	; (8000840 <bsp_lsm6dsl_init+0x16c>)
 80006e8:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg = BSP_I2C1_ReadReg;
 80006ea:	4b56      	ldr	r3, [pc, #344]	; (8000844 <bsp_lsm6dsl_init+0x170>)
 80006ec:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg = BSP_I2C1_WriteReg;
 80006ee:	4b56      	ldr	r3, [pc, #344]	; (8000848 <bsp_lsm6dsl_init+0x174>)
 80006f0:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick = BSP_GetTick;
 80006f2:	4b56      	ldr	r3, [pc, #344]	; (800084c <bsp_lsm6dsl_init+0x178>)
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24

	if (LSM6DSL_RegisterBusIO(&bsp_lsm6dsl_Obj, &io_ctx) != LSM6DSL_OK) {
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4854      	ldr	r0, [pc, #336]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 80006fe:	f001 fbf9 	bl	8001ef4 <LSM6DSL_RegisterBusIO>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <bsp_lsm6dsl_init+0x3a>
		return LSM6DSL_ERROR;
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	e091      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	// Vefify sensor ID
	if (LSM6DSL_ReadID(&bsp_lsm6dsl_Obj, &id) != LSM6DSL_OK) {
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	4619      	mov	r1, r3
 8000712:	484f      	ldr	r0, [pc, #316]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 8000714:	f001 fcbd 	bl	8002092 <LSM6DSL_ReadID>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <bsp_lsm6dsl_init+0x50>
		return LSM6DSL_ERROR;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e086      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	if (id != LSM6DSL_ID) {
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b6a      	cmp	r3, #106	; 0x6a
 8000728:	d002      	beq.n	8000730 <bsp_lsm6dsl_init+0x5c>
		return LSM6DSL_ERROR;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	e080      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	// Reset device
	if (lsm6dsl_reset_set(&bsp_lsm6dsl_Obj.Ctx, 1) != LSM6DSL_OK) {
 8000730:	2101      	movs	r1, #1
 8000732:	4848      	ldr	r0, [pc, #288]	; (8000854 <bsp_lsm6dsl_init+0x180>)
 8000734:	f002 f825 	bl	8002782 <lsm6dsl_reset_set>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <bsp_lsm6dsl_init+0x70>
		return LSM6DSL_ERROR;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	e076      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	// Wait for reset to complete
	do {
		if (lsm6dsl_read_reg(&bsp_lsm6dsl_Obj.Ctx, LSM6DSL_CTRL3_C,
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	2301      	movs	r3, #1
 800074a:	2112      	movs	r1, #18
 800074c:	4841      	ldr	r0, [pc, #260]	; (8000854 <bsp_lsm6dsl_init+0x180>)
 800074e:	f001 fe4e 	bl	80023ee <lsm6dsl_read_reg>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <bsp_lsm6dsl_init+0x8a>
				(uint8_t*) &ctrl3_c, 1) != LSM6DSL_OK) {
			return LSM6DSL_ERROR;
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	e069      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
		}
	} while (ctrl3_c.sw_reset == 1);
 800075e:	7a3b      	ldrb	r3, [r7, #8]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ec      	bne.n	8000744 <bsp_lsm6dsl_init+0x70>

	// Init using default settings
	if (LSM6DSL_Init(&bsp_lsm6dsl_Obj) != LSM6DSL_OK) {
 800076a:	4839      	ldr	r0, [pc, #228]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 800076c:	f001 fc28 	bl	8001fc0 <LSM6DSL_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <bsp_lsm6dsl_init+0xa8>
		return LSM6DSL_ERROR;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e05a      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	// Override default data rate for acc and gyro
	bsp_lsm6dsl_Obj.acc_odr = (lsm6dsl_odr_xl_t) GYRO_ACC_RATE;
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 800077e:	2206      	movs	r2, #6
 8000780:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	bsp_lsm6dsl_Obj.gyro_odr = (lsm6dsl_odr_g_t) GYRO_ACC_RATE;
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 8000786:	2206      	movs	r2, #6
 8000788:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	LSM6DSL_ACC_Disable(&bsp_lsm6dsl_Obj);
 800078c:	4830      	ldr	r0, [pc, #192]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 800078e:	f001 fcba 	bl	8002106 <LSM6DSL_ACC_Disable>
	LSM6DSL_GYRO_Disable(&bsp_lsm6dsl_Obj);
 8000792:	482f      	ldr	r0, [pc, #188]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 8000794:	f001 fd0a 	bl	80021ac <LSM6DSL_GYRO_Disable>

	if (lsm6dsl_fifo_data_rate_set(&(bsp_lsm6dsl_Obj.Ctx),
 8000798:	2106      	movs	r1, #6
 800079a:	482e      	ldr	r0, [pc, #184]	; (8000854 <bsp_lsm6dsl_init+0x180>)
 800079c:	f002 fa48 	bl	8002c30 <lsm6dsl_fifo_data_rate_set>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <bsp_lsm6dsl_init+0xd8>
			(lsm6dsl_odr_fifo_t) GYRO_ACC_RATE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e042      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_ACC_Set_Decimation(&bsp_lsm6dsl_Obj,
 80007ac:	2101      	movs	r1, #1
 80007ae:	4828      	ldr	r0, [pc, #160]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 80007b0:	f001 fd97 	bl	80022e2 <LSM6DSL_FIFO_ACC_Set_Decimation>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <bsp_lsm6dsl_init+0xec>
			LSM6DSL_FIFO_XL_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e038      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_GYRO_Set_Decimation(&bsp_lsm6dsl_Obj,
 80007c0:	2101      	movs	r1, #1
 80007c2:	4823      	ldr	r0, [pc, #140]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 80007c4:	f001 fdb5 	bl	8002332 <LSM6DSL_FIFO_GYRO_Set_Decimation>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <bsp_lsm6dsl_init+0x100>
			LSM6DSL_FIFO_GY_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e02e      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_Set_Mode(&bsp_lsm6dsl_Obj,
 80007d4:	2106      	movs	r1, #6
 80007d6:	481e      	ldr	r0, [pc, #120]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 80007d8:	f001 fd4a 	bl	8002270 <LSM6DSL_FIFO_Set_Mode>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <bsp_lsm6dsl_init+0x114>
			LSM6DSL_STREAM_MODE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e024      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_Set_Watermark_Level(&bsp_lsm6dsl_Obj,
 80007e8:	213c      	movs	r1, #60	; 0x3c
 80007ea:	4819      	ldr	r0, [pc, #100]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 80007ec:	f001 fd28 	bl	8002240 <LSM6DSL_FIFO_Set_Watermark_Level>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <bsp_lsm6dsl_init+0x128>
			GYRO_ACC_TOTAL_SAMPLES * 3) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e01a      	b.n	8000832 <bsp_lsm6dsl_init+0x15e>
	}

	// Setup watermark interrupt
	lsm6dsl_int1_route_t fth_route = { 0 };
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2100      	movs	r1, #0
 8000800:	460a      	mov	r2, r1
 8000802:	801a      	strh	r2, [r3, #0]
 8000804:	460a      	mov	r2, r1
 8000806:	709a      	strb	r2, [r3, #2]
	fth_route.int1_fth = 1;
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&(bsp_lsm6dsl_Obj.Ctx), fth_route);
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <bsp_lsm6dsl_init+0x180>)
 8000814:	f002 f801 	bl	800281a <lsm6dsl_pin_int1_route_set>

	bsp_lsm6dsl_Obj.is_initialized = 1;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <bsp_lsm6dsl_init+0x17c>)
 800081a:	2201      	movs	r2, #1
 800081c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// Enable interrupt
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2017      	movs	r0, #23
 8000826:	f002 fb6d 	bl	8002f04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800082a:	2017      	movs	r0, #23
 800082c:	f002 fb96 	bl	8002f5c <HAL_NVIC_EnableIRQ>

	return LSM6DSL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	08001555 	.word	0x08001555
 8000840:	080015d1 	.word	0x080015d1
 8000844:	08001685 	.word	0x08001685
 8000848:	08001621 	.word	0x08001621
 800084c:	080016e9 	.word	0x080016e9
 8000850:	20000200 	.word	0x20000200
 8000854:	2000021c 	.word	0x2000021c

08000858 <bsp_lsm6dsl_enable>:
//	

//	DebugExtAnalyzerReset1();
//}

void bsp_lsm6dsl_enable(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	LSM6DSL_ACC_Enable(&bsp_lsm6dsl_Obj);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <bsp_lsm6dsl_enable+0x14>)
 800085e:	f001 fc2e 	bl	80020be <LSM6DSL_ACC_Enable>
	LSM6DSL_GYRO_Enable(&bsp_lsm6dsl_Obj);
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <bsp_lsm6dsl_enable+0x14>)
 8000864:	f001 fc7e 	bl	8002164 <LSM6DSL_GYRO_Enable>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000200 	.word	0x20000200

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f002 fa02 	bl	8002c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f828 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 f96a 	bl	8000b54 <MX_GPIO_Init>
  MX_ETH_Init();
 8000880:	f000 f896 	bl	80009b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000884:	f000 f8e2 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000888:	f000 f910 	bl	8000aac <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 800088c:	f000 f93c 	bl	8000b08 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8000890:	f00e fda6 	bl	800f3e0 <SEGGER_SYSVIEW_Conf>
  InitSensorBus1(AccGyroCallback, MagCallback);
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <main+0x48>)
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0x4c>)
 8000898:	f000 fa8c 	bl	8000db4 <InitSensorBus1>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089c:	f00a faf4 	bl	800ae88 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <main+0x50>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <main+0x54>)
 80008a6:	f00a fb59 	bl	800af5c <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <main+0x58>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b0:	f00a fb1e 	bl	800aef0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008b4:	e7fe      	b.n	80008b4 <main+0x44>
 80008b6:	bf00      	nop
 80008b8:	08000d51 	.word	0x08000d51
 80008bc:	08000d39 	.word	0x08000d39
 80008c0:	0800fcec 	.word	0x0800fcec
 80008c4:	08000d25 	.word	0x08000d25
 80008c8:	200008a8 	.word	0x200008a8

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f00e ff06 	bl	800f6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f0:	f006 fe60 	bl	80075b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <SystemClock_Config+0xdc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <SystemClock_Config+0xdc>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <SystemClock_Config+0xdc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <SystemClock_Config+0xe0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000914:	4a25      	ldr	r2, [pc, #148]	; (80009ac <SystemClock_Config+0xe0>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <SystemClock_Config+0xe0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000940:	2360      	movs	r3, #96	; 0x60
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4618      	mov	r0, r3
 8000956:	f006 fe8d 	bl	8007674 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000960:	f000 fa14 	bl	8000d8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000964:	f006 fe36 	bl	80075d4 <HAL_PWREx_EnableOverDrive>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800096e:	f000 fa0d 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2103      	movs	r1, #3
 800098e:	4618      	mov	r0, r3
 8000990:	f007 f9e0 	bl	8007d54 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800099a:	f000 f9f7 	bl	8000d8c <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ETH_Init+0x84>)
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_ETH_Init+0x88>)
 80009b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009c8:	22e1      	movs	r2, #225	; 0xe1
 80009ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ETH_Init+0x84>)
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_ETH_Init+0x84>)
 80009e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ETH_Init+0x84>)
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <MX_ETH_Init+0x90>)
 80009f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_ETH_Init+0x84>)
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_ETH_Init+0x94>)
 80009f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_ETH_Init+0x84>)
 80009fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x84>)
 8000a02:	f003 f909 	bl	8003c18 <HAL_ETH_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 f9be 	bl	8000d8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a10:	2238      	movs	r2, #56	; 0x38
 8000a12:	2100      	movs	r1, #0
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a16:	f00e fe69 	bl	800f6ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a1c:	2221      	movs	r2, #33	; 0x21
 8000a1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000268 	.word	0x20000268
 8000a38:	40028000 	.word	0x40028000
 8000a3c:	200008ac 	.word	0x200008ac
 8000a40:	20000118 	.word	0x20000118
 8000a44:	20000078 	.word	0x20000078
 8000a48:	20000230 	.word	0x20000230

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_USART3_UART_Init+0x5c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a90:	f009 f8dc 	bl	8009c4c <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 f977 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000318 	.word	0x20000318
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2206      	movs	r2, #6
 8000abc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	f006 fc06 	bl	8007300 <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f947 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003a0 	.word	0x200003a0

08000b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_DMA_Init+0x48>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MX_DMA_Init+0x48>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_DMA_Init+0x48>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f002 f9ea 	bl	8002f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b30:	200b      	movs	r0, #11
 8000b32:	f002 fa13 	bl	8002f5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	2011      	movs	r0, #17
 8000b3c:	f002 f9e2 	bl	8002f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b40:	2011      	movs	r0, #17
 8000b42:	f002 fa0b 	bl	8002f5c <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b5b      	ldr	r3, [pc, #364]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a5a      	ldr	r2, [pc, #360]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b58      	ldr	r3, [pc, #352]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a54      	ldr	r2, [pc, #336]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b52      	ldr	r3, [pc, #328]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a4e      	ldr	r2, [pc, #312]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a42      	ldr	r2, [pc, #264]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a3c      	ldr	r2, [pc, #240]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <MX_GPIO_Init+0x184>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c18:	4830      	ldr	r0, [pc, #192]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000c1a:	f004 f801 	bl	8004c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	482f      	ldr	r0, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c24:	f003 fffc 	bl	8004c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MagDataRdy_Pin */
  GPIO_InitStruct.Pin = MagDataRdy_Pin;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MagDataRdy_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4829      	ldr	r0, [pc, #164]	; (8000ce4 <MX_GPIO_Init+0x190>)
 8000c3e:	f003 fb11 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c42:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000c5c:	f003 fb02 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pin : Lms6dsl_Int1_Pin */
  GPIO_InitStruct.Pin = Lms6dsl_Int1_Pin;
 8000c60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Lms6dsl_Int1_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0x194>)
 8000c78:	f003 faf4 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c94:	f003 fae6 	bl	8004264 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000cac:	f003 fada 	bl	8004264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	2009      	movs	r0, #9
 8000cb6:	f002 f925 	bl	8002f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cba:	2009      	movs	r0, #9
 8000cbc:	f002 f94e 	bl	8002f5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2105      	movs	r1, #5
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f002 f91d 	bl	8002f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cca:	2028      	movs	r0, #40	; 0x28
 8000ccc:	f002 f946 	bl	8002f5c <HAL_NVIC_EnableIRQ>

}
 8000cd0:	bf00      	nop
 8000cd2:	3730      	adds	r7, #48	; 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40021400 	.word	0x40021400

08000cec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Here when data is ready to read using DMA

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]

	if ( (GPIO_Pin == MagDataRdy_Pin) || (GPIO_Pin == Lms6dsl_Int1_Pin)) {
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_EXTI_Callback+0x18>
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d02:	d101      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x1c>
		UpdateSensorBus1();
 8000d04:	f000 f8a2 	bl	8000e4c <UpdateSensorBus1>
//	// If acc/gyro
//	if (GPIO_Pin == Lms6dsl_Int1_Pin) {
//		SensorBus1_DMA_Request(DMA_ACC_GYRO);
//		return;
//	}
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_I2C_MemRxCpltCallback>:

// Here when DMA is complete and data is ready to use
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	SensorBus1_DMA_CallBack();
 8000d18:	f000 f940 	bl	8000f9c <SensorBus1_DMA_CallBack>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	StartSensorBus1();
 8000d2c:	f000 f880 	bl	8000e30 <StartSensorBus1>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f00a f9b9 	bl	800b0a8 <osDelay>
 8000d36:	e7fb      	b.n	8000d30 <StartDefaultTask+0xc>

08000d38 <AccGyroCallback>:
	}
  /* USER CODE END 5 */
}


void AccGyroCallback(LSM6DSL_AxesRaw_t * pRawData, uint16_t numItems) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]

}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <MagCallback>:


static void MagCallback(LSM303AGR_AxesRaw_t * pRawData, uint16_t numItems) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]

}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7a:	f001 ff8d 	bl	8002c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40000c00 	.word	0x40000c00

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <assert_failed+0x18>)
 8000da8:	f00e fa9c 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
	                            on line %d\r\n", file, line);
	  while(1);
 8000dac:	e7fe      	b.n	8000dac <assert_failed+0x14>
 8000dae:	bf00      	nop
 8000db0:	0800f8a4 	.word	0x0800f8a4

08000db4 <InitSensorBus1>:
static MagCallback_t pMagCallback = NULL;

static void run_pending_dma(void);


void InitSensorBus1(AccGyroCallback_t pAccGyroCB, MagCallback_t pMagCB) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]

	pAccGyroCallback = pAccGyroCB;
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <InitSensorBus1+0x50>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6013      	str	r3, [r2, #0]
	pMagCallback = pMagCB;
 8000dc4:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <InitSensorBus1+0x54>)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6013      	str	r3, [r2, #0]

	req_mag = GP_FALSE;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <InitSensorBus1+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
	req_gyro_acc = GP_FALSE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <InitSensorBus1+0x5c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	lock_update = GP_FALSE;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <InitSensorBus1+0x60>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	in_process_dma = DMA_RDY;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <InitSensorBus1+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
	p_acc_gyro_raw_data = (LSM6DSL_AxesRaw_t*)&acc_gyro_raw_data1;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <InitSensorBus1+0x68>)
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <InitSensorBus1+0x6c>)
 8000de6:	601a      	str	r2, [r3, #0]
	p_mag_raw_data = (LSM303AGR_AxesRaw_t*)&mag_raw_data1;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <InitSensorBus1+0x70>)
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <InitSensorBus1+0x74>)
 8000dec:	601a      	str	r2, [r3, #0]

	bsp_lsm6dsl_init();
 8000dee:	f7ff fc71 	bl	80006d4 <bsp_lsm6dsl_init>
	bsp_lsm303agr_init();
 8000df2:	f7ff fbed 	bl	80005d0 <bsp_lsm303agr_init>
	SEGGER_SYSVIEW_PrintfHost("InitSensorBus1");
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <InitSensorBus1+0x78>)
 8000df8:	f00e fa74 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200009c0 	.word	0x200009c0
 8000e08:	200009c4 	.word	0x200009c4
 8000e0c:	200008b3 	.word	0x200008b3
 8000e10:	200008b4 	.word	0x200008b4
 8000e14:	200008b5 	.word	0x200008b5
 8000e18:	200008b2 	.word	0x200008b2
 8000e1c:	200009a8 	.word	0x200009a8
 8000e20:	200008b8 	.word	0x200008b8
 8000e24:	200009bc 	.word	0x200009bc
 8000e28:	200009ac 	.word	0x200009ac
 8000e2c:	0800f8e8 	.word	0x0800f8e8

08000e30 <StartSensorBus1>:


void StartSensorBus1(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	bsp_lsm6dsl_enable();
 8000e34:	f7ff fd10 	bl	8000858 <bsp_lsm6dsl_enable>
	bsp_lsm303agr_enable();
 8000e38:	f7ff fc3c 	bl	80006b4 <bsp_lsm303agr_enable>
	SEGGER_SYSVIEW_PrintfHost("StartSensorBus1");
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <StartSensorBus1+0x18>)
 8000e3e:	f00e fa51 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	0800f8f8 	.word	0x0800f8f8

08000e4c <UpdateSensorBus1>:


void UpdateSensorBus1(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

	// Set based on pin state, using this method help with missed updates when stopped for debug
	if (HAL_GPIO_ReadPin(MagDataRdy_GPIO_Port, MagDataRdy_Pin) == GPIO_PIN_SET) {
 8000e50:	2108      	movs	r1, #8
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <UpdateSensorBus1+0x44>)
 8000e54:	f003 fec4 	bl	8004be0 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d105      	bne.n	8000e6a <UpdateSensorBus1+0x1e>
		req_mag = GP_TRUE;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <UpdateSensorBus1+0x48>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_mag requested");
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <UpdateSensorBus1+0x4c>)
 8000e66:	f00e fa3d 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
	}


	if (HAL_GPIO_ReadPin(Lms6dsl_Int1_GPIO_Port, Lms6dsl_Int1_Pin) == GPIO_PIN_SET) {
 8000e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <UpdateSensorBus1+0x50>)
 8000e70:	f003 feb6 	bl	8004be0 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d105      	bne.n	8000e86 <UpdateSensorBus1+0x3a>
		req_gyro_acc = GP_TRUE;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <UpdateSensorBus1+0x54>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc requested");
 8000e80:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <UpdateSensorBus1+0x58>)
 8000e82:	f00e fa2f 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
	}

	run_pending_dma();
 8000e86:	f000 f80f 	bl	8000ea8 <run_pending_dma>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020800 	.word	0x40020800
 8000e94:	200008b3 	.word	0x200008b3
 8000e98:	0800f908 	.word	0x0800f908
 8000e9c:	40021400 	.word	0x40021400
 8000ea0:	200008b4 	.word	0x200008b4
 8000ea4:	0800f91c 	.word	0x0800f91c

08000ea8 <run_pending_dma>:


void run_pending_dma(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8

	// Must not be reentrant, this will catch that
	// Must have SensorBus1_DMA_CallBack and UpdateSensorBus1 on same interrupt level
	assert_param(lock_update == GP_FALSE);
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <run_pending_dma+0xc4>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <run_pending_dma+0x18>
 8000eb8:	2154      	movs	r1, #84	; 0x54
 8000eba:	482d      	ldr	r0, [pc, #180]	; (8000f70 <run_pending_dma+0xc8>)
 8000ebc:	f7ff ff6c 	bl	8000d98 <assert_failed>
	lock_update = GP_TRUE;
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <run_pending_dma+0xc4>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]

	if (in_process_dma != DMA_RDY) { // exit if previous still running
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <run_pending_dma+0xcc>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <run_pending_dma+0x36>
		SEGGER_SYSVIEW_PrintfHost("run_pending_dma busy");
 8000ed0:	4829      	ldr	r0, [pc, #164]	; (8000f78 <run_pending_dma+0xd0>)
 8000ed2:	f00e fa07 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
		lock_update = GP_FALSE;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <run_pending_dma+0xc4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
		return;
 8000edc:	e044      	b.n	8000f68 <run_pending_dma+0xc0>
	}


	// Else check for ryro/acc DMA read
	if (req_gyro_acc) {
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <run_pending_dma+0xd4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d01c      	beq.n	8000f22 <run_pending_dma+0x7a>
		assert_param(HAL_I2C_Mem_Read_DMA(&hi2c1, LSM6DSL_I2C_ADD_H, LSM6DSL_FIFO_DATA_OUT_L,
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <run_pending_dma+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <run_pending_dma+0xdc>)
 8000eee:	8812      	ldrh	r2, [r2, #0]
 8000ef0:	9201      	str	r2, [sp, #4]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	223e      	movs	r2, #62	; 0x3e
 8000ef8:	21d7      	movs	r1, #215	; 0xd7
 8000efa:	4823      	ldr	r0, [pc, #140]	; (8000f88 <run_pending_dma+0xe0>)
 8000efc:	f004 faa6 	bl	800544c <HAL_I2C_Mem_Read_DMA>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <run_pending_dma+0x66>
 8000f06:	2160      	movs	r1, #96	; 0x60
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <run_pending_dma+0xc8>)
 8000f0a:	f7ff ff45 	bl	8000d98 <assert_failed>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) p_acc_gyro_raw_data,
				acc_gyro_raw_data_size) == HAL_OK);

		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc HAL_I2C_Mem_Read_DMA scheduled");
 8000f0e:	481f      	ldr	r0, [pc, #124]	; (8000f8c <run_pending_dma+0xe4>)
 8000f10:	f00e f9e8 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>

		in_process_dma = DMA_ACC_GYRO;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <run_pending_dma+0xcc>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	701a      	strb	r2, [r3, #0]
		req_gyro_acc = GP_FALSE;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <run_pending_dma+0xd4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e01f      	b.n	8000f62 <run_pending_dma+0xba>

	// Else check for mag request
	} else if (req_mag) {
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <run_pending_dma+0xe8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01a      	beq.n	8000f62 <run_pending_dma+0xba>
		assert_param(HAL_I2C_Mem_Read_DMA(&hi2c1, LSM303AGR_I2C_ADD_MG,
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <run_pending_dma+0xec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2206      	movs	r2, #6
 8000f32:	9201      	str	r2, [sp, #4]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	2268      	movs	r2, #104	; 0x68
 8000f3a:	213d      	movs	r1, #61	; 0x3d
 8000f3c:	4812      	ldr	r0, [pc, #72]	; (8000f88 <run_pending_dma+0xe0>)
 8000f3e:	f004 fa85 	bl	800544c <HAL_I2C_Mem_Read_DMA>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <run_pending_dma+0xa8>
 8000f48:	216b      	movs	r1, #107	; 0x6b
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <run_pending_dma+0xc8>)
 8000f4c:	f7ff ff24 	bl	8000d98 <assert_failed>
				LSM303AGR_OUTX_L_REG_M, I2C_MEMADD_SIZE_8BIT,
				(uint8_t*) p_mag_raw_data, sizeof(LSM303AGR_AxesRaw_t)) == HAL_OK);

		SEGGER_SYSVIEW_PrintfHost("req_mag HAL_I2C_Mem_Read_DMA scheduled");
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <run_pending_dma+0xf0>)
 8000f52:	f00e f9c7 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>

		in_process_dma = DMA_MAG;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <run_pending_dma+0xcc>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
		req_mag = GP_FALSE;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <run_pending_dma+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	}

	lock_update = GP_FALSE;
 8000f62:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <run_pending_dma+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200008b5 	.word	0x200008b5
 8000f70:	0800f934 	.word	0x0800f934
 8000f74:	200008b2 	.word	0x200008b2
 8000f78:	0800f950 	.word	0x0800f950
 8000f7c:	200008b4 	.word	0x200008b4
 8000f80:	200009a8 	.word	0x200009a8
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000a14 	.word	0x20000a14
 8000f8c:	0800f968 	.word	0x0800f968
 8000f90:	200008b3 	.word	0x200008b3
 8000f94:	200009bc 	.word	0x200009bc
 8000f98:	0800f994 	.word	0x0800f994

08000f9c <SensorBus1_DMA_CallBack>:


void SensorBus1_DMA_CallBack(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0


	// Handle data ready from last dma request
	switch (in_process_dma) {
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <SensorBus1_DMA_CallBack+0x78>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d015      	beq.n	8000fd6 <SensorBus1_DMA_CallBack+0x3a>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d127      	bne.n	8000ffe <SensorBus1_DMA_CallBack+0x62>

	case DMA_ACC_GYRO:
		// Acc Gyro call back with current raw data
		pAccGyroCallback(p_acc_gyro_raw_data, GYRO_ACC_TOTAL_SAMPLES);
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <SensorBus1_DMA_CallBack+0x7c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <SensorBus1_DMA_CallBack+0x80>)
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	2114      	movs	r1, #20
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4798      	blx	r3

		// Swap raw data storage
		if (p_acc_gyro_raw_data == (LSM6DSL_AxesRaw_t *)&acc_gyro_raw_data1) {
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <SensorBus1_DMA_CallBack+0x80>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <SensorBus1_DMA_CallBack+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d103      	bne.n	8000fce <SensorBus1_DMA_CallBack+0x32>
			p_acc_gyro_raw_data = (LSM6DSL_AxesRaw_t *)&acc_gyro_raw_data2;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <SensorBus1_DMA_CallBack+0x80>)
 8000fc8:	4a16      	ldr	r2, [pc, #88]	; (8001024 <SensorBus1_DMA_CallBack+0x88>)
 8000fca:	601a      	str	r2, [r3, #0]
		} else {
			p_acc_gyro_raw_data = (LSM6DSL_AxesRaw_t *)&acc_gyro_raw_data1;
		}

		break;
 8000fcc:	e01b      	b.n	8001006 <SensorBus1_DMA_CallBack+0x6a>
			p_acc_gyro_raw_data = (LSM6DSL_AxesRaw_t *)&acc_gyro_raw_data1;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <SensorBus1_DMA_CallBack+0x80>)
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <SensorBus1_DMA_CallBack+0x84>)
 8000fd2:	601a      	str	r2, [r3, #0]
		break;
 8000fd4:	e017      	b.n	8001006 <SensorBus1_DMA_CallBack+0x6a>

	case DMA_MAG:
		// Mag call back with current raw data
		pMagCallback(p_mag_raw_data, 1);
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <SensorBus1_DMA_CallBack+0x8c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <SensorBus1_DMA_CallBack+0x90>)
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4798      	blx	r3

		// Swap raw data storage
		if (p_mag_raw_data == &mag_raw_data1) {
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <SensorBus1_DMA_CallBack+0x90>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a11      	ldr	r2, [pc, #68]	; (8001030 <SensorBus1_DMA_CallBack+0x94>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d103      	bne.n	8000ff6 <SensorBus1_DMA_CallBack+0x5a>
			p_mag_raw_data = &mag_raw_data2;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <SensorBus1_DMA_CallBack+0x90>)
 8000ff0:	4a10      	ldr	r2, [pc, #64]	; (8001034 <SensorBus1_DMA_CallBack+0x98>)
 8000ff2:	601a      	str	r2, [r3, #0]
		} else {
			p_mag_raw_data = &mag_raw_data1;
		}

		break;
 8000ff4:	e007      	b.n	8001006 <SensorBus1_DMA_CallBack+0x6a>
			p_mag_raw_data = &mag_raw_data1;
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <SensorBus1_DMA_CallBack+0x90>)
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <SensorBus1_DMA_CallBack+0x94>)
 8000ffa:	601a      	str	r2, [r3, #0]
		break;
 8000ffc:	e003      	b.n	8001006 <SensorBus1_DMA_CallBack+0x6a>

	default:
		SEGGER_SYSVIEW_PrintfHost("in_process_dma Error");
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <SensorBus1_DMA_CallBack+0x9c>)
 8001000:	f00e f970 	bl	800f2e4 <SEGGER_SYSVIEW_PrintfHost>
		assert_param(!HAL_OK);
		break;
 8001004:	bf00      	nop
	}

	in_process_dma = DMA_RDY; // Indicate ready for more
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <SensorBus1_DMA_CallBack+0x78>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]

	// Schedule next pending
	run_pending_dma();
 800100c:	f7ff ff4c 	bl	8000ea8 <run_pending_dma>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200008b2 	.word	0x200008b2
 8001018:	200009c0 	.word	0x200009c0
 800101c:	200009a8 	.word	0x200009a8
 8001020:	200008b8 	.word	0x200008b8
 8001024:	20000930 	.word	0x20000930
 8001028:	200009c4 	.word	0x200009c4
 800102c:	200009bc 	.word	0x200009bc
 8001030:	200009ac 	.word	0x200009ac
 8001034:	200009b4 	.word	0x200009b4
 8001038:	0800f9bc 	.word	0x0800f9bc

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_MspInit+0x4c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x4c>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f001 ff43 	bl	8002f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <HAL_ETH_MspInit+0x158>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f040 8096 	bne.w	80011dc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a3a      	ldr	r2, [pc, #232]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a34      	ldr	r2, [pc, #208]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 8001146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_ETH_MspInit+0x15c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001158:	2332      	movs	r3, #50	; 0x32
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	481e      	ldr	r0, [pc, #120]	; (80011ec <HAL_ETH_MspInit+0x160>)
 8001174:	f003 f876 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001178:	2386      	movs	r3, #134	; 0x86
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001188:	230b      	movs	r3, #11
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <HAL_ETH_MspInit+0x164>)
 8001194:	f003 f866 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <HAL_ETH_MspInit+0x168>)
 80011b6:	f003 f855 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011cc:	230b      	movs	r3, #11
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <HAL_ETH_MspInit+0x16c>)
 80011d8:	f003 f844 	bl	8004264 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40028000 	.word	0x40028000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40021800 	.word	0x40021800

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ae      	sub	sp, #184	; 0xb8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2290      	movs	r2, #144	; 0x90
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00e fa65 	bl	800f6ec <memset>
  if(huart->Instance==USART3)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_UART_MspInit+0xb4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d13c      	bne.n	80012a6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001232:	2300      	movs	r3, #0
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4618      	mov	r0, r3
 800123c:	f007 f89e 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001246:	f7ff fda1 	bl	8000d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_UART_MspInit+0xb8>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_UART_MspInit+0xb8>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_UART_MspInit+0xb8>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_UART_MspInit+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_UART_MspInit+0xb8>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_UART_MspInit+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001294:	2307      	movs	r3, #7
 8001296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_UART_MspInit+0xbc>)
 80012a2:	f002 ffdf 	bl	8004264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	37b8      	adds	r7, #184	; 0xb8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004800 	.word	0x40004800
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020c00 	.word	0x40020c00

080012bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ae      	sub	sp, #184	; 0xb8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2290      	movs	r2, #144	; 0x90
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f00e fa05 	bl	800f6ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ea:	d159      	bne.n	80013a0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f007 f83d 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001308:	f7ff fd40 	bl	8000d8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001324:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800133e:	230a      	movs	r3, #10
 8001340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <HAL_PCD_MspInit+0xf0>)
 800134c:	f002 ff8a 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <HAL_PCD_MspInit+0xf0>)
 800136c:	f002 ff7a 	bl	8004264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 8001372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 8001376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137a:	6353      	str	r3, [r2, #52]	; 0x34
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6453      	str	r3, [r2, #68]	; 0x44
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_PCD_MspInit+0xec>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	37b8      	adds	r7, #184	; 0xb8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_InitTick+0xe0>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_InitTick+0xe0>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_InitTick+0xe0>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 ff98 	bl	8008318 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f2:	f006 ff69 	bl	80082c8 <HAL_RCC_GetPCLK1Freq>
 80013f6:	6378      	str	r0, [r7, #52]	; 0x34
 80013f8:	e004      	b.n	8001404 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fa:	f006 ff65 	bl	80082c8 <HAL_RCC_GetPCLK1Freq>
 80013fe:	4603      	mov	r3, r0
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001406:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_InitTick+0xe4>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	3b01      	subs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_InitTick+0xe8>)
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_InitTick+0xec>)
 8001416:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_InitTick+0xe8>)
 800141a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800141e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_InitTick+0xe8>)
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_InitTick+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_InitTick+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_InitTick+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001438:	4817      	ldr	r0, [pc, #92]	; (8001498 <HAL_InitTick+0xe8>)
 800143a:	f008 f809 	bl	8009450 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001444:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11b      	bne.n	8001484 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <HAL_InitTick+0xe8>)
 800144e:	f008 f929 	bl	80096a4 <HAL_TIM_Base_Start_IT>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f001 fd7b 	bl	8002f5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d808      	bhi.n	800147e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f001 fd47 	bl	8002f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_InitTick+0xf0>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e002      	b.n	8001484 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001488:	4618      	mov	r0, r3
 800148a:	3738      	adds	r7, #56	; 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	431bde83 	.word	0x431bde83
 8001498:	200009c8 	.word	0x200009c8
 800149c:	40000c00 	.word	0x40000c00
 80014a0:	20000008 	.word	0x20000008

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MagDataRdy_Pin);
 80014d4:	2008      	movs	r0, #8
 80014d6:	f003 fbcf 	bl	8004c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Stream0_IRQHandler+0x10>)
 80014e6:	f002 f913 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000a6c 	.word	0x20000a6c

080014f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA1_Stream6_IRQHandler+0x10>)
 80014fa:	f002 f909 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000acc 	.word	0x20000acc

08001508 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <I2C1_EV_IRQHandler+0x10>)
 800150e:	f004 f88f 	bl	8005630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000a14 	.word	0x20000a14

0800151c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <I2C1_ER_IRQHandler+0x10>)
 8001522:	f004 f89f 	bl	8005664 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000a14 	.word	0x20000a14

08001530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lms6dsl_Int1_Pin);
 8001534:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001538:	f003 fb9e 	bl	8004c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM5_IRQHandler+0x10>)
 8001546:	f008 f97b 	bl	8009840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200009c8 	.word	0x200009c8

08001554 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <BSP_I2C1_Init+0x70>)
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <BSP_I2C1_Init+0x74>)
 8001562:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <BSP_I2C1_Init+0x78>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4918      	ldr	r1, [pc, #96]	; (80015cc <BSP_I2C1_Init+0x78>)
 800156c:	600a      	str	r2, [r1, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d122      	bne.n	80015b8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <BSP_I2C1_Init+0x70>)
 8001574:	f004 f935 	bl	80057e2 <HAL_I2C_GetState>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11c      	bne.n	80015b8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <BSP_I2C1_Init+0x70>)
 8001580:	f000 f8fe 	bl	8001780 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <BSP_I2C1_Init+0x70>)
 800158c:	f000 f8b4 	bl	80016f8 <MX_I2C1_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001596:	f06f 0307 	mvn.w	r3, #7
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	e00c      	b.n	80015b8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <BSP_I2C1_Init+0x70>)
 80015a2:	f005 fdc3 	bl	800712c <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80015ac:	f06f 0307 	mvn.w	r3, #7
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e001      	b.n	80015b8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000a14 	.word	0x20000a14
 80015c8:	40005400 	.word	0x40005400
 80015cc:	20000a68 	.word	0x20000a68

080015d0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <BSP_I2C1_DeInit+0x48>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d014      	beq.n	800160c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <BSP_I2C1_DeInit+0x48>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <BSP_I2C1_DeInit+0x48>)
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <BSP_I2C1_DeInit+0x48>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10b      	bne.n	800160c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <BSP_I2C1_DeInit+0x4c>)
 80015f6:	f000 f991 	bl	800191c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80015fa:	4808      	ldr	r0, [pc, #32]	; (800161c <BSP_I2C1_DeInit+0x4c>)
 80015fc:	f003 fc76 	bl	8004eec <HAL_I2C_DeInit>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001606:	f06f 0307 	mvn.w	r3, #7
 800160a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000a68 	.word	0x20000a68
 800161c:	20000a14 	.word	0x20000a14

08001620 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af04      	add	r7, sp, #16
 8001626:	60ba      	str	r2, [r7, #8]
 8001628:	461a      	mov	r2, r3
 800162a:	4603      	mov	r3, r0
 800162c:	81fb      	strh	r3, [r7, #14]
 800162e:	460b      	mov	r3, r1
 8001630:	81bb      	strh	r3, [r7, #12]
 8001632:	4613      	mov	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800163a:	89ba      	ldrh	r2, [r7, #12]
 800163c:	89f9      	ldrh	r1, [r7, #14]
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <BSP_I2C1_WriteReg+0x60>)
 8001650:	f003 fcb2 	bl	8004fb8 <HAL_I2C_Mem_Write>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <BSP_I2C1_WriteReg+0x60>)
 800165c:	f004 f8cf 	bl	80057fe <HAL_I2C_GetError>
 8001660:	4603      	mov	r3, r0
 8001662:	2b04      	cmp	r3, #4
 8001664:	d103      	bne.n	800166e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001666:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e002      	b.n	8001674 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800166e:	f06f 0303 	mvn.w	r3, #3
 8001672:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001674:	697b      	ldr	r3, [r7, #20]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000a14 	.word	0x20000a14

08001684 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af04      	add	r7, sp, #16
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	461a      	mov	r2, r3
 800168e:	4603      	mov	r3, r0
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	460b      	mov	r3, r1
 8001694:	81bb      	strh	r3, [r7, #12]
 8001696:	4613      	mov	r3, r2
 8001698:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800169e:	89ba      	ldrh	r2, [r7, #12]
 80016a0:	89f9      	ldrh	r1, [r7, #14]
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <BSP_I2C1_ReadReg+0x60>)
 80016b4:	f003 fda2 	bl	80051fc <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <BSP_I2C1_ReadReg+0x60>)
 80016c0:	f004 f89d 	bl	80057fe <HAL_I2C_GetError>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d103      	bne.n	80016d2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016ca:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e002      	b.n	80016d8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016d2:	f06f 0303 	mvn.w	r3, #3
 80016d6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80016d8:	697b      	ldr	r3, [r7, #20]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000a14 	.word	0x20000a14

080016e8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016ec:	f001 fae8 	bl	8002cc0 <HAL_GetTick>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <MX_I2C1_Init+0x80>)
 8001708:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <MX_I2C1_Init+0x84>)
 800170e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f003 fab4 	bl	8004ca8 <HAL_I2C_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174a:	2100      	movs	r1, #0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f005 fced 	bl	800712c <HAL_I2CEx_ConfigAnalogFilter>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f005 fd5a 	bl	8007218 <HAL_I2CEx_ConfigDigitalFilter>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005400 	.word	0x40005400
 800177c:	2010091a 	.word	0x2010091a

08001780 <I2C1_MspInit>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ae      	sub	sp, #184	; 0xb8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2290      	movs	r2, #144	; 0x90
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00d ffab 	bl	800f6ec <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800179c:	2300      	movs	r3, #0
 800179e:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 fde9 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <I2C1_MspInit+0x184>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a55      	ldr	r2, [pc, #340]	; (8001904 <I2C1_MspInit+0x184>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b53      	ldr	r3, [pc, #332]	; (8001904 <I2C1_MspInit+0x184>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ca:	2312      	movs	r3, #18
 80017cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80017dc:	2304      	movs	r3, #4
 80017de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80017e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4847      	ldr	r0, [pc, #284]	; (8001908 <I2C1_MspInit+0x188>)
 80017ea:	f002 fd3b 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80017ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001808:	2304      	movs	r3, #4
 800180a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800180e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001812:	4619      	mov	r1, r3
 8001814:	483c      	ldr	r0, [pc, #240]	; (8001908 <I2C1_MspInit+0x188>)
 8001816:	f002 fd25 	bl	8004264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <I2C1_MspInit+0x184>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a39      	ldr	r2, [pc, #228]	; (8001904 <I2C1_MspInit+0x184>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <I2C1_MspInit+0x184>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral DMA init*/

    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <I2C1_MspInit+0x18c>)
 8001834:	4a36      	ldr	r2, [pc, #216]	; (8001910 <I2C1_MspInit+0x190>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <I2C1_MspInit+0x18c>)
 800183a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <I2C1_MspInit+0x18c>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <I2C1_MspInit+0x18c>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <I2C1_MspInit+0x18c>)
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <I2C1_MspInit+0x18c>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <I2C1_MspInit+0x18c>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <I2C1_MspInit+0x18c>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <I2C1_MspInit+0x18c>)
 8001868:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800186c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <I2C1_MspInit+0x18c>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_i2c1_rx);
 8001874:	4825      	ldr	r0, [pc, #148]	; (800190c <I2C1_MspInit+0x18c>)
 8001876:	f001 fba1 	bl	8002fbc <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <I2C1_MspInit+0x18c>)
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <I2C1_MspInit+0x18c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38

    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <I2C1_MspInit+0x194>)
 8001888:	4a23      	ldr	r2, [pc, #140]	; (8001918 <I2C1_MspInit+0x198>)
 800188a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <I2C1_MspInit+0x194>)
 800188e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001892:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <I2C1_MspInit+0x194>)
 8001896:	2240      	movs	r2, #64	; 0x40
 8001898:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <I2C1_MspInit+0x194>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <I2C1_MspInit+0x194>)
 80018a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <I2C1_MspInit+0x194>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <I2C1_MspInit+0x194>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <I2C1_MspInit+0x194>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <I2C1_MspInit+0x194>)
 80018bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <I2C1_MspInit+0x194>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_i2c1_tx);
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <I2C1_MspInit+0x194>)
 80018ca:	f001 fb77 	bl	8002fbc <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <I2C1_MspInit+0x194>)
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <I2C1_MspInit+0x194>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2105      	movs	r1, #5
 80018de:	201f      	movs	r0, #31
 80018e0:	f001 fb10 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018e4:	201f      	movs	r0, #31
 80018e6:	f001 fb39 	bl	8002f5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2105      	movs	r1, #5
 80018ee:	2020      	movs	r0, #32
 80018f0:	f001 fb08 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018f4:	2020      	movs	r0, #32
 80018f6:	f001 fb31 	bl	8002f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	37b8      	adds	r7, #184	; 0xb8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	20000a6c 	.word	0x20000a6c
 8001910:	40026010 	.word	0x40026010
 8001914:	20000acc 	.word	0x20000acc
 8001918:	400260a0 	.word	0x400260a0

0800191c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <I2C1_MspDeInit+0x50>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a10      	ldr	r2, [pc, #64]	; (800196c <I2C1_MspDeInit+0x50>)
 800192a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001934:	480e      	ldr	r0, [pc, #56]	; (8001970 <I2C1_MspDeInit+0x54>)
 8001936:	f003 f815 	bl	8004964 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800193a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <I2C1_MspDeInit+0x54>)
 8001940:	f003 f810 	bl	8004964 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fd7b 	bl	8003444 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fd76 	bl	8003444 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001958:	201f      	movs	r0, #31
 800195a:	f001 fb17 	bl	8002f8c <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800195e:	2020      	movs	r0, #32
 8001960:	f001 fb14 	bl	8002f8c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd7 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f00d fe4d 	bl	800f664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7fe ff51 	bl	8000870 <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019dc:	0800fdb4 	.word	0x0800fdb4
  ldr r2, =_sbss
 80019e0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80019e4:	20005fb8 	.word	0x20005fb8

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e04b      	b.n	8001aa0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	7b1a      	ldrb	r2, [r3, #12]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8001a44:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8001a4a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e01e      	b.n	8001aa0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4798      	blx	r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e014      	b.n	8001aa0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d010      	beq.n	8001aa0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	331c      	adds	r3, #28
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fa0a 	bl	8001ea8 <lsm303agr_mag_i2c_interface_set>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e000      	b.n	8001aa2 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	08001b9b 	.word	0x08001b9b
 8001ab0:	08001bfd 	.word	0x08001bfd

08001ab4 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	331c      	adds	r3, #28
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f947 	bl	8001d56 <lsm303agr_mag_block_data_update_set>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e028      	b.n	8001b26 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	331c      	adds	r3, #28
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f8ef 	bl	8001cbe <lsm303agr_mag_operating_mode_set>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e01c      	b.n	8001b26 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	331c      	adds	r3, #28
 8001af0:	2103      	movs	r1, #3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f909 	bl	8001d0a <lsm303agr_mag_data_rate_set>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e010      	b.n	8001b26 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	331c      	adds	r3, #28
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f980 	bl	8001e10 <lsm303agr_mag_self_test_set>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e004      	b.n	8001b26 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	331c      	adds	r3, #28
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f92f 	bl	8001da2 <lsm303agr_mag_device_id_get>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e000      	b.n	8001b52 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e010      	b.n	8001b92 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	331c      	adds	r3, #28
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f8a1 	bl	8001cbe <lsm303agr_mag_operating_mode_set>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e004      	b.n	8001b92 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b9a:	b590      	push	{r4, r7, lr}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	72fb      	strb	r3, [r7, #11]
 8001baa:	4613      	mov	r3, r2
 8001bac:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	695c      	ldr	r4, [r3, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	b298      	uxth	r0, r3
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	b299      	uxth	r1, r3
 8001bce:	893b      	ldrh	r3, [r7, #8]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	47a0      	blx	r4
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	e00d      	b.n	8001bf4 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	695c      	ldr	r4, [r3, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	b298      	uxth	r0, r3
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	b299      	uxth	r1, r3
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	47a0      	blx	r4
 8001bf2:	4603      	mov	r3, r0
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}

08001bfc <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	72fb      	strb	r3, [r7, #11]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10e      	bne.n	8001c3a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	691c      	ldr	r4, [r3, #16]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
 8001c24:	b298      	uxth	r0, r3
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	893b      	ldrh	r3, [r7, #8]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	47a0      	blx	r4
 8001c36:	4603      	mov	r3, r0
 8001c38:	e00d      	b.n	8001c56 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	691c      	ldr	r4, [r3, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	7b1b      	ldrb	r3, [r3, #12]
 8001c42:	b298      	uxth	r0, r3
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	b299      	uxth	r1, r3
 8001c4e:	893b      	ldrh	r3, [r7, #8]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	47a0      	blx	r4
 8001c54:	4603      	mov	r3, r0
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b087      	sub	sp, #28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	72fb      	strb	r3, [r7, #11]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685c      	ldr	r4, [r3, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6898      	ldr	r0, [r3, #8]
 8001c7a:	893b      	ldrh	r3, [r7, #8]
 8001c7c:	7af9      	ldrb	r1, [r7, #11]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	47a0      	blx	r4
 8001c82:	6178      	str	r0, [r7, #20]

  return ret;
 8001c84:	697b      	ldr	r3, [r7, #20]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}

08001c8e <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001c8e:	b590      	push	{r4, r7, lr}
 8001c90:	b087      	sub	sp, #28
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	72fb      	strb	r3, [r7, #11]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681c      	ldr	r4, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6898      	ldr	r0, [r3, #8]
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	7af9      	ldrb	r1, [r7, #11]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	47a0      	blx	r4
 8001cb2:	6178      	str	r0, [r7, #20]

  return ret;
 8001cb4:	697b      	ldr	r3, [r7, #20]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}

08001cbe <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2160      	movs	r1, #96	; 0x60
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffc3 	bl	8001c5e <lsm303agr_read_reg>
 8001cd8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10f      	bne.n	8001d00 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	7a3b      	ldrb	r3, [r7, #8]
 8001cea:	f362 0301 	bfi	r3, r2, #0, #2
 8001cee:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001cf0:	f107 0208 	add.w	r2, r7, #8
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	2160      	movs	r1, #96	; 0x60
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ffc8 	bl	8001c8e <lsm303agr_write_reg>
 8001cfe:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001d16:	f107 0208 	add.w	r2, r7, #8
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	2160      	movs	r1, #96	; 0x60
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff9d 	bl	8001c5e <lsm303agr_read_reg>
 8001d24:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	7a3b      	ldrb	r3, [r7, #8]
 8001d36:	f362 0383 	bfi	r3, r2, #2, #2
 8001d3a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001d3c:	f107 0208 	add.w	r2, r7, #8
 8001d40:	2301      	movs	r3, #1
 8001d42:	2160      	movs	r1, #96	; 0x60
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffa2 	bl	8001c8e <lsm303agr_write_reg>
 8001d4a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001d62:	f107 0208 	add.w	r2, r7, #8
 8001d66:	2301      	movs	r3, #1
 8001d68:	2162      	movs	r1, #98	; 0x62
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff77 	bl	8001c5e <lsm303agr_read_reg>
 8001d70:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	7a3b      	ldrb	r3, [r7, #8]
 8001d82:	f362 1304 	bfi	r3, r2, #4, #1
 8001d86:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001d88:	f107 0208 	add.w	r2, r7, #8
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2162      	movs	r1, #98	; 0x62
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff7c 	bl	8001c8e <lsm303agr_write_reg>
 8001d96:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8001dac:	2301      	movs	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	214f      	movs	r1, #79	; 0x4f
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff53 	bl	8001c5e <lsm303agr_read_reg>
 8001db8:	60f8      	str	r0, [r7, #12]

  return ret;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <lsm303agr_mag_boot_set>:
  * @param  val    Change the values of reboot in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001dd0:	f107 0208 	add.w	r2, r7, #8
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	2160      	movs	r1, #96	; 0x60
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff40 	bl	8001c5e <lsm303agr_read_reg>
 8001dde:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <lsm303agr_mag_boot_set+0x42>
  {
    cfg_reg_a_m.reboot = (uint8_t)val;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	7a3b      	ldrb	r3, [r7, #8]
 8001df0:	f362 1386 	bfi	r3, r2, #6, #1
 8001df4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001df6:	f107 0208 	add.w	r2, r7, #8
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	2160      	movs	r1, #96	; 0x60
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff45 	bl	8001c8e <lsm303agr_write_reg>
 8001e04:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001e1c:	f107 0208 	add.w	r2, r7, #8
 8001e20:	2301      	movs	r3, #1
 8001e22:	2162      	movs	r1, #98	; 0x62
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff1a 	bl	8001c5e <lsm303agr_read_reg>
 8001e2a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	7a3b      	ldrb	r3, [r7, #8]
 8001e3c:	f362 0341 	bfi	r3, r2, #1, #1
 8001e40:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001e42:	f107 0208 	add.w	r2, r7, #8
 8001e46:	2301      	movs	r3, #1
 8001e48:	2162      	movs	r1, #98	; 0x62
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff1f 	bl	8001c8e <lsm303agr_write_reg>
 8001e50:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <lsm303agr_mag_drdy_on_pin_set>:
  * @param  val    Change the values of drdy_on_pin in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_drdy_on_pin_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001e68:	f107 0208 	add.w	r2, r7, #8
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	2162      	movs	r1, #98	; 0x62
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff fef4 	bl	8001c5e <lsm303agr_read_reg>
 8001e76:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <lsm303agr_mag_drdy_on_pin_set+0x42>
  {
    cfg_reg_c_m.int_mag = (uint8_t)val;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	7a3b      	ldrb	r3, [r7, #8]
 8001e88:	f362 0300 	bfi	r3, r2, #0, #1
 8001e8c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001e8e:	f107 0208 	add.w	r2, r7, #8
 8001e92:	2301      	movs	r3, #1
 8001e94:	2162      	movs	r1, #98	; 0x62
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fef9 	bl	8001c8e <lsm303agr_write_reg>
 8001e9c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001eb4:	f107 0208 	add.w	r2, r7, #8
 8001eb8:	2301      	movs	r3, #1
 8001eba:	2162      	movs	r1, #98	; 0x62
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fece 	bl	8001c5e <lsm303agr_read_reg>
 8001ec2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	7a3b      	ldrb	r3, [r7, #8]
 8001ed4:	f362 1345 	bfi	r3, r2, #5, #1
 8001ed8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001eda:	f107 0208 	add.w	r2, r7, #8
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2162      	movs	r1, #98	; 0x62
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fed3 	bl	8001c8e <lsm303agr_write_reg>
 8001ee8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e04d      	b.n	8001fac <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7b1a      	ldrb	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <LSM6DSL_RegisterBusIO+0xc4>)
 8001f4c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <LSM6DSL_RegisterBusIO+0xc8>)
 8001f52:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e020      	b.n	8001fac <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4798      	blx	r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e016      	b.n	8001fac <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d112      	bne.n	8001fac <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001f90:	230c      	movs	r3, #12
 8001f92:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	461a      	mov	r2, r3
 8001f98:	2112      	movs	r1, #18
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f935 	bl	800220a <LSM6DSL_Write_Reg>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08002383 	.word	0x08002383
 8001fbc:	080023b9 	.word	0x080023b9

08001fc0 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	331c      	adds	r3, #28
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fbfd 	bl	80027ce <lsm6dsl_auto_increment_set>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e054      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	331c      	adds	r3, #28
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fb94 	bl	8002714 <lsm6dsl_block_data_update_set>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e048      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fdf0 	bl	8002be4 <lsm6dsl_fifo_mode_set>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e03c      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2204      	movs	r2, #4
 8002014:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	331c      	adds	r3, #28
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fa3b 	bl	800249a <lsm6dsl_xl_data_rate_set>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e02c      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	331c      	adds	r3, #28
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fa09 	bl	800244e <lsm6dsl_xl_full_scale_set>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e020      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2204      	movs	r2, #4
 800204c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	331c      	adds	r3, #28
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fad4 	bl	8002604 <lsm6dsl_gy_data_rate_set>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e010      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	331c      	adds	r3, #28
 800206c:	2106      	movs	r1, #6
 800206e:	4618      	mov	r0, r3
 8002070:	f000 faa2 	bl	80025b8 <lsm6dsl_gy_full_scale_set>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e004      	b.n	800208a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	331c      	adds	r3, #28
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fb5c 	bl	8002760 <lsm6dsl_device_id_get>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e000      	b.n	80020b6 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e014      	b.n	80020fe <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 021c 	add.w	r2, r3, #28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f000 f9d9 	bl	800249a <lsm6dsl_xl_data_rate_set>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e004      	b.n	80020fe <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e01f      	b.n	800215c <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 021c 	add.w	r2, r3, #28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	332b      	adds	r3, #43	; 0x2b
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f000 f9dd 	bl	80024e8 <lsm6dsl_xl_data_rate_get>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	e010      	b.n	800215c <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	331c      	adds	r3, #28
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f9aa 	bl	800249a <lsm6dsl_xl_data_rate_set>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	e004      	b.n	800215c <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e014      	b.n	80021a4 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f103 021c 	add.w	r2, r3, #28
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f000 fa3b 	bl	8002604 <lsm6dsl_gy_data_rate_set>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	e004      	b.n	80021a4 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e01f      	b.n	8002202 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 021c 	add.w	r2, r3, #28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	332c      	adds	r3, #44	; 0x2c
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 fa3e 	bl	8002650 <lsm6dsl_gy_data_rate_get>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e010      	b.n	8002202 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	331c      	adds	r3, #28
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fa0c 	bl	8002604 <lsm6dsl_gy_data_rate_set>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e004      	b.n	8002202 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
 8002216:	4613      	mov	r3, r2
 8002218:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f103 001c 	add.w	r0, r3, #28
 8002220:	1cba      	adds	r2, r7, #2
 8002222:	78f9      	ldrb	r1, [r7, #3]
 8002224:	2301      	movs	r3, #1
 8002226:	f000 f8fa 	bl	800241e <lsm6dsl_write_reg>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
 8002234:	e000      	b.n	8002238 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <LSM6DSL_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	331c      	adds	r3, #28
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fc43 	bl	8002ae0 <lsm6dsl_fifo_watermark_set>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e000      	b.n	8002268 <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <LSM6DSL_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2b06      	cmp	r3, #6
 8002284:	bf8c      	ite	hi
 8002286:	2201      	movhi	r2, #1
 8002288:	2200      	movls	r2, #0
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	2a00      	cmp	r2, #0
 800228e:	d10b      	bne.n	80022a8 <LSM6DSL_FIFO_Set_Mode+0x38>
 8002290:	2201      	movs	r2, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ac:	60fb      	str	r3, [r7, #12]
      break;
 80022ae:	e000      	b.n	80022b2 <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 80022b0:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d101      	bne.n	80022be <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	e00d      	b.n	80022da <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	331c      	adds	r3, #28
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fc8c 	bl	8002be4 <lsm6dsl_fifo_mode_set>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e000      	b.n	80022da <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 80022d8:	68fb      	ldr	r3, [r7, #12]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <LSM6DSL_FIFO_ACC_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO accelero decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	d903      	bls.n	8002300 <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	60fb      	str	r3, [r7, #12]
      break;
 80022fe:	e000      	b.n	8002302 <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 8002300:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d101      	bne.n	800230e <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e00d      	b.n	800232a <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	331c      	adds	r3, #28
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fc18 	bl	8002b4c <lsm6dsl_fifo_xl_batch_set>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e000      	b.n	800232a <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <LSM6DSL_FIFO_GYRO_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO gyro decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	2b07      	cmp	r3, #7
 8002346:	d903      	bls.n	8002350 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	60fb      	str	r3, [r7, #12]
      break;
 800234e:	e000      	b.n	8002352 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 8002350:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d101      	bne.n	800235e <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	e00d      	b.n	800237a <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	331c      	adds	r3, #28
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fc16 	bl	8002b98 <lsm6dsl_fifo_gy_batch_set>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e000      	b.n	800237a <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002382:	b590      	push	{r4, r7, lr}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	461a      	mov	r2, r3
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
 8002392:	4613      	mov	r3, r2
 8002394:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	695c      	ldr	r4, [r3, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	7b1b      	ldrb	r3, [r3, #12]
 80023a2:	b298      	uxth	r0, r3
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	b299      	uxth	r1, r3
 80023a8:	893b      	ldrh	r3, [r7, #8]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	47a0      	blx	r4
 80023ae:	4603      	mov	r3, r0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	72fb      	strb	r3, [r7, #11]
 80023c8:	4613      	mov	r3, r2
 80023ca:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	691c      	ldr	r4, [r3, #16]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	b298      	uxth	r0, r3
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	b299      	uxth	r1, r3
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	47a0      	blx	r4
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}

080023ee <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b087      	sub	sp, #28
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	461a      	mov	r2, r3
 80023fa:	460b      	mov	r3, r1
 80023fc:	72fb      	strb	r3, [r7, #11]
 80023fe:	4613      	mov	r3, r2
 8002400:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685c      	ldr	r4, [r3, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6898      	ldr	r0, [r3, #8]
 800240a:	893b      	ldrh	r3, [r7, #8]
 800240c:	7af9      	ldrb	r1, [r7, #11]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	47a0      	blx	r4
 8002412:	6178      	str	r0, [r7, #20]

  return ret;
 8002414:	697b      	ldr	r3, [r7, #20]
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}

0800241e <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800241e:	b590      	push	{r4, r7, lr}
 8002420:	b087      	sub	sp, #28
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	461a      	mov	r2, r3
 800242a:	460b      	mov	r3, r1
 800242c:	72fb      	strb	r3, [r7, #11]
 800242e:	4613      	mov	r3, r2
 8002430:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681c      	ldr	r4, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6898      	ldr	r0, [r3, #8]
 800243a:	893b      	ldrh	r3, [r7, #8]
 800243c:	7af9      	ldrb	r1, [r7, #11]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	47a0      	blx	r4
 8002442:	6178      	str	r0, [r7, #20]

  return ret;
 8002444:	697b      	ldr	r3, [r7, #20]
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800245a:	f107 0208 	add.w	r2, r7, #8
 800245e:	2301      	movs	r3, #1
 8002460:	2110      	movs	r1, #16
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffc3 	bl	80023ee <lsm6dsl_read_reg>
 8002468:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	b2da      	uxtb	r2, r3
 8002478:	7a3b      	ldrb	r3, [r7, #8]
 800247a:	f362 0383 	bfi	r3, r2, #2, #2
 800247e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002480:	f107 0208 	add.w	r2, r7, #8
 8002484:	2301      	movs	r3, #1
 8002486:	2110      	movs	r1, #16
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffc8 	bl	800241e <lsm6dsl_write_reg>
 800248e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002490:	68fb      	ldr	r3, [r7, #12]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80024a6:	f107 0208 	add.w	r2, r7, #8
 80024aa:	2301      	movs	r3, #1
 80024ac:	2110      	movs	r1, #16
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff9d 	bl	80023ee <lsm6dsl_read_reg>
 80024b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	7a3b      	ldrb	r3, [r7, #8]
 80024c6:	f362 1307 	bfi	r3, r2, #4, #4
 80024ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80024cc:	f107 0208 	add.w	r2, r7, #8
 80024d0:	2301      	movs	r3, #1
 80024d2:	2110      	movs	r1, #16
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffa2 	bl	800241e <lsm6dsl_write_reg>
 80024da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024dc:	68fb      	ldr	r3, [r7, #12]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80024f2:	f107 0208 	add.w	r2, r7, #8
 80024f6:	2301      	movs	r3, #1
 80024f8:	2110      	movs	r1, #16
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff77 	bl	80023ee <lsm6dsl_read_reg>
 8002500:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 8002502:	7a3b      	ldrb	r3, [r7, #8]
 8002504:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b0b      	cmp	r3, #11
 800250c:	d84a      	bhi.n	80025a4 <lsm6dsl_xl_data_rate_get+0xbc>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <lsm6dsl_xl_data_rate_get+0x2c>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002545 	.word	0x08002545
 8002518:	0800254d 	.word	0x0800254d
 800251c:	08002555 	.word	0x08002555
 8002520:	0800255d 	.word	0x0800255d
 8002524:	08002565 	.word	0x08002565
 8002528:	0800256d 	.word	0x0800256d
 800252c:	08002575 	.word	0x08002575
 8002530:	0800257d 	.word	0x0800257d
 8002534:	08002585 	.word	0x08002585
 8002538:	0800258d 	.word	0x0800258d
 800253c:	08002595 	.word	0x08002595
 8002540:	0800259d 	.word	0x0800259d
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
      break;
 800254a:	e02f      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
      break;
 8002552:	e02b      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
      break;
 800255a:	e027      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2203      	movs	r2, #3
 8002560:	701a      	strb	r2, [r3, #0]
      break;
 8002562:	e023      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2204      	movs	r2, #4
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e01f      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2205      	movs	r2, #5
 8002570:	701a      	strb	r2, [r3, #0]
      break;
 8002572:	e01b      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2206      	movs	r2, #6
 8002578:	701a      	strb	r2, [r3, #0]
      break;
 800257a:	e017      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2207      	movs	r2, #7
 8002580:	701a      	strb	r2, [r3, #0]
      break;
 8002582:	e013      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2208      	movs	r2, #8
 8002588:	701a      	strb	r2, [r3, #0]
      break;
 800258a:	e00f      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2209      	movs	r2, #9
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	e00b      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	220a      	movs	r2, #10
 8002598:	701a      	strb	r2, [r3, #0]
      break;
 800259a:	e007      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	220b      	movs	r2, #11
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e003      	b.n	80025ac <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	220c      	movs	r2, #12
 80025a8:	701a      	strb	r2, [r3, #0]
      break;
 80025aa:	bf00      	nop
  }

  return ret;
 80025ac:	68fb      	ldr	r3, [r7, #12]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop

080025b8 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025c4:	f107 0208 	add.w	r2, r7, #8
 80025c8:	2301      	movs	r3, #1
 80025ca:	2111      	movs	r1, #17
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff0e 	bl	80023ee <lsm6dsl_read_reg>
 80025d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	7a3b      	ldrb	r3, [r7, #8]
 80025e4:	f362 0343 	bfi	r3, r2, #1, #3
 80025e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025ea:	f107 0208 	add.w	r2, r7, #8
 80025ee:	2301      	movs	r3, #1
 80025f0:	2111      	movs	r1, #17
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ff13 	bl	800241e <lsm6dsl_write_reg>
 80025f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002610:	f107 0208 	add.w	r2, r7, #8
 8002614:	2301      	movs	r3, #1
 8002616:	2111      	movs	r1, #17
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff fee8 	bl	80023ee <lsm6dsl_read_reg>
 800261e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	b2da      	uxtb	r2, r3
 800262e:	7a3b      	ldrb	r3, [r7, #8]
 8002630:	f362 1307 	bfi	r3, r2, #4, #4
 8002634:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002636:	f107 0208 	add.w	r2, r7, #8
 800263a:	2301      	movs	r3, #1
 800263c:	2111      	movs	r1, #17
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff feed 	bl	800241e <lsm6dsl_write_reg>
 8002644:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800265a:	f107 0208 	add.w	r2, r7, #8
 800265e:	2301      	movs	r3, #1
 8002660:	2111      	movs	r1, #17
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fec3 	bl	80023ee <lsm6dsl_read_reg>
 8002668:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 800266a:	7a3b      	ldrb	r3, [r7, #8]
 800266c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b0a      	cmp	r3, #10
 8002674:	d844      	bhi.n	8002700 <lsm6dsl_gy_data_rate_get+0xb0>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <lsm6dsl_gy_data_rate_get+0x2c>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026a9 	.word	0x080026a9
 8002680:	080026b1 	.word	0x080026b1
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080026c1 	.word	0x080026c1
 800268c:	080026c9 	.word	0x080026c9
 8002690:	080026d1 	.word	0x080026d1
 8002694:	080026d9 	.word	0x080026d9
 8002698:	080026e1 	.word	0x080026e1
 800269c:	080026e9 	.word	0x080026e9
 80026a0:	080026f1 	.word	0x080026f1
 80026a4:	080026f9 	.word	0x080026f9
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
      break;
 80026ae:	e02b      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
      break;
 80026b6:	e027      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	701a      	strb	r2, [r3, #0]
      break;
 80026be:	e023      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2203      	movs	r2, #3
 80026c4:	701a      	strb	r2, [r3, #0]
      break;
 80026c6:	e01f      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2204      	movs	r2, #4
 80026cc:	701a      	strb	r2, [r3, #0]
      break;
 80026ce:	e01b      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2205      	movs	r2, #5
 80026d4:	701a      	strb	r2, [r3, #0]
      break;
 80026d6:	e017      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2206      	movs	r2, #6
 80026dc:	701a      	strb	r2, [r3, #0]
      break;
 80026de:	e013      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2207      	movs	r2, #7
 80026e4:	701a      	strb	r2, [r3, #0]
      break;
 80026e6:	e00f      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2208      	movs	r2, #8
 80026ec:	701a      	strb	r2, [r3, #0]
      break;
 80026ee:	e00b      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2209      	movs	r2, #9
 80026f4:	701a      	strb	r2, [r3, #0]
      break;
 80026f6:	e007      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	220a      	movs	r2, #10
 80026fc:	701a      	strb	r2, [r3, #0]
      break;
 80026fe:	e003      	b.n	8002708 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	220b      	movs	r2, #11
 8002704:	701a      	strb	r2, [r3, #0]
      break;
 8002706:	bf00      	nop
  }

  return ret;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop

08002714 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002720:	f107 0208 	add.w	r2, r7, #8
 8002724:	2301      	movs	r3, #1
 8002726:	2112      	movs	r1, #18
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff fe60 	bl	80023ee <lsm6dsl_read_reg>
 800272e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	b2da      	uxtb	r2, r3
 800273e:	7a3b      	ldrb	r3, [r7, #8]
 8002740:	f362 1386 	bfi	r3, r2, #6, #1
 8002744:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002746:	f107 0208 	add.w	r2, r7, #8
 800274a:	2301      	movs	r3, #1
 800274c:	2112      	movs	r1, #18
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe65 	bl	800241e <lsm6dsl_write_reg>
 8002754:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800276a:	2301      	movs	r3, #1
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	210f      	movs	r1, #15
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fe3c 	bl	80023ee <lsm6dsl_read_reg>
 8002776:	60f8      	str	r0, [r7, #12]

  return ret;
 8002778:	68fb      	ldr	r3, [r7, #12]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800278e:	f107 0208 	add.w	r2, r7, #8
 8002792:	2301      	movs	r3, #1
 8002794:	2112      	movs	r1, #18
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fe29 	bl	80023ee <lsm6dsl_read_reg>
 800279c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10f      	bne.n	80027c4 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	7a3b      	ldrb	r3, [r7, #8]
 80027ae:	f362 0300 	bfi	r3, r2, #0, #1
 80027b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80027b4:	f107 0208 	add.w	r2, r7, #8
 80027b8:	2301      	movs	r3, #1
 80027ba:	2112      	movs	r1, #18
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fe2e 	bl	800241e <lsm6dsl_write_reg>
 80027c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80027da:	f107 0208 	add.w	r2, r7, #8
 80027de:	2301      	movs	r3, #1
 80027e0:	2112      	movs	r1, #18
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe03 	bl	80023ee <lsm6dsl_read_reg>
 80027e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	7a3b      	ldrb	r3, [r7, #8]
 80027fa:	f362 0382 	bfi	r3, r2, #2, #1
 80027fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002800:	f107 0208 	add.w	r2, r7, #8
 8002804:	2301      	movs	r3, #1
 8002806:	2112      	movs	r1, #18
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fe08 	bl	800241e <lsm6dsl_write_reg>
 800280e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08a      	sub	sp, #40	; 0x28
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002824:	f107 021c 	add.w	r2, r7, #28
 8002828:	2301      	movs	r3, #1
 800282a:	210d      	movs	r1, #13
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fdde 	bl	80023ee <lsm6dsl_read_reg>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d147      	bne.n	80028ca <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800283a:	783b      	ldrb	r3, [r7, #0]
 800283c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	7f3b      	ldrb	r3, [r7, #28]
 8002844:	f362 0300 	bfi	r3, r2, #0, #1
 8002848:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800284a:	783b      	ldrb	r3, [r7, #0]
 800284c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	7f3b      	ldrb	r3, [r7, #28]
 8002854:	f362 0341 	bfi	r3, r2, #1, #1
 8002858:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800285a:	783b      	ldrb	r3, [r7, #0]
 800285c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	7f3b      	ldrb	r3, [r7, #28]
 8002864:	f362 0382 	bfi	r3, r2, #2, #1
 8002868:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800286a:	783b      	ldrb	r3, [r7, #0]
 800286c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	7f3b      	ldrb	r3, [r7, #28]
 8002874:	f362 03c3 	bfi	r3, r2, #3, #1
 8002878:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800287a:	783b      	ldrb	r3, [r7, #0]
 800287c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	7f3b      	ldrb	r3, [r7, #28]
 8002884:	f362 1304 	bfi	r3, r2, #4, #1
 8002888:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800288a:	783b      	ldrb	r3, [r7, #0]
 800288c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	7f3b      	ldrb	r3, [r7, #28]
 8002894:	f362 1345 	bfi	r3, r2, #5, #1
 8002898:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800289a:	783b      	ldrb	r3, [r7, #0]
 800289c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	7f3b      	ldrb	r3, [r7, #28]
 80028a4:	f362 1386 	bfi	r3, r2, #6, #1
 80028a8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80028aa:	783b      	ldrb	r3, [r7, #0]
 80028ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	7f3b      	ldrb	r3, [r7, #28]
 80028b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80028b8:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80028ba:	f107 021c 	add.w	r2, r7, #28
 80028be:	2301      	movs	r3, #1
 80028c0:	210d      	movs	r1, #13
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fdab 	bl	800241e <lsm6dsl_write_reg>
 80028c8:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80028d0:	f107 0218 	add.w	r2, r7, #24
 80028d4:	2301      	movs	r3, #1
 80028d6:	215e      	movs	r1, #94	; 0x5e
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fd88 	bl	80023ee <lsm6dsl_read_reg>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80028e6:	f107 0214 	add.w	r2, r7, #20
 80028ea:	2301      	movs	r3, #1
 80028ec:	215f      	movs	r1, #95	; 0x5f
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fd7d 	bl	80023ee <lsm6dsl_read_reg>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d147      	bne.n	800298c <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	7e3b      	ldrb	r3, [r7, #24]
 8002906:	f362 0300 	bfi	r3, r2, #0, #1
 800290a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	7e3b      	ldrb	r3, [r7, #24]
 8002916:	f362 0341 	bfi	r3, r2, #1, #1
 800291a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	7e3b      	ldrb	r3, [r7, #24]
 8002926:	f362 0382 	bfi	r3, r2, #2, #1
 800292a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800292c:	787b      	ldrb	r3, [r7, #1]
 800292e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	7e3b      	ldrb	r3, [r7, #24]
 8002936:	f362 03c3 	bfi	r3, r2, #3, #1
 800293a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	7e3b      	ldrb	r3, [r7, #24]
 8002946:	f362 1304 	bfi	r3, r2, #4, #1
 800294a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	7e3b      	ldrb	r3, [r7, #24]
 8002956:	f362 1345 	bfi	r3, r2, #5, #1
 800295a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	7e3b      	ldrb	r3, [r7, #24]
 8002966:	f362 1386 	bfi	r3, r2, #6, #1
 800296a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	7e3b      	ldrb	r3, [r7, #24]
 8002976:	f362 13c7 	bfi	r3, r2, #7, #1
 800297a:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800297c:	f107 0218 	add.w	r2, r7, #24
 8002980:	2301      	movs	r3, #1
 8002982:	215e      	movs	r1, #94	; 0x5e
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fd4a 	bl	800241e <lsm6dsl_write_reg>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002992:	f107 0210 	add.w	r2, r7, #16
 8002996:	2301      	movs	r3, #1
 8002998:	2113      	movs	r1, #19
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fd27 	bl	80023ee <lsm6dsl_read_reg>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80029a8:	78bb      	ldrb	r3, [r7, #2]
 80029aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	7c3b      	ldrb	r3, [r7, #16]
 80029b2:	f362 1304 	bfi	r3, r2, #4, #1
 80029b6:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80029b8:	f107 0210 	add.w	r2, r7, #16
 80029bc:	2301      	movs	r3, #1
 80029be:	2113      	movs	r1, #19
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fd2c 	bl	800241e <lsm6dsl_write_reg>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80029ce:	f107 0220 	add.w	r2, r7, #32
 80029d2:	2301      	movs	r3, #1
 80029d4:	211a      	movs	r1, #26
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fd09 	bl	80023ee <lsm6dsl_read_reg>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 80029e4:	78bb      	ldrb	r3, [r7, #2]
 80029e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029f0:	f362 13c7 	bfi	r3, r2, #7, #1
 80029f4:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80029f8:	f107 0220 	add.w	r2, r7, #32
 80029fc:	2301      	movs	r3, #1
 80029fe:	211a      	movs	r1, #26
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fd0c 	bl	800241e <lsm6dsl_write_reg>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d158      	bne.n	8002ac0 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002a0e:	f107 020c 	add.w	r2, r7, #12
 8002a12:	2301      	movs	r3, #1
 8002a14:	2158      	movs	r1, #88	; 0x58
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fce9 	bl	80023ee <lsm6dsl_read_reg>
 8002a1c:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002a1e:	787b      	ldrb	r3, [r7, #1]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d141      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002a2a:	787b      	ldrb	r3, [r7, #1]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d13b      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002a36:	787b      	ldrb	r3, [r7, #1]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d135      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002a42:	787b      	ldrb	r3, [r7, #1]
 8002a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a48:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d12f      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002a4e:	787b      	ldrb	r3, [r7, #1]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d129      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002a5a:	787b      	ldrb	r3, [r7, #1]
 8002a5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a60:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d123      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002a66:	7d3b      	ldrb	r3, [r7, #20]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11d      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002a72:	7d3b      	ldrb	r3, [r7, #20]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d117      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002a7e:	7d3b      	ldrb	r3, [r7, #20]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d111      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002a8a:	7d3b      	ldrb	r3, [r7, #20]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002a96:	7d3b      	ldrb	r3, [r7, #20]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8002aa2:	7d3b      	ldrb	r3, [r7, #20]
 8002aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002aa8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002aae:	7b3b      	ldrb	r3, [r7, #12]
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	733b      	strb	r3, [r7, #12]
 8002ab6:	e003      	b.n	8002ac0 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002ab8:	7b3b      	ldrb	r3, [r7, #12]
 8002aba:	f36f 13c7 	bfc	r3, #7, #1
 8002abe:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002ac6:	f107 020c 	add.w	r2, r7, #12
 8002aca:	2301      	movs	r3, #1
 8002acc:	2158      	movs	r1, #88	; 0x58
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fca5 	bl	800241e <lsm6dsl_write_reg>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8002aec:	f107 020c 	add.w	r2, r7, #12
 8002af0:	2301      	movs	r3, #1
 8002af2:	2107      	movs	r1, #7
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fc7a 	bl	80023ee <lsm6dsl_read_reg>
 8002afa:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11f      	bne.n	8002b42 <lsm6dsl_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.fth = (uint8_t)(0x00FFU & val);
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t)((0x0700U & val) >> 8);
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	f362 0302 	bfi	r3, r2, #0, #3
 8002b1a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 8002b1c:	f107 0210 	add.w	r2, r7, #16
 8002b20:	2301      	movs	r3, #1
 8002b22:	2106      	movs	r1, #6
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fc7a 	bl	800241e <lsm6dsl_write_reg>
 8002b2a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <lsm6dsl_fifo_watermark_set+0x62>
    {
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8002b32:	f107 020c 	add.w	r2, r7, #12
 8002b36:	2301      	movs	r3, #1
 8002b38:	2107      	movs	r1, #7
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fc6f 	bl	800241e <lsm6dsl_write_reg>
 8002b40:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 8002b42:	697b      	ldr	r3, [r7, #20]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002b58:	f107 0208 	add.w	r2, r7, #8
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	2108      	movs	r1, #8
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fc44 	bl	80023ee <lsm6dsl_read_reg>
 8002b66:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <lsm6dsl_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	7a3b      	ldrb	r3, [r7, #8]
 8002b78:	f362 0302 	bfi	r3, r2, #0, #3
 8002b7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002b7e:	f107 0208 	add.w	r2, r7, #8
 8002b82:	2301      	movs	r3, #1
 8002b84:	2108      	movs	r1, #8
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fc49 	bl	800241e <lsm6dsl_write_reg>
 8002b8c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002ba4:	f107 0208 	add.w	r2, r7, #8
 8002ba8:	2301      	movs	r3, #1
 8002baa:	2108      	movs	r1, #8
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fc1e 	bl	80023ee <lsm6dsl_read_reg>
 8002bb2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <lsm6dsl_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	7a3b      	ldrb	r3, [r7, #8]
 8002bc4:	f362 03c5 	bfi	r3, r2, #3, #3
 8002bc8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002bca:	f107 0208 	add.w	r2, r7, #8
 8002bce:	2301      	movs	r3, #1
 8002bd0:	2108      	movs	r1, #8
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fc23 	bl	800241e <lsm6dsl_write_reg>
 8002bd8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002bf0:	f107 0208 	add.w	r2, r7, #8
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	210a      	movs	r1, #10
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fbf8 	bl	80023ee <lsm6dsl_read_reg>
 8002bfe:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	7a3b      	ldrb	r3, [r7, #8]
 8002c10:	f362 0302 	bfi	r3, r2, #0, #3
 8002c14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002c16:	f107 0208 	add.w	r2, r7, #8
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	210a      	movs	r1, #10
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fbfd 	bl	800241e <lsm6dsl_write_reg>
 8002c24:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002c3c:	f107 0208 	add.w	r2, r7, #8
 8002c40:	2301      	movs	r3, #1
 8002c42:	210a      	movs	r1, #10
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fbd2 	bl	80023ee <lsm6dsl_read_reg>
 8002c4a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <lsm6dsl_fifo_data_rate_set+0x42>
  {
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	7a3b      	ldrb	r3, [r7, #8]
 8002c5c:	f362 03c6 	bfi	r3, r2, #3, #4
 8002c60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002c62:	f107 0208 	add.w	r2, r7, #8
 8002c66:	2301      	movs	r3, #1
 8002c68:	210a      	movs	r1, #10
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fbd7 	bl	800241e <lsm6dsl_write_reg>
 8002c70:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 f91f 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	200f      	movs	r0, #15
 8002c88:	f7fe fb92 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7fe f9d6 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x20>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x24>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_IncTick+0x24>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	20000b2c 	.word	0x20000b2c

08002cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetTick+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000b2c 	.word	0x20000b2c

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff ffee 	bl	8002cc0 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000000c 	.word	0x2000000c

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <__NVIC_SetPriorityGrouping+0x40>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <__NVIC_SetPriorityGrouping+0x40>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60d3      	str	r3, [r2, #12]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00
 8002d64:	05fa0000 	.word	0x05fa0000

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db12      	blt.n	8002df8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	490a      	ldr	r1, [pc, #40]	; (8002e04 <__NVIC_DisableIRQ+0x44>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	3320      	adds	r3, #32
 8002de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dec:	f3bf 8f4f 	dsb	sy
}
 8002df0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002df2:	f3bf 8f6f 	isb	sy
}
 8002df6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100

08002e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	; (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	; (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
         );
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b07      	cmp	r3, #7
 8002ed0:	d00f      	beq.n	8002ef2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d009      	beq.n	8002ef2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d006      	beq.n	8002ef2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d003      	beq.n	8002ef2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eea:	2191      	movs	r1, #145	; 0x91
 8002eec:	4804      	ldr	r0, [pc, #16]	; (8002f00 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002eee:	f7fd ff53 	bl	8000d98 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff14 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	0800f9d4 	.word	0x0800f9d4

08002f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	d903      	bls.n	8002f24 <HAL_NVIC_SetPriority+0x20>
 8002f1c:	21a9      	movs	r1, #169	; 0xa9
 8002f1e:	480e      	ldr	r0, [pc, #56]	; (8002f58 <HAL_NVIC_SetPriority+0x54>)
 8002f20:	f7fd ff3a 	bl	8000d98 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	d903      	bls.n	8002f32 <HAL_NVIC_SetPriority+0x2e>
 8002f2a:	21aa      	movs	r1, #170	; 0xaa
 8002f2c:	480a      	ldr	r0, [pc, #40]	; (8002f58 <HAL_NVIC_SetPriority+0x54>)
 8002f2e:	f7fd ff33 	bl	8000d98 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f32:	f7ff ff19 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002f36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	6978      	ldr	r0, [r7, #20]
 8002f3e:	f7ff ff8d 	bl	8002e5c <NVIC_EncodePriority>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff5c 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	0800f9d4 	.word	0x0800f9d4

08002f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da03      	bge.n	8002f76 <HAL_NVIC_EnableIRQ+0x1a>
 8002f6e:	21bd      	movs	r1, #189	; 0xbd
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f72:	f7fd ff11 	bl	8000d98 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff02 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0800f9d4 	.word	0x0800f9d4

08002f8c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da03      	bge.n	8002fa6 <HAL_NVIC_DisableIRQ+0x1a>
 8002f9e:	21cd      	movs	r1, #205	; 0xcd
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <HAL_NVIC_DisableIRQ+0x2c>)
 8002fa2:	f7fd fef9 	bl	8000d98 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff08 	bl	8002dc0 <__NVIC_DisableIRQ>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	0800f9d4 	.word	0x0800f9d4

08002fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff fe7a 	bl	8002cc0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e22c      	b.n	8003432 <HAL_DMA_Init+0x476>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a82      	ldr	r2, [pc, #520]	; (80031e8 <HAL_DMA_Init+0x22c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d04e      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a81      	ldr	r2, [pc, #516]	; (80031ec <HAL_DMA_Init+0x230>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d049      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7f      	ldr	r2, [pc, #508]	; (80031f0 <HAL_DMA_Init+0x234>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d044      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7e      	ldr	r2, [pc, #504]	; (80031f4 <HAL_DMA_Init+0x238>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d03f      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a7c      	ldr	r2, [pc, #496]	; (80031f8 <HAL_DMA_Init+0x23c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d03a      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7b      	ldr	r2, [pc, #492]	; (80031fc <HAL_DMA_Init+0x240>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d035      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a79      	ldr	r2, [pc, #484]	; (8003200 <HAL_DMA_Init+0x244>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d030      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a78      	ldr	r2, [pc, #480]	; (8003204 <HAL_DMA_Init+0x248>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d02b      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a76      	ldr	r2, [pc, #472]	; (8003208 <HAL_DMA_Init+0x24c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d026      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a75      	ldr	r2, [pc, #468]	; (800320c <HAL_DMA_Init+0x250>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d021      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a73      	ldr	r2, [pc, #460]	; (8003210 <HAL_DMA_Init+0x254>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01c      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a72      	ldr	r2, [pc, #456]	; (8003214 <HAL_DMA_Init+0x258>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d017      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a70      	ldr	r2, [pc, #448]	; (8003218 <HAL_DMA_Init+0x25c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d012      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6f      	ldr	r2, [pc, #444]	; (800321c <HAL_DMA_Init+0x260>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6d      	ldr	r2, [pc, #436]	; (8003220 <HAL_DMA_Init+0x264>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d008      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6c      	ldr	r2, [pc, #432]	; (8003224 <HAL_DMA_Init+0x268>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003078:	21b8      	movs	r1, #184	; 0xb8
 800307a:	486b      	ldr	r0, [pc, #428]	; (8003228 <HAL_DMA_Init+0x26c>)
 800307c:	f7fd fe8c 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d04e      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003090:	d049      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309a:	d044      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80030a4:	d03f      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ae:	d03a      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80030b8:	d035      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030c2:	d030      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80030cc:	d02b      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d6:	d026      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f1b3 5f90 	cmp.w	r3, #301989888	; 0x12000000
 80030e0:	d021      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 80030ea:	d01c      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f1b3 5fb0 	cmp.w	r3, #369098752	; 0x16000000
 80030f4:	d017      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80030fe:	d012      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f1b3 5fd0 	cmp.w	r3, #436207616	; 0x1a000000
 8003108:	d00d      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f1b3 5ff0 	cmp.w	r3, #503316480	; 0x1e000000
 800311c:	d003      	beq.n	8003126 <HAL_DMA_Init+0x16a>
 800311e:	21b9      	movs	r1, #185	; 0xb9
 8003120:	4841      	ldr	r0, [pc, #260]	; (8003228 <HAL_DMA_Init+0x26c>)
 8003122:	f7fd fe39 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_DMA_Init+0x18a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d007      	beq.n	8003146 <HAL_DMA_Init+0x18a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d003      	beq.n	8003146 <HAL_DMA_Init+0x18a>
 800313e:	21ba      	movs	r1, #186	; 0xba
 8003140:	4839      	ldr	r0, [pc, #228]	; (8003228 <HAL_DMA_Init+0x26c>)
 8003142:	f7fd fe29 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314e:	d007      	beq.n	8003160 <HAL_DMA_Init+0x1a4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_DMA_Init+0x1a4>
 8003158:	21bb      	movs	r1, #187	; 0xbb
 800315a:	4833      	ldr	r0, [pc, #204]	; (8003228 <HAL_DMA_Init+0x26c>)
 800315c:	f7fd fe1c 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d007      	beq.n	800317a <HAL_DMA_Init+0x1be>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_DMA_Init+0x1be>
 8003172:	21bc      	movs	r1, #188	; 0xbc
 8003174:	482c      	ldr	r0, [pc, #176]	; (8003228 <HAL_DMA_Init+0x26c>)
 8003176:	f7fd fe0f 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_DMA_Init+0x1e2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318a:	d008      	beq.n	800319e <HAL_DMA_Init+0x1e2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d003      	beq.n	800319e <HAL_DMA_Init+0x1e2>
 8003196:	21bd      	movs	r1, #189	; 0xbd
 8003198:	4823      	ldr	r0, [pc, #140]	; (8003228 <HAL_DMA_Init+0x26c>)
 800319a:	f7fd fdfd 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	d008      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b8:	d003      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 80031ba:	21be      	movs	r1, #190	; 0xbe
 80031bc:	481a      	ldr	r0, [pc, #104]	; (8003228 <HAL_DMA_Init+0x26c>)
 80031be:	f7fd fdeb 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d030      	beq.n	800322c <HAL_DMA_Init+0x270>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	d02b      	beq.n	800322c <HAL_DMA_Init+0x270>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d027      	beq.n	800322c <HAL_DMA_Init+0x270>
 80031dc:	21bf      	movs	r1, #191	; 0xbf
 80031de:	4812      	ldr	r0, [pc, #72]	; (8003228 <HAL_DMA_Init+0x26c>)
 80031e0:	f7fd fdda 	bl	8000d98 <assert_failed>
 80031e4:	e022      	b.n	800322c <HAL_DMA_Init+0x270>
 80031e6:	bf00      	nop
 80031e8:	40026010 	.word	0x40026010
 80031ec:	40026028 	.word	0x40026028
 80031f0:	40026040 	.word	0x40026040
 80031f4:	40026058 	.word	0x40026058
 80031f8:	40026070 	.word	0x40026070
 80031fc:	40026088 	.word	0x40026088
 8003200:	400260a0 	.word	0x400260a0
 8003204:	400260b8 	.word	0x400260b8
 8003208:	40026410 	.word	0x40026410
 800320c:	40026428 	.word	0x40026428
 8003210:	40026440 	.word	0x40026440
 8003214:	40026458 	.word	0x40026458
 8003218:	40026470 	.word	0x40026470
 800321c:	40026488 	.word	0x40026488
 8003220:	400264a0 	.word	0x400264a0
 8003224:	400264b8 	.word	0x400264b8
 8003228:	0800fa10 	.word	0x0800fa10
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <HAL_DMA_Init+0x29e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d00d      	beq.n	800325a <HAL_DMA_Init+0x29e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003246:	d008      	beq.n	800325a <HAL_DMA_Init+0x29e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003250:	d003      	beq.n	800325a <HAL_DMA_Init+0x29e>
 8003252:	21c0      	movs	r1, #192	; 0xc0
 8003254:	4879      	ldr	r0, [pc, #484]	; (800343c <HAL_DMA_Init+0x480>)
 8003256:	f7fd fd9f 	bl	8000d98 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_DMA_Init+0x2b6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b04      	cmp	r3, #4
 8003268:	d003      	beq.n	8003272 <HAL_DMA_Init+0x2b6>
 800326a:	21c1      	movs	r1, #193	; 0xc1
 800326c:	4873      	ldr	r0, [pc, #460]	; (800343c <HAL_DMA_Init+0x480>)
 800326e:	f7fd fd93 	bl	8000d98 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	d041      	beq.n	80032fe <HAL_DMA_Init+0x342>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00f      	beq.n	80032a2 <HAL_DMA_Init+0x2e6>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	2b01      	cmp	r3, #1
 8003288:	d00b      	beq.n	80032a2 <HAL_DMA_Init+0x2e6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	2b02      	cmp	r3, #2
 8003290:	d007      	beq.n	80032a2 <HAL_DMA_Init+0x2e6>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	2b03      	cmp	r3, #3
 8003298:	d003      	beq.n	80032a2 <HAL_DMA_Init+0x2e6>
 800329a:	21c6      	movs	r1, #198	; 0xc6
 800329c:	4867      	ldr	r0, [pc, #412]	; (800343c <HAL_DMA_Init+0x480>)
 800329e:	f7fd fd7b 	bl	8000d98 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <HAL_DMA_Init+0x314>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b2:	d00d      	beq.n	80032d0 <HAL_DMA_Init+0x314>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032bc:	d008      	beq.n	80032d0 <HAL_DMA_Init+0x314>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_Init+0x314>
 80032c8:	21c7      	movs	r1, #199	; 0xc7
 80032ca:	485c      	ldr	r0, [pc, #368]	; (800343c <HAL_DMA_Init+0x480>)
 80032cc:	f7fd fd64 	bl	8000d98 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <HAL_DMA_Init+0x342>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e0:	d00d      	beq.n	80032fe <HAL_DMA_Init+0x342>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ea:	d008      	beq.n	80032fe <HAL_DMA_Init+0x342>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032f4:	d003      	beq.n	80032fe <HAL_DMA_Init+0x342>
 80032f6:	21c8      	movs	r1, #200	; 0xc8
 80032f8:	4850      	ldr	r0, [pc, #320]	; (800343c <HAL_DMA_Init+0x480>)
 80032fa:	f7fd fd4d 	bl	8000d98 <assert_failed>
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331e:	e00f      	b.n	8003340 <HAL_DMA_Init+0x384>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003320:	f7ff fcce 	bl	8002cc0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b05      	cmp	r3, #5
 800332c:	d908      	bls.n	8003340 <HAL_DMA_Init+0x384>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2203      	movs	r2, #3
 8003338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e078      	b.n	8003432 <HAL_DMA_Init+0x476>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e8      	bne.n	8003320 <HAL_DMA_Init+0x364>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_DMA_Init+0x484>)
 800335a:	4013      	ands	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b04      	cmp	r3, #4
 8003398:	d107      	bne.n	80033aa <HAL_DMA_Init+0x3ee>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4313      	orrs	r3, r2
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0307 	bic.w	r3, r3, #7
 80033c0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d117      	bne.n	8003404 <HAL_DMA_Init+0x448>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00e      	beq.n	8003404 <HAL_DMA_Init+0x448>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fb9a 	bl	8003b20 <DMA_CheckFifoParam>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_DMA_Init+0x448>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003400:	2301      	movs	r3, #1
 8003402:	e016      	b.n	8003432 <HAL_DMA_Init+0x476>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fb51 	bl	8003ab4 <DMA_CalcBaseAndBitshift>
 8003412:	4603      	mov	r3, r0
 8003414:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	223f      	movs	r2, #63	; 0x3f
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0800fa10 	.word	0x0800fa10
 8003440:	e010803f 	.word	0xe010803f

08003444 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0a5      	b.n	80035a2 <HAL_DMA_DeInit+0x15e>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d101      	bne.n	8003466 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	e09d      	b.n	80035a2 <HAL_DMA_DeInit+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a50      	ldr	r2, [pc, #320]	; (80035ac <HAL_DMA_DeInit+0x168>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d04f      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_DMA_DeInit+0x16c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d04a      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a4d      	ldr	r2, [pc, #308]	; (80035b4 <HAL_DMA_DeInit+0x170>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d045      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_DMA_DeInit+0x174>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d040      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <HAL_DMA_DeInit+0x178>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d03b      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a48      	ldr	r2, [pc, #288]	; (80035c0 <HAL_DMA_DeInit+0x17c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d036      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a47      	ldr	r2, [pc, #284]	; (80035c4 <HAL_DMA_DeInit+0x180>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d031      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a45      	ldr	r2, [pc, #276]	; (80035c8 <HAL_DMA_DeInit+0x184>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d02c      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a44      	ldr	r2, [pc, #272]	; (80035cc <HAL_DMA_DeInit+0x188>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d027      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a42      	ldr	r2, [pc, #264]	; (80035d0 <HAL_DMA_DeInit+0x18c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d022      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a41      	ldr	r2, [pc, #260]	; (80035d4 <HAL_DMA_DeInit+0x190>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d01d      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3f      	ldr	r2, [pc, #252]	; (80035d8 <HAL_DMA_DeInit+0x194>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d018      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a3e      	ldr	r2, [pc, #248]	; (80035dc <HAL_DMA_DeInit+0x198>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a3c      	ldr	r2, [pc, #240]	; (80035e0 <HAL_DMA_DeInit+0x19c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00e      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3b      	ldr	r2, [pc, #236]	; (80035e4 <HAL_DMA_DeInit+0x1a0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a39      	ldr	r2, [pc, #228]	; (80035e8 <HAL_DMA_DeInit+0x1a4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_DMA_DeInit+0xcc>
 8003506:	f240 1149 	movw	r1, #329	; 0x149
 800350a:	4838      	ldr	r0, [pc, #224]	; (80035ec <HAL_DMA_DeInit+0x1a8>)
 800350c:	f7fd fc44 	bl	8000d98 <assert_failed>

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2221      	movs	r2, #33	; 0x21
 800354e:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 faaf 	bl	8003ab4 <DMA_CalcBaseAndBitshift>
 8003556:	4603      	mov	r3, r0
 8003558:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40026010 	.word	0x40026010
 80035b0:	40026028 	.word	0x40026028
 80035b4:	40026040 	.word	0x40026040
 80035b8:	40026058 	.word	0x40026058
 80035bc:	40026070 	.word	0x40026070
 80035c0:	40026088 	.word	0x40026088
 80035c4:	400260a0 	.word	0x400260a0
 80035c8:	400260b8 	.word	0x400260b8
 80035cc:	40026410 	.word	0x40026410
 80035d0:	40026428 	.word	0x40026428
 80035d4:	40026440 	.word	0x40026440
 80035d8:	40026458 	.word	0x40026458
 80035dc:	40026470 	.word	0x40026470
 80035e0:	40026488 	.word	0x40026488
 80035e4:	400264a0 	.word	0x400264a0
 80035e8:	400264b8 	.word	0x400264b8
 80035ec:	0800fa10 	.word	0x0800fa10

080035f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_DMA_Start_IT+0x26>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d304      	bcc.n	8003620 <HAL_DMA_Start_IT+0x30>
 8003616:	f240 11cd 	movw	r1, #461	; 0x1cd
 800361a:	482b      	ldr	r0, [pc, #172]	; (80036c8 <HAL_DMA_Start_IT+0xd8>)
 800361c:	f7fd fbbc 	bl	8000d98 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_DMA_Start_IT+0x3e>
 800362a:	2302      	movs	r3, #2
 800362c:	e048      	b.n	80036c0 <HAL_DMA_Start_IT+0xd0>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d137      	bne.n	80036b2 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f9fe 	bl	8003a58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	223f      	movs	r2, #63	; 0x3f
 8003662:	409a      	lsls	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0216 	orr.w	r2, r2, #22
 8003676:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003686:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e005      	b.n	80036be <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
 80036bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	0800fa10 	.word	0x0800fa10

080036cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00c      	b.n	8003704 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2205      	movs	r2, #5
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800371c:	4b8e      	ldr	r3, [pc, #568]	; (8003958 <HAL_DMA_IRQHandler+0x248>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a8e      	ldr	r2, [pc, #568]	; (800395c <HAL_DMA_IRQHandler+0x24c>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0a9b      	lsrs	r3, r3, #10
 8003728:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2208      	movs	r2, #8
 800373c:	409a      	lsls	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01a      	beq.n	800377c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2208      	movs	r2, #8
 800376a:	409a      	lsls	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2201      	movs	r2, #1
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	2201      	movs	r2, #1
 80037a0:	409a      	lsls	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	2204      	movs	r2, #4
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	2204      	movs	r2, #4
 80037d6:	409a      	lsls	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2210      	movs	r2, #16
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d043      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03c      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2210      	movs	r2, #16
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d018      	beq.n	8003852 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e01f      	b.n	8003880 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e016      	b.n	8003880 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0208 	bic.w	r2, r2, #8
 800386e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	2220      	movs	r2, #32
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 808f 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8087 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2220      	movs	r2, #32
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d136      	bne.n	8003928 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0216 	bic.w	r2, r2, #22
 80038c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_DMA_IRQHandler+0x1da>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0208 	bic.w	r2, r2, #8
 80038f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	223f      	movs	r2, #63	; 0x3f
 8003900:	409a      	lsls	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	2b00      	cmp	r3, #0
 800391c:	d07e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
        }
        return;
 8003926:	e079      	b.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01d      	beq.n	8003972 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e02c      	b.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004
 800395c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e01e      	b.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0210 	bic.w	r2, r2, #16
 800398e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d032      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d022      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2205      	movs	r2, #5
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3301      	adds	r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d307      	bcc.n	80039f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f2      	bne.n	80039dc <HAL_DMA_IRQHandler+0x2cc>
 80039f6:	e000      	b.n	80039fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
 8003a1a:	e000      	b.n	8003a1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a1c:	bf00      	nop
    }
  }
}
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a32:	b2db      	uxtb	r3, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d108      	bne.n	8003a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a96:	e007      	b.n	8003aa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3b10      	subs	r3, #16
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <DMA_CalcBaseAndBitshift+0x60>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <DMA_CalcBaseAndBitshift+0x64>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d908      	bls.n	8003af4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <DMA_CalcBaseAndBitshift+0x68>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	1d1a      	adds	r2, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	659a      	str	r2, [r3, #88]	; 0x58
 8003af2:	e006      	b.n	8003b02 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <DMA_CalcBaseAndBitshift+0x68>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	aaaaaaab 	.word	0xaaaaaaab
 8003b18:	0800fd28 	.word	0x0800fd28
 8003b1c:	fffffc00 	.word	0xfffffc00

08003b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11f      	bne.n	8003b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d856      	bhi.n	8003bee <DMA_CheckFifoParam+0xce>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <DMA_CheckFifoParam+0x28>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b6b 	.word	0x08003b6b
 8003b50:	08003b59 	.word	0x08003b59
 8003b54:	08003bef 	.word	0x08003bef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d046      	beq.n	8003bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b68:	e043      	b.n	8003bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b72:	d140      	bne.n	8003bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b78:	e03d      	b.n	8003bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	d121      	bne.n	8003bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d837      	bhi.n	8003bfa <DMA_CheckFifoParam+0xda>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <DMA_CheckFifoParam+0x70>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003ba7 	.word	0x08003ba7
 8003b98:	08003ba1 	.word	0x08003ba1
 8003b9c:	08003bb9 	.word	0x08003bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e030      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d025      	beq.n	8003bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb6:	e022      	b.n	8003bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc0:	d11f      	bne.n	8003c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bc6:	e01c      	b.n	8003c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d903      	bls.n	8003bd6 <DMA_CheckFifoParam+0xb6>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d003      	beq.n	8003bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd4:	e018      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bda:	e015      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      break;
 8003bec:	e00b      	b.n	8003c06 <DMA_CheckFifoParam+0xe6>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e00a      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e008      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e006      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
    }
  } 
  
  return status; 
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop

08003c18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06a      	b.n	8003d00 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2223      	movs	r2, #35	; 0x23
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fd fa25 	bl	800108c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_ETH_Init+0xf0>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a30      	ldr	r2, [pc, #192]	; (8003d08 <HAL_ETH_Init+0xf0>)
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_ETH_Init+0xf0>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c5a:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <HAL_ETH_Init+0xf4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a2b      	ldr	r2, [pc, #172]	; (8003d0c <HAL_ETH_Init+0xf4>)
 8003c60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c66:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_ETH_Init+0xf4>)
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4927      	ldr	r1, [pc, #156]	; (8003d0c <HAL_ETH_Init+0xf4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_ETH_Init+0xf4>)
 8003c76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c90:	f7ff f816 	bl	8002cc0 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c96:	e011      	b.n	8003cbc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c98:	f7ff f812 	bl	8002cc0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ca6:	d909      	bls.n	8003cbc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2204      	movs	r2, #4
 8003cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	22e0      	movs	r2, #224	; 0xe0
 8003cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e021      	b.n	8003d00 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e4      	bne.n	8003c98 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f958 	bl	8003f84 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9ff 	bl	80040d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fa55 	bl	800418a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f9bd 	bl	8004068 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40013800 	.word	0x40013800

08003d10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <ETH_SetMACConfig+0x15c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	7c1b      	ldrb	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <ETH_SetMACConfig+0x28>
 8003d32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d36:	e000      	b.n	8003d3a <ETH_SetMACConfig+0x2a>
 8003d38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	7c5b      	ldrb	r3, [r3, #17]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <ETH_SetMACConfig+0x38>
 8003d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d46:	e000      	b.n	8003d4a <ETH_SetMACConfig+0x3a>
 8003d48:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d4a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	7fdb      	ldrb	r3, [r3, #31]
 8003d56:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d58:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	7f92      	ldrb	r2, [r2, #30]
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	d102      	bne.n	8003d6e <ETH_SetMACConfig+0x5e>
 8003d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d6c:	e000      	b.n	8003d70 <ETH_SetMACConfig+0x60>
 8003d6e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	7f1b      	ldrb	r3, [r3, #28]
 8003d76:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d78:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	791b      	ldrb	r3, [r3, #4]
 8003d84:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d8e:	2a00      	cmp	r2, #0
 8003d90:	d102      	bne.n	8003d98 <ETH_SetMACConfig+0x88>
 8003d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d96:	e000      	b.n	8003d9a <ETH_SetMACConfig+0x8a>
 8003d98:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	7bdb      	ldrb	r3, [r3, #15]
 8003da0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003da2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003da8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003db2:	4313      	orrs	r3, r2
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f7fe ff84 	bl	8002cd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	d101      	bne.n	8003dfe <ETH_SetMACConfig+0xee>
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	e000      	b.n	8003e00 <ETH_SetMACConfig+0xf0>
 8003dfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e00:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003e0e:	2a01      	cmp	r2, #1
 8003e10:	d101      	bne.n	8003e16 <ETH_SetMACConfig+0x106>
 8003e12:	2208      	movs	r2, #8
 8003e14:	e000      	b.n	8003e18 <ETH_SetMACConfig+0x108>
 8003e16:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003e18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003e20:	2a01      	cmp	r2, #1
 8003e22:	d101      	bne.n	8003e28 <ETH_SetMACConfig+0x118>
 8003e24:	2204      	movs	r2, #4
 8003e26:	e000      	b.n	8003e2a <ETH_SetMACConfig+0x11a>
 8003e28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003e32:	2a01      	cmp	r2, #1
 8003e34:	d101      	bne.n	8003e3a <ETH_SetMACConfig+0x12a>
 8003e36:	2202      	movs	r2, #2
 8003e38:	e000      	b.n	8003e3c <ETH_SetMACConfig+0x12c>
 8003e3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f7fe ff3f 	bl	8002cd8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	ff20810f 	.word	0xff20810f

08003e70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <ETH_SetDMAConfig+0x110>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	7b1b      	ldrb	r3, [r3, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <ETH_SetDMAConfig+0x2c>
 8003e96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e9a:	e000      	b.n	8003e9e <ETH_SetDMAConfig+0x2e>
 8003e9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	7b5b      	ldrb	r3, [r3, #13]
 8003ea2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ea4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	7f52      	ldrb	r2, [r2, #29]
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	d102      	bne.n	8003eb4 <ETH_SetDMAConfig+0x44>
 8003eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003eb2:	e000      	b.n	8003eb6 <ETH_SetDMAConfig+0x46>
 8003eb4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003eb6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	7b9b      	ldrb	r3, [r3, #14]
 8003ebc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ebe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ec4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	7f1b      	ldrb	r3, [r3, #28]
 8003eca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ecc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	7f9b      	ldrb	r3, [r3, #30]
 8003ed2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ed4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003eda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7fe fee6 	bl	8002cd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f14:	461a      	mov	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f24:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003f2a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f30:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f38:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003f3a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f42:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f48:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f56:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7fe feb7 	bl	8002cd8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	f8de3f23 	.word	0xf8de3f23

08003f84 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b0a6      	sub	sp, #152	; 0x98
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fe86 	bl	8003d10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004004:	2301      	movs	r3, #1
 8004006:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004008:	2301      	movs	r3, #1
 800400a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004012:	2301      	movs	r3, #1
 8004014:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004030:	2301      	movs	r3, #1
 8004032:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004038:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800403a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800403e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004044:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800404c:	2300      	movs	r3, #0
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004054:	f107 0308 	add.w	r3, r7, #8
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff08 	bl	8003e70 <ETH_SetDMAConfig>
}
 8004060:	bf00      	nop
 8004062:	3798      	adds	r7, #152	; 0x98
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3305      	adds	r3, #5
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	3204      	adds	r2, #4
 8004080:	7812      	ldrb	r2, [r2, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <ETH_MACAddressConfig+0x68>)
 800408a:	4413      	add	r3, r2
 800408c:	461a      	mov	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3303      	adds	r3, #3
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	061a      	lsls	r2, r3, #24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3302      	adds	r3, #2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3301      	adds	r3, #1
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	4313      	orrs	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <ETH_MACAddressConfig+0x6c>)
 80040ba:	4413      	add	r3, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	6013      	str	r3, [r2, #0]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40028040 	.word	0x40028040
 80040d4:	40028044 	.word	0x40028044

080040d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e03e      	b.n	8004164 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68d9      	ldr	r1, [r3, #12]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2200      	movs	r2, #0
 800410e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	3206      	adds	r2, #6
 8004118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d80c      	bhi.n	8004148 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68d9      	ldr	r1, [r3, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	440b      	add	r3, r1
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e004      	b.n	8004152 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d9bd      	bls.n	80040e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417c:	611a      	str	r2, [r3, #16]
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e046      	b.n	8004226 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6919      	ldr	r1, [r3, #16]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80041dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	3212      	adds	r2, #18
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d80c      	bhi.n	8004216 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6919      	ldr	r1, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	440b      	add	r3, r1
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	e004      	b.n	8004220 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	461a      	mov	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d9b5      	bls.n	8004198 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	60da      	str	r2, [r3, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a3a      	ldr	r2, [pc, #232]	; (800436c <HAL_GPIO_Init+0x108>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d02b      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a39      	ldr	r2, [pc, #228]	; (8004370 <HAL_GPIO_Init+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d027      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a38      	ldr	r2, [pc, #224]	; (8004374 <HAL_GPIO_Init+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d023      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a37      	ldr	r2, [pc, #220]	; (8004378 <HAL_GPIO_Init+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a36      	ldr	r2, [pc, #216]	; (800437c <HAL_GPIO_Init+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01b      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a35      	ldr	r2, [pc, #212]	; (8004380 <HAL_GPIO_Init+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d017      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <HAL_GPIO_Init+0x120>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a33      	ldr	r2, [pc, #204]	; (8004388 <HAL_GPIO_Init+0x124>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00f      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a32      	ldr	r2, [pc, #200]	; (800438c <HAL_GPIO_Init+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00b      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a31      	ldr	r2, [pc, #196]	; (8004390 <HAL_GPIO_Init+0x12c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a30      	ldr	r2, [pc, #192]	; (8004394 <HAL_GPIO_Init+0x130>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x7a>
 80042d6:	21aa      	movs	r1, #170	; 0xaa
 80042d8:	482f      	ldr	r0, [pc, #188]	; (8004398 <HAL_GPIO_Init+0x134>)
 80042da:	f7fc fd5d 	bl	8000d98 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_GPIO_Init+0x8c>
 80042e8:	21ab      	movs	r1, #171	; 0xab
 80042ea:	482b      	ldr	r0, [pc, #172]	; (8004398 <HAL_GPIO_Init+0x134>)
 80042ec:	f7fc fd54 	bl	8000d98 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d035      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d031      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b11      	cmp	r3, #17
 8004306:	d02d      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d029      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b12      	cmp	r3, #18
 8004316:	d025      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004320:	d020      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800432a:	d01b      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004334:	d016      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800433e:	d011      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004348:	d00c      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004352:	d007      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x100>
 800435c:	21ac      	movs	r1, #172	; 0xac
 800435e:	480e      	ldr	r0, [pc, #56]	; (8004398 <HAL_GPIO_Init+0x134>)
 8004360:	f7fc fd1a 	bl	8000d98 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e2d6      	b.n	8004918 <HAL_GPIO_Init+0x6b4>
 800436a:	bf00      	nop
 800436c:	40020000 	.word	0x40020000
 8004370:	40020400 	.word	0x40020400
 8004374:	40020800 	.word	0x40020800
 8004378:	40020c00 	.word	0x40020c00
 800437c:	40021000 	.word	0x40021000
 8004380:	40021400 	.word	0x40021400
 8004384:	40021800 	.word	0x40021800
 8004388:	40021c00 	.word	0x40021c00
 800438c:	40022000 	.word	0x40022000
 8004390:	40022400 	.word	0x40022400
 8004394:	40022800 	.word	0x40022800
 8004398:	0800fa48 	.word	0x0800fa48
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800439c:	2201      	movs	r2, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	f040 82ac 	bne.w	8004912 <HAL_GPIO_Init+0x6ae>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d005      	beq.n	80043d2 <HAL_GPIO_Init+0x16e>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d144      	bne.n	800445c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00f      	beq.n	80043fa <HAL_GPIO_Init+0x196>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00b      	beq.n	80043fa <HAL_GPIO_Init+0x196>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d007      	beq.n	80043fa <HAL_GPIO_Init+0x196>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_Init+0x196>
 80043f2:	21bd      	movs	r1, #189	; 0xbd
 80043f4:	4831      	ldr	r0, [pc, #196]	; (80044bc <HAL_GPIO_Init+0x258>)
 80043f6:	f7fc fccf 	bl	8000d98 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	2203      	movs	r2, #3
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004430:	2201      	movs	r2, #1
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	f003 0201 	and.w	r2, r3, #1
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d02b      	beq.n	80044c0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_GPIO_Init+0x224>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d007      	beq.n	8004488 <HAL_GPIO_Init+0x224>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x224>
 8004480:	21ce      	movs	r1, #206	; 0xce
 8004482:	480e      	ldr	r0, [pc, #56]	; (80044bc <HAL_GPIO_Init+0x258>)
 8004484:	f7fc fc88 	bl	8000d98 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	e002      	b.n	80044c0 <HAL_GPIO_Init+0x25c>
 80044ba:	bf00      	nop
 80044bc:	0800fa48 	.word	0x0800fa48
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f040 8143 	bne.w	8004754 <HAL_GPIO_Init+0x4f0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 811a 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f000 8115 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8110 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 810b 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8106 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b01      	cmp	r3, #1
 8004506:	f000 8101 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f000 80fc 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b02      	cmp	r3, #2
 800451a:	f000 80f7 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b02      	cmp	r3, #2
 8004524:	f000 80f2 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b03      	cmp	r3, #3
 800452e:	f000 80ed 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b03      	cmp	r3, #3
 8004538:	f000 80e8 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b03      	cmp	r3, #3
 8004542:	f000 80e3 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b03      	cmp	r3, #3
 800454c:	f000 80de 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b03      	cmp	r3, #3
 8004556:	f000 80d9 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b03      	cmp	r3, #3
 8004560:	f000 80d4 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b04      	cmp	r3, #4
 800456a:	f000 80cf 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b04      	cmp	r3, #4
 8004574:	f000 80ca 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b04      	cmp	r3, #4
 800457e:	f000 80c5 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b04      	cmp	r3, #4
 8004588:	f000 80c0 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b04      	cmp	r3, #4
 8004592:	f000 80bb 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b05      	cmp	r3, #5
 800459c:	f000 80b6 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	f000 80b1 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	f000 80ac 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	f000 80a7 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	f000 80a2 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	f000 809d 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	f000 8098 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	f000 8093 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	f000 808e 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b07      	cmp	r3, #7
 80045f6:	f000 8089 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b07      	cmp	r3, #7
 8004600:	f000 8084 	beq.w	800470c <HAL_GPIO_Init+0x4a8>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b07      	cmp	r3, #7
 800460a:	d07f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b07      	cmp	r3, #7
 8004612:	d07b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b07      	cmp	r3, #7
 800461a:	d077      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b07      	cmp	r3, #7
 8004622:	d073      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d06f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d06b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d067      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d063      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d05f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d05b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d057      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b09      	cmp	r3, #9
 8004662:	d053      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b09      	cmp	r3, #9
 800466a:	d04f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b09      	cmp	r3, #9
 8004672:	d04b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b09      	cmp	r3, #9
 800467a:	d047      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b09      	cmp	r3, #9
 8004682:	d043      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b09      	cmp	r3, #9
 800468a:	d03f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b0a      	cmp	r3, #10
 8004692:	d03b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b09      	cmp	r3, #9
 800469a:	d037      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b0a      	cmp	r3, #10
 80046a2:	d033      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b0a      	cmp	r3, #10
 80046aa:	d02f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b0a      	cmp	r3, #10
 80046b2:	d02b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b0b      	cmp	r3, #11
 80046ba:	d027      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b0a      	cmp	r3, #10
 80046c2:	d023      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b0b      	cmp	r3, #11
 80046ca:	d01f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b0b      	cmp	r3, #11
 80046d2:	d01b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d017      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d013      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d00f      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b0f      	cmp	r3, #15
 80046f2:	d00b      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b0d      	cmp	r3, #13
 80046fa:	d007      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b0e      	cmp	r3, #14
 8004702:	d003      	beq.n	800470c <HAL_GPIO_Init+0x4a8>
 8004704:	21db      	movs	r1, #219	; 0xdb
 8004706:	4889      	ldr	r0, [pc, #548]	; (800492c <HAL_GPIO_Init+0x6c8>)
 8004708:	f7fc fb46 	bl	8000d98 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	08da      	lsrs	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3208      	adds	r2, #8
 8004714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	220f      	movs	r2, #15
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0203 	and.w	r2, r3, #3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80be 	beq.w	8004912 <HAL_GPIO_Init+0x6ae>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004796:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_GPIO_Init+0x6cc>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_GPIO_Init+0x6cc>)
 800479c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a0:	6453      	str	r3, [r2, #68]	; 0x44
 80047a2:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_GPIO_Init+0x6cc>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047ae:	4a61      	ldr	r2, [pc, #388]	; (8004934 <HAL_GPIO_Init+0x6d0>)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	220f      	movs	r2, #15
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a58      	ldr	r2, [pc, #352]	; (8004938 <HAL_GPIO_Init+0x6d4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d037      	beq.n	800484a <HAL_GPIO_Init+0x5e6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a57      	ldr	r2, [pc, #348]	; (800493c <HAL_GPIO_Init+0x6d8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_GPIO_Init+0x5e2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a56      	ldr	r2, [pc, #344]	; (8004940 <HAL_GPIO_Init+0x6dc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d02b      	beq.n	8004842 <HAL_GPIO_Init+0x5de>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a55      	ldr	r2, [pc, #340]	; (8004944 <HAL_GPIO_Init+0x6e0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d025      	beq.n	800483e <HAL_GPIO_Init+0x5da>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a54      	ldr	r2, [pc, #336]	; (8004948 <HAL_GPIO_Init+0x6e4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01f      	beq.n	800483a <HAL_GPIO_Init+0x5d6>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a53      	ldr	r2, [pc, #332]	; (800494c <HAL_GPIO_Init+0x6e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d019      	beq.n	8004836 <HAL_GPIO_Init+0x5d2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a52      	ldr	r2, [pc, #328]	; (8004950 <HAL_GPIO_Init+0x6ec>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_GPIO_Init+0x5ce>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a51      	ldr	r2, [pc, #324]	; (8004954 <HAL_GPIO_Init+0x6f0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_GPIO_Init+0x5ca>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a50      	ldr	r2, [pc, #320]	; (8004958 <HAL_GPIO_Init+0x6f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0x5c6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4f      	ldr	r2, [pc, #316]	; (800495c <HAL_GPIO_Init+0x6f8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_GPIO_Init+0x5c2>
 8004822:	2309      	movs	r3, #9
 8004824:	e012      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 8004826:	230a      	movs	r3, #10
 8004828:	e010      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 800482a:	2308      	movs	r3, #8
 800482c:	e00e      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 800482e:	2307      	movs	r3, #7
 8004830:	e00c      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 8004832:	2306      	movs	r3, #6
 8004834:	e00a      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 8004836:	2305      	movs	r3, #5
 8004838:	e008      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 800483a:	2304      	movs	r3, #4
 800483c:	e006      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 800483e:	2303      	movs	r3, #3
 8004840:	e004      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 8004842:	2302      	movs	r3, #2
 8004844:	e002      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_GPIO_Init+0x5e8>
 800484a:	2300      	movs	r3, #0
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	f002 0203 	and.w	r2, r2, #3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	4093      	lsls	r3, r2
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800485c:	4935      	ldr	r1, [pc, #212]	; (8004934 <HAL_GPIO_Init+0x6d0>)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	3302      	adds	r3, #2
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_Init+0x62a>
        {
          temp |= iocurrent;
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488e:	4a34      	ldr	r2, [pc, #208]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004894:	4b32      	ldr	r3, [pc, #200]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_GPIO_Init+0x654>
        {
          temp |= iocurrent;
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x67e>
        {
          temp |= iocurrent;
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x6a8>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <HAL_GPIO_Init+0x6fc>)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	f67f ad3e 	bls.w	800439c <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	0800fa48 	.word	0x0800fa48
 8004930:	40023800 	.word	0x40023800
 8004934:	40013800 	.word	0x40013800
 8004938:	40020000 	.word	0x40020000
 800493c:	40020400 	.word	0x40020400
 8004940:	40020800 	.word	0x40020800
 8004944:	40020c00 	.word	0x40020c00
 8004948:	40021000 	.word	0x40021000
 800494c:	40021400 	.word	0x40021400
 8004950:	40021800 	.word	0x40021800
 8004954:	40021c00 	.word	0x40021c00
 8004958:	40022000 	.word	0x40022000
 800495c:	40022400 	.word	0x40022400
 8004960:	40013c00 	.word	0x40013c00

08004964 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a8a      	ldr	r2, [pc, #552]	; (8004ba8 <HAL_GPIO_DeInit+0x244>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02c      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a89      	ldr	r2, [pc, #548]	; (8004bac <HAL_GPIO_DeInit+0x248>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d028      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a88      	ldr	r2, [pc, #544]	; (8004bb0 <HAL_GPIO_DeInit+0x24c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d024      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a87      	ldr	r2, [pc, #540]	; (8004bb4 <HAL_GPIO_DeInit+0x250>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d020      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a86      	ldr	r2, [pc, #536]	; (8004bb8 <HAL_GPIO_DeInit+0x254>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01c      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a85      	ldr	r2, [pc, #532]	; (8004bbc <HAL_GPIO_DeInit+0x258>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d018      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a84      	ldr	r2, [pc, #528]	; (8004bc0 <HAL_GPIO_DeInit+0x25c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d014      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_GPIO_DeInit+0x260>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d010      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a82      	ldr	r2, [pc, #520]	; (8004bc8 <HAL_GPIO_DeInit+0x264>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00c      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a81      	ldr	r2, [pc, #516]	; (8004bcc <HAL_GPIO_DeInit+0x268>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d008      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_GPIO_DeInit+0x26c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_GPIO_DeInit+0x78>
 80049d2:	f240 112b 	movw	r1, #299	; 0x12b
 80049d6:	487f      	ldr	r0, [pc, #508]	; (8004bd4 <HAL_GPIO_DeInit+0x270>)
 80049d8:	f7fc f9de 	bl	8000d98 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e0d9      	b.n	8004b96 <HAL_GPIO_DeInit+0x232>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	f040 80c9 	bne.w	8004b90 <HAL_GPIO_DeInit+0x22c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80049fe:	4a76      	ldr	r2, [pc, #472]	; (8004bd8 <HAL_GPIO_DeInit+0x274>)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	3302      	adds	r3, #2
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a61      	ldr	r2, [pc, #388]	; (8004ba8 <HAL_GPIO_DeInit+0x244>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d037      	beq.n	8004a98 <HAL_GPIO_DeInit+0x134>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a60      	ldr	r2, [pc, #384]	; (8004bac <HAL_GPIO_DeInit+0x248>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d031      	beq.n	8004a94 <HAL_GPIO_DeInit+0x130>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a5f      	ldr	r2, [pc, #380]	; (8004bb0 <HAL_GPIO_DeInit+0x24c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02b      	beq.n	8004a90 <HAL_GPIO_DeInit+0x12c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a5e      	ldr	r2, [pc, #376]	; (8004bb4 <HAL_GPIO_DeInit+0x250>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d025      	beq.n	8004a8c <HAL_GPIO_DeInit+0x128>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a5d      	ldr	r2, [pc, #372]	; (8004bb8 <HAL_GPIO_DeInit+0x254>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01f      	beq.n	8004a88 <HAL_GPIO_DeInit+0x124>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a5c      	ldr	r2, [pc, #368]	; (8004bbc <HAL_GPIO_DeInit+0x258>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d019      	beq.n	8004a84 <HAL_GPIO_DeInit+0x120>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a5b      	ldr	r2, [pc, #364]	; (8004bc0 <HAL_GPIO_DeInit+0x25c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_GPIO_DeInit+0x11c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a5a      	ldr	r2, [pc, #360]	; (8004bc4 <HAL_GPIO_DeInit+0x260>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00d      	beq.n	8004a7c <HAL_GPIO_DeInit+0x118>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a59      	ldr	r2, [pc, #356]	; (8004bc8 <HAL_GPIO_DeInit+0x264>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <HAL_GPIO_DeInit+0x114>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <HAL_GPIO_DeInit+0x268>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_GPIO_DeInit+0x110>
 8004a70:	2309      	movs	r3, #9
 8004a72:	e012      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a74:	230a      	movs	r3, #10
 8004a76:	e010      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	e00e      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a7c:	2307      	movs	r3, #7
 8004a7e:	e00c      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a80:	2306      	movs	r3, #6
 8004a82:	e00a      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a84:	2305      	movs	r3, #5
 8004a86:	e008      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	e006      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e004      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e002      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_GPIO_DeInit+0x136>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	f002 0203 	and.w	r2, r2, #3
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	4093      	lsls	r3, r2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d132      	bne.n	8004b10 <HAL_GPIO_DeInit+0x1ac>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004aaa:	4b4c      	ldr	r3, [pc, #304]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	494a      	ldr	r1, [pc, #296]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ab8:	4b48      	ldr	r3, [pc, #288]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	4946      	ldr	r1, [pc, #280]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ac6:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	4943      	ldr	r1, [pc, #268]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ad4:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	493f      	ldr	r1, [pc, #252]	; (8004bdc <HAL_GPIO_DeInit+0x278>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	220f      	movs	r2, #15
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004af2:	4a39      	ldr	r2, [pc, #228]	; (8004bd8 <HAL_GPIO_DeInit+0x274>)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	4835      	ldr	r0, [pc, #212]	; (8004bd8 <HAL_GPIO_DeInit+0x274>)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	400a      	ands	r2, r1
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	2103      	movs	r1, #3
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	401a      	ands	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	08da      	lsrs	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3208      	adds	r2, #8
 8004b2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	220f      	movs	r2, #15
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	08d2      	lsrs	r2, r2, #3
 8004b46:	4019      	ands	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	2103      	movs	r1, #3
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	401a      	ands	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	401a      	ands	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	2103      	movs	r1, #3
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3301      	adds	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	f67f af22 	bls.w	80049e2 <HAL_GPIO_DeInit+0x7e>
    }
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40020000 	.word	0x40020000
 8004bac:	40020400 	.word	0x40020400
 8004bb0:	40020800 	.word	0x40020800
 8004bb4:	40020c00 	.word	0x40020c00
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40021400 	.word	0x40021400
 8004bc0:	40021800 	.word	0x40021800
 8004bc4:	40021c00 	.word	0x40021c00
 8004bc8:	40022000 	.word	0x40022000
 8004bcc:	40022400 	.word	0x40022400
 8004bd0:	40022800 	.word	0x40022800
 8004bd4:	0800fa48 	.word	0x0800fa48
 8004bd8:	40013800 	.word	0x40013800
 8004bdc:	40013c00 	.word	0x40013c00

08004be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_GPIO_ReadPin+0x1c>
 8004bf2:	f240 1177 	movw	r1, #375	; 0x177
 8004bf6:	4809      	ldr	r0, [pc, #36]	; (8004c1c <HAL_GPIO_ReadPin+0x3c>)
 8004bf8:	f7fc f8ce 	bl	8000d98 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	887b      	ldrh	r3, [r7, #2]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
 8004c0c:	e001      	b.n	8004c12 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	0800fa48 	.word	0x0800fa48

08004c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	807b      	strh	r3, [r7, #2]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <HAL_GPIO_WritePin+0x20>
 8004c36:	f240 1197 	movw	r1, #407	; 0x197
 8004c3a:	480e      	ldr	r0, [pc, #56]	; (8004c74 <HAL_GPIO_WritePin+0x54>)
 8004c3c:	f7fc f8ac 	bl	8000d98 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004c40:	787b      	ldrb	r3, [r7, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_WritePin+0x36>
 8004c46:	787b      	ldrb	r3, [r7, #1]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d004      	beq.n	8004c56 <HAL_GPIO_WritePin+0x36>
 8004c4c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004c50:	4808      	ldr	r0, [pc, #32]	; (8004c74 <HAL_GPIO_WritePin+0x54>)
 8004c52:	f7fc f8a1 	bl	8000d98 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004c56:	787b      	ldrb	r3, [r7, #1]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c5c:	887a      	ldrh	r2, [r7, #2]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c62:	e003      	b.n	8004c6c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	041a      	lsls	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	0800fa48 	.word	0x0800fa48

08004c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c8e:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fc f828 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e107      	b.n	8004eca <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a85      	ldr	r2, [pc, #532]	; (8004ed4 <HAL_I2C_Init+0x22c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <HAL_I2C_Init+0x44>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a83      	ldr	r2, [pc, #524]	; (8004ed8 <HAL_I2C_Init+0x230>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <HAL_I2C_Init+0x44>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a82      	ldr	r2, [pc, #520]	; (8004edc <HAL_I2C_Init+0x234>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_I2C_Init+0x44>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a80      	ldr	r2, [pc, #512]	; (8004ee0 <HAL_I2C_Init+0x238>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_I2C_Init+0x44>
 8004ce2:	f240 2119 	movw	r1, #537	; 0x219
 8004ce6:	487f      	ldr	r0, [pc, #508]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004ce8:	f7fc f856 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d304      	bcc.n	8004d00 <HAL_I2C_Init+0x58>
 8004cf6:	f240 211a 	movw	r1, #538	; 0x21a
 8004cfa:	487a      	ldr	r0, [pc, #488]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004cfc:	f7fc f84c 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d008      	beq.n	8004d1a <HAL_I2C_Init+0x72>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d004      	beq.n	8004d1a <HAL_I2C_Init+0x72>
 8004d10:	f240 211b 	movw	r1, #539	; 0x21b
 8004d14:	4873      	ldr	r0, [pc, #460]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004d16:	f7fc f83f 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_I2C_Init+0x8e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2a:	d004      	beq.n	8004d36 <HAL_I2C_Init+0x8e>
 8004d2c:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004d30:	486c      	ldr	r0, [pc, #432]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004d32:	f7fc f831 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	2bff      	cmp	r3, #255	; 0xff
 8004d3c:	d904      	bls.n	8004d48 <HAL_I2C_Init+0xa0>
 8004d3e:	f240 211d 	movw	r1, #541	; 0x21d
 8004d42:	4868      	ldr	r0, [pc, #416]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004d44:	f7fc f828 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d01c      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d018      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d014      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d010      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d00c      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d008      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b07      	cmp	r3, #7
 8004d86:	d004      	beq.n	8004d92 <HAL_I2C_Init+0xea>
 8004d88:	f240 211e 	movw	r1, #542	; 0x21e
 8004d8c:	4855      	ldr	r0, [pc, #340]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004d8e:	f7fc f803 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_I2C_Init+0x106>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004da2:	d004      	beq.n	8004dae <HAL_I2C_Init+0x106>
 8004da4:	f240 211f 	movw	r1, #543	; 0x21f
 8004da8:	484e      	ldr	r0, [pc, #312]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004daa:	f7fb fff5 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <HAL_I2C_Init+0x122>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dbe:	d004      	beq.n	8004dca <HAL_I2C_Init+0x122>
 8004dc0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004dc4:	4847      	ldr	r0, [pc, #284]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004dc6:	f7fb ffe7 	bl	8000d98 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8d6 	bl	8004f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	e006      	b.n	8004e40 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d104      	bne.n	8004e52 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <HAL_I2C_Init+0x240>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69d9      	ldr	r1, [r3, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40005400 	.word	0x40005400
 8004ed8:	40005800 	.word	0x40005800
 8004edc:	40005c00 	.word	0x40005c00
 8004ee0:	40006000 	.word	0x40006000
 8004ee4:	0800fa84 	.word	0x0800fa84
 8004ee8:	02008000 	.word	0x02008000

08004eec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e03a      	b.n	8004f74 <HAL_I2C_DeInit+0x88>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <HAL_I2C_DeInit+0x90>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_I2C_DeInit+0x44>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_I2C_DeInit+0x94>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_I2C_DeInit+0x44>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_I2C_DeInit+0x98>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_I2C_DeInit+0x44>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_I2C_DeInit+0x9c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_I2C_DeInit+0x44>
 8004f26:	f240 2187 	movw	r1, #647	; 0x287
 8004f2a:	4818      	ldr	r0, [pc, #96]	; (8004f8c <HAL_I2C_DeInit+0xa0>)
 8004f2c:	f7fb ff34 	bl	8000d98 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f82b 	bl	8004fa4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40005400 	.word	0x40005400
 8004f80:	40005800 	.word	0x40005800
 8004f84:	40005c00 	.word	0x40005c00
 8004f88:	40006000 	.word	0x40006000
 8004f8c:	0800fa84 	.word	0x0800fa84

08004f90 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	817b      	strh	r3, [r7, #10]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	813b      	strh	r3, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d007      	beq.n	8004fe8 <HAL_I2C_Mem_Write+0x30>
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_I2C_Mem_Write+0x30>
 8004fde:	f640 1141 	movw	r1, #2369	; 0x941
 8004fe2:	4884      	ldr	r0, [pc, #528]	; (80051f4 <HAL_I2C_Mem_Write+0x23c>)
 8004fe4:	f7fb fed8 	bl	8000d98 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	f040 80f9 	bne.w	80051e8 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_I2C_Mem_Write+0x4a>
 8004ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0ed      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_I2C_Mem_Write+0x64>
 8005018:	2302      	movs	r3, #2
 800501a:	e0e6      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005024:	f7fd fe4c 	bl	8002cc0 <HAL_GetTick>
 8005028:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2319      	movs	r3, #25
 8005030:	2201      	movs	r2, #1
 8005032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f001 fd98 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0d1      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2221      	movs	r2, #33	; 0x21
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a3a      	ldr	r2, [r7, #32]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800506e:	88f8      	ldrh	r0, [r7, #6]
 8005070:	893a      	ldrh	r2, [r7, #8]
 8005072:	8979      	ldrh	r1, [r7, #10]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4603      	mov	r3, r0
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 ffc4 	bl	800600c <I2C_RequestMemoryWrite>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0a9      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2bff      	cmp	r3, #255	; 0xff
 800509e:	d90e      	bls.n	80050be <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	22ff      	movs	r2, #255	; 0xff
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	8979      	ldrh	r1, [r7, #10]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f001 fef4 	bl	8006ea4 <I2C_TransferConfig>
 80050bc:	e00f      	b.n	80050de <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	8979      	ldrh	r1, [r7, #10]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f001 fee3 	bl	8006ea4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f001 fd82 	bl	8006bec <I2C_WaitOnTXISFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e07b      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	781a      	ldrb	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d034      	beq.n	8005196 <HAL_I2C_Mem_Write+0x1de>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d130      	bne.n	8005196 <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2200      	movs	r2, #0
 800513c:	2180      	movs	r1, #128	; 0x80
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f001 fd14 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e04d      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2bff      	cmp	r3, #255	; 0xff
 8005156:	d90e      	bls.n	8005176 <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	; 0xff
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005162:	b2da      	uxtb	r2, r3
 8005164:	8979      	ldrh	r1, [r7, #10]
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f001 fe98 	bl	8006ea4 <I2C_TransferConfig>
 8005174:	e00f      	b.n	8005196 <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	b2da      	uxtb	r2, r3
 8005186:	8979      	ldrh	r1, [r7, #10]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f001 fe87 	bl	8006ea4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d19e      	bne.n	80050de <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f001 fd61 	bl	8006c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e01a      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2220      	movs	r2, #32
 80051ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_I2C_Mem_Write+0x240>)
 80051c8:	400b      	ands	r3, r1
 80051ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	0800fa84 	.word	0x0800fa84
 80051f8:	fe00e800 	.word	0xfe00e800

080051fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	4608      	mov	r0, r1
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	4603      	mov	r3, r0
 800520c:	817b      	strh	r3, [r7, #10]
 800520e:	460b      	mov	r3, r1
 8005210:	813b      	strh	r3, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d007      	beq.n	800522c <HAL_I2C_Mem_Read+0x30>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d004      	beq.n	800522c <HAL_I2C_Mem_Read+0x30>
 8005222:	f640 11ca 	movw	r1, #2506	; 0x9ca
 8005226:	4886      	ldr	r0, [pc, #536]	; (8005440 <HAL_I2C_Mem_Read+0x244>)
 8005228:	f7fb fdb6 	bl	8000d98 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	f040 80fd 	bne.w	8005434 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_I2C_Mem_Read+0x4a>
 8005240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0f1      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_I2C_Mem_Read+0x64>
 800525c:	2302      	movs	r3, #2
 800525e:	e0ea      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005268:	f7fd fd2a 	bl	8002cc0 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2319      	movs	r3, #25
 8005274:	2201      	movs	r2, #1
 8005276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 fc76 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0d5      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2222      	movs	r2, #34	; 0x22
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2240      	movs	r2, #64	; 0x40
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a3a      	ldr	r2, [r7, #32]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052b2:	88f8      	ldrh	r0, [r7, #6]
 80052b4:	893a      	ldrh	r2, [r7, #8]
 80052b6:	8979      	ldrh	r1, [r7, #10]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4603      	mov	r3, r0
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fef6 	bl	80060b4 <I2C_RequestMemoryRead>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0ad      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2bff      	cmp	r3, #255	; 0xff
 80052e2:	d90e      	bls.n	8005302 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	22ff      	movs	r2, #255	; 0xff
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	8979      	ldrh	r1, [r7, #10]
 80052f2:	4b54      	ldr	r3, [pc, #336]	; (8005444 <HAL_I2C_Mem_Read+0x248>)
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f001 fdd2 	bl	8006ea4 <I2C_TransferConfig>
 8005300:	e00f      	b.n	8005322 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	b2da      	uxtb	r2, r3
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	4b4b      	ldr	r3, [pc, #300]	; (8005444 <HAL_I2C_Mem_Read+0x248>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f001 fdc1 	bl	8006ea4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2200      	movs	r2, #0
 800532a:	2104      	movs	r1, #4
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f001 fc1d 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e07c      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d034      	beq.n	80053e2 <HAL_I2C_Mem_Read+0x1e6>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d130      	bne.n	80053e2 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	2200      	movs	r2, #0
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f001 fbee 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e04d      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2bff      	cmp	r3, #255	; 0xff
 80053a2:	d90e      	bls.n	80053c2 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	22ff      	movs	r2, #255	; 0xff
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	8979      	ldrh	r1, [r7, #10]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f001 fd72 	bl	8006ea4 <I2C_TransferConfig>
 80053c0:	e00f      	b.n	80053e2 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	8979      	ldrh	r1, [r7, #10]
 80053d4:	2300      	movs	r3, #0
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f001 fd61 	bl	8006ea4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19a      	bne.n	8005322 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f001 fc3b 	bl	8006c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e01a      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2220      	movs	r2, #32
 8005406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <HAL_I2C_Mem_Read+0x24c>)
 8005414:	400b      	ands	r3, r1
 8005416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	0800fa84 	.word	0x0800fa84
 8005444:	80002400 	.word	0x80002400
 8005448:	fe00e800 	.word	0xfe00e800

0800544c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	817b      	strh	r3, [r7, #10]
 800545e:	460b      	mov	r3, r1
 8005460:	813b      	strh	r3, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d007      	beq.n	800547c <HAL_I2C_Mem_Read_DMA+0x30>
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d004      	beq.n	800547c <HAL_I2C_Mem_Read_DMA+0x30>
 8005472:	f640 3192 	movw	r1, #2962	; 0xb92
 8005476:	4868      	ldr	r0, [pc, #416]	; (8005618 <HAL_I2C_Mem_Read_DMA+0x1cc>)
 8005478:	f7fb fc8e 	bl	8000d98 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b20      	cmp	r3, #32
 8005486:	f040 80c2 	bne.w	800560e <HAL_I2C_Mem_Read_DMA+0x1c2>
  {
    if ((pData == NULL) || (Size == 0U))
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_I2C_Mem_Read_DMA+0x4a>
 8005490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_I2C_Mem_Read_DMA+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0b6      	b.n	8005610 <HAL_I2C_Mem_Read_DMA+0x1c4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_Mem_Read_DMA+0x6a>
    {
      return HAL_BUSY;
 80054b2:	2302      	movs	r3, #2
 80054b4:	e0ac      	b.n	8005610 <HAL_I2C_Mem_Read_DMA+0x1c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_I2C_Mem_Read_DMA+0x78>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0a5      	b.n	8005610 <HAL_I2C_Mem_Read_DMA+0x1c4>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2222      	movs	r2, #34	; 0x22
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2240      	movs	r2, #64	; 0x40
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a3a      	ldr	r2, [r7, #32]
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a4a      	ldr	r2, [pc, #296]	; (800561c <HAL_I2C_Mem_Read_DMA+0x1d0>)
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a4a      	ldr	r2, [pc, #296]	; (8005620 <HAL_I2C_Mem_Read_DMA+0x1d4>)
 80054f8:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80054fa:	897a      	ldrh	r2, [r7, #10]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2bff      	cmp	r3, #255	; 0xff
 8005508:	d903      	bls.n	8005512 <HAL_I2C_Mem_Read_DMA+0xc6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005510:	e004      	b.n	800551c <HAL_I2C_Mem_Read_DMA+0xd0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d109      	bne.n	8005536 <HAL_I2C_Mem_Read_DMA+0xea>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005522:	893b      	ldrh	r3, [r7, #8]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f04f 32ff 	mov.w	r2, #4294967295
 8005532:	651a      	str	r2, [r3, #80]	; 0x50
 8005534:	e00b      	b.n	800554e <HAL_I2C_Mem_Read_DMA+0x102>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005536:	893b      	ldrh	r3, [r7, #8]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	b29b      	uxth	r3, r3
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8005544:	893b      	ldrh	r3, [r7, #8]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d020      	beq.n	8005598 <HAL_I2C_Mem_Read_DMA+0x14c>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	4a32      	ldr	r2, [pc, #200]	; (8005624 <HAL_I2C_Mem_Read_DMA+0x1d8>)
 800555c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	4a31      	ldr	r2, [pc, #196]	; (8005628 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8005564:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	2200      	movs	r2, #0
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	2200      	movs	r2, #0
 8005574:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3324      	adds	r3, #36	; 0x24
 8005580:	4619      	mov	r1, r3
 8005582:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005588:	f7fe f832 	bl	80035f0 <HAL_DMA_Start_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005590:	7dfb      	ldrb	r3, [r7, #23]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d127      	bne.n	80055e6 <HAL_I2C_Mem_Read_DMA+0x19a>
 8005596:	e013      	b.n	80055c0 <HAL_I2C_Mem_Read_DMA+0x174>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e027      	b.n	8005610 <HAL_I2C_Mem_Read_DMA+0x1c4>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	4b19      	ldr	r3, [pc, #100]	; (800562c <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2300      	movs	r3, #0
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f001 fc69 	bl	8006ea4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055da:	2101      	movs	r1, #1
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f001 fcdd 	bl	8006f9c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e014      	b.n	8005610 <HAL_I2C_Mem_Read_DMA+0x1c4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f043 0210 	orr.w	r2, r3, #16
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_I2C_Mem_Read_DMA+0x1c4>
  }
  else
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
  }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	0800fa84 	.word	0x0800fa84
 800561c:	ffff0000 	.word	0xffff0000
 8005620:	08005c05 	.word	0x08005c05
 8005624:	08006a27 	.word	0x08006a27
 8005628:	08006abd 	.word	0x08006abd
 800562c:	80002000 	.word	0x80002000

08005630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
  }
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d010      	beq.n	80056aa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005698:	f043 0201 	orr.w	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	0a9b      	lsrs	r3, r3, #10
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d010      	beq.n	80056d8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	09db      	lsrs	r3, r3, #7
 80056ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f043 0208 	orr.w	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	0a5b      	lsrs	r3, r3, #9
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	09db      	lsrs	r3, r3, #7
 80056e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f043 0202 	orr.w	r2, r3, #2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005704:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 030b 	and.w	r3, r3, #11
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 f869 	bl	80067f0 <I2C_ITError>
  }
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
 8005782:	4613      	mov	r3, r2
 8005784:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f0:	b2db      	uxtb	r3, r3
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b086      	sub	sp, #24
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <I2C_Slave_ISR_IT+0x24>
 8005836:	2302      	movs	r3, #2
 8005838:	e0ec      	b.n	8005a14 <I2C_Slave_ISR_IT+0x1fe>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800585a:	6939      	ldr	r1, [r7, #16]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fe67 	bl	8006530 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d04d      	beq.n	800590a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005876:	2b00      	cmp	r3, #0
 8005878:	d047      	beq.n	800590a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d128      	bne.n	80058d6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b28      	cmp	r3, #40	; 0x28
 800588e:	d108      	bne.n	80058a2 <I2C_Slave_ISR_IT+0x8c>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005896:	d104      	bne.n	80058a2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005898:	6939      	ldr	r1, [r7, #16]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 ff52 	bl	8006744 <I2C_ITListenCplt>
 80058a0:	e032      	b.n	8005908 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b29      	cmp	r3, #41	; 0x29
 80058ac:	d10e      	bne.n	80058cc <I2C_Slave_ISR_IT+0xb6>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058b4:	d00a      	beq.n	80058cc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2210      	movs	r2, #16
 80058bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f001 f88d 	bl	80069de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fd0a 	bl	80062de <I2C_ITSlaveSeqCplt>
 80058ca:	e01d      	b.n	8005908 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2210      	movs	r2, #16
 80058d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80058d4:	e096      	b.n	8005a04 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2210      	movs	r2, #16
 80058dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <I2C_Slave_ISR_IT+0xe4>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058f6:	f040 8085 	bne.w	8005a04 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	4619      	mov	r1, r3
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 ff75 	bl	80067f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005906:	e07d      	b.n	8005a04 <I2C_Slave_ISR_IT+0x1ee>
 8005908:	e07c      	b.n	8005a04 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d030      	beq.n	8005978 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	089b      	lsrs	r3, r3, #2
 800591a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800591e:	2b00      	cmp	r3, #0
 8005920:	d02a      	beq.n	8005978 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d018      	beq.n	800595e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d14f      	bne.n	8005a08 <I2C_Slave_ISR_IT+0x1f2>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800596e:	d04b      	beq.n	8005a08 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fcb4 	bl	80062de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005976:	e047      	b.n	8005a08 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	08db      	lsrs	r3, r3, #3
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005990:	6939      	ldr	r1, [r7, #16]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fbe2 	bl	800615c <I2C_ITAddrCplt>
 8005998:	e037      	b.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d031      	beq.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d02b      	beq.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d018      	beq.n	80059ee <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80059ec:	e00d      	b.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059f4:	d002      	beq.n	80059fc <I2C_Slave_ISR_IT+0x1e6>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fc6e 	bl	80062de <I2C_ITSlaveSeqCplt>
 8005a02:	e002      	b.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005a08:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <I2C_Master_ISR_DMA+0x1a>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e0e1      	b.n	8005bfa <I2C_Master_ISR_DMA+0x1de>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d017      	beq.n	8005a7a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d011      	beq.n	8005a7a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a6a:	2120      	movs	r1, #32
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f001 fa95 	bl	8006f9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 ffb3 	bl	80069de <I2C_Flush_TXDR>
 8005a78:	e0ba      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	09db      	lsrs	r3, r3, #7
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d072      	beq.n	8005b6c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d06c      	beq.n	8005b6c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d04e      	beq.n	8005b4a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2bff      	cmp	r3, #255	; 0xff
 8005ac2:	d906      	bls.n	8005ad2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e010      	b.n	8005af4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae4:	d003      	beq.n	8005aee <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e002      	b.n	8005af4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005af2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	8a79      	ldrh	r1, [r7, #18]
 8005afc:	2300      	movs	r3, #0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f001 f9ce 	bl	8006ea4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b22      	cmp	r3, #34	; 0x22
 8005b24:	d108      	bne.n	8005b38 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b36:	e05b      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b48:	e052      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b58:	d003      	beq.n	8005b62 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fb82 	bl	8006264 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005b60:	e046      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b62:	2140      	movs	r1, #64	; 0x40
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fe43 	bl	80067f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005b6a:	e041      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	099b      	lsrs	r3, r3, #6
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d029      	beq.n	8005bcc <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	099b      	lsrs	r3, r3, #6
 8005b7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d023      	beq.n	8005bcc <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d119      	bne.n	8005bc2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b9c:	d027      	beq.n	8005bee <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ba6:	d108      	bne.n	8005bba <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005bb8:	e019      	b.n	8005bee <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fb52 	bl	8006264 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005bc0:	e015      	b.n	8005bee <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bc2:	2140      	movs	r1, #64	; 0x40
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fe13 	bl	80067f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005bca:	e010      	b.n	8005bee <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fbd8 	bl	800639c <I2C_ITMasterCplt>
 8005bec:	e000      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005bee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005c10:	4b8c      	ldr	r3, [pc, #560]	; (8005e44 <I2C_Mem_ISR_DMA+0x240>)
 8005c12:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <I2C_Mem_ISR_DMA+0x1e>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e10c      	b.n	8005e3c <I2C_Mem_ISR_DMA+0x238>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d017      	beq.n	8005c66 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d011      	beq.n	8005c66 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2210      	movs	r2, #16
 8005c48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	f043 0204 	orr.w	r2, r3, #4
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c56:	2120      	movs	r1, #32
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f001 f99f 	bl	8006f9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 febd 	bl	80069de <I2C_Flush_TXDR>
 8005c64:	e0e5      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00f      	beq.n	8005c92 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8005c90:	e0cf      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d05c      	beq.n	8005d58 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d056      	beq.n	8005d58 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005caa:	2110      	movs	r1, #16
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f001 f975 	bl	8006f9c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d048      	beq.n	8005d4e <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2bff      	cmp	r3, #255	; 0xff
 8005cc4:	d910      	bls.n	8005ce8 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	b299      	uxth	r1, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f001 f8df 	bl	8006ea4 <I2C_TransferConfig>
 8005ce6:	e011      	b.n	8005d0c <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	b299      	uxth	r1, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 f8cc 	bl	8006ea4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b22      	cmp	r3, #34	; 0x22
 8005d28:	d108      	bne.n	8005d3c <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d3a:	e07a      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d4c:	e071      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d4e:	2140      	movs	r1, #64	; 0x40
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fd4d 	bl	80067f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d56:	e06c      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	099b      	lsrs	r3, r3, #6
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d056      	beq.n	8005e12 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	099b      	lsrs	r3, r3, #6
 8005d68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d050      	beq.n	8005e12 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b22      	cmp	r3, #34	; 0x22
 8005d7a:	d101      	bne.n	8005d80 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8005d7c:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <I2C_Mem_ISR_DMA+0x244>)
 8005d7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2bff      	cmp	r3, #255	; 0xff
 8005d88:	d910      	bls.n	8005dac <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	22ff      	movs	r2, #255	; 0xff
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d94:	b299      	uxth	r1, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f001 f87d 	bl	8006ea4 <I2C_TransferConfig>
 8005daa:	e011      	b.n	8005dd0 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dba:	b299      	uxth	r1, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f001 f86a 	bl	8006ea4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b22      	cmp	r3, #34	; 0x22
 8005dec:	d108      	bne.n	8005e00 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dfc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dfe:	e018      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e10:	e00f      	b.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fab5 	bl	800639c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	80002000 	.word	0x80002000
 8005e48:	80002400 	.word	0x80002400

08005e4c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <I2C_Slave_ISR_DMA+0x24>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e0c9      	b.n	8006004 <I2C_Slave_ISR_DMA+0x1b8>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fb4c 	bl	8006530 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 809a 	beq.w	8005fda <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8093 	beq.w	8005fda <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	0b9b      	lsrs	r3, r3, #14
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0bdb      	lsrs	r3, r3, #15
 8005ec4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d07f      	beq.n	8005fcc <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	0bdb      	lsrs	r3, r3, #15
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005eec:	2301      	movs	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00d      	beq.n	8005f14 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0b9b      	lsrs	r3, r3, #14
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005f10:	2301      	movs	r3, #1
 8005f12:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d128      	bne.n	8005f6c <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b28      	cmp	r3, #40	; 0x28
 8005f24:	d108      	bne.n	8005f38 <I2C_Slave_ISR_DMA+0xec>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f2c:	d104      	bne.n	8005f38 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fc07 	bl	8006744 <I2C_ITListenCplt>
 8005f36:	e048      	b.n	8005fca <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b29      	cmp	r3, #41	; 0x29
 8005f42:	d10e      	bne.n	8005f62 <I2C_Slave_ISR_DMA+0x116>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f4a:	d00a      	beq.n	8005f62 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2210      	movs	r2, #16
 8005f52:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fd42 	bl	80069de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f9bf 	bl	80062de <I2C_ITSlaveSeqCplt>
 8005f60:	e033      	b.n	8005fca <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2210      	movs	r2, #16
 8005f68:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005f6a:	e034      	b.n	8005fd6 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2210      	movs	r2, #16
 8005f72:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f78:	f043 0204 	orr.w	r2, r3, #4
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f86:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <I2C_Slave_ISR_DMA+0x14a>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f94:	d11f      	bne.n	8005fd6 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	2b21      	cmp	r3, #33	; 0x21
 8005f9a:	d002      	beq.n	8005fa2 <I2C_Slave_ISR_DMA+0x156>
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	2b29      	cmp	r3, #41	; 0x29
 8005fa0:	d103      	bne.n	8005faa <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2221      	movs	r2, #33	; 0x21
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fa8:	e008      	b.n	8005fbc <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b22      	cmp	r3, #34	; 0x22
 8005fae:	d002      	beq.n	8005fb6 <I2C_Slave_ISR_DMA+0x16a>
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb4:	d102      	bne.n	8005fbc <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2222      	movs	r2, #34	; 0x22
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fc14 	bl	80067f0 <I2C_ITError>
      if (treatdmanack == 1U)
 8005fc8:	e005      	b.n	8005fd6 <I2C_Slave_ISR_DMA+0x18a>
 8005fca:	e004      	b.n	8005fd6 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fd4:	e011      	b.n	8005ffa <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005fd6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fd8:	e00f      	b.n	8005ffa <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	08db      	lsrs	r3, r3, #3
 8005fea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f8b1 	bl	800615c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	817b      	strh	r3, [r7, #10]
 800601e:	460b      	mov	r3, r1
 8006020:	813b      	strh	r3, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	8979      	ldrh	r1, [r7, #10]
 800602c:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <I2C_RequestMemoryWrite+0xa4>)
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 ff35 	bl	8006ea4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fdd4 	bl	8006bec <I2C_WaitOnTXISFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e02c      	b.n	80060a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
 800605e:	e015      	b.n	800608c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fdba 	bl	8006bec <I2C_WaitOnTXISFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e012      	b.n	80060a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006082:	893b      	ldrh	r3, [r7, #8]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2200      	movs	r2, #0
 8006094:	2180      	movs	r1, #128	; 0x80
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fd68 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	80002000 	.word	0x80002000

080060b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	8979      	ldrh	r1, [r7, #10]
 80060d4:	4b20      	ldr	r3, [pc, #128]	; (8006158 <I2C_RequestMemoryRead+0xa4>)
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fee2 	bl	8006ea4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fd81 	bl	8006bec <I2C_WaitOnTXISFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e02c      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e015      	b.n	8006132 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006106:	893b      	ldrh	r3, [r7, #8]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	b29b      	uxth	r3, r3
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fd67 	bl	8006bec <I2C_WaitOnTXISFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e012      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006128:	893b      	ldrh	r3, [r7, #8]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2200      	movs	r2, #0
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fd15 	bl	8006b6c <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	80002000 	.word	0x80002000

0800615c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006172:	2b28      	cmp	r3, #40	; 0x28
 8006174:	d16a      	bne.n	800624c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	b29b      	uxth	r3, r3
 8006190:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006194:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d138      	bne.n	800622c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80061ba:	897b      	ldrh	r3, [r7, #10]
 80061bc:	09db      	lsrs	r3, r3, #7
 80061be:	b29a      	uxth	r2, r3
 80061c0:	89bb      	ldrh	r3, [r7, #12]
 80061c2:	4053      	eors	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f003 0306 	and.w	r3, r3, #6
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11c      	bne.n	8006208 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80061ce:	897b      	ldrh	r3, [r7, #10]
 80061d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d13b      	bne.n	800625c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2208      	movs	r2, #8
 80061f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061fa:	89ba      	ldrh	r2, [r7, #12]
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fab8 	bl	8005776 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006206:	e029      	b.n	800625c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006208:	893b      	ldrh	r3, [r7, #8]
 800620a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800620c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 ff2d 	bl	8007070 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800621e:	89ba      	ldrh	r2, [r7, #12]
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff faa6 	bl	8005776 <HAL_I2C_AddrCallback>
}
 800622a:	e017      	b.n	800625c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800622c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 ff1d 	bl	8007070 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800623e:	89ba      	ldrh	r2, [r7, #12]
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fa96 	bl	8005776 <HAL_I2C_AddrCallback>
}
 800624a:	e007      	b.n	800625c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2208      	movs	r2, #8
 8006252:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b21      	cmp	r3, #33	; 0x21
 800627e:	d115      	bne.n	80062ac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2211      	movs	r2, #17
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006294:	2101      	movs	r1, #1
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 feea 	bl	8007070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fa3e 	bl	8005726 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062aa:	e014      	b.n	80062d6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2212      	movs	r2, #18
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062c0:	2102      	movs	r1, #2
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fed4 	bl	8007070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fa32 	bl	800573a <HAL_I2C_MasterRxCpltCallback>
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0b9b      	lsrs	r3, r3, #14
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e00d      	b.n	8006330 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	0bdb      	lsrs	r3, r3, #15
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800632e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b29      	cmp	r3, #41	; 0x29
 800633a:	d112      	bne.n	8006362 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2228      	movs	r2, #40	; 0x28
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2221      	movs	r2, #33	; 0x21
 8006348:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800634a:	2101      	movs	r1, #1
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fe8f 	bl	8007070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff f9f7 	bl	800574e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006360:	e017      	b.n	8006392 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b2a      	cmp	r3, #42	; 0x2a
 800636c:	d111      	bne.n	8006392 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2228      	movs	r2, #40	; 0x28
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2222      	movs	r2, #34	; 0x22
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800637c:	2102      	movs	r1, #2
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fe76 	bl	8007070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff f9e8 	bl	8005762 <HAL_I2C_SlaveRxCpltCallback>
}
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2220      	movs	r2, #32
 80063b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b21      	cmp	r3, #33	; 0x21
 80063bc:	d107      	bne.n	80063ce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063be:	2101      	movs	r1, #1
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fe55 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2211      	movs	r2, #17
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
 80063cc:	e00c      	b.n	80063e8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b22      	cmp	r3, #34	; 0x22
 80063d8:	d106      	bne.n	80063e8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063da:	2102      	movs	r1, #2
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fe47 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2212      	movs	r2, #18
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b4d      	ldr	r3, [pc, #308]	; (8006528 <I2C_ITMasterCplt+0x18c>)
 80063f4:	400b      	ands	r3, r1
 80063f6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a4a      	ldr	r2, [pc, #296]	; (800652c <I2C_ITMasterCplt+0x190>)
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2210      	movs	r2, #16
 8006416:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	f043 0204 	orr.w	r2, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b60      	cmp	r3, #96	; 0x60
 800642e:	d10b      	bne.n	8006448 <I2C_ITMasterCplt+0xac>
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	b2db      	uxtb	r3, r3
 8006444:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006446:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fac8 	bl	80069de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b60      	cmp	r3, #96	; 0x60
 800645e:	d002      	beq.n	8006466 <I2C_ITMasterCplt+0xca>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d006      	beq.n	8006474 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f9bf 	bl	80067f0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006472:	e054      	b.n	800651e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b21      	cmp	r3, #33	; 0x21
 800647e:	d124      	bne.n	80064ca <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d10b      	bne.n	80064b2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff f97b 	bl	80057a6 <HAL_I2C_MemTxCpltCallback>
}
 80064b0:	e035      	b.n	800651e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff f92f 	bl	8005726 <HAL_I2C_MasterTxCpltCallback>
}
 80064c8:	e029      	b.n	800651e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b22      	cmp	r3, #34	; 0x22
 80064d4:	d123      	bne.n	800651e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d10b      	bne.n	8006508 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fa fc05 	bl	8000d10 <HAL_I2C_MemRxCpltCallback>
}
 8006506:	e00a      	b.n	800651e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff f90e 	bl	800573a <HAL_I2C_MasterRxCpltCallback>
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	fe00e800 	.word	0xfe00e800
 800652c:	ffff0000 	.word	0xffff0000

08006530 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2220      	movs	r2, #32
 8006554:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	2b21      	cmp	r3, #33	; 0x21
 800655a:	d002      	beq.n	8006562 <I2C_ITSlaveCplt+0x32>
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	2b29      	cmp	r3, #41	; 0x29
 8006560:	d108      	bne.n	8006574 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006562:	f248 0101 	movw	r1, #32769	; 0x8001
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fd82 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2221      	movs	r2, #33	; 0x21
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
 8006572:	e00d      	b.n	8006590 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	2b22      	cmp	r3, #34	; 0x22
 8006578:	d002      	beq.n	8006580 <I2C_ITSlaveCplt+0x50>
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b2a      	cmp	r3, #42	; 0x2a
 800657e:	d107      	bne.n	8006590 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006580:	f248 0102 	movw	r1, #32770	; 0x8002
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fd73 	bl	8007070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2222      	movs	r2, #34	; 0x22
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6859      	ldr	r1, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b64      	ldr	r3, [pc, #400]	; (800673c <I2C_ITSlaveCplt+0x20c>)
 80065ac:	400b      	ands	r3, r1
 80065ae:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa14 	bl	80069de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	0b9b      	lsrs	r3, r3, #14
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d020      	beq.n	800661c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065e8:	e018      	b.n	800661c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	0bdb      	lsrs	r3, r3, #15
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006604:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d020      	beq.n	800666a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0304 	bic.w	r3, r3, #4
 800662e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006678:	f043 0204 	orr.w	r2, r3, #4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8a7 	bl	80067f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b28      	cmp	r3, #40	; 0x28
 80066ac:	d141      	bne.n	8006732 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f847 	bl	8006744 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066b6:	e03c      	b.n	8006732 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066c0:	d014      	beq.n	80066ec <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fe0b 	bl	80062de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <I2C_ITSlaveCplt+0x210>)
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff f854 	bl	8005792 <HAL_I2C_ListenCpltCallback>
}
 80066ea:	e022      	b.n	8006732 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b22      	cmp	r3, #34	; 0x22
 80066f6:	d10e      	bne.n	8006716 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff f827 	bl	8005762 <HAL_I2C_SlaveRxCpltCallback>
}
 8006714:	e00d      	b.n	8006732 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff f80e 	bl	800574e <HAL_I2C_SlaveTxCpltCallback>
}
 8006732:	bf00      	nop
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	fe00e800 	.word	0xfe00e800
 8006740:	ffff0000 	.word	0xffff0000

08006744 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <I2C_ITListenCplt+0xa8>)
 8006752:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d022      	beq.n	80067c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	d012      	beq.n	80067c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	f043 0204 	orr.w	r2, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067c2:	f248 0103 	movw	r1, #32771	; 0x8003
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fc52 	bl	8007070 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2210      	movs	r2, #16
 80067d2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7fe ffd8 	bl	8005792 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	ffff0000 	.word	0xffff0000

080067f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a5d      	ldr	r2, [pc, #372]	; (8006984 <I2C_ITError+0x194>)
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b28      	cmp	r3, #40	; 0x28
 8006826:	d005      	beq.n	8006834 <I2C_ITError+0x44>
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b29      	cmp	r3, #41	; 0x29
 800682c:	d002      	beq.n	8006834 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b2a      	cmp	r3, #42	; 0x2a
 8006832:	d10b      	bne.n	800684c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006834:	2103      	movs	r1, #3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fc1a 	bl	8007070 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2228      	movs	r2, #40	; 0x28
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a50      	ldr	r2, [pc, #320]	; (8006988 <I2C_ITError+0x198>)
 8006848:	635a      	str	r2, [r3, #52]	; 0x34
 800684a:	e011      	b.n	8006870 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800684c:	f248 0103 	movw	r1, #32771	; 0x8003
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc0d 	bl	8007070 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b60      	cmp	r3, #96	; 0x60
 8006860:	d003      	beq.n	800686a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d039      	beq.n	80068f2 <I2C_ITError+0x102>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b11      	cmp	r3, #17
 8006882:	d002      	beq.n	800688a <I2C_ITError+0x9a>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b21      	cmp	r3, #33	; 0x21
 8006888:	d133      	bne.n	80068f2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006898:	d107      	bne.n	80068aa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068a8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fd f8b8 	bl	8003a24 <HAL_DMA_GetState>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d017      	beq.n	80068ea <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	4a33      	ldr	r2, [pc, #204]	; (800698c <I2C_ITError+0x19c>)
 80068c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fc fefc 	bl	80036cc <HAL_DMA_Abort_IT>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04d      	beq.n	8006976 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068e8:	e045      	b.n	8006976 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f850 	bl	8006990 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068f0:	e041      	b.n	8006976 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d039      	beq.n	800696e <I2C_ITError+0x17e>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b12      	cmp	r3, #18
 80068fe:	d002      	beq.n	8006906 <I2C_ITError+0x116>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b22      	cmp	r3, #34	; 0x22
 8006904:	d133      	bne.n	800696e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006914:	d107      	bne.n	8006926 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006924:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	4618      	mov	r0, r3
 800692c:	f7fd f87a 	bl	8003a24 <HAL_DMA_GetState>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d017      	beq.n	8006966 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	4a14      	ldr	r2, [pc, #80]	; (800698c <I2C_ITError+0x19c>)
 800693c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694a:	4618      	mov	r0, r3
 800694c:	f7fc febe 	bl	80036cc <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006964:	e009      	b.n	800697a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f812 	bl	8006990 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800696c:	e005      	b.n	800697a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f80e 	bl	8006990 <I2C_TreatErrorCallback>
  }
}
 8006974:	e002      	b.n	800697c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800697a:	bf00      	nop
}
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	ffff0000 	.word	0xffff0000
 8006988:	08005817 	.word	0x08005817
 800698c:	08006b31 	.word	0x08006b31

08006990 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b60      	cmp	r3, #96	; 0x60
 80069a2:	d10e      	bne.n	80069c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fe ff07 	bl	80057ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069c0:	e009      	b.n	80069d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fe fef2 	bl	80057ba <HAL_I2C_ErrorCallback>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d103      	bne.n	80069fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2200      	movs	r2, #0
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d007      	beq.n	8006a1a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	619a      	str	r2, [r3, #24]
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a42:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a4e:	2120      	movs	r1, #32
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 faa3 	bl	8006f9c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006a56:	e02d      	b.n	8006ab4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2bff      	cmp	r3, #255	; 0xff
 8006a6e:	d903      	bls.n	8006a78 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	22ff      	movs	r2, #255	; 0xff
 8006a74:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a76:	e004      	b.n	8006a82 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006a98:	f7fc fdaa 	bl	80035f0 <HAL_DMA_Start_IT>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006aa2:	2110      	movs	r1, #16
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff fea3 	bl	80067f0 <I2C_ITError>
}
 8006aaa:	e003      	b.n	8006ab4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006aac:	2140      	movs	r1, #64	; 0x40
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fa74 	bl	8006f9c <I2C_Enable_IRQ>
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006afa:	2301      	movs	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fc ff9e 	bl	8003a40 <HAL_DMA_GetError>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d00e      	beq.n	8006b28 <I2C_DMAError+0x6c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b1e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b20:	2110      	movs	r1, #16
 8006b22:	68b8      	ldr	r0, [r7, #8]
 8006b24:	f7ff fe64 	bl	80067f0 <I2C_ITError>
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7ff ff16 	bl	8006990 <I2C_TreatErrorCallback>
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b7c:	e022      	b.n	8006bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b84:	d01e      	beq.n	8006bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b86:	f7fc f89b 	bl	8002cc0 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d113      	bne.n	8006bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	f043 0220 	orr.w	r2, r3, #32
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e00f      	b.n	8006be4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d0cd      	beq.n	8006b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bf8:	e02c      	b.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f870 	bl	8006ce4 <I2C_IsErrorOccurred>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e02a      	b.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d01e      	beq.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c16:	f7fc f853 	bl	8002cc0 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d113      	bne.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e007      	b.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d1cb      	bne.n	8006bfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c78:	e028      	b.n	8006ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f830 	bl	8006ce4 <I2C_IsErrorOccurred>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e026      	b.n	8006cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8e:	f7fc f817 	bl	8002cc0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d113      	bne.n	8006ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	f043 0220 	orr.w	r2, r3, #32
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e007      	b.n	8006cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d1cf      	bne.n	8006c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d068      	beq.n	8006de2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2210      	movs	r2, #16
 8006d16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d18:	e049      	b.n	8006dae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d045      	beq.n	8006dae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d22:	f7fb ffcd 	bl	8002cc0 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <I2C_IsErrorOccurred+0x54>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d13a      	bne.n	8006dae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5a:	d121      	bne.n	8006da0 <I2C_IsErrorOccurred+0xbc>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d62:	d01d      	beq.n	8006da0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d01a      	beq.n	8006da0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d7a:	f7fb ffa1 	bl	8002cc0 <HAL_GetTick>
 8006d7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d80:	e00e      	b.n	8006da0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d82:	f7fb ff9d 	bl	8002cc0 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b19      	cmp	r3, #25
 8006d8e:	d907      	bls.n	8006da0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	f043 0320 	orr.w	r3, r3, #32
 8006d96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006d9e:	e006      	b.n	8006dae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d1e9      	bne.n	8006d82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d003      	beq.n	8006dc4 <I2C_IsErrorOccurred+0xe0>
 8006dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0aa      	beq.n	8006d1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d103      	bne.n	8006dd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	f043 0304 	orr.w	r3, r3, #4
 8006dda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f043 0308 	orr.w	r3, r3, #8
 8006e1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	f043 0302 	orr.w	r3, r3, #2
 8006e3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01c      	beq.n	8006e92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff fdc0 	bl	80069de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6859      	ldr	r1, [r3, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <I2C_IsErrorOccurred+0x1bc>)
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	431a      	orrs	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3728      	adds	r7, #40	; 0x28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	fe00e800 	.word	0xfe00e800

08006ea4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	817b      	strh	r3, [r7, #10]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2f      	ldr	r2, [pc, #188]	; (8006f78 <I2C_TransferConfig+0xd4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d013      	beq.n	8006ee8 <I2C_TransferConfig+0x44>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2d      	ldr	r2, [pc, #180]	; (8006f7c <I2C_TransferConfig+0xd8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00e      	beq.n	8006ee8 <I2C_TransferConfig+0x44>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2c      	ldr	r2, [pc, #176]	; (8006f80 <I2C_TransferConfig+0xdc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <I2C_TransferConfig+0x44>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2a      	ldr	r2, [pc, #168]	; (8006f84 <I2C_TransferConfig+0xe0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <I2C_TransferConfig+0x44>
 8006ede:	f641 3147 	movw	r1, #6983	; 0x1b47
 8006ee2:	4829      	ldr	r0, [pc, #164]	; (8006f88 <I2C_TransferConfig+0xe4>)
 8006ee4:	f7f9 ff58 	bl	8000d98 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eee:	d00b      	beq.n	8006f08 <I2C_TransferConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef6:	d007      	beq.n	8006f08 <I2C_TransferConfig+0x64>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <I2C_TransferConfig+0x64>
 8006efe:	f641 3148 	movw	r1, #6984	; 0x1b48
 8006f02:	4821      	ldr	r0, [pc, #132]	; (8006f88 <I2C_TransferConfig+0xe4>)
 8006f04:	f7f9 ff48 	bl	8000d98 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	4a20      	ldr	r2, [pc, #128]	; (8006f8c <I2C_TransferConfig+0xe8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00f      	beq.n	8006f30 <I2C_TransferConfig+0x8c>
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <I2C_TransferConfig+0xec>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <I2C_TransferConfig+0x8c>
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <I2C_TransferConfig+0xf0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <I2C_TransferConfig+0x8c>
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <I2C_TransferConfig+0x8c>
 8006f26:	f641 3149 	movw	r1, #6985	; 0x1b49
 8006f2a:	4817      	ldr	r0, [pc, #92]	; (8006f88 <I2C_TransferConfig+0xe4>)
 8006f2c:	f7f9 ff34 	bl	8000d98 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f30:	897b      	ldrh	r3, [r7, #10]
 8006f32:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f36:	7a7b      	ldrb	r3, [r7, #9]
 8006f38:	041b      	lsls	r3, r3, #16
 8006f3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	0d5b      	lsrs	r3, r3, #21
 8006f58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <I2C_TransferConfig+0xf4>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	43db      	mvns	r3, r3
 8006f62:	ea02 0103 	and.w	r1, r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f70:	bf00      	nop
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40005400 	.word	0x40005400
 8006f7c:	40005800 	.word	0x40005800
 8006f80:	40005c00 	.word	0x40005c00
 8006f84:	40006000 	.word	0x40006000
 8006f88:	0800fa84 	.word	0x0800fa84
 8006f8c:	80004000 	.word	0x80004000
 8006f90:	80002400 	.word	0x80002400
 8006f94:	80002000 	.word	0x80002000
 8006f98:	03ff63ff 	.word	0x03ff63ff

08006f9c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <I2C_Enable_IRQ+0xcc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006fba:	4a2c      	ldr	r2, [pc, #176]	; (800706c <I2C_Enable_IRQ+0xd0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d11d      	bne.n	8006ffc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da03      	bge.n	8006fd0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006fce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006fd0:	887b      	ldrh	r3, [r7, #2]
 8006fd2:	2b10      	cmp	r3, #16
 8006fd4:	d103      	bne.n	8006fde <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006fdc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006fde:	887b      	ldrh	r3, [r7, #2]
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d103      	bne.n	8006fec <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006fec:	887b      	ldrh	r3, [r7, #2]
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d12c      	bne.n	800704c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006ffa:	e027      	b.n	800704c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ffc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da03      	bge.n	800700c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800700a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800700c:	887b      	ldrh	r3, [r7, #2]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800701c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800701e:	887b      	ldrh	r3, [r7, #2]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800702e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007030:	887b      	ldrh	r3, [r7, #2]
 8007032:	2b10      	cmp	r3, #16
 8007034:	d103      	bne.n	800703e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800703c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800703e:	887b      	ldrh	r3, [r7, #2]
 8007040:	2b20      	cmp	r3, #32
 8007042:	d103      	bne.n	800704c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f043 0320 	orr.w	r3, r3, #32
 800704a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6819      	ldr	r1, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	430a      	orrs	r2, r1
 800705a:	601a      	str	r2, [r3, #0]
}
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	08005a1d 	.word	0x08005a1d
 800706c:	08005e4d 	.word	0x08005e4d

08007070 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007080:	887b      	ldrh	r3, [r7, #2]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007090:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800709e:	2b28      	cmp	r3, #40	; 0x28
 80070a0:	d003      	beq.n	80070aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80070a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80070aa:	887b      	ldrh	r3, [r7, #2]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00f      	beq.n	80070d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80070ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070c8:	2b28      	cmp	r3, #40	; 0x28
 80070ca:	d003      	beq.n	80070d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80070d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80070d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da03      	bge.n	80070e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d103      	bne.n	80070f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80070f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d103      	bne.n	8007100 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f043 0320 	orr.w	r3, r3, #32
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d103      	bne.n	800710e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	43da      	mvns	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	400a      	ands	r2, r1
 800711e:	601a      	str	r2, [r3, #0]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a32      	ldr	r2, [pc, #200]	; (8007204 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d012      	beq.n	8007166 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a30      	ldr	r2, [pc, #192]	; (8007208 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00d      	beq.n	8007166 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2f      	ldr	r2, [pc, #188]	; (800720c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d008      	beq.n	8007166 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2d      	ldr	r2, [pc, #180]	; (8007210 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800715e:	215e      	movs	r1, #94	; 0x5e
 8007160:	482c      	ldr	r0, [pc, #176]	; (8007214 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8007162:	f7f9 fe19 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d003      	beq.n	800717c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8007174:	215f      	movs	r1, #95	; 0x5f
 8007176:	4827      	ldr	r0, [pc, #156]	; (8007214 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8007178:	f7f9 fe0e 	bl	8000d98 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b20      	cmp	r3, #32
 8007186:	d138      	bne.n	80071fa <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8007192:	2302      	movs	r3, #2
 8007194:	e032      	b.n	80071fc <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0201 	bic.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6819      	ldr	r1, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0201 	orr.w	r2, r2, #1
 80071e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40005400 	.word	0x40005400
 8007208:	40005800 	.word	0x40005800
 800720c:	40005c00 	.word	0x40005c00
 8007210:	40006000 	.word	0x40006000
 8007214:	0800fabc 	.word	0x0800fabc

08007218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a31      	ldr	r2, [pc, #196]	; (80072ec <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d012      	beq.n	8007252 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00d      	beq.n	8007252 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2e      	ldr	r2, [pc, #184]	; (80072f4 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d008      	beq.n	8007252 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2c      	ldr	r2, [pc, #176]	; (80072f8 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800724a:	218c      	movs	r1, #140	; 0x8c
 800724c:	482b      	ldr	r0, [pc, #172]	; (80072fc <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800724e:	f7f9 fda3 	bl	8000d98 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d903      	bls.n	8007260 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8007258:	218d      	movs	r1, #141	; 0x8d
 800725a:	4828      	ldr	r0, [pc, #160]	; (80072fc <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800725c:	f7f9 fd9c 	bl	8000d98 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b20      	cmp	r3, #32
 800726a:	d139      	bne.n	80072e0 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8007276:	2302      	movs	r3, #2
 8007278:	e033      	b.n	80072e2 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	; 0x24
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40005400 	.word	0x40005400
 80072f0:	40005800 	.word	0x40005800
 80072f4:	40005c00 	.word	0x40005c00
 80072f8:	40006000 	.word	0x40006000
 80072fc:	0800fabc 	.word	0x0800fabc

08007300 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007302:	b08f      	sub	sp, #60	; 0x3c
 8007304:	af0a      	add	r7, sp, #40	; 0x28
 8007306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e124      	b.n	800755c <HAL_PCD_Init+0x25c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800731a:	d008      	beq.n	800732e <HAL_PCD_Init+0x2e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a90      	ldr	r2, [pc, #576]	; (8007564 <HAL_PCD_Init+0x264>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <HAL_PCD_Init+0x2e>
 8007326:	2187      	movs	r1, #135	; 0x87
 8007328:	488f      	ldr	r0, [pc, #572]	; (8007568 <HAL_PCD_Init+0x268>)
 800732a:	f7f9 fd35 	bl	8000d98 <assert_failed>

  USBx = hpcd->Instance;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7f9 ffb7 	bl	80012bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2203      	movs	r2, #3
 8007352:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f003 fae7 	bl	800a940 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	687e      	ldr	r6, [r7, #4]
 800737a:	466d      	mov	r5, sp
 800737c:	f106 0410 	add.w	r4, r6, #16
 8007380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800738c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007390:	1d33      	adds	r3, r6, #4
 8007392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007394:	6838      	ldr	r0, [r7, #0]
 8007396:	f003 fa7b 	bl	800a890 <USB_CoreInit>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0d7      	b.n	800755c <HAL_PCD_Init+0x25c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f003 fad5 	bl	800a962 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
 80073bc:	e04a      	b.n	8007454 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073be:	7bfa      	ldrb	r2, [r7, #15]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	333d      	adds	r3, #61	; 0x3d
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073d2:	7bfa      	ldrb	r2, [r7, #15]
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	333c      	adds	r3, #60	; 0x3c
 80073e2:	7bfa      	ldrb	r2, [r7, #15]
 80073e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073e6:	7bfa      	ldrb	r2, [r7, #15]
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	b298      	uxth	r0, r3
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3344      	adds	r3, #68	; 0x44
 80073fa:	4602      	mov	r2, r0
 80073fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	3340      	adds	r3, #64	; 0x40
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	3348      	adds	r3, #72	; 0x48
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007426:	7bfa      	ldrb	r2, [r7, #15]
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	334c      	adds	r3, #76	; 0x4c
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800743a:	7bfa      	ldrb	r2, [r7, #15]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	3354      	adds	r3, #84	; 0x54
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	3301      	adds	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	7bfa      	ldrb	r2, [r7, #15]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d3af      	bcc.n	80073be <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
 8007462:	e044      	b.n	80074ee <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007464:	7bfa      	ldrb	r2, [r7, #15]
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	4613      	mov	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007490:	7bfa      	ldrb	r2, [r7, #15]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074a6:	7bfa      	ldrb	r2, [r7, #15]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074bc:	7bfa      	ldrb	r2, [r7, #15]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074d2:	7bfa      	ldrb	r2, [r7, #15]
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	4613      	mov	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	3301      	adds	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d3b5      	bcc.n	8007464 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	603b      	str	r3, [r7, #0]
 80074fe:	687e      	ldr	r6, [r7, #4]
 8007500:	466d      	mov	r5, sp
 8007502:	f106 0410 	add.w	r4, r6, #16
 8007506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800750a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800750c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800750e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007512:	e885 0003 	stmia.w	r5, {r0, r1}
 8007516:	1d33      	adds	r3, r6, #4
 8007518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800751a:	6838      	ldr	r0, [r7, #0]
 800751c:	f003 fa6e 	bl	800a9fc <USB_DevInit>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e014      	b.n	800755c <HAL_PCD_Init+0x25c>
  }

  hpcd->USB_Address = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b01      	cmp	r3, #1
 8007548:	d102      	bne.n	8007550 <HAL_PCD_Init+0x250>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f80e 	bl	800756c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f003 fc2c 	bl	800adb2 <USB_DevDisconnect>

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007564:	40040000 	.word	0x40040000
 8007568:	0800faf8 	.word	0x0800faf8

0800756c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800759a:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800759c:	4313      	orrs	r3, r2
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	10000003 	.word	0x10000003

080075b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a04      	ldr	r2, [pc, #16]	; (80075d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c2:	6013      	str	r3, [r2, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40007000 	.word	0x40007000

080075d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80075de:	4b23      	ldr	r3, [pc, #140]	; (800766c <HAL_PWREx_EnableOverDrive+0x98>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	4a22      	ldr	r2, [pc, #136]	; (800766c <HAL_PWREx_EnableOverDrive+0x98>)
 80075e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ea:	4b20      	ldr	r3, [pc, #128]	; (800766c <HAL_PWREx_EnableOverDrive+0x98>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80075f6:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007600:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007602:	f7fb fb5d 	bl	8002cc0 <HAL_GetTick>
 8007606:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007608:	e009      	b.n	800761e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800760a:	f7fb fb59 	bl	8002cc0 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007618:	d901      	bls.n	800761e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e022      	b.n	8007664 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762a:	d1ee      	bne.n	800760a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800762c:	4b10      	ldr	r3, [pc, #64]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0f      	ldr	r2, [pc, #60]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007636:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007638:	f7fb fb42 	bl	8002cc0 <HAL_GetTick>
 800763c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800763e:	e009      	b.n	8007654 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007640:	f7fb fb3e 	bl	8002cc0 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800764e:	d901      	bls.n	8007654 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e007      	b.n	8007664 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007660:	d1ee      	bne.n	8007640 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40023800 	.word	0x40023800
 8007670:	40007000 	.word	0x40007000

08007674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800767c:	2300      	movs	r3, #0
 800767e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e35c      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b0f      	cmp	r3, #15
 8007690:	d904      	bls.n	800769c <HAL_RCC_OscConfig+0x28>
 8007692:	f240 1163 	movw	r1, #355	; 0x163
 8007696:	4892      	ldr	r0, [pc, #584]	; (80078e0 <HAL_RCC_OscConfig+0x26c>)
 8007698:	f7f9 fb7e 	bl	8000d98 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 809a 	beq.w	80077de <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <HAL_RCC_OscConfig+0x5c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ba:	d009      	beq.n	80076d0 <HAL_RCC_OscConfig+0x5c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c4:	d004      	beq.n	80076d0 <HAL_RCC_OscConfig+0x5c>
 80076c6:	f240 1169 	movw	r1, #361	; 0x169
 80076ca:	4885      	ldr	r0, [pc, #532]	; (80078e0 <HAL_RCC_OscConfig+0x26c>)
 80076cc:	f7f9 fb64 	bl	8000d98 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076d0:	4b84      	ldr	r3, [pc, #528]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 030c 	and.w	r3, r3, #12
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d00c      	beq.n	80076f6 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076dc:	4b81      	ldr	r3, [pc, #516]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 030c 	and.w	r3, r3, #12
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d112      	bne.n	800770e <HAL_RCC_OscConfig+0x9a>
 80076e8:	4b7e      	ldr	r3, [pc, #504]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f4:	d10b      	bne.n	800770e <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f6:	4b7b      	ldr	r3, [pc, #492]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d06c      	beq.n	80077dc <HAL_RCC_OscConfig+0x168>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d168      	bne.n	80077dc <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e31a      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007716:	d106      	bne.n	8007726 <HAL_RCC_OscConfig+0xb2>
 8007718:	4b72      	ldr	r3, [pc, #456]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a71      	ldr	r2, [pc, #452]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800771e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	e02e      	b.n	8007784 <HAL_RCC_OscConfig+0x110>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10c      	bne.n	8007748 <HAL_RCC_OscConfig+0xd4>
 800772e:	4b6d      	ldr	r3, [pc, #436]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a6c      	ldr	r2, [pc, #432]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	4b6a      	ldr	r3, [pc, #424]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a69      	ldr	r2, [pc, #420]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e01d      	b.n	8007784 <HAL_RCC_OscConfig+0x110>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007750:	d10c      	bne.n	800776c <HAL_RCC_OscConfig+0xf8>
 8007752:	4b64      	ldr	r3, [pc, #400]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a63      	ldr	r2, [pc, #396]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	4b61      	ldr	r3, [pc, #388]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a60      	ldr	r2, [pc, #384]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e00b      	b.n	8007784 <HAL_RCC_OscConfig+0x110>
 800776c:	4b5d      	ldr	r3, [pc, #372]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5c      	ldr	r2, [pc, #368]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	4b5a      	ldr	r3, [pc, #360]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a59      	ldr	r2, [pc, #356]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800777e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d013      	beq.n	80077b4 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778c:	f7fb fa98 	bl	8002cc0 <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007794:	f7fb fa94 	bl	8002cc0 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b64      	cmp	r3, #100	; 0x64
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e2ce      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a6:	4b4f      	ldr	r3, [pc, #316]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0f0      	beq.n	8007794 <HAL_RCC_OscConfig+0x120>
 80077b2:	e014      	b.n	80077de <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b4:	f7fb fa84 	bl	8002cc0 <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077bc:	f7fb fa80 	bl	8002cc0 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b64      	cmp	r3, #100	; 0x64
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e2ba      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ce:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f0      	bne.n	80077bc <HAL_RCC_OscConfig+0x148>
 80077da:	e000      	b.n	80077de <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8084 	beq.w	80078f4 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <HAL_RCC_OscConfig+0x192>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d004      	beq.n	8007806 <HAL_RCC_OscConfig+0x192>
 80077fc:	f240 119b 	movw	r1, #411	; 0x19b
 8007800:	4837      	ldr	r0, [pc, #220]	; (80078e0 <HAL_RCC_OscConfig+0x26c>)
 8007802:	f7f9 fac9 	bl	8000d98 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b1f      	cmp	r3, #31
 800780c:	d904      	bls.n	8007818 <HAL_RCC_OscConfig+0x1a4>
 800780e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8007812:	4833      	ldr	r0, [pc, #204]	; (80078e0 <HAL_RCC_OscConfig+0x26c>)
 8007814:	f7f9 fac0 	bl	8000d98 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007818:	4b32      	ldr	r3, [pc, #200]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 030c 	and.w	r3, r3, #12
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007824:	4b2f      	ldr	r3, [pc, #188]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b08      	cmp	r3, #8
 800782e:	d11c      	bne.n	800786a <HAL_RCC_OscConfig+0x1f6>
 8007830:	4b2c      	ldr	r3, [pc, #176]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d116      	bne.n	800786a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_RCC_OscConfig+0x1e0>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d001      	beq.n	8007854 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e277      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007854:	4b23      	ldr	r3, [pc, #140]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	4920      	ldr	r1, [pc, #128]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007864:	4313      	orrs	r3, r2
 8007866:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007868:	e044      	b.n	80078f4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d023      	beq.n	80078ba <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a1b      	ldr	r2, [pc, #108]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 8007878:	f043 0301 	orr.w	r3, r3, #1
 800787c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787e:	f7fb fa1f 	bl	8002cc0 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007884:	e008      	b.n	8007898 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007886:	f7fb fa1b 	bl	8002cc0 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e255      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f0      	beq.n	8007886 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	600b      	str	r3, [r1, #0]
 80078b8:	e01c      	b.n	80078f4 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078ba:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <HAL_RCC_OscConfig+0x270>)
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c6:	f7fb f9fb 	bl	8002cc0 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078cc:	e00c      	b.n	80078e8 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078ce:	f7fb f9f7 	bl	8002cc0 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d905      	bls.n	80078e8 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e231      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
 80078e0:	0800fb30 	.word	0x0800fb30
 80078e4:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078e8:	4b7e      	ldr	r3, [pc, #504]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ec      	bne.n	80078ce <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d043      	beq.n	8007988 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_RCC_OscConfig+0x2a6>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d004      	beq.n	800791a <HAL_RCC_OscConfig+0x2a6>
 8007910:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007914:	4874      	ldr	r0, [pc, #464]	; (8007ae8 <HAL_RCC_OscConfig+0x474>)
 8007916:	f7f9 fa3f 	bl	8000d98 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d019      	beq.n	8007956 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007922:	4b70      	ldr	r3, [pc, #448]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007926:	4a6f      	ldr	r2, [pc, #444]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007928:	f043 0301 	orr.w	r3, r3, #1
 800792c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792e:	f7fb f9c7 	bl	8002cc0 <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007934:	e008      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007936:	f7fb f9c3 	bl	8002cc0 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e1fd      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007948:	4b66      	ldr	r3, [pc, #408]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 800794a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <HAL_RCC_OscConfig+0x2c2>
 8007954:	e018      	b.n	8007988 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007956:	4b63      	ldr	r3, [pc, #396]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795a:	4a62      	ldr	r2, [pc, #392]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007962:	f7fb f9ad 	bl	8002cc0 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800796a:	f7fb f9a9 	bl	8002cc0 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e1e3      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	4b59      	ldr	r3, [pc, #356]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 800797e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f0      	bne.n	800796a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80bc 	beq.w	8007b0e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00c      	beq.n	80079b8 <HAL_RCC_OscConfig+0x344>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d008      	beq.n	80079b8 <HAL_RCC_OscConfig+0x344>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d004      	beq.n	80079b8 <HAL_RCC_OscConfig+0x344>
 80079ae:	f240 2106 	movw	r1, #518	; 0x206
 80079b2:	484d      	ldr	r0, [pc, #308]	; (8007ae8 <HAL_RCC_OscConfig+0x474>)
 80079b4:	f7f9 f9f0 	bl	8000d98 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079b8:	4b4a      	ldr	r3, [pc, #296]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10d      	bne.n	80079e0 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80079c4:	4b47      	ldr	r3, [pc, #284]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	4a46      	ldr	r2, [pc, #280]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 80079ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ce:	6413      	str	r3, [r2, #64]	; 0x40
 80079d0:	4b44      	ldr	r3, [pc, #272]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079e0:	4b42      	ldr	r3, [pc, #264]	; (8007aec <HAL_RCC_OscConfig+0x478>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d118      	bne.n	8007a1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80079ec:	4b3f      	ldr	r3, [pc, #252]	; (8007aec <HAL_RCC_OscConfig+0x478>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a3e      	ldr	r2, [pc, #248]	; (8007aec <HAL_RCC_OscConfig+0x478>)
 80079f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f8:	f7fb f962 	bl	8002cc0 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a00:	f7fb f95e 	bl	8002cc0 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e198      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a12:	4b36      	ldr	r3, [pc, #216]	; (8007aec <HAL_RCC_OscConfig+0x478>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d106      	bne.n	8007a34 <HAL_RCC_OscConfig+0x3c0>
 8007a26:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	4a2e      	ldr	r2, [pc, #184]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6713      	str	r3, [r2, #112]	; 0x70
 8007a32:	e02d      	b.n	8007a90 <HAL_RCC_OscConfig+0x41c>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10c      	bne.n	8007a56 <HAL_RCC_OscConfig+0x3e2>
 8007a3c:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	4a28      	ldr	r2, [pc, #160]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a42:	f023 0301 	bic.w	r3, r3, #1
 8007a46:	6713      	str	r3, [r2, #112]	; 0x70
 8007a48:	4b26      	ldr	r3, [pc, #152]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a25      	ldr	r2, [pc, #148]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a4e:	f023 0304 	bic.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
 8007a54:	e01c      	b.n	8007a90 <HAL_RCC_OscConfig+0x41c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	d10c      	bne.n	8007a78 <HAL_RCC_OscConfig+0x404>
 8007a5e:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	4a20      	ldr	r2, [pc, #128]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a64:	f043 0304 	orr.w	r3, r3, #4
 8007a68:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a70:	f043 0301 	orr.w	r3, r3, #1
 8007a74:	6713      	str	r3, [r2, #112]	; 0x70
 8007a76:	e00b      	b.n	8007a90 <HAL_RCC_OscConfig+0x41c>
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7c:	4a19      	ldr	r2, [pc, #100]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	f023 0301 	bic.w	r3, r3, #1
 8007a82:	6713      	str	r3, [r2, #112]	; 0x70
 8007a84:	4b17      	ldr	r3, [pc, #92]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	4a16      	ldr	r2, [pc, #88]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007a8a:	f023 0304 	bic.w	r3, r3, #4
 8007a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d015      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a98:	f7fb f912 	bl	8002cc0 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a9e:	e00a      	b.n	8007ab6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa0:	f7fb f90e 	bl	8002cc0 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e146      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ee      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x42c>
 8007ac2:	e01b      	b.n	8007afc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fb f8fc 	bl	8002cc0 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aca:	e011      	b.n	8007af0 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007acc:	f7fb f8f8 	bl	8002cc0 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d908      	bls.n	8007af0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e130      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
 8007ae2:	bf00      	nop
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	0800fb30 	.word	0x0800fb30
 8007aec:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af0:	4b96      	ldr	r3, [pc, #600]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e7      	bne.n	8007acc <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d105      	bne.n	8007b0e <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b02:	4b92      	ldr	r3, [pc, #584]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	4a91      	ldr	r2, [pc, #580]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <HAL_RCC_OscConfig+0x4bc>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d008      	beq.n	8007b30 <HAL_RCC_OscConfig+0x4bc>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d004      	beq.n	8007b30 <HAL_RCC_OscConfig+0x4bc>
 8007b26:	f240 214a 	movw	r1, #586	; 0x24a
 8007b2a:	4889      	ldr	r0, [pc, #548]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007b2c:	f7f9 f934 	bl	8000d98 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8104 	beq.w	8007d42 <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b3a:	4b84      	ldr	r3, [pc, #528]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 030c 	and.w	r3, r3, #12
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	f000 80c3 	beq.w	8007cce <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	f040 80a4 	bne.w	8007c9a <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <HAL_RCC_OscConfig+0x4fa>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b62:	d004      	beq.n	8007b6e <HAL_RCC_OscConfig+0x4fa>
 8007b64:	f240 2153 	movw	r1, #595	; 0x253
 8007b68:	4879      	ldr	r0, [pc, #484]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007b6a:	f7f9 f915 	bl	8000d98 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d903      	bls.n	8007b7e <HAL_RCC_OscConfig+0x50a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b7c:	d904      	bls.n	8007b88 <HAL_RCC_OscConfig+0x514>
 8007b7e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8007b82:	4873      	ldr	r0, [pc, #460]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007b84:	f7f9 f908 	bl	8000d98 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b31      	cmp	r3, #49	; 0x31
 8007b8e:	d904      	bls.n	8007b9a <HAL_RCC_OscConfig+0x526>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007b98:	d904      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x530>
 8007b9a:	f240 2155 	movw	r1, #597	; 0x255
 8007b9e:	486c      	ldr	r0, [pc, #432]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007ba0:	f7f9 f8fa 	bl	8000d98 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d010      	beq.n	8007bce <HAL_RCC_OscConfig+0x55a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d00c      	beq.n	8007bce <HAL_RCC_OscConfig+0x55a>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	2b06      	cmp	r3, #6
 8007bba:	d008      	beq.n	8007bce <HAL_RCC_OscConfig+0x55a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d004      	beq.n	8007bce <HAL_RCC_OscConfig+0x55a>
 8007bc4:	f240 2156 	movw	r1, #598	; 0x256
 8007bc8:	4861      	ldr	r0, [pc, #388]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007bca:	f7f9 f8e5 	bl	8000d98 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d903      	bls.n	8007bde <HAL_RCC_OscConfig+0x56a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	2b0f      	cmp	r3, #15
 8007bdc:	d904      	bls.n	8007be8 <HAL_RCC_OscConfig+0x574>
 8007bde:	f240 2157 	movw	r1, #599	; 0x257
 8007be2:	485b      	ldr	r0, [pc, #364]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007be4:	f7f9 f8d8 	bl	8000d98 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d903      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x584>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	2b07      	cmp	r3, #7
 8007bf6:	d904      	bls.n	8007c02 <HAL_RCC_OscConfig+0x58e>
 8007bf8:	f240 2159 	movw	r1, #601	; 0x259
 8007bfc:	4854      	ldr	r0, [pc, #336]	; (8007d50 <HAL_RCC_OscConfig+0x6dc>)
 8007bfe:	f7f9 f8cb 	bl	8000d98 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c02:	4b52      	ldr	r3, [pc, #328]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a51      	ldr	r2, [pc, #324]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0e:	f7fb f857 	bl	8002cc0 <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c16:	f7fb f853 	bl	8002cc0 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e08d      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c28:	4b48      	ldr	r3, [pc, #288]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f0      	bne.n	8007c16 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69da      	ldr	r2, [r3, #28]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	019b      	lsls	r3, r3, #6
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	061b      	lsls	r3, r3, #24
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	071b      	lsls	r3, r3, #28
 8007c60:	493a      	ldr	r1, [pc, #232]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a38      	ldr	r2, [pc, #224]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c72:	f7fb f825 	bl	8002cc0 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c7a:	f7fb f821 	bl	8002cc0 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e05b      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c8c:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0f0      	beq.n	8007c7a <HAL_RCC_OscConfig+0x606>
 8007c98:	e053      	b.n	8007d42 <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c9a:	4b2c      	ldr	r3, [pc, #176]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2b      	ldr	r2, [pc, #172]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca6:	f7fb f80b 	bl	8002cc0 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cae:	f7fb f807 	bl	8002cc0 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e041      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc0:	4b22      	ldr	r3, [pc, #136]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f0      	bne.n	8007cae <HAL_RCC_OscConfig+0x63a>
 8007ccc:	e039      	b.n	8007d42 <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007cce:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <HAL_RCC_OscConfig+0x6d8>)
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d030      	beq.n	8007d3e <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d129      	bne.n	8007d3e <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d122      	bne.n	8007d3e <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cfe:	4013      	ands	r3, r2
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d04:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d119      	bne.n	8007d3e <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	085b      	lsrs	r3, r3, #1
 8007d16:	3b01      	subs	r3, #1
 8007d18:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d10f      	bne.n	8007d3e <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d107      	bne.n	8007d3e <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d001      	beq.n	8007d42 <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	0800fb30 	.word	0x0800fb30

08007d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e18c      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x28>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b0f      	cmp	r3, #15
 8007d7a:	d904      	bls.n	8007d86 <HAL_RCC_ClockConfig+0x32>
 8007d7c:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007d80:	4887      	ldr	r0, [pc, #540]	; (8007fa0 <HAL_RCC_ClockConfig+0x24c>)
 8007d82:	f7f9 f809 	bl	8000d98 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d031      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d02e      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d02b      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d028      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d025      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d022      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b06      	cmp	r3, #6
 8007dae:	d01f      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	d01c      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d019      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b09      	cmp	r3, #9
 8007dc0:	d016      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b0a      	cmp	r3, #10
 8007dc6:	d013      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b0b      	cmp	r3, #11
 8007dcc:	d010      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b0c      	cmp	r3, #12
 8007dd2:	d00d      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b0d      	cmp	r3, #13
 8007dd8:	d00a      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b0e      	cmp	r3, #14
 8007dde:	d007      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d004      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x9c>
 8007de6:	f240 21de 	movw	r1, #734	; 0x2de
 8007dea:	486d      	ldr	r0, [pc, #436]	; (8007fa0 <HAL_RCC_ClockConfig+0x24c>)
 8007dec:	f7f8 ffd4 	bl	8000d98 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007df0:	4b6c      	ldr	r3, [pc, #432]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d910      	bls.n	8007e20 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dfe:	4b69      	ldr	r3, [pc, #420]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f023 020f 	bic.w	r2, r3, #15
 8007e06:	4967      	ldr	r1, [pc, #412]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e0e:	4b65      	ldr	r3, [pc, #404]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d001      	beq.n	8007e20 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e132      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d049      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e38:	4b5b      	ldr	r3, [pc, #364]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	4a5a      	ldr	r2, [pc, #360]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e50:	4b55      	ldr	r3, [pc, #340]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	4a54      	ldr	r2, [pc, #336]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d024      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d020      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2b90      	cmp	r3, #144	; 0x90
 8007e72:	d01c      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2ba0      	cmp	r3, #160	; 0xa0
 8007e7a:	d018      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2bb0      	cmp	r3, #176	; 0xb0
 8007e82:	d014      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2bc0      	cmp	r3, #192	; 0xc0
 8007e8a:	d010      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2bd0      	cmp	r3, #208	; 0xd0
 8007e92:	d00c      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2be0      	cmp	r3, #224	; 0xe0
 8007e9a:	d008      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2bf0      	cmp	r3, #240	; 0xf0
 8007ea2:	d004      	beq.n	8007eae <HAL_RCC_ClockConfig+0x15a>
 8007ea4:	f240 3102 	movw	r1, #770	; 0x302
 8007ea8:	483d      	ldr	r0, [pc, #244]	; (8007fa0 <HAL_RCC_ClockConfig+0x24c>)
 8007eaa:	f7f8 ff75 	bl	8000d98 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eae:	4b3e      	ldr	r3, [pc, #248]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	493b      	ldr	r1, [pc, #236]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d051      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00c      	beq.n	8007eee <HAL_RCC_ClockConfig+0x19a>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d008      	beq.n	8007eee <HAL_RCC_ClockConfig+0x19a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d004      	beq.n	8007eee <HAL_RCC_ClockConfig+0x19a>
 8007ee4:	f240 3109 	movw	r1, #777	; 0x309
 8007ee8:	482d      	ldr	r0, [pc, #180]	; (8007fa0 <HAL_RCC_ClockConfig+0x24c>)
 8007eea:	f7f8 ff55 	bl	8000d98 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ef6:	4b2c      	ldr	r3, [pc, #176]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d115      	bne.n	8007f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e0bf      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d107      	bne.n	8007f1e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f0e:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e0b3      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f1e:	4b22      	ldr	r3, [pc, #136]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e0ab      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f2e:	4b1e      	ldr	r3, [pc, #120]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 0203 	bic.w	r2, r3, #3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	491b      	ldr	r1, [pc, #108]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f40:	f7fa febe 	bl	8002cc0 <HAL_GetTick>
 8007f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f46:	e00a      	b.n	8007f5e <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f48:	f7fa feba 	bl	8002cc0 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e093      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <HAL_RCC_ClockConfig+0x254>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 020c 	and.w	r2, r3, #12
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d1eb      	bne.n	8007f48 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d216      	bcs.n	8007fac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f023 020f 	bic.w	r2, r3, #15
 8007f86:	4907      	ldr	r1, [pc, #28]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <HAL_RCC_ClockConfig+0x250>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d007      	beq.n	8007fac <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e072      	b.n	8008086 <HAL_RCC_ClockConfig+0x332>
 8007fa0:	0800fb30 	.word	0x0800fb30
 8007fa4:	40023c00 	.word	0x40023c00
 8007fa8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d025      	beq.n	8008004 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d018      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x29e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc8:	d013      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x29e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x29e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007fdc:	d009      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x29e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007fe6:	d004      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x29e>
 8007fe8:	f240 3146 	movw	r1, #838	; 0x346
 8007fec:	4828      	ldr	r0, [pc, #160]	; (8008090 <HAL_RCC_ClockConfig+0x33c>)
 8007fee:	f7f8 fed3 	bl	8000d98 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ff2:	4b28      	ldr	r3, [pc, #160]	; (8008094 <HAL_RCC_ClockConfig+0x340>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	4925      	ldr	r1, [pc, #148]	; (8008094 <HAL_RCC_ClockConfig+0x340>)
 8008000:	4313      	orrs	r3, r2
 8008002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d026      	beq.n	800805e <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d018      	beq.n	800804a <HAL_RCC_ClockConfig+0x2f6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008020:	d013      	beq.n	800804a <HAL_RCC_ClockConfig+0x2f6>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800802a:	d00e      	beq.n	800804a <HAL_RCC_ClockConfig+0x2f6>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008034:	d009      	beq.n	800804a <HAL_RCC_ClockConfig+0x2f6>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800803e:	d004      	beq.n	800804a <HAL_RCC_ClockConfig+0x2f6>
 8008040:	f240 314d 	movw	r1, #845	; 0x34d
 8008044:	4812      	ldr	r0, [pc, #72]	; (8008090 <HAL_RCC_ClockConfig+0x33c>)
 8008046:	f7f8 fea7 	bl	8000d98 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800804a:	4b12      	ldr	r3, [pc, #72]	; (8008094 <HAL_RCC_ClockConfig+0x340>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	490e      	ldr	r1, [pc, #56]	; (8008094 <HAL_RCC_ClockConfig+0x340>)
 800805a:	4313      	orrs	r3, r2
 800805c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800805e:	f000 f821 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 8008062:	4602      	mov	r2, r0
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <HAL_RCC_ClockConfig+0x340>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	091b      	lsrs	r3, r3, #4
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	490a      	ldr	r1, [pc, #40]	; (8008098 <HAL_RCC_ClockConfig+0x344>)
 8008070:	5ccb      	ldrb	r3, [r1, r3]
 8008072:	fa22 f303 	lsr.w	r3, r2, r3
 8008076:	4a09      	ldr	r2, [pc, #36]	; (800809c <HAL_RCC_ClockConfig+0x348>)
 8008078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <HAL_RCC_ClockConfig+0x34c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f7f9 f996 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	0800fb30 	.word	0x0800fb30
 8008094:	40023800 	.word	0x40023800
 8008098:	0800fd10 	.word	0x0800fd10
 800809c:	20000004 	.word	0x20000004
 80080a0:	20000008 	.word	0x20000008

080080a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080a8:	b094      	sub	sp, #80	; 0x50
 80080aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	647b      	str	r3, [r7, #68]	; 0x44
 80080b0:	2300      	movs	r3, #0
 80080b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080b4:	2300      	movs	r3, #0
 80080b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080bc:	4b79      	ldr	r3, [pc, #484]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 030c 	and.w	r3, r3, #12
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d00d      	beq.n	80080e4 <HAL_RCC_GetSysClockFreq+0x40>
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	f200 80e1 	bhi.w	8008290 <HAL_RCC_GetSysClockFreq+0x1ec>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_RCC_GetSysClockFreq+0x34>
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d003      	beq.n	80080de <HAL_RCC_GetSysClockFreq+0x3a>
 80080d6:	e0db      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080d8:	4b73      	ldr	r3, [pc, #460]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80080da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080dc:	e0db      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080de:	4b73      	ldr	r3, [pc, #460]	; (80082ac <HAL_RCC_GetSysClockFreq+0x208>)
 80080e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080e2:	e0d8      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080e4:	4b6f      	ldr	r3, [pc, #444]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80080ee:	4b6d      	ldr	r3, [pc, #436]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d063      	beq.n	80081c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080fa:	4b6a      	ldr	r3, [pc, #424]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	099b      	lsrs	r3, r3, #6
 8008100:	2200      	movs	r2, #0
 8008102:	63bb      	str	r3, [r7, #56]	; 0x38
 8008104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810c:	633b      	str	r3, [r7, #48]	; 0x30
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
 8008112:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008116:	4622      	mov	r2, r4
 8008118:	462b      	mov	r3, r5
 800811a:	f04f 0000 	mov.w	r0, #0
 800811e:	f04f 0100 	mov.w	r1, #0
 8008122:	0159      	lsls	r1, r3, #5
 8008124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008128:	0150      	lsls	r0, r2, #5
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4621      	mov	r1, r4
 8008130:	1a51      	subs	r1, r2, r1
 8008132:	6139      	str	r1, [r7, #16]
 8008134:	4629      	mov	r1, r5
 8008136:	eb63 0301 	sbc.w	r3, r3, r1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008148:	4659      	mov	r1, fp
 800814a:	018b      	lsls	r3, r1, #6
 800814c:	4651      	mov	r1, sl
 800814e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008152:	4651      	mov	r1, sl
 8008154:	018a      	lsls	r2, r1, #6
 8008156:	4651      	mov	r1, sl
 8008158:	ebb2 0801 	subs.w	r8, r2, r1
 800815c:	4659      	mov	r1, fp
 800815e:	eb63 0901 	sbc.w	r9, r3, r1
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800816e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008176:	4690      	mov	r8, r2
 8008178:	4699      	mov	r9, r3
 800817a:	4623      	mov	r3, r4
 800817c:	eb18 0303 	adds.w	r3, r8, r3
 8008180:	60bb      	str	r3, [r7, #8]
 8008182:	462b      	mov	r3, r5
 8008184:	eb49 0303 	adc.w	r3, r9, r3
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	f04f 0200 	mov.w	r2, #0
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008196:	4629      	mov	r1, r5
 8008198:	024b      	lsls	r3, r1, #9
 800819a:	4621      	mov	r1, r4
 800819c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081a0:	4621      	mov	r1, r4
 80081a2:	024a      	lsls	r2, r1, #9
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081aa:	2200      	movs	r2, #0
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081b4:	f7f8 f88a 	bl	80002cc <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4613      	mov	r3, r2
 80081be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c0:	e058      	b.n	8008274 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081c2:	4b38      	ldr	r3, [pc, #224]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	099b      	lsrs	r3, r3, #6
 80081c8:	2200      	movs	r2, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	4611      	mov	r1, r2
 80081ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081d2:	623b      	str	r3, [r7, #32]
 80081d4:	2300      	movs	r3, #0
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
 80081d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081dc:	4642      	mov	r2, r8
 80081de:	464b      	mov	r3, r9
 80081e0:	f04f 0000 	mov.w	r0, #0
 80081e4:	f04f 0100 	mov.w	r1, #0
 80081e8:	0159      	lsls	r1, r3, #5
 80081ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ee:	0150      	lsls	r0, r2, #5
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4641      	mov	r1, r8
 80081f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80081fa:	4649      	mov	r1, r9
 80081fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800820c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008210:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008214:	ebb2 040a 	subs.w	r4, r2, sl
 8008218:	eb63 050b 	sbc.w	r5, r3, fp
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	00eb      	lsls	r3, r5, #3
 8008226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800822a:	00e2      	lsls	r2, r4, #3
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	4643      	mov	r3, r8
 8008232:	18e3      	adds	r3, r4, r3
 8008234:	603b      	str	r3, [r7, #0]
 8008236:	464b      	mov	r3, r9
 8008238:	eb45 0303 	adc.w	r3, r5, r3
 800823c:	607b      	str	r3, [r7, #4]
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800824a:	4629      	mov	r1, r5
 800824c:	028b      	lsls	r3, r1, #10
 800824e:	4621      	mov	r1, r4
 8008250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008254:	4621      	mov	r1, r4
 8008256:	028a      	lsls	r2, r1, #10
 8008258:	4610      	mov	r0, r2
 800825a:	4619      	mov	r1, r3
 800825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825e:	2200      	movs	r2, #0
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	61fa      	str	r2, [r7, #28]
 8008264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008268:	f7f8 f830 	bl	80002cc <__aeabi_uldivmod>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4613      	mov	r3, r2
 8008272:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	3301      	adds	r3, #1
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008288:	fbb2 f3f3 	udiv	r3, r2, r3
 800828c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800828e:	e002      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008292:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008298:	4618      	mov	r0, r3
 800829a:	3750      	adds	r7, #80	; 0x50
 800829c:	46bd      	mov	sp, r7
 800829e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a2:	bf00      	nop
 80082a4:	40023800 	.word	0x40023800
 80082a8:	00f42400 	.word	0x00f42400
 80082ac:	007a1200 	.word	0x007a1200

080082b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80082b6:	681b      	ldr	r3, [r3, #0]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000004 	.word	0x20000004

080082c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082cc:	f7ff fff0 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 80082d0:	4602      	mov	r2, r0
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	0a9b      	lsrs	r3, r3, #10
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	4903      	ldr	r1, [pc, #12]	; (80082ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80082de:	5ccb      	ldrb	r3, [r1, r3]
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40023800 	.word	0x40023800
 80082ec:	0800fd20 	.word	0x0800fd20

080082f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082f4:	f7ff ffdc 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 80082f8:	4602      	mov	r2, r0
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	0b5b      	lsrs	r3, r3, #13
 8008300:	f003 0307 	and.w	r3, r3, #7
 8008304:	4903      	ldr	r1, [pc, #12]	; (8008314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008306:	5ccb      	ldrb	r3, [r1, r3]
 8008308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800830c:	4618      	mov	r0, r3
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40023800 	.word	0x40023800
 8008314:	0800fd20 	.word	0x0800fd20

08008318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	220f      	movs	r2, #15
 8008326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008328:	4b12      	ldr	r3, [pc, #72]	; (8008374 <HAL_RCC_GetClockConfig+0x5c>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f003 0203 	and.w	r2, r3, #3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <HAL_RCC_GetClockConfig+0x5c>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <HAL_RCC_GetClockConfig+0x5c>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800834c:	4b09      	ldr	r3, [pc, #36]	; (8008374 <HAL_RCC_GetClockConfig+0x5c>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	08db      	lsrs	r3, r3, #3
 8008352:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <HAL_RCC_GetClockConfig+0x60>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 020f 	and.w	r2, r3, #15
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	601a      	str	r2, [r3, #0]
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40023800 	.word	0x40023800
 8008378:	40023c00 	.word	0x40023c00

0800837c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 809e 	bne.w	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f040 8097 	bne.w	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f040 8090 	bne.w	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f040 8089 	bne.w	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 8082 	bne.w	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d17b      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d175      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d16f      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800840a:	2b00      	cmp	r3, #0
 800840c:	d169      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d163      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d15d      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d157      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d151      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d14b      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d145      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d13f      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d139      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d133      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d12d      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d127      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d121      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d11b      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d115      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10f      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084da:	2172      	movs	r1, #114	; 0x72
 80084dc:	4895      	ldr	r0, [pc, #596]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80084de:	f7f8 fc5b 	bl	8000d98 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01f      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d008      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084fe:	d003      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008500:	2178      	movs	r1, #120	; 0x78
 8008502:	488c      	ldr	r0, [pc, #560]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8008504:	f7f8 fc48 	bl	8000d98 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008508:	4b8b      	ldr	r3, [pc, #556]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4a8a      	ldr	r2, [pc, #552]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800850e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008512:	6093      	str	r3, [r2, #8]
 8008514:	4b88      	ldr	r3, [pc, #544]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851c:	4986      	ldr	r1, [pc, #536]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800851e:	4313      	orrs	r3, r2
 8008520:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d02e      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d012      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800854a:	d00d      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008554:	d008      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800855e:	d003      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8008560:	2188      	movs	r1, #136	; 0x88
 8008562:	4874      	ldr	r0, [pc, #464]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8008564:	f7f8 fc18 	bl	8000d98 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008568:	4b73      	ldr	r3, [pc, #460]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800856a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800856e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	4970      	ldr	r1, [pc, #448]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008578:	4313      	orrs	r3, r2
 800857a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008586:	d101      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8008588:	2301      	movs	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8008594:	2301      	movs	r3, #1
 8008596:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d02e      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d012      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085b4:	d00d      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085be:	d008      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085c8:	d003      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80085ca:	219c      	movs	r1, #156	; 0x9c
 80085cc:	4859      	ldr	r0, [pc, #356]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80085ce:	f7f8 fbe3 	bl	8000d98 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085d2:	4b59      	ldr	r3, [pc, #356]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80085d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	4955      	ldr	r1, [pc, #340]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085f0:	d101      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 80085f2:	2301      	movs	r3, #1
 80085f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 80085fe:	2301      	movs	r3, #1
 8008600:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 800860e:	2301      	movs	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8185 	beq.w	800892a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008628:	f000 80e0 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008634:	f000 80da 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	4a3f      	ldr	r2, [pc, #252]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	f000 80d4 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	4a3d      	ldr	r2, [pc, #244]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	f000 80ce 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008654:	4a3b      	ldr	r2, [pc, #236]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	f000 80c8 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008660:	4a39      	ldr	r2, [pc, #228]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f000 80c2 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	4a37      	ldr	r2, [pc, #220]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	f000 80bc 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008678:	4a35      	ldr	r2, [pc, #212]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f000 80b6 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	4a33      	ldr	r2, [pc, #204]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	f000 80b0 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008690:	4a31      	ldr	r2, [pc, #196]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	f000 80aa 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	4a2f      	ldr	r2, [pc, #188]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	f000 80a4 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	4a2d      	ldr	r2, [pc, #180]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	f000 809e 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	4a2b      	ldr	r2, [pc, #172]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	f000 8098 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c0:	4a29      	ldr	r2, [pc, #164]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	f000 8092 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	4a27      	ldr	r2, [pc, #156]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	f000 808c 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	4a25      	ldr	r2, [pc, #148]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	f000 8086 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	4a23      	ldr	r2, [pc, #140]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	f000 8080 	beq.w	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d07a      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	4a20      	ldr	r2, [pc, #128]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d075      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	4a1e      	ldr	r2, [pc, #120]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d070      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d06b      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d066      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	4a1a      	ldr	r2, [pc, #104]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d061      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	4a18      	ldr	r2, [pc, #96]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d05c      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008732:	e02f      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008734:	0800fb68 	.word	0x0800fb68
 8008738:	40023800 	.word	0x40023800
 800873c:	00020300 	.word	0x00020300
 8008740:	00030300 	.word	0x00030300
 8008744:	00040300 	.word	0x00040300
 8008748:	00050300 	.word	0x00050300
 800874c:	00060300 	.word	0x00060300
 8008750:	00070300 	.word	0x00070300
 8008754:	00080300 	.word	0x00080300
 8008758:	00090300 	.word	0x00090300
 800875c:	000a0300 	.word	0x000a0300
 8008760:	000b0300 	.word	0x000b0300
 8008764:	000c0300 	.word	0x000c0300
 8008768:	000d0300 	.word	0x000d0300
 800876c:	000e0300 	.word	0x000e0300
 8008770:	000f0300 	.word	0x000f0300
 8008774:	00100300 	.word	0x00100300
 8008778:	00110300 	.word	0x00110300
 800877c:	00120300 	.word	0x00120300
 8008780:	00130300 	.word	0x00130300
 8008784:	00140300 	.word	0x00140300
 8008788:	00150300 	.word	0x00150300
 800878c:	00160300 	.word	0x00160300
 8008790:	00170300 	.word	0x00170300
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	4a50      	ldr	r2, [pc, #320]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d026      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	4a4f      	ldr	r2, [pc, #316]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d021      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	4a4d      	ldr	r2, [pc, #308]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d01c      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	4a4c      	ldr	r2, [pc, #304]	; (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d017      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	4a4a      	ldr	r2, [pc, #296]	; (80088ec <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d012      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	4a49      	ldr	r2, [pc, #292]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00d      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	4a47      	ldr	r2, [pc, #284]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d008      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	4a46      	ldr	r2, [pc, #280]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d003      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087e4:	21b7      	movs	r1, #183	; 0xb7
 80087e6:	4845      	ldr	r0, [pc, #276]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80087e8:	f7f8 fad6 	bl	8000d98 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80087ec:	4b44      	ldr	r3, [pc, #272]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	4a43      	ldr	r2, [pc, #268]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80087f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f6:	6413      	str	r3, [r2, #64]	; 0x40
 80087f8:	4b41      	ldr	r3, [pc, #260]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008804:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a3e      	ldr	r2, [pc, #248]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800880a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800880e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008810:	f7fa fa56 	bl	8002cc0 <HAL_GetTick>
 8008814:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008816:	e009      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008818:	f7fa fa52 	bl	8002cc0 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b64      	cmp	r3, #100	; 0x64
 8008824:	d902      	bls.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	f000 be0a 	b.w	8009440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800882c:	4b35      	ldr	r3, [pc, #212]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0ef      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008838:	4b31      	ldr	r3, [pc, #196]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008840:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d036      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	d02f      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008856:	4b2a      	ldr	r3, [pc, #168]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800885e:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008860:	4b27      	ldr	r3, [pc, #156]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	4a26      	ldr	r2, [pc, #152]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800886a:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800886c:	4b24      	ldr	r3, [pc, #144]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	4a23      	ldr	r2, [pc, #140]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008876:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008878:	4a21      	ldr	r2, [pc, #132]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800887e:	4b20      	ldr	r3, [pc, #128]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d115      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888a:	f7fa fa19 	bl	8002cc0 <HAL_GetTick>
 800888e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008890:	e00b      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008892:	f7fa fa15 	bl	8002cc0 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d902      	bls.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
          {
            return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	f000 bdcb 	b.w	8009440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088aa:	4b15      	ldr	r3, [pc, #84]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80088ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0ed      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x516>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c2:	d123      	bne.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x590>
 80088c4:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80088d2:	400b      	ands	r3, r1
 80088d4:	490a      	ldr	r1, [pc, #40]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
 80088da:	e01d      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80088dc:	00180300 	.word	0x00180300
 80088e0:	00190300 	.word	0x00190300
 80088e4:	001a0300 	.word	0x001a0300
 80088e8:	001b0300 	.word	0x001b0300
 80088ec:	001c0300 	.word	0x001c0300
 80088f0:	001d0300 	.word	0x001d0300
 80088f4:	001e0300 	.word	0x001e0300
 80088f8:	001f0300 	.word	0x001f0300
 80088fc:	0800fb68 	.word	0x0800fb68
 8008900:	40023800 	.word	0x40023800
 8008904:	40007000 	.word	0x40007000
 8008908:	0ffffcff 	.word	0x0ffffcff
 800890c:	4b9a      	ldr	r3, [pc, #616]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	4a99      	ldr	r2, [pc, #612]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008912:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008916:	6093      	str	r3, [r2, #8]
 8008918:	4b97      	ldr	r3, [pc, #604]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800891a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008924:	4994      	ldr	r1, [pc, #592]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008926:	4313      	orrs	r3, r2
 8008928:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0310 	and.w	r3, r3, #16
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01d      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d008      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008946:	d003      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008948:	21f1      	movs	r1, #241	; 0xf1
 800894a:	488c      	ldr	r0, [pc, #560]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800894c:	f7f8 fa24 	bl	8000d98 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008950:	4b89      	ldr	r3, [pc, #548]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008956:	4a88      	ldr	r2, [pc, #544]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800895c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008960:	4b85      	ldr	r3, [pc, #532]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008962:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	4983      	ldr	r1, [pc, #524]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d01c      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00d      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898e:	d008      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008998:	d003      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
 800899a:	21fb      	movs	r1, #251	; 0xfb
 800899c:	4877      	ldr	r0, [pc, #476]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800899e:	f7f8 f9fb 	bl	8000d98 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089a2:	4b75      	ldr	r3, [pc, #468]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80089a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b0:	4971      	ldr	r1, [pc, #452]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d01d      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00e      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089d4:	d009      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089de:	d004      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80089e0:	f240 1105 	movw	r1, #261	; 0x105
 80089e4:	4865      	ldr	r0, [pc, #404]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80089e6:	f7f8 f9d7 	bl	8000d98 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089ea:	4b63      	ldr	r3, [pc, #396]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f8:	495f      	ldr	r1, [pc, #380]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01d      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00e      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a1c:	d009      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a26:	d004      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008a28:	f240 110f 	movw	r1, #271	; 0x10f
 8008a2c:	4853      	ldr	r0, [pc, #332]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008a2e:	f7f8 f9b3 	bl	8000d98 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a32:	4b51      	ldr	r3, [pc, #324]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a40:	494d      	ldr	r1, [pc, #308]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01d      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x714>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00e      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a64:	d009      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a6e:	d004      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008a70:	f240 1119 	movw	r1, #281	; 0x119
 8008a74:	4841      	ldr	r0, [pc, #260]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008a76:	f7f8 f98f 	bl	8000d98 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a7a:	4b3f      	ldr	r3, [pc, #252]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a88:	493b      	ldr	r1, [pc, #236]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01f      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d010      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d00c      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d008      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d004      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008abc:	f240 1123 	movw	r1, #291	; 0x123
 8008ac0:	482e      	ldr	r0, [pc, #184]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008ac2:	f7f8 f969 	bl	8000d98 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ac6:	4b2c      	ldr	r3, [pc, #176]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008acc:	f023 0203 	bic.w	r2, r3, #3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad4:	4928      	ldr	r1, [pc, #160]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01f      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	d00c      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008afc:	2b0c      	cmp	r3, #12
 8008afe:	d008      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d004      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008b08:	f240 112d 	movw	r1, #301	; 0x12d
 8008b0c:	481b      	ldr	r0, [pc, #108]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b0e:	f7f8 f943 	bl	8000d98 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b18:	f023 020c 	bic.w	r2, r3, #12
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b20:	4915      	ldr	r1, [pc, #84]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d025      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x804>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d010      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d00c      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b48:	2b30      	cmp	r3, #48	; 0x30
 8008b4a:	d008      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d004      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008b54:	f240 1137 	movw	r1, #311	; 0x137
 8008b58:	4808      	ldr	r0, [pc, #32]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b5a:	f7f8 f91d 	bl	8000d98 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6c:	4902      	ldr	r1, [pc, #8]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008b74:	e004      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8008b76:	bf00      	nop
 8008b78:	40023800 	.word	0x40023800
 8008b7c:	0800fb68 	.word	0x0800fb68
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01f      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x850>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d010      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d00c      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ba2:	d008      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba8:	2b80      	cmp	r3, #128	; 0x80
 8008baa:	d004      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008bac:	f240 1141 	movw	r1, #321	; 0x141
 8008bb0:	48a0      	ldr	r0, [pc, #640]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008bb2:	f7f8 f8f1 	bl	8000d98 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008bb6:	4ba0      	ldr	r3, [pc, #640]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc4:	499c      	ldr	r1, [pc, #624]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d022      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d013      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be8:	d00e      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf2:	d009      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bfc:	d004      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008bfe:	f240 114b 	movw	r1, #331	; 0x14b
 8008c02:	488c      	ldr	r0, [pc, #560]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008c04:	f7f8 f8c8 	bl	8000d98 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c08:	4b8b      	ldr	r3, [pc, #556]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c16:	4988      	ldr	r1, [pc, #544]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d022      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d013      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3a:	d00e      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c44:	d009      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c4e:	d004      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008c50:	f240 1155 	movw	r1, #341	; 0x155
 8008c54:	4877      	ldr	r0, [pc, #476]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008c56:	f7f8 f89f 	bl	8000d98 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008c5a:	4b77      	ldr	r3, [pc, #476]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c68:	4973      	ldr	r1, [pc, #460]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d022      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x946>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d013      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8c:	d00e      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c96:	d009      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca0:	d004      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008ca2:	f240 115f 	movw	r1, #351	; 0x15f
 8008ca6:	4863      	ldr	r0, [pc, #396]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008ca8:	f7f8 f876 	bl	8000d98 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008cac:	4b62      	ldr	r3, [pc, #392]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cba:	495f      	ldr	r1, [pc, #380]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d022      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x998>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d013      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cde:	d00e      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ce8:	d009      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf2:	d004      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008cf4:	f240 1169 	movw	r1, #361	; 0x169
 8008cf8:	484e      	ldr	r0, [pc, #312]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008cfa:	f7f8 f84d 	bl	8000d98 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008cfe:	4b4e      	ldr	r3, [pc, #312]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d0c:	494a      	ldr	r1, [pc, #296]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d018      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d28:	d008      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008d32:	f240 1173 	movw	r1, #371	; 0x173
 8008d36:	483f      	ldr	r0, [pc, #252]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008d38:	f7f8 f82e 	bl	8000d98 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d3c:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d4a:	493b      	ldr	r1, [pc, #236]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01f      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xa22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d66:	d008      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8008d70:	f240 117d 	movw	r1, #381	; 0x17d
 8008d74:	482f      	ldr	r0, [pc, #188]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008d76:	f7f8 f80f 	bl	8000d98 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008d7a:	4b2f      	ldr	r3, [pc, #188]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d88:	492b      	ldr	r1, [pc, #172]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d98:	d101      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xa22>
    {
      pllsaiused = 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    pllsaiused = 1;
 8008daa:	2301      	movs	r3, #1
 8008dac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d022      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d013      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dca:	d00e      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd4:	d009      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dde:	d004      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008de0:	f240 1195 	movw	r1, #405	; 0x195
 8008de4:	4813      	ldr	r0, [pc, #76]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008de6:	f7f7 ffd7 	bl	8000d98 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df8:	490f      	ldr	r1, [pc, #60]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d020      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xad2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e16:	d009      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008e22:	f240 119f 	movw	r1, #415	; 0x19f
 8008e26:	4803      	ldr	r0, [pc, #12]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008e28:	f7f7 ffb6 	bl	8000d98 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e32:	e003      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8008e34:	0800fb68 	.word	0x0800fb68
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e46:	4943      	ldr	r1, [pc, #268]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01b      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e64:	d009      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8008e70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e74:	4838      	ldr	r0, [pc, #224]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8008e76:	f7f7 ff8f 	bl	8000d98 <assert_failed>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008e7a:	4b36      	ldr	r3, [pc, #216]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e8a:	4932      	ldr	r1, [pc, #200]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01b      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eb2:	d004      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8008eb4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8008eb8:	4827      	ldr	r0, [pc, #156]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8008eba:	f7f7 ff6d 	bl	8000d98 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ebe:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	4921      	ldr	r1, [pc, #132]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01b      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ef6:	d004      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008ef8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8008efc:	4816      	ldr	r0, [pc, #88]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8008efe:	f7f7 ff4b 	bl	8000d98 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008f02:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f08:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f12:	4910      	ldr	r1, [pc, #64]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d006      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8157 	beq.w	80091dc <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008f34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f3a:	f7f9 fec1 	bl	8002cc0 <HAL_GetTick>
 8008f3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f40:	e00c      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008f42:	f7f9 febd 	bl	8002cc0 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b64      	cmp	r3, #100	; 0x64
 8008f4e:	d905      	bls.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e275      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8008f54:	40023800 	.word	0x40023800
 8008f58:	0800fb68 	.word	0x0800fb68
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f5c:	4b9a      	ldr	r3, [pc, #616]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1ec      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b31      	cmp	r3, #49	; 0x31
 8008f6e:	d904      	bls.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008f78:	d904      	bls.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008f7a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8008f7e:	4893      	ldr	r0, [pc, #588]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8008f80:	f7f7 ff0a 	bl	8000d98 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d02e      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d12a      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d903      	bls.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b07      	cmp	r3, #7
 8008fa6:	d904      	bls.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8008fa8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008fac:	4887      	ldr	r0, [pc, #540]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8008fae:	f7f7 fef3 	bl	8000d98 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008fb2:	4b85      	ldr	r3, [pc, #532]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb8:	0c1b      	lsrs	r3, r3, #16
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008fc0:	4b81      	ldr	r3, [pc, #516]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8008fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc6:	0e1b      	lsrs	r3, r3, #24
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	019a      	lsls	r2, r3, #6
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	041b      	lsls	r3, r3, #16
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	061b      	lsls	r3, r3, #24
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	071b      	lsls	r3, r3, #28
 8008fe6:	4978      	ldr	r1, [pc, #480]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009002:	d00a      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800900c:	2b00      	cmp	r3, #0
 800900e:	d048      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009018:	d143      	bne.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d903      	bls.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b0f      	cmp	r3, #15
 8009028:	d904      	bls.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 800902a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800902e:	4867      	ldr	r0, [pc, #412]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009030:	f7f7 feb2 	bl	8000d98 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b20      	cmp	r3, #32
 8009042:	d904      	bls.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8009044:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8009048:	4860      	ldr	r0, [pc, #384]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 800904a:	f7f7 fea5 	bl	8000d98 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800904e:	4b5e      	ldr	r3, [pc, #376]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009054:	0c1b      	lsrs	r3, r3, #16
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800905c:	4b5a      	ldr	r3, [pc, #360]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800905e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009062:	0f1b      	lsrs	r3, r3, #28
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	019a      	lsls	r2, r3, #6
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	061b      	lsls	r3, r3, #24
 800907c:	431a      	orrs	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	071b      	lsls	r3, r3, #28
 8009082:	4951      	ldr	r1, [pc, #324]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009084:	4313      	orrs	r3, r2
 8009086:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800908a:	4b4f      	ldr	r3, [pc, #316]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800908c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009090:	f023 021f 	bic.w	r2, r3, #31
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	3b01      	subs	r3, #1
 800909a:	494b      	ldr	r1, [pc, #300]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800909c:	4313      	orrs	r3, r2
 800909e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d032      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d010      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d00c      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d008      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d004      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80090ce:	f240 2105 	movw	r1, #517	; 0x205
 80090d2:	483e      	ldr	r0, [pc, #248]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80090d4:	f7f7 fe60 	bl	8000d98 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090d8:	4b3b      	ldr	r3, [pc, #236]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80090da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090de:	0e1b      	lsrs	r3, r3, #24
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090e6:	4b38      	ldr	r3, [pc, #224]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80090e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ec:	0f1b      	lsrs	r3, r3, #28
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	019a      	lsls	r2, r3, #6
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	431a      	orrs	r2, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	061b      	lsls	r3, r3, #24
 8009106:	431a      	orrs	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	071b      	lsls	r3, r3, #28
 800910c:	492e      	ldr	r1, [pc, #184]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d040      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d010      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d00c      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d008      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2b03      	cmp	r3, #3
 800913e:	d004      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8009140:	f44f 7105 	mov.w	r1, #532	; 0x214
 8009144:	4821      	ldr	r0, [pc, #132]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009146:	f7f7 fe27 	bl	8000d98 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d903      	bls.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b07      	cmp	r3, #7
 8009158:	d904      	bls.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800915a:	f240 2115 	movw	r1, #533	; 0x215
 800915e:	481b      	ldr	r0, [pc, #108]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009160:	f7f7 fe1a 	bl	8000d98 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d903      	bls.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b0f      	cmp	r3, #15
 8009172:	d904      	bls.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8009174:	f240 2116 	movw	r1, #534	; 0x216
 8009178:	4814      	ldr	r0, [pc, #80]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 800917a:	f7f7 fe0d 	bl	8000d98 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	019a      	lsls	r2, r3, #6
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	041b      	lsls	r3, r3, #16
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	061b      	lsls	r3, r3, #24
 8009192:	431a      	orrs	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	071b      	lsls	r3, r3, #28
 800919a:	490b      	ldr	r1, [pc, #44]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800919c:	4313      	orrs	r3, r2
 800919e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091a2:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a08      	ldr	r2, [pc, #32]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ae:	f7f9 fd87 	bl	8002cc0 <HAL_GetTick>
 80091b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091b4:	e00c      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091b6:	f7f9 fd83 	bl	8002cc0 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b64      	cmp	r3, #100	; 0x64
 80091c2:	d905      	bls.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e13b      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80091c8:	40023800 	.word	0x40023800
 80091cc:	0800fb68 	.word	0x0800fb68
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091d0:	4b9d      	ldr	r3, [pc, #628]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0ec      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	f040 812d 	bne.w	800943e <HAL_RCCEx_PeriphCLKConfig+0x10c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091e4:	4b98      	ldr	r3, [pc, #608]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a97      	ldr	r2, [pc, #604]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80091ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091f0:	f7f9 fd66 	bl	8002cc0 <HAL_GetTick>
 80091f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091f6:	e008      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091f8:	f7f9 fd62 	bl	8002cc0 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b64      	cmp	r3, #100	; 0x64
 8009204:	d901      	bls.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e11a      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800920a:	4b8f      	ldr	r3, [pc, #572]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009216:	d0ef      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	2b31      	cmp	r3, #49	; 0x31
 800921e:	d904      	bls.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009228:	d904      	bls.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xeb8>
 800922a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800922e:	4887      	ldr	r0, [pc, #540]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8009230:	f7f7 fdb2 	bl	8000d98 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xecc>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xee0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009250:	2b00      	cmp	r3, #0
 8009252:	d048      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d144      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d903      	bls.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xef0>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	2b0f      	cmp	r3, #15
 800926a:	d904      	bls.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xefa>
 800926c:	f240 214b 	movw	r1, #587	; 0x24b
 8009270:	4876      	ldr	r0, [pc, #472]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8009272:	f7f7 fd91 	bl	8000d98 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xf0a>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	2b20      	cmp	r3, #32
 8009284:	d904      	bls.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xf14>
 8009286:	f240 214d 	movw	r1, #589	; 0x24d
 800928a:	4870      	ldr	r0, [pc, #448]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800928c:	f7f7 fd84 	bl	8000d98 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009290:	4b6d      	ldr	r3, [pc, #436]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009296:	0c1b      	lsrs	r3, r3, #16
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800929e:	4b6a      	ldr	r3, [pc, #424]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a4:	0f1b      	lsrs	r3, r3, #28
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	019a      	lsls	r2, r3, #6
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	041b      	lsls	r3, r3, #16
 80092b6:	431a      	orrs	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	061b      	lsls	r3, r3, #24
 80092be:	431a      	orrs	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	071b      	lsls	r3, r3, #28
 80092c4:	4960      	ldr	r1, [pc, #384]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80092cc:	4b5e      	ldr	r3, [pc, #376]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80092ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	3b01      	subs	r3, #1
 80092dc:	021b      	lsls	r3, r3, #8
 80092de:	495a      	ldr	r1, [pc, #360]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d037      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092fa:	d132      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d010      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d00c      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d008      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	2b03      	cmp	r3, #3
 800931a:	d004      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 800931c:	f44f 7118 	mov.w	r1, #608	; 0x260
 8009320:	484a      	ldr	r0, [pc, #296]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8009322:	f7f7 fd39 	bl	8000d98 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009326:	4b48      	ldr	r3, [pc, #288]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932c:	0e1b      	lsrs	r3, r3, #24
 800932e:	f003 030f 	and.w	r3, r3, #15
 8009332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009334:	4b44      	ldr	r3, [pc, #272]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933a:	0f1b      	lsrs	r3, r3, #28
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	019a      	lsls	r2, r3, #6
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	041b      	lsls	r3, r3, #16
 800934e:	431a      	orrs	r2, r3
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	061b      	lsls	r3, r3, #24
 8009354:	431a      	orrs	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	071b      	lsls	r3, r3, #28
 800935a:	493b      	ldr	r1, [pc, #236]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d04d      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x108e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d903      	bls.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x1002>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	2b07      	cmp	r3, #7
 800937c:	d904      	bls.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x100c>
 800937e:	f240 216f 	movw	r1, #623	; 0x26f
 8009382:	4832      	ldr	r0, [pc, #200]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8009384:	f7f7 fd08 	bl	8000d98 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d013      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009398:	d00e      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093a2:	d009      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093ac:	d004      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 80093ae:	f44f 711c 	mov.w	r1, #624	; 0x270
 80093b2:	4826      	ldr	r0, [pc, #152]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80093b4:	f7f7 fcf0 	bl	8000d98 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093b8:	4b23      	ldr	r3, [pc, #140]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093be:	0e1b      	lsrs	r3, r3, #24
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093c6:	4b20      	ldr	r3, [pc, #128]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	019a      	lsls	r2, r3, #6
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	041b      	lsls	r3, r3, #16
 80093de:	431a      	orrs	r2, r3
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	061b      	lsls	r3, r3, #24
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	071b      	lsls	r3, r3, #28
 80093ec:	4916      	ldr	r1, [pc, #88]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80093f4:	4b14      	ldr	r3, [pc, #80]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	4911      	ldr	r1, [pc, #68]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800940a:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a0e      	ldr	r2, [pc, #56]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009416:	f7f9 fc53 	bl	8002cc0 <HAL_GetTick>
 800941a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800941c:	e008      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800941e:	f7f9 fc4f 	bl	8002cc0 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	2b64      	cmp	r3, #100	; 0x64
 800942a:	d901      	bls.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e007      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943c:	d1ef      	bne.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x10a2>
      }
    }
  }
  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3720      	adds	r7, #32
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	40023800 	.word	0x40023800
 800944c:	0800fb68 	.word	0x0800fb68

08009450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e0f5      	b.n	800964e <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a7c      	ldr	r2, [pc, #496]	; (8009658 <HAL_TIM_Base_Init+0x208>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d045      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009474:	d040      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a78      	ldr	r2, [pc, #480]	; (800965c <HAL_TIM_Base_Init+0x20c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d03b      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a76      	ldr	r2, [pc, #472]	; (8009660 <HAL_TIM_Base_Init+0x210>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d036      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a75      	ldr	r2, [pc, #468]	; (8009664 <HAL_TIM_Base_Init+0x214>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d031      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a73      	ldr	r2, [pc, #460]	; (8009668 <HAL_TIM_Base_Init+0x218>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d02c      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a72      	ldr	r2, [pc, #456]	; (800966c <HAL_TIM_Base_Init+0x21c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d027      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a70      	ldr	r2, [pc, #448]	; (8009670 <HAL_TIM_Base_Init+0x220>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d022      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a6f      	ldr	r2, [pc, #444]	; (8009674 <HAL_TIM_Base_Init+0x224>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d01d      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a6d      	ldr	r2, [pc, #436]	; (8009678 <HAL_TIM_Base_Init+0x228>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d018      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a6c      	ldr	r2, [pc, #432]	; (800967c <HAL_TIM_Base_Init+0x22c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d013      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a6a      	ldr	r2, [pc, #424]	; (8009680 <HAL_TIM_Base_Init+0x230>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00e      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a69      	ldr	r2, [pc, #420]	; (8009684 <HAL_TIM_Base_Init+0x234>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d009      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a67      	ldr	r2, [pc, #412]	; (8009688 <HAL_TIM_Base_Init+0x238>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d004      	beq.n	80094f8 <HAL_TIM_Base_Init+0xa8>
 80094ee:	f44f 718b 	mov.w	r1, #278	; 0x116
 80094f2:	4866      	ldr	r0, [pc, #408]	; (800968c <HAL_TIM_Base_Init+0x23c>)
 80094f4:	f7f7 fc50 	bl	8000d98 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d014      	beq.n	800952a <HAL_TIM_Base_Init+0xda>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	2b10      	cmp	r3, #16
 8009506:	d010      	beq.n	800952a <HAL_TIM_Base_Init+0xda>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	2b20      	cmp	r3, #32
 800950e:	d00c      	beq.n	800952a <HAL_TIM_Base_Init+0xda>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	2b40      	cmp	r3, #64	; 0x40
 8009516:	d008      	beq.n	800952a <HAL_TIM_Base_Init+0xda>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b60      	cmp	r3, #96	; 0x60
 800951e:	d004      	beq.n	800952a <HAL_TIM_Base_Init+0xda>
 8009520:	f240 1117 	movw	r1, #279	; 0x117
 8009524:	4859      	ldr	r0, [pc, #356]	; (800968c <HAL_TIM_Base_Init+0x23c>)
 8009526:	f7f7 fc37 	bl	8000d98 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00e      	beq.n	8009550 <HAL_TIM_Base_Init+0x100>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953a:	d009      	beq.n	8009550 <HAL_TIM_Base_Init+0x100>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009544:	d004      	beq.n	8009550 <HAL_TIM_Base_Init+0x100>
 8009546:	f44f 718c 	mov.w	r1, #280	; 0x118
 800954a:	4850      	ldr	r0, [pc, #320]	; (800968c <HAL_TIM_Base_Init+0x23c>)
 800954c:	f7f7 fc24 	bl	8000d98 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009558:	d004      	beq.n	8009564 <HAL_TIM_Base_Init+0x114>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a41      	ldr	r2, [pc, #260]	; (8009664 <HAL_TIM_Base_Init+0x214>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d107      	bne.n	8009574 <HAL_TIM_Base_Init+0x124>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf14      	ite	ne
 800956c:	2301      	movne	r3, #1
 800956e:	2300      	moveq	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	e00e      	b.n	8009592 <HAL_TIM_Base_Init+0x142>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d006      	beq.n	800958a <HAL_TIM_Base_Init+0x13a>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009584:	d201      	bcs.n	800958a <HAL_TIM_Base_Init+0x13a>
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <HAL_TIM_Base_Init+0x13c>
 800958a:	2300      	movs	r3, #0
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <HAL_TIM_Base_Init+0x150>
 8009596:	f240 1119 	movw	r1, #281	; 0x119
 800959a:	483c      	ldr	r0, [pc, #240]	; (800968c <HAL_TIM_Base_Init+0x23c>)
 800959c:	f7f7 fbfc 	bl	8000d98 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <HAL_TIM_Base_Init+0x16a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b80      	cmp	r3, #128	; 0x80
 80095ae:	d004      	beq.n	80095ba <HAL_TIM_Base_Init+0x16a>
 80095b0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80095b4:	4835      	ldr	r0, [pc, #212]	; (800968c <HAL_TIM_Base_Init+0x23c>)
 80095b6:	f7f7 fbef 	bl	8000d98 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f85e 	bl	8009690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f000 fa72 	bl	8009ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40010000 	.word	0x40010000
 800965c:	40000400 	.word	0x40000400
 8009660:	40000800 	.word	0x40000800
 8009664:	40000c00 	.word	0x40000c00
 8009668:	40001000 	.word	0x40001000
 800966c:	40001400 	.word	0x40001400
 8009670:	40010400 	.word	0x40010400
 8009674:	40014000 	.word	0x40014000
 8009678:	40014400 	.word	0x40014400
 800967c:	40014800 	.word	0x40014800
 8009680:	40001800 	.word	0x40001800
 8009684:	40001c00 	.word	0x40001c00
 8009688:	40002000 	.word	0x40002000
 800968c:	0800fba4 	.word	0x0800fba4

08009690 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a54      	ldr	r2, [pc, #336]	; (8009804 <HAL_TIM_Base_Start_IT+0x160>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d045      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096be:	d040      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a50      	ldr	r2, [pc, #320]	; (8009808 <HAL_TIM_Base_Start_IT+0x164>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d03b      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a4f      	ldr	r2, [pc, #316]	; (800980c <HAL_TIM_Base_Start_IT+0x168>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d036      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a4d      	ldr	r2, [pc, #308]	; (8009810 <HAL_TIM_Base_Start_IT+0x16c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d031      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a4c      	ldr	r2, [pc, #304]	; (8009814 <HAL_TIM_Base_Start_IT+0x170>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d02c      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a4a      	ldr	r2, [pc, #296]	; (8009818 <HAL_TIM_Base_Start_IT+0x174>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d027      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a49      	ldr	r2, [pc, #292]	; (800981c <HAL_TIM_Base_Start_IT+0x178>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d022      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a47      	ldr	r2, [pc, #284]	; (8009820 <HAL_TIM_Base_Start_IT+0x17c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d01d      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a46      	ldr	r2, [pc, #280]	; (8009824 <HAL_TIM_Base_Start_IT+0x180>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d018      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a44      	ldr	r2, [pc, #272]	; (8009828 <HAL_TIM_Base_Start_IT+0x184>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a43      	ldr	r2, [pc, #268]	; (800982c <HAL_TIM_Base_Start_IT+0x188>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d00e      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a41      	ldr	r2, [pc, #260]	; (8009830 <HAL_TIM_Base_Start_IT+0x18c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d009      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a40      	ldr	r2, [pc, #256]	; (8009834 <HAL_TIM_Base_Start_IT+0x190>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <HAL_TIM_Base_Start_IT+0x9e>
 8009738:	f240 11d3 	movw	r1, #467	; 0x1d3
 800973c:	483e      	ldr	r0, [pc, #248]	; (8009838 <HAL_TIM_Base_Start_IT+0x194>)
 800973e:	f7f7 fb2b 	bl	8000d98 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b01      	cmp	r3, #1
 800974c:	d001      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e054      	b.n	80097fc <HAL_TIM_Base_Start_IT+0x158>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0201 	orr.w	r2, r2, #1
 8009768:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a25      	ldr	r2, [pc, #148]	; (8009804 <HAL_TIM_Base_Start_IT+0x160>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d022      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977c:	d01d      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a21      	ldr	r2, [pc, #132]	; (8009808 <HAL_TIM_Base_Start_IT+0x164>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d018      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a1f      	ldr	r2, [pc, #124]	; (800980c <HAL_TIM_Base_Start_IT+0x168>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d013      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <HAL_TIM_Base_Start_IT+0x16c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00e      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1e      	ldr	r2, [pc, #120]	; (800981c <HAL_TIM_Base_Start_IT+0x178>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d009      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1d      	ldr	r2, [pc, #116]	; (8009820 <HAL_TIM_Base_Start_IT+0x17c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d004      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x116>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a1d      	ldr	r2, [pc, #116]	; (800982c <HAL_TIM_Base_Start_IT+0x188>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d115      	bne.n	80097e6 <HAL_TIM_Base_Start_IT+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	4b1e      	ldr	r3, [pc, #120]	; (800983c <HAL_TIM_Base_Start_IT+0x198>)
 80097c2:	4013      	ands	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b06      	cmp	r3, #6
 80097ca:	d015      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x154>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d2:	d011      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x154>
    {
      __HAL_TIM_ENABLE(htim);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e4:	e008      	b.n	80097f8 <HAL_TIM_Base_Start_IT+0x154>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 0201 	orr.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e000      	b.n	80097fa <HAL_TIM_Base_Start_IT+0x156>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	40010000 	.word	0x40010000
 8009808:	40000400 	.word	0x40000400
 800980c:	40000800 	.word	0x40000800
 8009810:	40000c00 	.word	0x40000c00
 8009814:	40001000 	.word	0x40001000
 8009818:	40001400 	.word	0x40001400
 800981c:	40010400 	.word	0x40010400
 8009820:	40014000 	.word	0x40014000
 8009824:	40014400 	.word	0x40014400
 8009828:	40014800 	.word	0x40014800
 800982c:	40001800 	.word	0x40001800
 8009830:	40001c00 	.word	0x40001c00
 8009834:	40002000 	.word	0x40002000
 8009838:	0800fba4 	.word	0x0800fba4
 800983c:	00010007 	.word	0x00010007

08009840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b02      	cmp	r3, #2
 8009854:	d122      	bne.n	800989c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b02      	cmp	r3, #2
 8009862:	d11b      	bne.n	800989c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f06f 0202 	mvn.w	r2, #2
 800986c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f905 	bl	8009a92 <HAL_TIM_IC_CaptureCallback>
 8009888:	e005      	b.n	8009896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8f7 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f908 	bl	8009aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	f003 0304 	and.w	r3, r3, #4
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d122      	bne.n	80098f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d11b      	bne.n	80098f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f06f 0204 	mvn.w	r2, #4
 80098c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2202      	movs	r2, #2
 80098c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f8db 	bl	8009a92 <HAL_TIM_IC_CaptureCallback>
 80098dc:	e005      	b.n	80098ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8cd 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f8de 	bl	8009aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	f003 0308 	and.w	r3, r3, #8
 80098fa:	2b08      	cmp	r3, #8
 80098fc:	d122      	bne.n	8009944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f003 0308 	and.w	r3, r3, #8
 8009908:	2b08      	cmp	r3, #8
 800990a:	d11b      	bne.n	8009944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f06f 0208 	mvn.w	r2, #8
 8009914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2204      	movs	r2, #4
 800991a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f8b1 	bl	8009a92 <HAL_TIM_IC_CaptureCallback>
 8009930:	e005      	b.n	800993e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f8a3 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f8b4 	bl	8009aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f003 0310 	and.w	r3, r3, #16
 800994e:	2b10      	cmp	r3, #16
 8009950:	d122      	bne.n	8009998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f003 0310 	and.w	r3, r3, #16
 800995c:	2b10      	cmp	r3, #16
 800995e:	d11b      	bne.n	8009998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f06f 0210 	mvn.w	r2, #16
 8009968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2208      	movs	r2, #8
 800996e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f887 	bl	8009a92 <HAL_TIM_IC_CaptureCallback>
 8009984:	e005      	b.n	8009992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f879 	bl	8009a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f88a 	bl	8009aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d10e      	bne.n	80099c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d107      	bne.n	80099c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f06f 0201 	mvn.w	r2, #1
 80099bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7f7 f9d2 	bl	8000d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d10e      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099dc:	2b80      	cmp	r3, #128	; 0x80
 80099de:	d107      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f91a 	bl	8009c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099fe:	d10e      	bne.n	8009a1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0a:	2b80      	cmp	r3, #128	; 0x80
 8009a0c:	d107      	bne.n	8009a1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f90d 	bl	8009c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b40      	cmp	r3, #64	; 0x40
 8009a2a:	d10e      	bne.n	8009a4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b40      	cmp	r3, #64	; 0x40
 8009a38:	d107      	bne.n	8009a4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f838 	bl	8009aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	f003 0320 	and.w	r3, r3, #32
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d10e      	bne.n	8009a76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d107      	bne.n	8009a76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f06f 0220 	mvn.w	r2, #32
 8009a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f8cd 	bl	8009c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
	...

08009ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a40      	ldr	r2, [pc, #256]	; (8009be4 <TIM_Base_SetConfig+0x114>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d013      	beq.n	8009b10 <TIM_Base_SetConfig+0x40>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aee:	d00f      	beq.n	8009b10 <TIM_Base_SetConfig+0x40>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a3d      	ldr	r2, [pc, #244]	; (8009be8 <TIM_Base_SetConfig+0x118>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00b      	beq.n	8009b10 <TIM_Base_SetConfig+0x40>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a3c      	ldr	r2, [pc, #240]	; (8009bec <TIM_Base_SetConfig+0x11c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d007      	beq.n	8009b10 <TIM_Base_SetConfig+0x40>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a3b      	ldr	r2, [pc, #236]	; (8009bf0 <TIM_Base_SetConfig+0x120>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d003      	beq.n	8009b10 <TIM_Base_SetConfig+0x40>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a3a      	ldr	r2, [pc, #232]	; (8009bf4 <TIM_Base_SetConfig+0x124>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d108      	bne.n	8009b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a2f      	ldr	r2, [pc, #188]	; (8009be4 <TIM_Base_SetConfig+0x114>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d02b      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b30:	d027      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a2c      	ldr	r2, [pc, #176]	; (8009be8 <TIM_Base_SetConfig+0x118>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d023      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a2b      	ldr	r2, [pc, #172]	; (8009bec <TIM_Base_SetConfig+0x11c>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d01f      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a2a      	ldr	r2, [pc, #168]	; (8009bf0 <TIM_Base_SetConfig+0x120>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d01b      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a29      	ldr	r2, [pc, #164]	; (8009bf4 <TIM_Base_SetConfig+0x124>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d017      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a28      	ldr	r2, [pc, #160]	; (8009bf8 <TIM_Base_SetConfig+0x128>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d013      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a27      	ldr	r2, [pc, #156]	; (8009bfc <TIM_Base_SetConfig+0x12c>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00f      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a26      	ldr	r2, [pc, #152]	; (8009c00 <TIM_Base_SetConfig+0x130>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d00b      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a25      	ldr	r2, [pc, #148]	; (8009c04 <TIM_Base_SetConfig+0x134>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d007      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a24      	ldr	r2, [pc, #144]	; (8009c08 <TIM_Base_SetConfig+0x138>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d003      	beq.n	8009b82 <TIM_Base_SetConfig+0xb2>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a23      	ldr	r2, [pc, #140]	; (8009c0c <TIM_Base_SetConfig+0x13c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d108      	bne.n	8009b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a0a      	ldr	r2, [pc, #40]	; (8009be4 <TIM_Base_SetConfig+0x114>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d003      	beq.n	8009bc8 <TIM_Base_SetConfig+0xf8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a0c      	ldr	r2, [pc, #48]	; (8009bf4 <TIM_Base_SetConfig+0x124>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d103      	bne.n	8009bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	615a      	str	r2, [r3, #20]
}
 8009bd6:	bf00      	nop
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	40010000 	.word	0x40010000
 8009be8:	40000400 	.word	0x40000400
 8009bec:	40000800 	.word	0x40000800
 8009bf0:	40000c00 	.word	0x40000c00
 8009bf4:	40010400 	.word	0x40010400
 8009bf8:	40014000 	.word	0x40014000
 8009bfc:	40014400 	.word	0x40014400
 8009c00:	40014800 	.word	0x40014800
 8009c04:	40001800 	.word	0x40001800
 8009c08:	40001c00 	.word	0x40001c00
 8009c0c:	40002000 	.word	0x40002000

08009c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e09f      	b.n	8009d9e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d02d      	beq.n	8009cc2 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a4f      	ldr	r2, [pc, #316]	; (8009da8 <HAL_UART_Init+0x15c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d055      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a4d      	ldr	r2, [pc, #308]	; (8009dac <HAL_UART_Init+0x160>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d050      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a4c      	ldr	r2, [pc, #304]	; (8009db0 <HAL_UART_Init+0x164>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d04b      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a4a      	ldr	r2, [pc, #296]	; (8009db4 <HAL_UART_Init+0x168>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d046      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a49      	ldr	r2, [pc, #292]	; (8009db8 <HAL_UART_Init+0x16c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d041      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a47      	ldr	r2, [pc, #284]	; (8009dbc <HAL_UART_Init+0x170>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d03c      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a46      	ldr	r2, [pc, #280]	; (8009dc0 <HAL_UART_Init+0x174>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d037      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a44      	ldr	r2, [pc, #272]	; (8009dc4 <HAL_UART_Init+0x178>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d032      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009cb6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009cba:	4843      	ldr	r0, [pc, #268]	; (8009dc8 <HAL_UART_Init+0x17c>)
 8009cbc:	f7f7 f86c 	bl	8000d98 <assert_failed>
 8009cc0:	e02c      	b.n	8009d1c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a38      	ldr	r2, [pc, #224]	; (8009da8 <HAL_UART_Init+0x15c>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d027      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a36      	ldr	r2, [pc, #216]	; (8009dac <HAL_UART_Init+0x160>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d022      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a35      	ldr	r2, [pc, #212]	; (8009db0 <HAL_UART_Init+0x164>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d01d      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a33      	ldr	r2, [pc, #204]	; (8009db4 <HAL_UART_Init+0x168>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d018      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a32      	ldr	r2, [pc, #200]	; (8009db8 <HAL_UART_Init+0x16c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d013      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a30      	ldr	r2, [pc, #192]	; (8009dbc <HAL_UART_Init+0x170>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d00e      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a2f      	ldr	r2, [pc, #188]	; (8009dc0 <HAL_UART_Init+0x174>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d009      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a2d      	ldr	r2, [pc, #180]	; (8009dc4 <HAL_UART_Init+0x178>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d004      	beq.n	8009d1c <HAL_UART_Init+0xd0>
 8009d12:	f240 1131 	movw	r1, #305	; 0x131
 8009d16:	482c      	ldr	r0, [pc, #176]	; (8009dc8 <HAL_UART_Init+0x17c>)
 8009d18:	f7f7 f83e 	bl	8000d98 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d106      	bne.n	8009d32 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7f7 fa65 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2224      	movs	r2, #36	; 0x24
 8009d36:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0201 	bic.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f83f 	bl	8009dcc <UART_SetConfig>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e022      	b.n	8009d9e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fb29 	bl	800a3b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f042 0201 	orr.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fc66 	bl	800a668 <UART_CheckIdleState>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40011000 	.word	0x40011000
 8009dac:	40004400 	.word	0x40004400
 8009db0:	40004800 	.word	0x40004800
 8009db4:	40004c00 	.word	0x40004c00
 8009db8:	40005000 	.word	0x40005000
 8009dbc:	40011400 	.word	0x40011400
 8009dc0:	40007800 	.word	0x40007800
 8009dc4:	40007c00 	.word	0x40007c00
 8009dc8:	0800fbdc 	.word	0x0800fbdc

08009dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	4aa0      	ldr	r2, [pc, #640]	; (800a060 <UART_SetConfig+0x294>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d904      	bls.n	8009dec <UART_SetConfig+0x20>
 8009de2:	f640 315d 	movw	r1, #2909	; 0xb5d
 8009de6:	489f      	ldr	r0, [pc, #636]	; (800a064 <UART_SetConfig+0x298>)
 8009de8:	f7f6 ffd6 	bl	8000d98 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df4:	d00d      	beq.n	8009e12 <UART_SetConfig+0x46>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <UART_SetConfig+0x46>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e06:	d004      	beq.n	8009e12 <UART_SetConfig+0x46>
 8009e08:	f640 315e 	movw	r1, #2910	; 0xb5e
 8009e0c:	4895      	ldr	r0, [pc, #596]	; (800a064 <UART_SetConfig+0x298>)
 8009e0e:	f7f6 ffc3 	bl	8000d98 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1a:	d012      	beq.n	8009e42 <UART_SetConfig+0x76>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00e      	beq.n	8009e42 <UART_SetConfig+0x76>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e2c:	d009      	beq.n	8009e42 <UART_SetConfig+0x76>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e36:	d004      	beq.n	8009e42 <UART_SetConfig+0x76>
 8009e38:	f640 315f 	movw	r1, #2911	; 0xb5f
 8009e3c:	4889      	ldr	r0, [pc, #548]	; (800a064 <UART_SetConfig+0x298>)
 8009e3e:	f7f6 ffab 	bl	8000d98 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d009      	beq.n	8009e5e <UART_SetConfig+0x92>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e52:	d004      	beq.n	8009e5e <UART_SetConfig+0x92>
 8009e54:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8009e58:	4882      	ldr	r0, [pc, #520]	; (800a064 <UART_SetConfig+0x298>)
 8009e5a:	f7f6 ff9d 	bl	8000d98 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00e      	beq.n	8009e84 <UART_SetConfig+0xb8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e6e:	d009      	beq.n	8009e84 <UART_SetConfig+0xb8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009e78:	d004      	beq.n	8009e84 <UART_SetConfig+0xb8>
 8009e7a:	f640 3162 	movw	r1, #2914	; 0xb62
 8009e7e:	4879      	ldr	r0, [pc, #484]	; (800a064 <UART_SetConfig+0x298>)
 8009e80:	f7f6 ff8a 	bl	8000d98 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f023 030c 	bic.w	r3, r3, #12
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <UART_SetConfig+0xcc>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <UART_SetConfig+0xd6>
 8009e98:	f640 3163 	movw	r1, #2915	; 0xb63
 8009e9c:	4871      	ldr	r0, [pc, #452]	; (800a064 <UART_SetConfig+0x298>)
 8009e9e:	f7f6 ff7b 	bl	8000d98 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d013      	beq.n	8009ed2 <UART_SetConfig+0x106>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb2:	d00e      	beq.n	8009ed2 <UART_SetConfig+0x106>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ebc:	d009      	beq.n	8009ed2 <UART_SetConfig+0x106>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ec6:	d004      	beq.n	8009ed2 <UART_SetConfig+0x106>
 8009ec8:	f640 3164 	movw	r1, #2916	; 0xb64
 8009ecc:	4865      	ldr	r0, [pc, #404]	; (800a064 <UART_SetConfig+0x298>)
 8009ece:	f7f6 ff63 	bl	8000d98 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d009      	beq.n	8009eee <UART_SetConfig+0x122>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ee2:	d004      	beq.n	8009eee <UART_SetConfig+0x122>
 8009ee4:	f640 3165 	movw	r1, #2917	; 0xb65
 8009ee8:	485e      	ldr	r0, [pc, #376]	; (800a064 <UART_SetConfig+0x298>)
 8009eea:	f7f6 ff55 	bl	8000d98 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	431a      	orrs	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	4b56      	ldr	r3, [pc, #344]	; (800a068 <UART_SetConfig+0x29c>)
 8009f0e:	4013      	ands	r3, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	6979      	ldr	r1, [r7, #20]
 8009f16:	430b      	orrs	r3, r1
 8009f18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a44      	ldr	r2, [pc, #272]	; (800a06c <UART_SetConfig+0x2a0>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d121      	bne.n	8009fa2 <UART_SetConfig+0x1d6>
 8009f5e:	4b44      	ldr	r3, [pc, #272]	; (800a070 <UART_SetConfig+0x2a4>)
 8009f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f64:	f003 0303 	and.w	r3, r3, #3
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d817      	bhi.n	8009f9c <UART_SetConfig+0x1d0>
 8009f6c:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <UART_SetConfig+0x1a8>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	08009f85 	.word	0x08009f85
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009f8b 	.word	0x08009f8b
 8009f80:	08009f97 	.word	0x08009f97
 8009f84:	2301      	movs	r3, #1
 8009f86:	77fb      	strb	r3, [r7, #31]
 8009f88:	e14c      	b.n	800a224 <UART_SetConfig+0x458>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	77fb      	strb	r3, [r7, #31]
 8009f8e:	e149      	b.n	800a224 <UART_SetConfig+0x458>
 8009f90:	2304      	movs	r3, #4
 8009f92:	77fb      	strb	r3, [r7, #31]
 8009f94:	e146      	b.n	800a224 <UART_SetConfig+0x458>
 8009f96:	2308      	movs	r3, #8
 8009f98:	77fb      	strb	r3, [r7, #31]
 8009f9a:	e143      	b.n	800a224 <UART_SetConfig+0x458>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	77fb      	strb	r3, [r7, #31]
 8009fa0:	e140      	b.n	800a224 <UART_SetConfig+0x458>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a33      	ldr	r2, [pc, #204]	; (800a074 <UART_SetConfig+0x2a8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d132      	bne.n	800a012 <UART_SetConfig+0x246>
 8009fac:	4b30      	ldr	r3, [pc, #192]	; (800a070 <UART_SetConfig+0x2a4>)
 8009fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb2:	f003 030c 	and.w	r3, r3, #12
 8009fb6:	2b0c      	cmp	r3, #12
 8009fb8:	d828      	bhi.n	800a00c <UART_SetConfig+0x240>
 8009fba:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <UART_SetConfig+0x1f4>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a001 	.word	0x0800a001
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a00d 	.word	0x0800a00d
 8009fdc:	0800a00d 	.word	0x0800a00d
 8009fe0:	08009ffb 	.word	0x08009ffb
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a007 	.word	0x0800a007
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e114      	b.n	800a224 <UART_SetConfig+0x458>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e111      	b.n	800a224 <UART_SetConfig+0x458>
 800a000:	2304      	movs	r3, #4
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e10e      	b.n	800a224 <UART_SetConfig+0x458>
 800a006:	2308      	movs	r3, #8
 800a008:	77fb      	strb	r3, [r7, #31]
 800a00a:	e10b      	b.n	800a224 <UART_SetConfig+0x458>
 800a00c:	2310      	movs	r3, #16
 800a00e:	77fb      	strb	r3, [r7, #31]
 800a010:	e108      	b.n	800a224 <UART_SetConfig+0x458>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a18      	ldr	r2, [pc, #96]	; (800a078 <UART_SetConfig+0x2ac>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d12f      	bne.n	800a07c <UART_SetConfig+0x2b0>
 800a01c:	4b14      	ldr	r3, [pc, #80]	; (800a070 <UART_SetConfig+0x2a4>)
 800a01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a022:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a026:	2b30      	cmp	r3, #48	; 0x30
 800a028:	d013      	beq.n	800a052 <UART_SetConfig+0x286>
 800a02a:	2b30      	cmp	r3, #48	; 0x30
 800a02c:	d814      	bhi.n	800a058 <UART_SetConfig+0x28c>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d009      	beq.n	800a046 <UART_SetConfig+0x27a>
 800a032:	2b20      	cmp	r3, #32
 800a034:	d810      	bhi.n	800a058 <UART_SetConfig+0x28c>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <UART_SetConfig+0x274>
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d006      	beq.n	800a04c <UART_SetConfig+0x280>
 800a03e:	e00b      	b.n	800a058 <UART_SetConfig+0x28c>
 800a040:	2300      	movs	r3, #0
 800a042:	77fb      	strb	r3, [r7, #31]
 800a044:	e0ee      	b.n	800a224 <UART_SetConfig+0x458>
 800a046:	2302      	movs	r3, #2
 800a048:	77fb      	strb	r3, [r7, #31]
 800a04a:	e0eb      	b.n	800a224 <UART_SetConfig+0x458>
 800a04c:	2304      	movs	r3, #4
 800a04e:	77fb      	strb	r3, [r7, #31]
 800a050:	e0e8      	b.n	800a224 <UART_SetConfig+0x458>
 800a052:	2308      	movs	r3, #8
 800a054:	77fb      	strb	r3, [r7, #31]
 800a056:	e0e5      	b.n	800a224 <UART_SetConfig+0x458>
 800a058:	2310      	movs	r3, #16
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e0e2      	b.n	800a224 <UART_SetConfig+0x458>
 800a05e:	bf00      	nop
 800a060:	019bfcc0 	.word	0x019bfcc0
 800a064:	0800fbdc 	.word	0x0800fbdc
 800a068:	efff69f3 	.word	0xefff69f3
 800a06c:	40011000 	.word	0x40011000
 800a070:	40023800 	.word	0x40023800
 800a074:	40004400 	.word	0x40004400
 800a078:	40004800 	.word	0x40004800
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4aa5      	ldr	r2, [pc, #660]	; (800a318 <UART_SetConfig+0x54c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d120      	bne.n	800a0c8 <UART_SetConfig+0x2fc>
 800a086:	4ba5      	ldr	r3, [pc, #660]	; (800a31c <UART_SetConfig+0x550>)
 800a088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a08c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a090:	2bc0      	cmp	r3, #192	; 0xc0
 800a092:	d013      	beq.n	800a0bc <UART_SetConfig+0x2f0>
 800a094:	2bc0      	cmp	r3, #192	; 0xc0
 800a096:	d814      	bhi.n	800a0c2 <UART_SetConfig+0x2f6>
 800a098:	2b80      	cmp	r3, #128	; 0x80
 800a09a:	d009      	beq.n	800a0b0 <UART_SetConfig+0x2e4>
 800a09c:	2b80      	cmp	r3, #128	; 0x80
 800a09e:	d810      	bhi.n	800a0c2 <UART_SetConfig+0x2f6>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <UART_SetConfig+0x2de>
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d006      	beq.n	800a0b6 <UART_SetConfig+0x2ea>
 800a0a8:	e00b      	b.n	800a0c2 <UART_SetConfig+0x2f6>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	77fb      	strb	r3, [r7, #31]
 800a0ae:	e0b9      	b.n	800a224 <UART_SetConfig+0x458>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	77fb      	strb	r3, [r7, #31]
 800a0b4:	e0b6      	b.n	800a224 <UART_SetConfig+0x458>
 800a0b6:	2304      	movs	r3, #4
 800a0b8:	77fb      	strb	r3, [r7, #31]
 800a0ba:	e0b3      	b.n	800a224 <UART_SetConfig+0x458>
 800a0bc:	2308      	movs	r3, #8
 800a0be:	77fb      	strb	r3, [r7, #31]
 800a0c0:	e0b0      	b.n	800a224 <UART_SetConfig+0x458>
 800a0c2:	2310      	movs	r3, #16
 800a0c4:	77fb      	strb	r3, [r7, #31]
 800a0c6:	e0ad      	b.n	800a224 <UART_SetConfig+0x458>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a94      	ldr	r2, [pc, #592]	; (800a320 <UART_SetConfig+0x554>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d125      	bne.n	800a11e <UART_SetConfig+0x352>
 800a0d2:	4b92      	ldr	r3, [pc, #584]	; (800a31c <UART_SetConfig+0x550>)
 800a0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0e0:	d017      	beq.n	800a112 <UART_SetConfig+0x346>
 800a0e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0e6:	d817      	bhi.n	800a118 <UART_SetConfig+0x34c>
 800a0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ec:	d00b      	beq.n	800a106 <UART_SetConfig+0x33a>
 800a0ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0f2:	d811      	bhi.n	800a118 <UART_SetConfig+0x34c>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <UART_SetConfig+0x334>
 800a0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fc:	d006      	beq.n	800a10c <UART_SetConfig+0x340>
 800a0fe:	e00b      	b.n	800a118 <UART_SetConfig+0x34c>
 800a100:	2300      	movs	r3, #0
 800a102:	77fb      	strb	r3, [r7, #31]
 800a104:	e08e      	b.n	800a224 <UART_SetConfig+0x458>
 800a106:	2302      	movs	r3, #2
 800a108:	77fb      	strb	r3, [r7, #31]
 800a10a:	e08b      	b.n	800a224 <UART_SetConfig+0x458>
 800a10c:	2304      	movs	r3, #4
 800a10e:	77fb      	strb	r3, [r7, #31]
 800a110:	e088      	b.n	800a224 <UART_SetConfig+0x458>
 800a112:	2308      	movs	r3, #8
 800a114:	77fb      	strb	r3, [r7, #31]
 800a116:	e085      	b.n	800a224 <UART_SetConfig+0x458>
 800a118:	2310      	movs	r3, #16
 800a11a:	77fb      	strb	r3, [r7, #31]
 800a11c:	e082      	b.n	800a224 <UART_SetConfig+0x458>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a80      	ldr	r2, [pc, #512]	; (800a324 <UART_SetConfig+0x558>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d125      	bne.n	800a174 <UART_SetConfig+0x3a8>
 800a128:	4b7c      	ldr	r3, [pc, #496]	; (800a31c <UART_SetConfig+0x550>)
 800a12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a12e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a132:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a136:	d017      	beq.n	800a168 <UART_SetConfig+0x39c>
 800a138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a13c:	d817      	bhi.n	800a16e <UART_SetConfig+0x3a2>
 800a13e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a142:	d00b      	beq.n	800a15c <UART_SetConfig+0x390>
 800a144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a148:	d811      	bhi.n	800a16e <UART_SetConfig+0x3a2>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <UART_SetConfig+0x38a>
 800a14e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a152:	d006      	beq.n	800a162 <UART_SetConfig+0x396>
 800a154:	e00b      	b.n	800a16e <UART_SetConfig+0x3a2>
 800a156:	2301      	movs	r3, #1
 800a158:	77fb      	strb	r3, [r7, #31]
 800a15a:	e063      	b.n	800a224 <UART_SetConfig+0x458>
 800a15c:	2302      	movs	r3, #2
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	e060      	b.n	800a224 <UART_SetConfig+0x458>
 800a162:	2304      	movs	r3, #4
 800a164:	77fb      	strb	r3, [r7, #31]
 800a166:	e05d      	b.n	800a224 <UART_SetConfig+0x458>
 800a168:	2308      	movs	r3, #8
 800a16a:	77fb      	strb	r3, [r7, #31]
 800a16c:	e05a      	b.n	800a224 <UART_SetConfig+0x458>
 800a16e:	2310      	movs	r3, #16
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	e057      	b.n	800a224 <UART_SetConfig+0x458>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a6b      	ldr	r2, [pc, #428]	; (800a328 <UART_SetConfig+0x55c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d125      	bne.n	800a1ca <UART_SetConfig+0x3fe>
 800a17e:	4b67      	ldr	r3, [pc, #412]	; (800a31c <UART_SetConfig+0x550>)
 800a180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a184:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a18c:	d017      	beq.n	800a1be <UART_SetConfig+0x3f2>
 800a18e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a192:	d817      	bhi.n	800a1c4 <UART_SetConfig+0x3f8>
 800a194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a198:	d00b      	beq.n	800a1b2 <UART_SetConfig+0x3e6>
 800a19a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a19e:	d811      	bhi.n	800a1c4 <UART_SetConfig+0x3f8>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <UART_SetConfig+0x3e0>
 800a1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a8:	d006      	beq.n	800a1b8 <UART_SetConfig+0x3ec>
 800a1aa:	e00b      	b.n	800a1c4 <UART_SetConfig+0x3f8>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	77fb      	strb	r3, [r7, #31]
 800a1b0:	e038      	b.n	800a224 <UART_SetConfig+0x458>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	77fb      	strb	r3, [r7, #31]
 800a1b6:	e035      	b.n	800a224 <UART_SetConfig+0x458>
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	77fb      	strb	r3, [r7, #31]
 800a1bc:	e032      	b.n	800a224 <UART_SetConfig+0x458>
 800a1be:	2308      	movs	r3, #8
 800a1c0:	77fb      	strb	r3, [r7, #31]
 800a1c2:	e02f      	b.n	800a224 <UART_SetConfig+0x458>
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	77fb      	strb	r3, [r7, #31]
 800a1c8:	e02c      	b.n	800a224 <UART_SetConfig+0x458>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a57      	ldr	r2, [pc, #348]	; (800a32c <UART_SetConfig+0x560>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d125      	bne.n	800a220 <UART_SetConfig+0x454>
 800a1d4:	4b51      	ldr	r3, [pc, #324]	; (800a31c <UART_SetConfig+0x550>)
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1e2:	d017      	beq.n	800a214 <UART_SetConfig+0x448>
 800a1e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1e8:	d817      	bhi.n	800a21a <UART_SetConfig+0x44e>
 800a1ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ee:	d00b      	beq.n	800a208 <UART_SetConfig+0x43c>
 800a1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f4:	d811      	bhi.n	800a21a <UART_SetConfig+0x44e>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <UART_SetConfig+0x436>
 800a1fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1fe:	d006      	beq.n	800a20e <UART_SetConfig+0x442>
 800a200:	e00b      	b.n	800a21a <UART_SetConfig+0x44e>
 800a202:	2300      	movs	r3, #0
 800a204:	77fb      	strb	r3, [r7, #31]
 800a206:	e00d      	b.n	800a224 <UART_SetConfig+0x458>
 800a208:	2302      	movs	r3, #2
 800a20a:	77fb      	strb	r3, [r7, #31]
 800a20c:	e00a      	b.n	800a224 <UART_SetConfig+0x458>
 800a20e:	2304      	movs	r3, #4
 800a210:	77fb      	strb	r3, [r7, #31]
 800a212:	e007      	b.n	800a224 <UART_SetConfig+0x458>
 800a214:	2308      	movs	r3, #8
 800a216:	77fb      	strb	r3, [r7, #31]
 800a218:	e004      	b.n	800a224 <UART_SetConfig+0x458>
 800a21a:	2310      	movs	r3, #16
 800a21c:	77fb      	strb	r3, [r7, #31]
 800a21e:	e001      	b.n	800a224 <UART_SetConfig+0x458>
 800a220:	2310      	movs	r3, #16
 800a222:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a22c:	d15c      	bne.n	800a2e8 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a22e:	7ffb      	ldrb	r3, [r7, #31]
 800a230:	2b08      	cmp	r3, #8
 800a232:	d828      	bhi.n	800a286 <UART_SetConfig+0x4ba>
 800a234:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <UART_SetConfig+0x470>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a271 	.word	0x0800a271
 800a248:	0800a287 	.word	0x0800a287
 800a24c:	0800a277 	.word	0x0800a277
 800a250:	0800a287 	.word	0x0800a287
 800a254:	0800a287 	.word	0x0800a287
 800a258:	0800a287 	.word	0x0800a287
 800a25c:	0800a27f 	.word	0x0800a27f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a260:	f7fe f832 	bl	80082c8 <HAL_RCC_GetPCLK1Freq>
 800a264:	61b8      	str	r0, [r7, #24]
        break;
 800a266:	e013      	b.n	800a290 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a268:	f7fe f842 	bl	80082f0 <HAL_RCC_GetPCLK2Freq>
 800a26c:	61b8      	str	r0, [r7, #24]
        break;
 800a26e:	e00f      	b.n	800a290 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a270:	4b2f      	ldr	r3, [pc, #188]	; (800a330 <UART_SetConfig+0x564>)
 800a272:	61bb      	str	r3, [r7, #24]
        break;
 800a274:	e00c      	b.n	800a290 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a276:	f7fd ff15 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 800a27a:	61b8      	str	r0, [r7, #24]
        break;
 800a27c:	e008      	b.n	800a290 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a282:	61bb      	str	r3, [r7, #24]
        break;
 800a284:	e004      	b.n	800a290 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	77bb      	strb	r3, [r7, #30]
        break;
 800a28e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 8082 	beq.w	800a39c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	005a      	lsls	r2, r3, #1
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	441a      	add	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	2b0f      	cmp	r3, #15
 800a2b2:	d916      	bls.n	800a2e2 <UART_SetConfig+0x516>
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ba:	d212      	bcs.n	800a2e2 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f023 030f 	bic.w	r3, r3, #15
 800a2c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	085b      	lsrs	r3, r3, #1
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f003 0307 	and.w	r3, r3, #7
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	89fa      	ldrh	r2, [r7, #14]
 800a2de:	60da      	str	r2, [r3, #12]
 800a2e0:	e05c      	b.n	800a39c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	77bb      	strb	r3, [r7, #30]
 800a2e6:	e059      	b.n	800a39c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2e8:	7ffb      	ldrb	r3, [r7, #31]
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d835      	bhi.n	800a35a <UART_SetConfig+0x58e>
 800a2ee:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0x528>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a335 	.word	0x0800a335
 800a2f8:	0800a33d 	.word	0x0800a33d
 800a2fc:	0800a345 	.word	0x0800a345
 800a300:	0800a35b 	.word	0x0800a35b
 800a304:	0800a34b 	.word	0x0800a34b
 800a308:	0800a35b 	.word	0x0800a35b
 800a30c:	0800a35b 	.word	0x0800a35b
 800a310:	0800a35b 	.word	0x0800a35b
 800a314:	0800a353 	.word	0x0800a353
 800a318:	40004c00 	.word	0x40004c00
 800a31c:	40023800 	.word	0x40023800
 800a320:	40005000 	.word	0x40005000
 800a324:	40011400 	.word	0x40011400
 800a328:	40007800 	.word	0x40007800
 800a32c:	40007c00 	.word	0x40007c00
 800a330:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a334:	f7fd ffc8 	bl	80082c8 <HAL_RCC_GetPCLK1Freq>
 800a338:	61b8      	str	r0, [r7, #24]
        break;
 800a33a:	e013      	b.n	800a364 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a33c:	f7fd ffd8 	bl	80082f0 <HAL_RCC_GetPCLK2Freq>
 800a340:	61b8      	str	r0, [r7, #24]
        break;
 800a342:	e00f      	b.n	800a364 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a344:	4b1b      	ldr	r3, [pc, #108]	; (800a3b4 <UART_SetConfig+0x5e8>)
 800a346:	61bb      	str	r3, [r7, #24]
        break;
 800a348:	e00c      	b.n	800a364 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a34a:	f7fd feab 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 800a34e:	61b8      	str	r0, [r7, #24]
        break;
 800a350:	e008      	b.n	800a364 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a356:	61bb      	str	r3, [r7, #24]
        break;
 800a358:	e004      	b.n	800a364 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	77bb      	strb	r3, [r7, #30]
        break;
 800a362:	bf00      	nop
    }

    if (pclk != 0U)
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d018      	beq.n	800a39c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	085a      	lsrs	r2, r3, #1
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	441a      	add	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2b0f      	cmp	r3, #15
 800a382:	d909      	bls.n	800a398 <UART_SetConfig+0x5cc>
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38a:	d205      	bcs.n	800a398 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60da      	str	r2, [r3, #12]
 800a396:	e001      	b.n	800a39c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a3a8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	00f42400 	.word	0x00f42400

0800a3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2bff      	cmp	r3, #255	; 0xff
 800a3c6:	d904      	bls.n	800a3d2 <UART_AdvFeatureConfig+0x1a>
 800a3c8:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a3cc:	488e      	ldr	r0, [pc, #568]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a3ce:	f7f6 fce3 	bl	8000d98 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d018      	beq.n	800a410 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d009      	beq.n	800a3fa <UART_AdvFeatureConfig+0x42>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ee:	d004      	beq.n	800a3fa <UART_AdvFeatureConfig+0x42>
 800a3f0:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a3f4:	4884      	ldr	r0, [pc, #528]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a3f6:	f7f6 fccf 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d018      	beq.n	800a44e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d009      	beq.n	800a438 <UART_AdvFeatureConfig+0x80>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a42c:	d004      	beq.n	800a438 <UART_AdvFeatureConfig+0x80>
 800a42e:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a432:	4875      	ldr	r0, [pc, #468]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a434:	f7f6 fcb0 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d018      	beq.n	800a48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d009      	beq.n	800a476 <UART_AdvFeatureConfig+0xbe>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a46a:	d004      	beq.n	800a476 <UART_AdvFeatureConfig+0xbe>
 800a46c:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a470:	4865      	ldr	r0, [pc, #404]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a472:	f7f6 fc91 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d018      	beq.n	800a4ca <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d009      	beq.n	800a4b4 <UART_AdvFeatureConfig+0xfc>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a8:	d004      	beq.n	800a4b4 <UART_AdvFeatureConfig+0xfc>
 800a4aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a4ae:	4856      	ldr	r0, [pc, #344]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a4b0:	f7f6 fc72 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d018      	beq.n	800a508 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x13a>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e6:	d004      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x13a>
 800a4e8:	f640 4107 	movw	r1, #3079	; 0xc07
 800a4ec:	4846      	ldr	r0, [pc, #280]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a4ee:	f7f6 fc53 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b00      	cmp	r3, #0
 800a512:	d018      	beq.n	800a546 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d009      	beq.n	800a530 <UART_AdvFeatureConfig+0x178>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a524:	d004      	beq.n	800a530 <UART_AdvFeatureConfig+0x178>
 800a526:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a52a:	4837      	ldr	r0, [pc, #220]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a52c:	f7f6 fc34 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d064      	beq.n	800a61c <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a2d      	ldr	r2, [pc, #180]	; (800a60c <UART_AdvFeatureConfig+0x254>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d013      	beq.n	800a584 <UART_AdvFeatureConfig+0x1cc>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a2b      	ldr	r2, [pc, #172]	; (800a610 <UART_AdvFeatureConfig+0x258>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00e      	beq.n	800a584 <UART_AdvFeatureConfig+0x1cc>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a2a      	ldr	r2, [pc, #168]	; (800a614 <UART_AdvFeatureConfig+0x25c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d009      	beq.n	800a584 <UART_AdvFeatureConfig+0x1cc>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a28      	ldr	r2, [pc, #160]	; (800a618 <UART_AdvFeatureConfig+0x260>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d004      	beq.n	800a584 <UART_AdvFeatureConfig+0x1cc>
 800a57a:	f640 4115 	movw	r1, #3093	; 0xc15
 800a57e:	4822      	ldr	r0, [pc, #136]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a580:	f7f6 fc0a 	bl	8000d98 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d009      	beq.n	800a5a0 <UART_AdvFeatureConfig+0x1e8>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a594:	d004      	beq.n	800a5a0 <UART_AdvFeatureConfig+0x1e8>
 800a596:	f640 4116 	movw	r1, #3094	; 0xc16
 800a59a:	481b      	ldr	r0, [pc, #108]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a59c:	f7f6 fbfc 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5be:	d12d      	bne.n	800a61c <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d013      	beq.n	800a5f0 <UART_AdvFeatureConfig+0x238>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5d0:	d00e      	beq.n	800a5f0 <UART_AdvFeatureConfig+0x238>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5da:	d009      	beq.n	800a5f0 <UART_AdvFeatureConfig+0x238>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5e4:	d004      	beq.n	800a5f0 <UART_AdvFeatureConfig+0x238>
 800a5e6:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a5ea:	4807      	ldr	r0, [pc, #28]	; (800a608 <UART_AdvFeatureConfig+0x250>)
 800a5ec:	f7f6 fbd4 	bl	8000d98 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
 800a606:	e009      	b.n	800a61c <UART_AdvFeatureConfig+0x264>
 800a608:	0800fbdc 	.word	0x0800fbdc
 800a60c:	40011000 	.word	0x40011000
 800a610:	40004400 	.word	0x40004400
 800a614:	40004800 	.word	0x40004800
 800a618:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a624:	2b00      	cmp	r3, #0
 800a626:	d018      	beq.n	800a65a <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d009      	beq.n	800a644 <UART_AdvFeatureConfig+0x28c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a634:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a638:	d004      	beq.n	800a644 <UART_AdvFeatureConfig+0x28c>
 800a63a:	f640 4123 	movw	r1, #3107	; 0xc23
 800a63e:	4809      	ldr	r0, [pc, #36]	; (800a664 <UART_AdvFeatureConfig+0x2ac>)
 800a640:	f7f6 fbaa 	bl	8000d98 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	605a      	str	r2, [r3, #4]
  }
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	0800fbdc 	.word	0x0800fbdc

0800a668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a678:	f7f8 fb22 	bl	8002cc0 <HAL_GetTick>
 800a67c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d10e      	bne.n	800a6aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a68c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f831 	bl	800a702 <UART_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e027      	b.n	800a6fa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d10e      	bne.n	800a6d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f81b 	bl	800a702 <UART_WaitOnFlagUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e011      	b.n	800a6fa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b09c      	sub	sp, #112	; 0x70
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	603b      	str	r3, [r7, #0]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a712:	e0a7      	b.n	800a864 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71a:	f000 80a3 	beq.w	800a864 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a71e:	f7f8 facf 	bl	8002cc0 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d302      	bcc.n	800a734 <UART_WaitOnFlagUntilTimeout+0x32>
 800a72e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a730:	2b00      	cmp	r3, #0
 800a732:	d13f      	bne.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a748:	667b      	str	r3, [r7, #100]	; 0x64
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a752:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a754:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a758:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a75a:	e841 2300 	strex	r3, r2, [r1]
 800a75e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1e6      	bne.n	800a734 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3308      	adds	r3, #8
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	f023 0301 	bic.w	r3, r3, #1
 800a77c:	663b      	str	r3, [r7, #96]	; 0x60
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3308      	adds	r3, #8
 800a784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a786:	64ba      	str	r2, [r7, #72]	; 0x48
 800a788:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a78c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e5      	bne.n	800a766 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2220      	movs	r2, #32
 800a79e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e068      	b.n	800a886 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d050      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d0:	d148      	bne.n	800a864 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a7fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e6      	bne.n	800a7dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3308      	adds	r3, #8
 800a814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	613b      	str	r3, [r7, #16]
   return(result);
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	f023 0301 	bic.w	r3, r3, #1
 800a824:	66bb      	str	r3, [r7, #104]	; 0x68
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3308      	adds	r3, #8
 800a82c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a82e:	623a      	str	r2, [r7, #32]
 800a830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	69f9      	ldr	r1, [r7, #28]
 800a834:	6a3a      	ldr	r2, [r7, #32]
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e5      	bne.n	800a80e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e010      	b.n	800a886 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69da      	ldr	r2, [r3, #28]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4013      	ands	r3, r2
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	bf0c      	ite	eq
 800a874:	2301      	moveq	r3, #1
 800a876:	2300      	movne	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	429a      	cmp	r2, r3
 800a880:	f43f af48 	beq.w	800a714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3770      	adds	r7, #112	; 0x70
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a890:	b084      	sub	sp, #16
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	f107 001c 	add.w	r0, r7, #28
 800a89e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d120      	bne.n	800a8ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	4b20      	ldr	r3, [pc, #128]	; (800a93c <USB_CoreInit+0xac>)
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d105      	bne.n	800a8de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa96 	bl	800ae10 <USB_CoreReset>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
 800a8e8:	e010      	b.n	800a90c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fa8a 	bl	800ae10 <USB_CoreReset>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a904:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10b      	bne.n	800a92a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f043 0206 	orr.w	r2, r3, #6
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f043 0220 	orr.w	r2, r3, #32
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a936:	b004      	add	sp, #16
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	ffbdffbf 	.word	0xffbdffbf

0800a940 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f023 0201 	bic.w	r2, r3, #1
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	460b      	mov	r3, r1
 800a96c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d115      	bne.n	800a9b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a990:	2001      	movs	r0, #1
 800a992:	f7f8 f9a1 	bl	8002cd8 <HAL_Delay>
      ms++;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3301      	adds	r3, #1
 800a99a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fa29 	bl	800adf4 <USB_GetMode>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d01e      	beq.n	800a9e6 <USB_SetCurrentMode+0x84>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b31      	cmp	r3, #49	; 0x31
 800a9ac:	d9f0      	bls.n	800a990 <USB_SetCurrentMode+0x2e>
 800a9ae:	e01a      	b.n	800a9e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9b0:	78fb      	ldrb	r3, [r7, #3]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d115      	bne.n	800a9e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	f7f8 f988 	bl	8002cd8 <HAL_Delay>
      ms++;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fa10 	bl	800adf4 <USB_GetMode>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <USB_SetCurrentMode+0x84>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b31      	cmp	r3, #49	; 0x31
 800a9de:	d9f0      	bls.n	800a9c2 <USB_SetCurrentMode+0x60>
 800a9e0:	e001      	b.n	800a9e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e005      	b.n	800a9f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b32      	cmp	r3, #50	; 0x32
 800a9ea:	d101      	bne.n	800a9f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e000      	b.n	800a9f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa16:	2300      	movs	r3, #0
 800aa18:	613b      	str	r3, [r7, #16]
 800aa1a:	e009      	b.n	800aa30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3340      	adds	r3, #64	; 0x40
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	2200      	movs	r2, #0
 800aa28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	613b      	str	r3, [r7, #16]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	2b0e      	cmp	r3, #14
 800aa34:	d9f2      	bls.n	800aa1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d11c      	bne.n	800aa76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa4a:	f043 0302 	orr.w	r3, r3, #2
 800aa4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e005      	b.n	800aa82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa88:	461a      	mov	r2, r3
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa94:	4619      	mov	r1, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	680b      	ldr	r3, [r1, #0]
 800aaa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d10c      	bne.n	800aac2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d104      	bne.n	800aab8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aaae:	2100      	movs	r1, #0
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f965 	bl	800ad80 <USB_SetDevSpeed>
 800aab6:	e008      	b.n	800aaca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aab8:	2101      	movs	r1, #1
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f960 	bl	800ad80 <USB_SetDevSpeed>
 800aac0:	e003      	b.n	800aaca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aac2:	2103      	movs	r1, #3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f95b 	bl	800ad80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aaca:	2110      	movs	r1, #16
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f8f3 	bl	800acb8 <USB_FlushTxFifo>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f91f 	bl	800ad20 <USB_FlushRxFifo>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafe:	461a      	mov	r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab10:	2300      	movs	r3, #0
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	e043      	b.n	800ab9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab2c:	d118      	bne.n	800ab60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab40:	461a      	mov	r2, r3
 800ab42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	e013      	b.n	800ab72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab56:	461a      	mov	r2, r3
 800ab58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab5c:	6013      	str	r3, [r2, #0]
 800ab5e:	e008      	b.n	800ab72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7e:	461a      	mov	r2, r3
 800ab80:	2300      	movs	r3, #0
 800ab82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	461a      	mov	r2, r3
 800ab92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	613b      	str	r3, [r7, #16]
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d3b7      	bcc.n	800ab16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aba6:	2300      	movs	r3, #0
 800aba8:	613b      	str	r3, [r7, #16]
 800abaa:	e043      	b.n	800ac34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abc2:	d118      	bne.n	800abf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd6:	461a      	mov	r2, r3
 800abd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	e013      	b.n	800ac08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abec:	461a      	mov	r2, r3
 800abee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	e008      	b.n	800ac08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac02:	461a      	mov	r2, r3
 800ac04:	2300      	movs	r3, #0
 800ac06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac14:	461a      	mov	r2, r3
 800ac16:	2300      	movs	r3, #0
 800ac18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac26:	461a      	mov	r2, r3
 800ac28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3301      	adds	r3, #1
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d3b7      	bcc.n	800abac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d105      	bne.n	800ac70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	f043 0210 	orr.w	r2, r3, #16
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	4b0e      	ldr	r3, [pc, #56]	; (800acb0 <USB_DevInit+0x2b4>)
 800ac76:	4313      	orrs	r3, r2
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d005      	beq.n	800ac8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	f043 0208 	orr.w	r2, r3, #8
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d105      	bne.n	800aca0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <USB_DevInit+0x2b8>)
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acac:	b004      	add	sp, #16
 800acae:	4770      	bx	lr
 800acb0:	803c3800 	.word	0x803c3800
 800acb4:	40000004 	.word	0x40000004

0800acb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3301      	adds	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <USB_FlushTxFifo+0x64>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d901      	bls.n	800acd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e01b      	b.n	800ad10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	daf2      	bge.n	800acc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	019b      	lsls	r3, r3, #6
 800ace8:	f043 0220 	orr.w	r2, r3, #32
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	3301      	adds	r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4a08      	ldr	r2, [pc, #32]	; (800ad1c <USB_FlushTxFifo+0x64>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d901      	bls.n	800ad02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e006      	b.n	800ad10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d0f0      	beq.n	800acf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	00030d40 	.word	0x00030d40

0800ad20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4a11      	ldr	r2, [pc, #68]	; (800ad7c <USB_FlushRxFifo+0x5c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d901      	bls.n	800ad3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e018      	b.n	800ad70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	daf2      	bge.n	800ad2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2210      	movs	r2, #16
 800ad4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3301      	adds	r3, #1
 800ad54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4a08      	ldr	r2, [pc, #32]	; (800ad7c <USB_FlushRxFifo+0x5c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d901      	bls.n	800ad62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e006      	b.n	800ad70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f003 0310 	and.w	r3, r3, #16
 800ad6a:	2b10      	cmp	r3, #16
 800ad6c:	d0f0      	beq.n	800ad50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	00030d40 	.word	0x00030d40

0800ad80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada0:	4313      	orrs	r3, r2
 800ada2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adcc:	f023 0303 	bic.w	r3, r3, #3
 800add0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ade0:	f043 0302 	orr.w	r3, r3, #2
 800ade4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	f003 0301 	and.w	r3, r3, #1
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4a13      	ldr	r2, [pc, #76]	; (800ae74 <USB_CoreReset+0x64>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d901      	bls.n	800ae2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e01b      	b.n	800ae66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	daf2      	bge.n	800ae1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	f043 0201 	orr.w	r2, r3, #1
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a09      	ldr	r2, [pc, #36]	; (800ae74 <USB_CoreReset+0x64>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d901      	bls.n	800ae58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e006      	b.n	800ae66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d0f0      	beq.n	800ae46 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	00030d40 	.word	0x00030d40

0800ae78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ae7c:	bf00      	nop
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
	...

0800ae88 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae8e:	f3ef 8305 	mrs	r3, IPSR
 800ae92:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10f      	bne.n	800aeba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae9e:	607b      	str	r3, [r7, #4]
  return(result);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d105      	bne.n	800aeb2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aea6:	f3ef 8311 	mrs	r3, BASEPRI
 800aeaa:	603b      	str	r3, [r7, #0]
  return(result);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d007      	beq.n	800aec2 <osKernelInitialize+0x3a>
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <osKernelInitialize+0x64>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d103      	bne.n	800aec2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aeba:	f06f 0305 	mvn.w	r3, #5
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	e00c      	b.n	800aedc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aec2:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <osKernelInitialize+0x64>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d105      	bne.n	800aed6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aeca:	4b08      	ldr	r3, [pc, #32]	; (800aeec <osKernelInitialize+0x64>)
 800aecc:	2201      	movs	r2, #1
 800aece:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e002      	b.n	800aedc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aedc:	68fb      	ldr	r3, [r7, #12]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20000b30 	.word	0x20000b30

0800aef0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aef6:	f3ef 8305 	mrs	r3, IPSR
 800aefa:	60bb      	str	r3, [r7, #8]
  return(result);
 800aefc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10f      	bne.n	800af22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af02:	f3ef 8310 	mrs	r3, PRIMASK
 800af06:	607b      	str	r3, [r7, #4]
  return(result);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d105      	bne.n	800af1a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af0e:	f3ef 8311 	mrs	r3, BASEPRI
 800af12:	603b      	str	r3, [r7, #0]
  return(result);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d007      	beq.n	800af2a <osKernelStart+0x3a>
 800af1a:	4b0f      	ldr	r3, [pc, #60]	; (800af58 <osKernelStart+0x68>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d103      	bne.n	800af2a <osKernelStart+0x3a>
    stat = osErrorISR;
 800af22:	f06f 0305 	mvn.w	r3, #5
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e010      	b.n	800af4c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af2a:	4b0b      	ldr	r3, [pc, #44]	; (800af58 <osKernelStart+0x68>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d109      	bne.n	800af46 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af32:	f7ff ffa1 	bl	800ae78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af36:	4b08      	ldr	r3, [pc, #32]	; (800af58 <osKernelStart+0x68>)
 800af38:	2202      	movs	r2, #2
 800af3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af3c:	f001 f966 	bl	800c20c <vTaskStartScheduler>
      stat = osOK;
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e002      	b.n	800af4c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800af46:	f04f 33ff 	mov.w	r3, #4294967295
 800af4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800af4c:	68fb      	ldr	r3, [r7, #12]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000b30 	.word	0x20000b30

0800af5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b090      	sub	sp, #64	; 0x40
 800af60:	af04      	add	r7, sp, #16
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af6c:	f3ef 8305 	mrs	r3, IPSR
 800af70:	61fb      	str	r3, [r7, #28]
  return(result);
 800af72:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 808f 	bne.w	800b098 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af7a:	f3ef 8310 	mrs	r3, PRIMASK
 800af7e:	61bb      	str	r3, [r7, #24]
  return(result);
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af86:	f3ef 8311 	mrs	r3, BASEPRI
 800af8a:	617b      	str	r3, [r7, #20]
  return(result);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <osThreadNew+0x3e>
 800af92:	4b44      	ldr	r3, [pc, #272]	; (800b0a4 <osThreadNew+0x148>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d07e      	beq.n	800b098 <osThreadNew+0x13c>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d07b      	beq.n	800b098 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800afa0:	2380      	movs	r3, #128	; 0x80
 800afa2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800afa4:	2318      	movs	r3, #24
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800afac:	f04f 33ff 	mov.w	r3, #4294967295
 800afb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d045      	beq.n	800b044 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <osThreadNew+0x6a>
        name = attr->name;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d008      	beq.n	800afec <osThreadNew+0x90>
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	2b38      	cmp	r3, #56	; 0x38
 800afde:	d805      	bhi.n	800afec <osThreadNew+0x90>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <osThreadNew+0x94>
        return (NULL);
 800afec:	2300      	movs	r3, #0
 800afee:	e054      	b.n	800b09a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	089b      	lsrs	r3, r3, #2
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00e      	beq.n	800b026 <osThreadNew+0xca>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	2bbb      	cmp	r3, #187	; 0xbb
 800b00e:	d90a      	bls.n	800b026 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b014:	2b00      	cmp	r3, #0
 800b016:	d006      	beq.n	800b026 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <osThreadNew+0xca>
        mem = 1;
 800b020:	2301      	movs	r3, #1
 800b022:	623b      	str	r3, [r7, #32]
 800b024:	e010      	b.n	800b048 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10c      	bne.n	800b048 <osThreadNew+0xec>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d108      	bne.n	800b048 <osThreadNew+0xec>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d104      	bne.n	800b048 <osThreadNew+0xec>
          mem = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	623b      	str	r3, [r7, #32]
 800b042:	e001      	b.n	800b048 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d110      	bne.n	800b070 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b056:	9202      	str	r2, [sp, #8]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 feb9 	bl	800bddc <xTaskCreateStatic>
 800b06a:	4603      	mov	r3, r0
 800b06c:	613b      	str	r3, [r7, #16]
 800b06e:	e013      	b.n	800b098 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d110      	bne.n	800b098 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	b29a      	uxth	r2, r3
 800b07a:	f107 0310 	add.w	r3, r7, #16
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 ff0a 	bl	800bea2 <xTaskCreate>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b01      	cmp	r3, #1
 800b092:	d001      	beq.n	800b098 <osThreadNew+0x13c>
          hTask = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b098:	693b      	ldr	r3, [r7, #16]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3730      	adds	r7, #48	; 0x30
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	20000b30 	.word	0x20000b30

0800b0a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0b0:	f3ef 8305 	mrs	r3, IPSR
 800b0b4:	613b      	str	r3, [r7, #16]
  return(result);
 800b0b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10f      	bne.n	800b0dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b0c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0c8:	f3ef 8311 	mrs	r3, BASEPRI
 800b0cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d007      	beq.n	800b0e4 <osDelay+0x3c>
 800b0d4:	4b0a      	ldr	r3, [pc, #40]	; (800b100 <osDelay+0x58>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d103      	bne.n	800b0e4 <osDelay+0x3c>
    stat = osErrorISR;
 800b0dc:	f06f 0305 	mvn.w	r3, #5
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	e007      	b.n	800b0f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 f852 	bl	800c198 <vTaskDelay>
    }
  }

  return (stat);
 800b0f4:	697b      	ldr	r3, [r7, #20]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20000b30 	.word	0x20000b30

0800b104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4a07      	ldr	r2, [pc, #28]	; (800b130 <vApplicationGetIdleTaskMemory+0x2c>)
 800b114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	4a06      	ldr	r2, [pc, #24]	; (800b134 <vApplicationGetIdleTaskMemory+0x30>)
 800b11a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2280      	movs	r2, #128	; 0x80
 800b120:	601a      	str	r2, [r3, #0]
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	20000b34 	.word	0x20000b34
 800b134:	20000bf0 	.word	0x20000bf0

0800b138 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a07      	ldr	r2, [pc, #28]	; (800b164 <vApplicationGetTimerTaskMemory+0x2c>)
 800b148:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	4a06      	ldr	r2, [pc, #24]	; (800b168 <vApplicationGetTimerTaskMemory+0x30>)
 800b14e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b156:	601a      	str	r2, [r3, #0]
}
 800b158:	bf00      	nop
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	20000df0 	.word	0x20000df0
 800b168:	20000eac 	.word	0x20000eac

0800b16c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f103 0208 	add.w	r2, r3, #8
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f103 0208 	add.w	r2, r3, #8
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f103 0208 	add.w	r2, r3, #8
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	689a      	ldr	r2, [r3, #8]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	601a      	str	r2, [r3, #0]
}
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b224:	d103      	bne.n	800b22e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e00c      	b.n	800b248 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3308      	adds	r3, #8
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	e002      	b.n	800b23c <vListInsert+0x2e>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	429a      	cmp	r2, r3
 800b246:	d2f6      	bcs.n	800b236 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	601a      	str	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	6892      	ldr	r2, [r2, #8]
 800b296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6852      	ldr	r2, [r2, #4]
 800b2a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d103      	bne.n	800b2b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	1e5a      	subs	r2, r3, #1
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10c      	bne.n	800b302 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	b672      	cpsid	i
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	b662      	cpsie	i
 800b2fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b302:	f002 f9cb 	bl	800d69c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30e:	68f9      	ldr	r1, [r7, #12]
 800b310:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b312:	fb01 f303 	mul.w	r3, r1, r3
 800b316:	441a      	add	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b332:	3b01      	subs	r3, #1
 800b334:	68f9      	ldr	r1, [r7, #12]
 800b336:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b338:	fb01 f303 	mul.w	r3, r1, r3
 800b33c:	441a      	add	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	22ff      	movs	r2, #255	; 0xff
 800b346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	22ff      	movs	r2, #255	; 0xff
 800b34e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d114      	bne.n	800b382 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01a      	beq.n	800b396 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3310      	adds	r3, #16
 800b364:	4618      	mov	r0, r3
 800b366:	f001 fa3b 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d012      	beq.n	800b396 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <xQueueGenericReset+0xd0>)
 800b372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	e009      	b.n	800b396 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3310      	adds	r3, #16
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff fef0 	bl	800b16c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3324      	adds	r3, #36	; 0x24
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff feeb 	bl	800b16c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b396:	f002 f9b5 	bl	800d704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b39a:	2301      	movs	r3, #1
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	e000ed04 	.word	0xe000ed04

0800b3a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08e      	sub	sp, #56	; 0x38
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10c      	bne.n	800b3d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	b672      	cpsid	i
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	b662      	cpsie	i
 800b3d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10c      	bne.n	800b3f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	b672      	cpsid	i
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	b662      	cpsie	i
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <xQueueGenericCreateStatic+0x5a>
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <xQueueGenericCreateStatic+0x5e>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <xQueueGenericCreateStatic+0x60>
 800b406:	2300      	movs	r3, #0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10c      	bne.n	800b426 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	b672      	cpsid	i
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	b662      	cpsie	i
 800b420:	623b      	str	r3, [r7, #32]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <xQueueGenericCreateStatic+0x8a>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <xQueueGenericCreateStatic+0x8e>
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <xQueueGenericCreateStatic+0x90>
 800b436:	2300      	movs	r3, #0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10c      	bne.n	800b456 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	b672      	cpsid	i
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	b662      	cpsie	i
 800b450:	61fb      	str	r3, [r7, #28]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b456:	2350      	movs	r3, #80	; 0x50
 800b458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	2b50      	cmp	r3, #80	; 0x50
 800b45e:	d00c      	beq.n	800b47a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	b672      	cpsid	i
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	b662      	cpsie	i
 800b474:	61bb      	str	r3, [r7, #24]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b47a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00d      	beq.n	800b4a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b48e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	4613      	mov	r3, r2
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f805 	bl	800b4ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3730      	adds	r7, #48	; 0x30
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d103      	bne.n	800b4c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	e002      	b.n	800b4ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4da:	2101      	movs	r1, #1
 800b4dc:	69b8      	ldr	r0, [r7, #24]
 800b4de:	f7ff fef9 	bl	800b2d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	78fa      	ldrb	r2, [r7, #3]
 800b4e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	2073      	movs	r0, #115	; 0x73
 800b4f2:	f003 f94d 	bl	800e790 <SEGGER_SYSVIEW_RecordU32x3>
}
 800b4f6:	bf00      	nop
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b090      	sub	sp, #64	; 0x40
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b50e:	2300      	movs	r3, #0
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10c      	bne.n	800b536 <xQueueGenericSend+0x36>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	b672      	cpsid	i
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	b662      	cpsie	i
 800b530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d103      	bne.n	800b544 <xQueueGenericSend+0x44>
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <xQueueGenericSend+0x48>
 800b544:	2301      	movs	r3, #1
 800b546:	e000      	b.n	800b54a <xQueueGenericSend+0x4a>
 800b548:	2300      	movs	r3, #0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10c      	bne.n	800b568 <xQueueGenericSend+0x68>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	b672      	cpsid	i
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	b662      	cpsie	i
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d103      	bne.n	800b576 <xQueueGenericSend+0x76>
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b572:	2b01      	cmp	r3, #1
 800b574:	d101      	bne.n	800b57a <xQueueGenericSend+0x7a>
 800b576:	2301      	movs	r3, #1
 800b578:	e000      	b.n	800b57c <xQueueGenericSend+0x7c>
 800b57a:	2300      	movs	r3, #0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10c      	bne.n	800b59a <xQueueGenericSend+0x9a>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	b672      	cpsid	i
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	b662      	cpsie	i
 800b594:	623b      	str	r3, [r7, #32]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b59a:	f001 fb27 	bl	800cbec <xTaskGetSchedulerState>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <xQueueGenericSend+0xaa>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <xQueueGenericSend+0xae>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e000      	b.n	800b5b0 <xQueueGenericSend+0xb0>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10c      	bne.n	800b5ce <xQueueGenericSend+0xce>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	b672      	cpsid	i
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	b662      	cpsie	i
 800b5c8:	61fb      	str	r3, [r7, #28]
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5ce:	f002 f865 	bl	800d69c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d302      	bcc.n	800b5e4 <xQueueGenericSend+0xe4>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d136      	bne.n	800b652 <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f003 fd8e 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	205a      	movs	r0, #90	; 0x5a
 800b5fa:	f003 f93f 	bl	800e87c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	68b9      	ldr	r1, [r7, #8]
 800b602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b604:	f000 fa74 	bl	800baf0 <prvCopyDataToQueue>
 800b608:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d010      	beq.n	800b634 <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	3324      	adds	r3, #36	; 0x24
 800b616:	4618      	mov	r0, r3
 800b618:	f001 f8e2 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d013      	beq.n	800b64a <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b622:	4b4d      	ldr	r3, [pc, #308]	; (800b758 <xQueueGenericSend+0x258>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	e00a      	b.n	800b64a <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d007      	beq.n	800b64a <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b63a:	4b47      	ldr	r3, [pc, #284]	; (800b758 <xQueueGenericSend+0x258>)
 800b63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b64a:	f002 f85b 	bl	800d704 <vPortExitCritical>
				return pdPASS;
 800b64e:	2301      	movs	r3, #1
 800b650:	e07d      	b.n	800b74e <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d110      	bne.n	800b67a <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b658:	f002 f854 	bl	800d704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	4618      	mov	r0, r3
 800b660:	f003 fd52 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	460b      	mov	r3, r1
 800b66e:	4601      	mov	r1, r0
 800b670:	205a      	movs	r0, #90	; 0x5a
 800b672:	f003 f903 	bl	800e87c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800b676:	2300      	movs	r3, #0
 800b678:	e069      	b.n	800b74e <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d106      	bne.n	800b68e <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b680:	f107 0314 	add.w	r3, r7, #20
 800b684:	4618      	mov	r0, r3
 800b686:	f001 f915 	bl	800c8b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b68a:	2301      	movs	r3, #1
 800b68c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b68e:	f002 f839 	bl	800d704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b692:	f000 fe41 	bl	800c318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b696:	f002 f801 	bl	800d69c <vPortEnterCritical>
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a0:	b25b      	sxtb	r3, r3
 800b6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a6:	d103      	bne.n	800b6b0 <xQueueGenericSend+0x1b0>
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6b6:	b25b      	sxtb	r3, r3
 800b6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6bc:	d103      	bne.n	800b6c6 <xQueueGenericSend+0x1c6>
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6c6:	f002 f81d 	bl	800d704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6ca:	1d3a      	adds	r2, r7, #4
 800b6cc:	f107 0314 	add.w	r3, r7, #20
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 f904 	bl	800c8e0 <xTaskCheckForTimeOut>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d124      	bne.n	800b728 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e0:	f000 fafe 	bl	800bce0 <prvIsQueueFull>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d018      	beq.n	800b71c <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	3310      	adds	r3, #16
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 f81e 	bl	800c734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fa:	f000 fa89 	bl	800bc10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6fe:	f000 fe19 	bl	800c334 <xTaskResumeAll>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	f47f af62 	bne.w	800b5ce <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b70a:	4b13      	ldr	r3, [pc, #76]	; (800b758 <xQueueGenericSend+0x258>)
 800b70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	e758      	b.n	800b5ce <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b71c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b71e:	f000 fa77 	bl	800bc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b722:	f000 fe07 	bl	800c334 <xTaskResumeAll>
 800b726:	e752      	b.n	800b5ce <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b72a:	f000 fa71 	bl	800bc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b72e:	f000 fe01 	bl	800c334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	4618      	mov	r0, r3
 800b736:	f003 fce7 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	460b      	mov	r3, r1
 800b744:	4601      	mov	r1, r0
 800b746:	205a      	movs	r0, #90	; 0x5a
 800b748:	f003 f898 	bl	800e87c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800b74c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3738      	adds	r7, #56	; 0x38
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	e000ed04 	.word	0xe000ed04

0800b75c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08e      	sub	sp, #56	; 0x38
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10c      	bne.n	800b78e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	b672      	cpsid	i
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	b662      	cpsie	i
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b78a:	bf00      	nop
 800b78c:	e7fe      	b.n	800b78c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d103      	bne.n	800b79c <xQueueGenericSendFromISR+0x40>
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <xQueueGenericSendFromISR+0x44>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <xQueueGenericSendFromISR+0x46>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10c      	bne.n	800b7c0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	b672      	cpsid	i
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	b662      	cpsie	i
 800b7ba:	623b      	str	r3, [r7, #32]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d103      	bne.n	800b7ce <xQueueGenericSendFromISR+0x72>
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <xQueueGenericSendFromISR+0x76>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueGenericSendFromISR+0x78>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10c      	bne.n	800b7f2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	b672      	cpsid	i
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	b662      	cpsie	i
 800b7ec:	61fb      	str	r3, [r7, #28]
}
 800b7ee:	bf00      	nop
 800b7f0:	e7fe      	b.n	800b7f0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7f2:	f002 f83b 	bl	800d86c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7f6:	f3ef 8211 	mrs	r2, BASEPRI
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	b672      	cpsid	i
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	b662      	cpsie	i
 800b80e:	61ba      	str	r2, [r7, #24]
 800b810:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b812:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b81e:	429a      	cmp	r2, r3
 800b820:	d302      	bcc.n	800b828 <xQueueGenericSendFromISR+0xcc>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b02      	cmp	r3, #2
 800b826:	d136      	bne.n	800b896 <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	4618      	mov	r0, r3
 800b836:	f003 fc67 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b83a:	4601      	mov	r1, r0
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	461a      	mov	r2, r3
 800b840:	2060      	movs	r0, #96	; 0x60
 800b842:	f002 ff4b 	bl	800e6dc <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b84c:	f000 f950 	bl	800baf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b850:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d112      	bne.n	800b880 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d016      	beq.n	800b890 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	3324      	adds	r3, #36	; 0x24
 800b866:	4618      	mov	r0, r3
 800b868:	f000 ffba 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00e      	beq.n	800b890 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	e007      	b.n	800b890 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b884:	3301      	adds	r3, #1
 800b886:	b2db      	uxtb	r3, r3
 800b888:	b25a      	sxtb	r2, r3
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b890:	2301      	movs	r3, #1
 800b892:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b894:	e00b      	b.n	800b8ae <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	4618      	mov	r0, r3
 800b89a:	f003 fc35 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b89e:	4601      	mov	r1, r0
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	2060      	movs	r0, #96	; 0x60
 800b8a6:	f002 ff19 	bl	800e6dc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3738      	adds	r7, #56	; 0x38
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8c4:	b590      	push	{r4, r7, lr}
 800b8c6:	b08f      	sub	sp, #60	; 0x3c
 800b8c8:	af02      	add	r7, sp, #8
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10c      	bne.n	800b8f8 <xQueueReceive+0x34>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	b672      	cpsid	i
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	b662      	cpsie	i
 800b8f2:	623b      	str	r3, [r7, #32]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d103      	bne.n	800b906 <xQueueReceive+0x42>
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <xQueueReceive+0x46>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <xQueueReceive+0x48>
 800b90a:	2300      	movs	r3, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10c      	bne.n	800b92a <xQueueReceive+0x66>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	b672      	cpsid	i
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	b662      	cpsie	i
 800b924:	61fb      	str	r3, [r7, #28]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b92a:	f001 f95f 	bl	800cbec <xTaskGetSchedulerState>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <xQueueReceive+0x76>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <xQueueReceive+0x7a>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <xQueueReceive+0x7c>
 800b93e:	2300      	movs	r3, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10c      	bne.n	800b95e <xQueueReceive+0x9a>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	b672      	cpsid	i
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	b662      	cpsie	i
 800b958:	61bb      	str	r3, [r7, #24]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b95e:	f001 fe9d 	bl	800d69c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d02f      	beq.n	800b9ce <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b96e:	68b9      	ldr	r1, [r7, #8]
 800b970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b972:	f000 f927 	bl	800bbc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	4618      	mov	r0, r3
 800b97a:	f003 fbc5 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b97e:	4604      	mov	r4, r0
 800b980:	2000      	movs	r0, #0
 800b982:	f003 fbc1 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b986:	4602      	mov	r2, r0
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2101      	movs	r1, #1
 800b98c:	9100      	str	r1, [sp, #0]
 800b98e:	4621      	mov	r1, r4
 800b990:	205c      	movs	r0, #92	; 0x5c
 800b992:	f002 ff73 	bl	800e87c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00f      	beq.n	800b9c6 <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	3310      	adds	r3, #16
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 ff18 	bl	800c7e0 <xTaskRemoveFromEventList>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d007      	beq.n	800b9c6 <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9b6:	4b4d      	ldr	r3, [pc, #308]	; (800baec <xQueueReceive+0x228>)
 800b9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9c6:	f001 fe9d 	bl	800d704 <vPortExitCritical>
				return pdPASS;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e08a      	b.n	800bae4 <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d113      	bne.n	800b9fc <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9d4:	f001 fe96 	bl	800d704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f003 fb94 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f003 fb90 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	9100      	str	r1, [sp, #0]
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	205c      	movs	r0, #92	; 0x5c
 800b9f4:	f002 ff42 	bl	800e87c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e073      	b.n	800bae4 <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d106      	bne.n	800ba10 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba02:	f107 0310 	add.w	r3, r7, #16
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 ff54 	bl	800c8b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba10:	f001 fe78 	bl	800d704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba14:	f000 fc80 	bl	800c318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba18:	f001 fe40 	bl	800d69c <vPortEnterCritical>
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba22:	b25b      	sxtb	r3, r3
 800ba24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba28:	d103      	bne.n	800ba32 <xQueueReceive+0x16e>
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba38:	b25b      	sxtb	r3, r3
 800ba3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3e:	d103      	bne.n	800ba48 <xQueueReceive+0x184>
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba48:	f001 fe5c 	bl	800d704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba4c:	1d3a      	adds	r2, r7, #4
 800ba4e:	f107 0310 	add.w	r3, r7, #16
 800ba52:	4611      	mov	r1, r2
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 ff43 	bl	800c8e0 <xTaskCheckForTimeOut>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d124      	bne.n	800baaa <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba62:	f000 f927 	bl	800bcb4 <prvIsQueueEmpty>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d018      	beq.n	800ba9e <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	3324      	adds	r3, #36	; 0x24
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f000 fe5d 	bl	800c734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba7c:	f000 f8c8 	bl	800bc10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba80:	f000 fc58 	bl	800c334 <xTaskResumeAll>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f47f af69 	bne.w	800b95e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ba8c:	4b17      	ldr	r3, [pc, #92]	; (800baec <xQueueReceive+0x228>)
 800ba8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	e75f      	b.n	800b95e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa0:	f000 f8b6 	bl	800bc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baa4:	f000 fc46 	bl	800c334 <xTaskResumeAll>
 800baa8:	e759      	b.n	800b95e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baac:	f000 f8b0 	bl	800bc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bab0:	f000 fc40 	bl	800c334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bab6:	f000 f8fd 	bl	800bcb4 <prvIsQueueEmpty>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	f43f af4e 	beq.w	800b95e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	4618      	mov	r0, r3
 800bac6:	f003 fb1f 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800baca:	4604      	mov	r4, r0
 800bacc:	2000      	movs	r0, #0
 800bace:	f003 fb1b 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800bad2:	4602      	mov	r2, r0
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2101      	movs	r1, #1
 800bad8:	9100      	str	r1, [sp, #0]
 800bada:	4621      	mov	r1, r4
 800badc:	205c      	movs	r0, #92	; 0x5c
 800bade:	f002 fecd 	bl	800e87c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800bae2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3734      	adds	r7, #52	; 0x34
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd90      	pop	{r4, r7, pc}
 800baec:	e000ed04 	.word	0xe000ed04

0800baf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10d      	bne.n	800bb2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d14d      	bne.n	800bbb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f001 f884 	bl	800cc28 <xTaskPriorityDisinherit>
 800bb20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	609a      	str	r2, [r3, #8]
 800bb28:	e043      	b.n	800bbb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d119      	bne.n	800bb64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6858      	ldr	r0, [r3, #4]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb38:	461a      	mov	r2, r3
 800bb3a:	68b9      	ldr	r1, [r7, #8]
 800bb3c:	f003 fdc8 	bl	800f6d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb48:	441a      	add	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d32b      	bcc.n	800bbb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	605a      	str	r2, [r3, #4]
 800bb62:	e026      	b.n	800bbb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	68d8      	ldr	r0, [r3, #12]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	f003 fdae 	bl	800f6d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7c:	425b      	negs	r3, r3
 800bb7e:	441a      	add	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d207      	bcs.n	800bba0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	689a      	ldr	r2, [r3, #8]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	425b      	negs	r3, r3
 800bb9a:	441a      	add	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d105      	bne.n	800bbb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbba:	697b      	ldr	r3, [r7, #20]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d018      	beq.n	800bc08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbde:	441a      	add	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68da      	ldr	r2, [r3, #12]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d303      	bcc.n	800bbf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68d9      	ldr	r1, [r3, #12]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc00:	461a      	mov	r2, r3
 800bc02:	6838      	ldr	r0, [r7, #0]
 800bc04:	f003 fd64 	bl	800f6d0 <memcpy>
	}
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc18:	f001 fd40 	bl	800d69c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc24:	e011      	b.n	800bc4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d012      	beq.n	800bc54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3324      	adds	r3, #36	; 0x24
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fdd4 	bl	800c7e0 <xTaskRemoveFromEventList>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc3e:	f000 feb5 	bl	800c9ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dce9      	bgt.n	800bc26 <prvUnlockQueue+0x16>
 800bc52:	e000      	b.n	800bc56 <prvUnlockQueue+0x46>
					break;
 800bc54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	22ff      	movs	r2, #255	; 0xff
 800bc5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc5e:	f001 fd51 	bl	800d704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc62:	f001 fd1b 	bl	800d69c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc6e:	e011      	b.n	800bc94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d012      	beq.n	800bc9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3310      	adds	r3, #16
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 fdaf 	bl	800c7e0 <xTaskRemoveFromEventList>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc88:	f000 fe90 	bl	800c9ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dce9      	bgt.n	800bc70 <prvUnlockQueue+0x60>
 800bc9c:	e000      	b.n	800bca0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	22ff      	movs	r2, #255	; 0xff
 800bca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bca8:	f001 fd2c 	bl	800d704 <vPortExitCritical>
}
 800bcac:	bf00      	nop
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcbc:	f001 fcee 	bl	800d69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	e001      	b.n	800bcd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcd2:	f001 fd17 	bl	800d704 <vPortExitCritical>

	return xReturn;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bce8:	f001 fcd8 	bl	800d69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d102      	bne.n	800bcfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	e001      	b.n	800bd02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd02:	f001 fcff 	bl	800d704 <vPortExitCritical>

	return xReturn;
 800bd06:	68fb      	ldr	r3, [r7, #12]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	e01e      	b.n	800bd5e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd20:	4a13      	ldr	r2, [pc, #76]	; (800bd70 <vQueueAddToRegistry+0x60>)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d115      	bne.n	800bd58 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd2c:	4910      	ldr	r1, [pc, #64]	; (800bd70 <vQueueAddToRegistry+0x60>)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd36:	4a0e      	ldr	r2, [pc, #56]	; (800bd70 <vQueueAddToRegistry+0x60>)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	4413      	add	r3, r2
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f003 f9df 	bl	800f108 <SEGGER_SYSVIEW_ShrinkId>
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	2071      	movs	r0, #113	; 0x71
 800bd52:	f002 fcc3 	bl	800e6dc <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800bd56:	e006      	b.n	800bd66 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b07      	cmp	r3, #7
 800bd62:	d9dd      	bls.n	800bd20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200012ac 	.word	0x200012ac

0800bd74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd84:	f001 fc8a 	bl	800d69c <vPortEnterCritical>
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd8e:	b25b      	sxtb	r3, r3
 800bd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd94:	d103      	bne.n	800bd9e <vQueueWaitForMessageRestricted+0x2a>
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bda4:	b25b      	sxtb	r3, r3
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdaa:	d103      	bne.n	800bdb4 <vQueueWaitForMessageRestricted+0x40>
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdb4:	f001 fca6 	bl	800d704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d106      	bne.n	800bdce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	3324      	adds	r3, #36	; 0x24
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 fcd9 	bl	800c780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bdce:	6978      	ldr	r0, [r7, #20]
 800bdd0:	f7ff ff1e 	bl	800bc10 <prvUnlockQueue>
	}
 800bdd4:	bf00      	nop
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08e      	sub	sp, #56	; 0x38
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10c      	bne.n	800be0a <xTaskCreateStatic+0x2e>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	b672      	cpsid	i
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	b662      	cpsie	i
 800be04:	623b      	str	r3, [r7, #32]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10c      	bne.n	800be2a <xTaskCreateStatic+0x4e>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	b672      	cpsid	i
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	b662      	cpsie	i
 800be24:	61fb      	str	r3, [r7, #28]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be2a:	23bc      	movs	r3, #188	; 0xbc
 800be2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2bbc      	cmp	r3, #188	; 0xbc
 800be32:	d00c      	beq.n	800be4e <xTaskCreateStatic+0x72>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	b672      	cpsid	i
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	b662      	cpsie	i
 800be48:	61bb      	str	r3, [r7, #24]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	2b00      	cmp	r3, #0
 800be54:	d01e      	beq.n	800be94 <xTaskCreateStatic+0xb8>
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d01b      	beq.n	800be94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	2202      	movs	r2, #2
 800be6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be6e:	2300      	movs	r3, #0
 800be70:	9303      	str	r3, [sp, #12]
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	9302      	str	r3, [sp, #8]
 800be76:	f107 0314 	add.w	r3, r7, #20
 800be7a:	9301      	str	r3, [sp, #4]
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f850 	bl	800bf2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be8e:	f000 f8f5 	bl	800c07c <prvAddNewTaskToReadyList>
 800be92:	e001      	b.n	800be98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be98:	697b      	ldr	r3, [r7, #20]
	}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3728      	adds	r7, #40	; 0x28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b08c      	sub	sp, #48	; 0x30
 800bea6:	af04      	add	r7, sp, #16
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	603b      	str	r3, [r7, #0]
 800beae:	4613      	mov	r3, r2
 800beb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 fd1c 	bl	800d8f4 <pvPortMalloc>
 800bebc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bec4:	20bc      	movs	r0, #188	; 0xbc
 800bec6:	f001 fd15 	bl	800d8f4 <pvPortMalloc>
 800beca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	631a      	str	r2, [r3, #48]	; 0x30
 800bed8:	e005      	b.n	800bee6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800beda:	6978      	ldr	r0, [r7, #20]
 800bedc:	f001 fdd4 	bl	800da88 <vPortFree>
 800bee0:	e001      	b.n	800bee6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d017      	beq.n	800bf1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bef4:	88fa      	ldrh	r2, [r7, #6]
 800bef6:	2300      	movs	r3, #0
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	9302      	str	r3, [sp, #8]
 800befe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	68b9      	ldr	r1, [r7, #8]
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 f80e 	bl	800bf2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf10:	69f8      	ldr	r0, [r7, #28]
 800bf12:	f000 f8b3 	bl	800c07c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf16:	2301      	movs	r3, #1
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	e002      	b.n	800bf22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf22:	69bb      	ldr	r3, [r7, #24]
	}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	461a      	mov	r2, r3
 800bf44:	21a5      	movs	r1, #165	; 0xa5
 800bf46:	f003 fbd1 	bl	800f6ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bf54:	440b      	add	r3, r1
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	f023 0307 	bic.w	r3, r3, #7
 800bf62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00c      	beq.n	800bf88 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	b672      	cpsid	i
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	b662      	cpsie	i
 800bf82:	617b      	str	r3, [r7, #20]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d01f      	beq.n	800bfce <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	e012      	b.n	800bfba <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	4413      	add	r3, r2
 800bf9a:	7819      	ldrb	r1, [r3, #0]
 800bf9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	3334      	adds	r3, #52	; 0x34
 800bfa4:	460a      	mov	r2, r1
 800bfa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	4413      	add	r3, r2
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d006      	beq.n	800bfc2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	2b0f      	cmp	r3, #15
 800bfbe:	d9e9      	bls.n	800bf94 <prvInitialiseNewTask+0x68>
 800bfc0:	e000      	b.n	800bfc4 <prvInitialiseNewTask+0x98>
			{
				break;
 800bfc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfcc:	e003      	b.n	800bfd6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	2b37      	cmp	r3, #55	; 0x37
 800bfda:	d901      	bls.n	800bfe0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfdc:	2337      	movs	r3, #55	; 0x37
 800bfde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	2200      	movs	r2, #0
 800bff0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	3304      	adds	r3, #4
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff f8d8 	bl	800b1ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	3318      	adds	r3, #24
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff f8d3 	bl	800b1ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c00a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	2200      	movs	r2, #0
 800c020:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	2200      	movs	r2, #0
 800c028:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	3354      	adds	r3, #84	; 0x54
 800c030:	2260      	movs	r2, #96	; 0x60
 800c032:	2100      	movs	r1, #0
 800c034:	4618      	mov	r0, r3
 800c036:	f003 fb59 	bl	800f6ec <memset>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	4a0c      	ldr	r2, [pc, #48]	; (800c070 <prvInitialiseNewTask+0x144>)
 800c03e:	659a      	str	r2, [r3, #88]	; 0x58
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	4a0c      	ldr	r2, [pc, #48]	; (800c074 <prvInitialiseNewTask+0x148>)
 800c044:	65da      	str	r2, [r3, #92]	; 0x5c
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	4a0b      	ldr	r2, [pc, #44]	; (800c078 <prvInitialiseNewTask+0x14c>)
 800c04a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	69b8      	ldr	r0, [r7, #24]
 800c052:	f001 fa13 	bl	800d47c <pxPortInitialiseStack>
 800c056:	4602      	mov	r2, r0
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c068:	bf00      	nop
 800c06a:	3720      	adds	r7, #32
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	0800fd64 	.word	0x0800fd64
 800c074:	0800fd84 	.word	0x0800fd84
 800c078:	0800fd44 	.word	0x0800fd44

0800c07c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c07c:	b5b0      	push	{r4, r5, r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af02      	add	r7, sp, #8
 800c082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c084:	f001 fb0a 	bl	800d69c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c088:	4b3c      	ldr	r3, [pc, #240]	; (800c17c <prvAddNewTaskToReadyList+0x100>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	4a3b      	ldr	r2, [pc, #236]	; (800c17c <prvAddNewTaskToReadyList+0x100>)
 800c090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c092:	4b3b      	ldr	r3, [pc, #236]	; (800c180 <prvAddNewTaskToReadyList+0x104>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d109      	bne.n	800c0ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c09a:	4a39      	ldr	r2, [pc, #228]	; (800c180 <prvAddNewTaskToReadyList+0x104>)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0a0:	4b36      	ldr	r3, [pc, #216]	; (800c17c <prvAddNewTaskToReadyList+0x100>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d110      	bne.n	800c0ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0a8:	f000 fca4 	bl	800c9f4 <prvInitialiseTaskLists>
 800c0ac:	e00d      	b.n	800c0ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0ae:	4b35      	ldr	r3, [pc, #212]	; (800c184 <prvAddNewTaskToReadyList+0x108>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d109      	bne.n	800c0ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0b6:	4b32      	ldr	r3, [pc, #200]	; (800c180 <prvAddNewTaskToReadyList+0x104>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d802      	bhi.n	800c0ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0c4:	4a2e      	ldr	r2, [pc, #184]	; (800c180 <prvAddNewTaskToReadyList+0x104>)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0ca:	4b2f      	ldr	r3, [pc, #188]	; (800c188 <prvAddNewTaskToReadyList+0x10c>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	4a2d      	ldr	r2, [pc, #180]	; (800c188 <prvAddNewTaskToReadyList+0x10c>)
 800c0d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0d4:	4b2c      	ldr	r3, [pc, #176]	; (800c188 <prvAddNewTaskToReadyList+0x10c>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d016      	beq.n	800c110 <prvAddNewTaskToReadyList+0x94>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f002 ff43 	bl	800ef70 <SEGGER_SYSVIEW_OnTaskCreate>
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0fa:	461d      	mov	r5, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	461c      	mov	r4, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c106:	1ae3      	subs	r3, r4, r3
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	462b      	mov	r3, r5
 800c10c:	f003 fa20 	bl	800f550 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4618      	mov	r0, r3
 800c114:	f002 ffb4 	bl	800f080 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4b1b      	ldr	r3, [pc, #108]	; (800c18c <prvAddNewTaskToReadyList+0x110>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d903      	bls.n	800c12c <prvAddNewTaskToReadyList+0xb0>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c128:	4a18      	ldr	r2, [pc, #96]	; (800c18c <prvAddNewTaskToReadyList+0x110>)
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c130:	4613      	mov	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4a15      	ldr	r2, [pc, #84]	; (800c190 <prvAddNewTaskToReadyList+0x114>)
 800c13a:	441a      	add	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3304      	adds	r3, #4
 800c140:	4619      	mov	r1, r3
 800c142:	4610      	mov	r0, r2
 800c144:	f7ff f83f 	bl	800b1c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c148:	f001 fadc 	bl	800d704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <prvAddNewTaskToReadyList+0x108>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00e      	beq.n	800c172 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c154:	4b0a      	ldr	r3, [pc, #40]	; (800c180 <prvAddNewTaskToReadyList+0x104>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15e:	429a      	cmp	r2, r3
 800c160:	d207      	bcs.n	800c172 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c162:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <prvAddNewTaskToReadyList+0x118>)
 800c164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bdb0      	pop	{r4, r5, r7, pc}
 800c17a:	bf00      	nop
 800c17c:	200017c0 	.word	0x200017c0
 800c180:	200012ec 	.word	0x200012ec
 800c184:	200017cc 	.word	0x200017cc
 800c188:	200017dc 	.word	0x200017dc
 800c18c:	200017c8 	.word	0x200017c8
 800c190:	200012f0 	.word	0x200012f0
 800c194:	e000ed04 	.word	0xe000ed04

0800c198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d01d      	beq.n	800c1e6 <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1aa:	4b16      	ldr	r3, [pc, #88]	; (800c204 <vTaskDelay+0x6c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00c      	beq.n	800c1cc <vTaskDelay+0x34>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	b672      	cpsid	i
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	b662      	cpsie	i
 800c1c6:	60bb      	str	r3, [r7, #8]
}
 800c1c8:	bf00      	nop
 800c1ca:	e7fe      	b.n	800c1ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c1cc:	f000 f8a4 	bl	800c318 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	2023      	movs	r0, #35	; 0x23
 800c1d4:	f002 fa46 	bl	800e664 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1d8:	2100      	movs	r1, #0
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fd9e 	bl	800cd1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1e0:	f000 f8a8 	bl	800c334 <xTaskResumeAll>
 800c1e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d107      	bne.n	800c1fc <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 800c1ec:	4b06      	ldr	r3, [pc, #24]	; (800c208 <vTaskDelay+0x70>)
 800c1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	200017e8 	.word	0x200017e8
 800c208:	e000ed04 	.word	0xe000ed04

0800c20c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08a      	sub	sp, #40	; 0x28
 800c210:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c212:	2300      	movs	r3, #0
 800c214:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c216:	2300      	movs	r3, #0
 800c218:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c21a:	463a      	mov	r2, r7
 800c21c:	1d39      	adds	r1, r7, #4
 800c21e:	f107 0308 	add.w	r3, r7, #8
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe ff6e 	bl	800b104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c228:	6839      	ldr	r1, [r7, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	9202      	str	r2, [sp, #8]
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	2300      	movs	r3, #0
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	2300      	movs	r3, #0
 800c238:	460a      	mov	r2, r1
 800c23a:	492f      	ldr	r1, [pc, #188]	; (800c2f8 <vTaskStartScheduler+0xec>)
 800c23c:	482f      	ldr	r0, [pc, #188]	; (800c2fc <vTaskStartScheduler+0xf0>)
 800c23e:	f7ff fdcd 	bl	800bddc <xTaskCreateStatic>
 800c242:	4603      	mov	r3, r0
 800c244:	4a2e      	ldr	r2, [pc, #184]	; (800c300 <vTaskStartScheduler+0xf4>)
 800c246:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c248:	4b2d      	ldr	r3, [pc, #180]	; (800c300 <vTaskStartScheduler+0xf4>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c250:	2301      	movs	r3, #1
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	e001      	b.n	800c25a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c256:	2300      	movs	r3, #0
 800c258:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d102      	bne.n	800c266 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c260:	f000 fdb0 	bl	800cdc4 <xTimerCreateTimerTask>
 800c264:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d130      	bne.n	800c2ce <vTaskStartScheduler+0xc2>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	b672      	cpsid	i
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	b662      	cpsie	i
 800c280:	613b      	str	r3, [r7, #16]
}
 800c282:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c284:	4b1f      	ldr	r3, [pc, #124]	; (800c304 <vTaskStartScheduler+0xf8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3354      	adds	r3, #84	; 0x54
 800c28a:	4a1f      	ldr	r2, [pc, #124]	; (800c308 <vTaskStartScheduler+0xfc>)
 800c28c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c28e:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <vTaskStartScheduler+0x100>)
 800c290:	f04f 32ff 	mov.w	r2, #4294967295
 800c294:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c296:	4b1e      	ldr	r3, [pc, #120]	; (800c310 <vTaskStartScheduler+0x104>)
 800c298:	2201      	movs	r2, #1
 800c29a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c29c:	4b1d      	ldr	r3, [pc, #116]	; (800c314 <vTaskStartScheduler+0x108>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800c2a2:	4b18      	ldr	r3, [pc, #96]	; (800c304 <vTaskStartScheduler+0xf8>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3334      	adds	r3, #52	; 0x34
 800c2a8:	2205      	movs	r2, #5
 800c2aa:	4913      	ldr	r1, [pc, #76]	; (800c2f8 <vTaskStartScheduler+0xec>)
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f003 f9ff 	bl	800f6b0 <memcmp>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <vTaskStartScheduler+0xb8>
 800c2b8:	4b12      	ldr	r3, [pc, #72]	; (800c304 <vTaskStartScheduler+0xf8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f002 fe9b 	bl	800eff8 <SEGGER_SYSVIEW_OnTaskStartExec>
 800c2c2:	e001      	b.n	800c2c8 <vTaskStartScheduler+0xbc>
 800c2c4:	f002 fe38 	bl	800ef38 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2c8:	f001 f96a 	bl	800d5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2cc:	e010      	b.n	800c2f0 <vTaskStartScheduler+0xe4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d4:	d10c      	bne.n	800c2f0 <vTaskStartScheduler+0xe4>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	b672      	cpsid	i
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	b662      	cpsie	i
 800c2ea:	60fb      	str	r3, [r7, #12]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <vTaskStartScheduler+0xe2>
}
 800c2f0:	bf00      	nop
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	0800fc18 	.word	0x0800fc18
 800c2fc:	0800c9c5 	.word	0x0800c9c5
 800c300:	200017e4 	.word	0x200017e4
 800c304:	200012ec 	.word	0x200012ec
 800c308:	20000014 	.word	0x20000014
 800c30c:	200017e0 	.word	0x200017e0
 800c310:	200017cc 	.word	0x200017cc
 800c314:	200017c4 	.word	0x200017c4

0800c318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c31c:	4b04      	ldr	r3, [pc, #16]	; (800c330 <vTaskSuspendAll+0x18>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3301      	adds	r3, #1
 800c322:	4a03      	ldr	r2, [pc, #12]	; (800c330 <vTaskSuspendAll+0x18>)
 800c324:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c326:	bf00      	nop
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	200017e8 	.word	0x200017e8

0800c334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c342:	4b45      	ldr	r3, [pc, #276]	; (800c458 <xTaskResumeAll+0x124>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10c      	bne.n	800c364 <xTaskResumeAll+0x30>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	b672      	cpsid	i
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	b662      	cpsie	i
 800c35e:	603b      	str	r3, [r7, #0]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c364:	f001 f99a 	bl	800d69c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c368:	4b3b      	ldr	r3, [pc, #236]	; (800c458 <xTaskResumeAll+0x124>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	4a3a      	ldr	r2, [pc, #232]	; (800c458 <xTaskResumeAll+0x124>)
 800c370:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c372:	4b39      	ldr	r3, [pc, #228]	; (800c458 <xTaskResumeAll+0x124>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d166      	bne.n	800c448 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c37a:	4b38      	ldr	r3, [pc, #224]	; (800c45c <xTaskResumeAll+0x128>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d062      	beq.n	800c448 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c382:	e033      	b.n	800c3ec <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c384:	4b36      	ldr	r3, [pc, #216]	; (800c460 <xTaskResumeAll+0x12c>)
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3318      	adds	r3, #24
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe ff75 	bl	800b280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe ff70 	bl	800b280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f002 fe6c 	bl	800f080 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ac:	4b2d      	ldr	r3, [pc, #180]	; (800c464 <xTaskResumeAll+0x130>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d903      	bls.n	800c3bc <xTaskResumeAll+0x88>
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	4a2a      	ldr	r2, [pc, #168]	; (800c464 <xTaskResumeAll+0x130>)
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4a27      	ldr	r2, [pc, #156]	; (800c468 <xTaskResumeAll+0x134>)
 800c3ca:	441a      	add	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f7fe fef7 	bl	800b1c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3dc:	4b23      	ldr	r3, [pc, #140]	; (800c46c <xTaskResumeAll+0x138>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d302      	bcc.n	800c3ec <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 800c3e6:	4b22      	ldr	r3, [pc, #136]	; (800c470 <xTaskResumeAll+0x13c>)
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3ec:	4b1c      	ldr	r3, [pc, #112]	; (800c460 <xTaskResumeAll+0x12c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1c7      	bne.n	800c384 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3fa:	f000 fbd7 	bl	800cbac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c3fe:	4b1d      	ldr	r3, [pc, #116]	; (800c474 <xTaskResumeAll+0x140>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d010      	beq.n	800c42c <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c40a:	f000 f859 	bl	800c4c0 <xTaskIncrementTick>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 800c414:	4b16      	ldr	r3, [pc, #88]	; (800c470 <xTaskResumeAll+0x13c>)
 800c416:	2201      	movs	r2, #1
 800c418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1f1      	bne.n	800c40a <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 800c426:	4b13      	ldr	r3, [pc, #76]	; (800c474 <xTaskResumeAll+0x140>)
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c42c:	4b10      	ldr	r3, [pc, #64]	; (800c470 <xTaskResumeAll+0x13c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c434:	2301      	movs	r3, #1
 800c436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c438:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <xTaskResumeAll+0x144>)
 800c43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c43e:	601a      	str	r2, [r3, #0]
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c448:	f001 f95c 	bl	800d704 <vPortExitCritical>

	return xAlreadyYielded;
 800c44c:	68bb      	ldr	r3, [r7, #8]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	200017e8 	.word	0x200017e8
 800c45c:	200017c0 	.word	0x200017c0
 800c460:	20001780 	.word	0x20001780
 800c464:	200017c8 	.word	0x200017c8
 800c468:	200012f0 	.word	0x200012f0
 800c46c:	200012ec 	.word	0x200012ec
 800c470:	200017d4 	.word	0x200017d4
 800c474:	200017d0 	.word	0x200017d0
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c482:	4b05      	ldr	r3, [pc, #20]	; (800c498 <xTaskGetTickCount+0x1c>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c488:	687b      	ldr	r3, [r7, #4]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	200017c4 	.word	0x200017c4

0800c49c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4a2:	f001 f9e3 	bl	800d86c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c4aa:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <xTaskGetTickCountFromISR+0x20>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4b0:	683b      	ldr	r3, [r7, #0]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200017c4 	.word	0x200017c4

0800c4c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ca:	4b52      	ldr	r3, [pc, #328]	; (800c614 <xTaskIncrementTick+0x154>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f040 808f 	bne.w	800c5f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4d4:	4b50      	ldr	r3, [pc, #320]	; (800c618 <xTaskIncrementTick+0x158>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4dc:	4a4e      	ldr	r2, [pc, #312]	; (800c618 <xTaskIncrementTick+0x158>)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d122      	bne.n	800c52e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4e8:	4b4c      	ldr	r3, [pc, #304]	; (800c61c <xTaskIncrementTick+0x15c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00c      	beq.n	800c50c <xTaskIncrementTick+0x4c>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	b672      	cpsid	i
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	b662      	cpsie	i
 800c506:	603b      	str	r3, [r7, #0]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xTaskIncrementTick+0x4a>
 800c50c:	4b43      	ldr	r3, [pc, #268]	; (800c61c <xTaskIncrementTick+0x15c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	4b43      	ldr	r3, [pc, #268]	; (800c620 <xTaskIncrementTick+0x160>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a41      	ldr	r2, [pc, #260]	; (800c61c <xTaskIncrementTick+0x15c>)
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	4a41      	ldr	r2, [pc, #260]	; (800c620 <xTaskIncrementTick+0x160>)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	4b40      	ldr	r3, [pc, #256]	; (800c624 <xTaskIncrementTick+0x164>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3301      	adds	r3, #1
 800c526:	4a3f      	ldr	r2, [pc, #252]	; (800c624 <xTaskIncrementTick+0x164>)
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	f000 fb3f 	bl	800cbac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c52e:	4b3e      	ldr	r3, [pc, #248]	; (800c628 <xTaskIncrementTick+0x168>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	429a      	cmp	r2, r3
 800c536:	d34d      	bcc.n	800c5d4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c538:	4b38      	ldr	r3, [pc, #224]	; (800c61c <xTaskIncrementTick+0x15c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d104      	bne.n	800c54c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c542:	4b39      	ldr	r3, [pc, #228]	; (800c628 <xTaskIncrementTick+0x168>)
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	601a      	str	r2, [r3, #0]
					break;
 800c54a:	e043      	b.n	800c5d4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c54c:	4b33      	ldr	r3, [pc, #204]	; (800c61c <xTaskIncrementTick+0x15c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d203      	bcs.n	800c56c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c564:	4a30      	ldr	r2, [pc, #192]	; (800c628 <xTaskIncrementTick+0x168>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c56a:	e033      	b.n	800c5d4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	3304      	adds	r3, #4
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fe85 	bl	800b280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d004      	beq.n	800c588 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	3318      	adds	r3, #24
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe fe7c 	bl	800b280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f002 fd78 	bl	800f080 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c594:	4b25      	ldr	r3, [pc, #148]	; (800c62c <xTaskIncrementTick+0x16c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d903      	bls.n	800c5a4 <xTaskIncrementTick+0xe4>
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a0:	4a22      	ldr	r2, [pc, #136]	; (800c62c <xTaskIncrementTick+0x16c>)
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	4413      	add	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4a1f      	ldr	r2, [pc, #124]	; (800c630 <xTaskIncrementTick+0x170>)
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4610      	mov	r0, r2
 800c5bc:	f7fe fe03 	bl	800b1c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c4:	4b1b      	ldr	r3, [pc, #108]	; (800c634 <xTaskIncrementTick+0x174>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d3b4      	bcc.n	800c538 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5d2:	e7b1      	b.n	800c538 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5d4:	4b17      	ldr	r3, [pc, #92]	; (800c634 <xTaskIncrementTick+0x174>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5da:	4915      	ldr	r1, [pc, #84]	; (800c630 <xTaskIncrementTick+0x170>)
 800c5dc:	4613      	mov	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d907      	bls.n	800c5fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	e004      	b.n	800c5fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c5f2:	4b11      	ldr	r3, [pc, #68]	; (800c638 <xTaskIncrementTick+0x178>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	4a0f      	ldr	r2, [pc, #60]	; (800c638 <xTaskIncrementTick+0x178>)
 800c5fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <xTaskIncrementTick+0x17c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800c604:	2301      	movs	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c608:	697b      	ldr	r3, [r7, #20]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	200017e8 	.word	0x200017e8
 800c618:	200017c4 	.word	0x200017c4
 800c61c:	20001778 	.word	0x20001778
 800c620:	2000177c 	.word	0x2000177c
 800c624:	200017d8 	.word	0x200017d8
 800c628:	200017e0 	.word	0x200017e0
 800c62c:	200017c8 	.word	0x200017c8
 800c630:	200012f0 	.word	0x200012f0
 800c634:	200012ec 	.word	0x200012ec
 800c638:	200017d0 	.word	0x200017d0
 800c63c:	200017d4 	.word	0x200017d4

0800c640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c646:	4b34      	ldr	r3, [pc, #208]	; (800c718 <vTaskSwitchContext+0xd8>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c64e:	4b33      	ldr	r3, [pc, #204]	; (800c71c <vTaskSwitchContext+0xdc>)
 800c650:	2201      	movs	r2, #1
 800c652:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c654:	e05b      	b.n	800c70e <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 800c656:	4b31      	ldr	r3, [pc, #196]	; (800c71c <vTaskSwitchContext+0xdc>)
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c65c:	4b30      	ldr	r3, [pc, #192]	; (800c720 <vTaskSwitchContext+0xe0>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	e012      	b.n	800c68a <vTaskSwitchContext+0x4a>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10c      	bne.n	800c684 <vTaskSwitchContext+0x44>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	b672      	cpsid	i
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	b662      	cpsie	i
 800c67e:	607b      	str	r3, [r7, #4]
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <vTaskSwitchContext+0x42>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3b01      	subs	r3, #1
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	4926      	ldr	r1, [pc, #152]	; (800c724 <vTaskSwitchContext+0xe4>)
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0e2      	beq.n	800c664 <vTaskSwitchContext+0x24>
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4a1e      	ldr	r2, [pc, #120]	; (800c724 <vTaskSwitchContext+0xe4>)
 800c6aa:	4413      	add	r3, r2
 800c6ac:	60bb      	str	r3, [r7, #8]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	605a      	str	r2, [r3, #4]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3308      	adds	r3, #8
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d104      	bne.n	800c6ce <vTaskSwitchContext+0x8e>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	605a      	str	r2, [r3, #4]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	4a14      	ldr	r2, [pc, #80]	; (800c728 <vTaskSwitchContext+0xe8>)
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	4a11      	ldr	r2, [pc, #68]	; (800c720 <vTaskSwitchContext+0xe0>)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800c6de:	4b12      	ldr	r3, [pc, #72]	; (800c728 <vTaskSwitchContext+0xe8>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	3334      	adds	r3, #52	; 0x34
 800c6e4:	2205      	movs	r2, #5
 800c6e6:	4911      	ldr	r1, [pc, #68]	; (800c72c <vTaskSwitchContext+0xec>)
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f002 ffe1 	bl	800f6b0 <memcmp>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d005      	beq.n	800c700 <vTaskSwitchContext+0xc0>
 800c6f4:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <vTaskSwitchContext+0xe8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f002 fc7d 	bl	800eff8 <SEGGER_SYSVIEW_OnTaskStartExec>
 800c6fe:	e001      	b.n	800c704 <vTaskSwitchContext+0xc4>
 800c700:	f002 fc1a 	bl	800ef38 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c704:	4b08      	ldr	r3, [pc, #32]	; (800c728 <vTaskSwitchContext+0xe8>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3354      	adds	r3, #84	; 0x54
 800c70a:	4a09      	ldr	r2, [pc, #36]	; (800c730 <vTaskSwitchContext+0xf0>)
 800c70c:	6013      	str	r3, [r2, #0]
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	200017e8 	.word	0x200017e8
 800c71c:	200017d4 	.word	0x200017d4
 800c720:	200017c8 	.word	0x200017c8
 800c724:	200012f0 	.word	0x200012f0
 800c728:	200012ec 	.word	0x200012ec
 800c72c:	0800fc18 	.word	0x0800fc18
 800c730:	20000014 	.word	0x20000014

0800c734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10c      	bne.n	800c75e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	b672      	cpsid	i
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	b662      	cpsie	i
 800c758:	60fb      	str	r3, [r7, #12]
}
 800c75a:	bf00      	nop
 800c75c:	e7fe      	b.n	800c75c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c75e:	4b07      	ldr	r3, [pc, #28]	; (800c77c <vTaskPlaceOnEventList+0x48>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3318      	adds	r3, #24
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7fe fd51 	bl	800b20e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c76c:	2101      	movs	r1, #1
 800c76e:	6838      	ldr	r0, [r7, #0]
 800c770:	f000 fad4 	bl	800cd1c <prvAddCurrentTaskToDelayedList>
}
 800c774:	bf00      	nop
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	200012ec 	.word	0x200012ec

0800c780 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10c      	bne.n	800c7ac <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	b672      	cpsid	i
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	b662      	cpsie	i
 800c7a6:	617b      	str	r3, [r7, #20]
}
 800c7a8:	bf00      	nop
 800c7aa:	e7fe      	b.n	800c7aa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7ac:	4b0b      	ldr	r3, [pc, #44]	; (800c7dc <vTaskPlaceOnEventListRestricted+0x5c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3318      	adds	r3, #24
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f7fe fd06 	bl	800b1c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800c7c6:	2024      	movs	r0, #36	; 0x24
 800c7c8:	f001 ff2e 	bl	800e628 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	68b8      	ldr	r0, [r7, #8]
 800c7d0:	f000 faa4 	bl	800cd1c <prvAddCurrentTaskToDelayedList>
	}
 800c7d4:	bf00      	nop
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	200012ec 	.word	0x200012ec

0800c7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10c      	bne.n	800c810 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	b672      	cpsid	i
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	b662      	cpsie	i
 800c80a:	60fb      	str	r3, [r7, #12]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	3318      	adds	r3, #24
 800c814:	4618      	mov	r0, r3
 800c816:	f7fe fd33 	bl	800b280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c81a:	4b20      	ldr	r3, [pc, #128]	; (800c89c <xTaskRemoveFromEventList+0xbc>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d121      	bne.n	800c866 <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	3304      	adds	r3, #4
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe fd2a 	bl	800b280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	4618      	mov	r0, r3
 800c830:	f002 fc26 	bl	800f080 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c838:	4b19      	ldr	r3, [pc, #100]	; (800c8a0 <xTaskRemoveFromEventList+0xc0>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d903      	bls.n	800c848 <xTaskRemoveFromEventList+0x68>
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	4a16      	ldr	r2, [pc, #88]	; (800c8a0 <xTaskRemoveFromEventList+0xc0>)
 800c846:	6013      	str	r3, [r2, #0]
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84c:	4613      	mov	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4a13      	ldr	r2, [pc, #76]	; (800c8a4 <xTaskRemoveFromEventList+0xc4>)
 800c856:	441a      	add	r2, r3
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	3304      	adds	r3, #4
 800c85c:	4619      	mov	r1, r3
 800c85e:	4610      	mov	r0, r2
 800c860:	f7fe fcb1 	bl	800b1c6 <vListInsertEnd>
 800c864:	e005      	b.n	800c872 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	3318      	adds	r3, #24
 800c86a:	4619      	mov	r1, r3
 800c86c:	480e      	ldr	r0, [pc, #56]	; (800c8a8 <xTaskRemoveFromEventList+0xc8>)
 800c86e:	f7fe fcaa 	bl	800b1c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c876:	4b0d      	ldr	r3, [pc, #52]	; (800c8ac <xTaskRemoveFromEventList+0xcc>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d905      	bls.n	800c88c <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c880:	2301      	movs	r3, #1
 800c882:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c884:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <xTaskRemoveFromEventList+0xd0>)
 800c886:	2201      	movs	r2, #1
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e001      	b.n	800c890 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800c88c:	2300      	movs	r3, #0
 800c88e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c890:	697b      	ldr	r3, [r7, #20]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3718      	adds	r7, #24
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	200017e8 	.word	0x200017e8
 800c8a0:	200017c8 	.word	0x200017c8
 800c8a4:	200012f0 	.word	0x200012f0
 800c8a8:	20001780 	.word	0x20001780
 800c8ac:	200012ec 	.word	0x200012ec
 800c8b0:	200017d4 	.word	0x200017d4

0800c8b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8bc:	4b06      	ldr	r3, [pc, #24]	; (800c8d8 <vTaskInternalSetTimeOutState+0x24>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <vTaskInternalSetTimeOutState+0x28>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	605a      	str	r2, [r3, #4]
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	200017d8 	.word	0x200017d8
 800c8dc:	200017c4 	.word	0x200017c4

0800c8e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b088      	sub	sp, #32
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10c      	bne.n	800c90a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	613b      	str	r3, [r7, #16]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10c      	bne.n	800c92a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c914:	b672      	cpsid	i
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	b662      	cpsie	i
 800c924:	60fb      	str	r3, [r7, #12]
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c92a:	f000 feb7 	bl	800d69c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c92e:	4b1d      	ldr	r3, [pc, #116]	; (800c9a4 <xTaskCheckForTimeOut+0xc4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d102      	bne.n	800c94e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c948:	2300      	movs	r3, #0
 800c94a:	61fb      	str	r3, [r7, #28]
 800c94c:	e023      	b.n	800c996 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b15      	ldr	r3, [pc, #84]	; (800c9a8 <xTaskCheckForTimeOut+0xc8>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d007      	beq.n	800c96a <xTaskCheckForTimeOut+0x8a>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	69ba      	ldr	r2, [r7, #24]
 800c960:	429a      	cmp	r2, r3
 800c962:	d302      	bcc.n	800c96a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c964:	2301      	movs	r3, #1
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e015      	b.n	800c996 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	429a      	cmp	r2, r3
 800c972:	d20b      	bcs.n	800c98c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	1ad2      	subs	r2, r2, r3
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff ff97 	bl	800c8b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c986:	2300      	movs	r3, #0
 800c988:	61fb      	str	r3, [r7, #28]
 800c98a:	e004      	b.n	800c996 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2200      	movs	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c992:	2301      	movs	r3, #1
 800c994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c996:	f000 feb5 	bl	800d704 <vPortExitCritical>

	return xReturn;
 800c99a:	69fb      	ldr	r3, [r7, #28]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3720      	adds	r7, #32
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	200017c4 	.word	0x200017c4
 800c9a8:	200017d8 	.word	0x200017d8

0800c9ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9b0:	4b03      	ldr	r3, [pc, #12]	; (800c9c0 <vTaskMissedYield+0x14>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	200017d4 	.word	0x200017d4

0800c9c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9cc:	f000 f852 	bl	800ca74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9d0:	4b06      	ldr	r3, [pc, #24]	; (800c9ec <prvIdleTask+0x28>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d9f9      	bls.n	800c9cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9d8:	4b05      	ldr	r3, [pc, #20]	; (800c9f0 <prvIdleTask+0x2c>)
 800c9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9e8:	e7f0      	b.n	800c9cc <prvIdleTask+0x8>
 800c9ea:	bf00      	nop
 800c9ec:	200012f0 	.word	0x200012f0
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	607b      	str	r3, [r7, #4]
 800c9fe:	e00c      	b.n	800ca1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4a12      	ldr	r2, [pc, #72]	; (800ca54 <prvInitialiseTaskLists+0x60>)
 800ca0c:	4413      	add	r3, r2
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe fbac 	bl	800b16c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3301      	adds	r3, #1
 800ca18:	607b      	str	r3, [r7, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b37      	cmp	r3, #55	; 0x37
 800ca1e:	d9ef      	bls.n	800ca00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca20:	480d      	ldr	r0, [pc, #52]	; (800ca58 <prvInitialiseTaskLists+0x64>)
 800ca22:	f7fe fba3 	bl	800b16c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca26:	480d      	ldr	r0, [pc, #52]	; (800ca5c <prvInitialiseTaskLists+0x68>)
 800ca28:	f7fe fba0 	bl	800b16c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca2c:	480c      	ldr	r0, [pc, #48]	; (800ca60 <prvInitialiseTaskLists+0x6c>)
 800ca2e:	f7fe fb9d 	bl	800b16c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca32:	480c      	ldr	r0, [pc, #48]	; (800ca64 <prvInitialiseTaskLists+0x70>)
 800ca34:	f7fe fb9a 	bl	800b16c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca38:	480b      	ldr	r0, [pc, #44]	; (800ca68 <prvInitialiseTaskLists+0x74>)
 800ca3a:	f7fe fb97 	bl	800b16c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca3e:	4b0b      	ldr	r3, [pc, #44]	; (800ca6c <prvInitialiseTaskLists+0x78>)
 800ca40:	4a05      	ldr	r2, [pc, #20]	; (800ca58 <prvInitialiseTaskLists+0x64>)
 800ca42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <prvInitialiseTaskLists+0x7c>)
 800ca46:	4a05      	ldr	r2, [pc, #20]	; (800ca5c <prvInitialiseTaskLists+0x68>)
 800ca48:	601a      	str	r2, [r3, #0]
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	200012f0 	.word	0x200012f0
 800ca58:	20001750 	.word	0x20001750
 800ca5c:	20001764 	.word	0x20001764
 800ca60:	20001780 	.word	0x20001780
 800ca64:	20001794 	.word	0x20001794
 800ca68:	200017ac 	.word	0x200017ac
 800ca6c:	20001778 	.word	0x20001778
 800ca70:	2000177c 	.word	0x2000177c

0800ca74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca7a:	e019      	b.n	800cab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca7c:	f000 fe0e 	bl	800d69c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca80:	4b10      	ldr	r3, [pc, #64]	; (800cac4 <prvCheckTasksWaitingTermination+0x50>)
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fbf7 	bl	800b280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca92:	4b0d      	ldr	r3, [pc, #52]	; (800cac8 <prvCheckTasksWaitingTermination+0x54>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	4a0b      	ldr	r2, [pc, #44]	; (800cac8 <prvCheckTasksWaitingTermination+0x54>)
 800ca9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <prvCheckTasksWaitingTermination+0x58>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	4a0a      	ldr	r2, [pc, #40]	; (800cacc <prvCheckTasksWaitingTermination+0x58>)
 800caa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caa6:	f000 fe2d 	bl	800d704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f848 	bl	800cb40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cab0:	4b06      	ldr	r3, [pc, #24]	; (800cacc <prvCheckTasksWaitingTermination+0x58>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e1      	bne.n	800ca7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	20001794 	.word	0x20001794
 800cac8:	200017c0 	.word	0x200017c0
 800cacc:	200017a8 	.word	0x200017a8

0800cad0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cadc:	e005      	b.n	800caea <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3301      	adds	r3, #1
 800cae2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3301      	adds	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2ba5      	cmp	r3, #165	; 0xa5
 800caf0:	d0f5      	beq.n	800cade <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	089b      	lsrs	r3, r3, #2
 800caf6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	b29b      	uxth	r3, r3
	}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <uxTaskGetStackHighWaterMark+0x14>
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <uxTaskGetStackHighWaterMark+0x34>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	e000      	b.n	800cb1e <uxTaskGetStackHighWaterMark+0x16>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb24:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800cb26:	6938      	ldr	r0, [r7, #16]
 800cb28:	f7ff ffd2 	bl	800cad0 <prvTaskCheckFreeStackSpace>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800cb30:	68fb      	ldr	r3, [r7, #12]
	}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	200012ec 	.word	0x200012ec

0800cb40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3354      	adds	r3, #84	; 0x54
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f002 fde3 	bl	800f718 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d108      	bne.n	800cb6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 ff91 	bl	800da88 <vPortFree>
				vPortFree( pxTCB );
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 ff8e 	bl	800da88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb6c:	e01a      	b.n	800cba4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d103      	bne.n	800cb80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 ff85 	bl	800da88 <vPortFree>
	}
 800cb7e:	e011      	b.n	800cba4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d00c      	beq.n	800cba4 <prvDeleteTCB+0x64>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	b672      	cpsid	i
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	b662      	cpsie	i
 800cb9e:	60fb      	str	r3, [r7, #12]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <prvDeleteTCB+0x62>
	}
 800cba4:	bf00      	nop
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbb2:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <prvResetNextTaskUnblockTime+0x38>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <prvResetNextTaskUnblockTime+0x3c>)
 800cbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cbc4:	e008      	b.n	800cbd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc6:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <prvResetNextTaskUnblockTime+0x38>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	4a04      	ldr	r2, [pc, #16]	; (800cbe8 <prvResetNextTaskUnblockTime+0x3c>)
 800cbd6:	6013      	str	r3, [r2, #0]
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	20001778 	.word	0x20001778
 800cbe8:	200017e0 	.word	0x200017e0

0800cbec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <xTaskGetSchedulerState+0x34>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	607b      	str	r3, [r7, #4]
 800cbfe:	e008      	b.n	800cc12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc00:	4b08      	ldr	r3, [pc, #32]	; (800cc24 <xTaskGetSchedulerState+0x38>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cc08:	2302      	movs	r3, #2
 800cc0a:	607b      	str	r3, [r7, #4]
 800cc0c:	e001      	b.n	800cc12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc12:	687b      	ldr	r3, [r7, #4]
	}
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	200017cc 	.word	0x200017cc
 800cc24:	200017e8 	.word	0x200017e8

0800cc28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d063      	beq.n	800cd06 <xTaskPriorityDisinherit+0xde>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc3e:	4b34      	ldr	r3, [pc, #208]	; (800cd10 <xTaskPriorityDisinherit+0xe8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d00c      	beq.n	800cc62 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	b672      	cpsid	i
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	b662      	cpsie	i
 800cc5c:	60fb      	str	r3, [r7, #12]
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10c      	bne.n	800cc84 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	b672      	cpsid	i
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	b662      	cpsie	i
 800cc7e:	60bb      	str	r3, [r7, #8]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc88:	1e5a      	subs	r2, r3, #1
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d035      	beq.n	800cd06 <xTaskPriorityDisinherit+0xde>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d131      	bne.n	800cd06 <xTaskPriorityDisinherit+0xde>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	3304      	adds	r3, #4
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7fe faea 	bl	800b280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	204a      	movs	r0, #74	; 0x4a
 800ccb2:	f001 fcd7 	bl	800e664 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f002 f9d7 	bl	800f080 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <xTaskPriorityDisinherit+0xec>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d903      	bls.n	800cce6 <xTaskPriorityDisinherit+0xbe>
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	4a0c      	ldr	r2, [pc, #48]	; (800cd14 <xTaskPriorityDisinherit+0xec>)
 800cce4:	6013      	str	r3, [r2, #0]
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccea:	4613      	mov	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4a09      	ldr	r2, [pc, #36]	; (800cd18 <xTaskPriorityDisinherit+0xf0>)
 800ccf4:	441a      	add	r2, r3
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	f7fe fa62 	bl	800b1c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd02:	2301      	movs	r3, #1
 800cd04:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd06:	697b      	ldr	r3, [r7, #20]
	}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	200012ec 	.word	0x200012ec
 800cd14:	200017c8 	.word	0x200017c8
 800cd18:	200012f0 	.word	0x200012f0

0800cd1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd26:	4b21      	ldr	r3, [pc, #132]	; (800cdac <prvAddCurrentTaskToDelayedList+0x90>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd2c:	4b20      	ldr	r3, [pc, #128]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe faa4 	bl	800b280 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3e:	d10a      	bne.n	800cd56 <prvAddCurrentTaskToDelayedList+0x3a>
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d007      	beq.n	800cd56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd46:	4b1a      	ldr	r3, [pc, #104]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4819      	ldr	r0, [pc, #100]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd50:	f7fe fa39 	bl	800b1c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd54:	e026      	b.n	800cda4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd5e:	4b14      	ldr	r3, [pc, #80]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d209      	bcs.n	800cd82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd6e:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	4b0f      	ldr	r3, [pc, #60]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3304      	adds	r3, #4
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4610      	mov	r0, r2
 800cd7c:	f7fe fa47 	bl	800b20e <vListInsert>
}
 800cd80:	e010      	b.n	800cda4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd82:	4b0e      	ldr	r3, [pc, #56]	; (800cdbc <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	4b0a      	ldr	r3, [pc, #40]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4610      	mov	r0, r2
 800cd90:	f7fe fa3d 	bl	800b20e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd94:	4b0a      	ldr	r3, [pc, #40]	; (800cdc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d202      	bcs.n	800cda4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd9e:	4a08      	ldr	r2, [pc, #32]	; (800cdc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	6013      	str	r3, [r2, #0]
}
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	200017c4 	.word	0x200017c4
 800cdb0:	200012ec 	.word	0x200012ec
 800cdb4:	200017ac 	.word	0x200017ac
 800cdb8:	2000177c 	.word	0x2000177c
 800cdbc:	20001778 	.word	0x20001778
 800cdc0:	200017e0 	.word	0x200017e0

0800cdc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08a      	sub	sp, #40	; 0x28
 800cdc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cdce:	f000 fb15 	bl	800d3fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdd2:	4b1d      	ldr	r3, [pc, #116]	; (800ce48 <xTimerCreateTimerTask+0x84>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d021      	beq.n	800ce1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cdde:	2300      	movs	r3, #0
 800cde0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cde2:	1d3a      	adds	r2, r7, #4
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	f107 030c 	add.w	r3, r7, #12
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe f9a3 	bl	800b138 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cdf2:	6879      	ldr	r1, [r7, #4]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	9202      	str	r2, [sp, #8]
 800cdfa:	9301      	str	r3, [sp, #4]
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	2300      	movs	r3, #0
 800ce02:	460a      	mov	r2, r1
 800ce04:	4911      	ldr	r1, [pc, #68]	; (800ce4c <xTimerCreateTimerTask+0x88>)
 800ce06:	4812      	ldr	r0, [pc, #72]	; (800ce50 <xTimerCreateTimerTask+0x8c>)
 800ce08:	f7fe ffe8 	bl	800bddc <xTaskCreateStatic>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4a11      	ldr	r2, [pc, #68]	; (800ce54 <xTimerCreateTimerTask+0x90>)
 800ce10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce12:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <xTimerCreateTimerTask+0x90>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10c      	bne.n	800ce3e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ce24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce28:	b672      	cpsid	i
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	b662      	cpsie	i
 800ce38:	613b      	str	r3, [r7, #16]
}
 800ce3a:	bf00      	nop
 800ce3c:	e7fe      	b.n	800ce3c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ce3e:	697b      	ldr	r3, [r7, #20]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	2000181c 	.word	0x2000181c
 800ce4c:	0800fc20 	.word	0x0800fc20
 800ce50:	0800cf95 	.word	0x0800cf95
 800ce54:	20001820 	.word	0x20001820

0800ce58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08a      	sub	sp, #40	; 0x28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce66:	2300      	movs	r3, #0
 800ce68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10c      	bne.n	800ce8a <xTimerGenericCommand+0x32>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	b672      	cpsid	i
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	b662      	cpsie	i
 800ce84:	623b      	str	r3, [r7, #32]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce8a:	4b1a      	ldr	r3, [pc, #104]	; (800cef4 <xTimerGenericCommand+0x9c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d02a      	beq.n	800cee8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2b05      	cmp	r3, #5
 800cea2:	dc18      	bgt.n	800ced6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cea4:	f7ff fea2 	bl	800cbec <xTaskGetSchedulerState>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d109      	bne.n	800cec2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ceae:	4b11      	ldr	r3, [pc, #68]	; (800cef4 <xTimerGenericCommand+0x9c>)
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f107 0110 	add.w	r1, r7, #16
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceba:	f7fe fb21 	bl	800b500 <xQueueGenericSend>
 800cebe:	6278      	str	r0, [r7, #36]	; 0x24
 800cec0:	e012      	b.n	800cee8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cec2:	4b0c      	ldr	r3, [pc, #48]	; (800cef4 <xTimerGenericCommand+0x9c>)
 800cec4:	6818      	ldr	r0, [r3, #0]
 800cec6:	f107 0110 	add.w	r1, r7, #16
 800ceca:	2300      	movs	r3, #0
 800cecc:	2200      	movs	r2, #0
 800cece:	f7fe fb17 	bl	800b500 <xQueueGenericSend>
 800ced2:	6278      	str	r0, [r7, #36]	; 0x24
 800ced4:	e008      	b.n	800cee8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ced6:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <xTimerGenericCommand+0x9c>)
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	f107 0110 	add.w	r1, r7, #16
 800cede:	2300      	movs	r3, #0
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	f7fe fc3b 	bl	800b75c <xQueueGenericSendFromISR>
 800cee6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3728      	adds	r7, #40	; 0x28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	2000181c 	.word	0x2000181c

0800cef8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af02      	add	r7, sp, #8
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf02:	4b23      	ldr	r3, [pc, #140]	; (800cf90 <prvProcessExpiredTimer+0x98>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe f9b5 	bl	800b280 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf1c:	f003 0304 	and.w	r3, r3, #4
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d024      	beq.n	800cf6e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	699a      	ldr	r2, [r3, #24]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	18d1      	adds	r1, r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	6978      	ldr	r0, [r7, #20]
 800cf32:	f000 f8d3 	bl	800d0dc <prvInsertTimerInActiveList>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d021      	beq.n	800cf80 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	2300      	movs	r3, #0
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	2100      	movs	r1, #0
 800cf46:	6978      	ldr	r0, [r7, #20]
 800cf48:	f7ff ff86 	bl	800ce58 <xTimerGenericCommand>
 800cf4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d115      	bne.n	800cf80 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	b672      	cpsid	i
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	b662      	cpsie	i
 800cf68:	60fb      	str	r3, [r7, #12]
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf74:	f023 0301 	bic.w	r3, r3, #1
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	6978      	ldr	r0, [r7, #20]
 800cf86:	4798      	blx	r3
}
 800cf88:	bf00      	nop
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20001814 	.word	0x20001814

0800cf94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf9c:	f107 0308 	add.w	r3, r7, #8
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 f857 	bl	800d054 <prvGetNextExpireTime>
 800cfa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f000 f803 	bl	800cfb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfb2:	f000 f8d5 	bl	800d160 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfb6:	e7f1      	b.n	800cf9c <prvTimerTask+0x8>

0800cfb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cfc2:	f7ff f9a9 	bl	800c318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfc6:	f107 0308 	add.w	r3, r7, #8
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 f866 	bl	800d09c <prvSampleTimeNow>
 800cfd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d130      	bne.n	800d03a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10a      	bne.n	800cff4 <prvProcessTimerOrBlockTask+0x3c>
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d806      	bhi.n	800cff4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cfe6:	f7ff f9a5 	bl	800c334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cfea:	68f9      	ldr	r1, [r7, #12]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff ff83 	bl	800cef8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cff2:	e024      	b.n	800d03e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d008      	beq.n	800d00c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cffa:	4b13      	ldr	r3, [pc, #76]	; (800d048 <prvProcessTimerOrBlockTask+0x90>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <prvProcessTimerOrBlockTask+0x50>
 800d004:	2301      	movs	r3, #1
 800d006:	e000      	b.n	800d00a <prvProcessTimerOrBlockTask+0x52>
 800d008:	2300      	movs	r3, #0
 800d00a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d00c:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <prvProcessTimerOrBlockTask+0x94>)
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	4619      	mov	r1, r3
 800d01a:	f7fe feab 	bl	800bd74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d01e:	f7ff f989 	bl	800c334 <xTaskResumeAll>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d028:	4b09      	ldr	r3, [pc, #36]	; (800d050 <prvProcessTimerOrBlockTask+0x98>)
 800d02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	f3bf 8f6f 	isb	sy
}
 800d038:	e001      	b.n	800d03e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d03a:	f7ff f97b 	bl	800c334 <xTaskResumeAll>
}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20001818 	.word	0x20001818
 800d04c:	2000181c 	.word	0x2000181c
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d05c:	4b0e      	ldr	r3, [pc, #56]	; (800d098 <prvGetNextExpireTime+0x44>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <prvGetNextExpireTime+0x16>
 800d066:	2201      	movs	r2, #1
 800d068:	e000      	b.n	800d06c <prvGetNextExpireTime+0x18>
 800d06a:	2200      	movs	r2, #0
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d105      	bne.n	800d084 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d078:	4b07      	ldr	r3, [pc, #28]	; (800d098 <prvGetNextExpireTime+0x44>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	e001      	b.n	800d088 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d084:	2300      	movs	r3, #0
 800d086:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d088:	68fb      	ldr	r3, [r7, #12]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	20001814 	.word	0x20001814

0800d09c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0a4:	f7ff f9ea 	bl	800c47c <xTaskGetTickCount>
 800d0a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0aa:	4b0b      	ldr	r3, [pc, #44]	; (800d0d8 <prvSampleTimeNow+0x3c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d205      	bcs.n	800d0c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0b4:	f000 f93c 	bl	800d330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	601a      	str	r2, [r3, #0]
 800d0be:	e002      	b.n	800d0c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0c6:	4a04      	ldr	r2, [pc, #16]	; (800d0d8 <prvSampleTimeNow+0x3c>)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20001824 	.word	0x20001824

0800d0dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d812      	bhi.n	800d128 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	1ad2      	subs	r2, r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d302      	bcc.n	800d116 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d110:	2301      	movs	r3, #1
 800d112:	617b      	str	r3, [r7, #20]
 800d114:	e01b      	b.n	800d14e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d116:	4b10      	ldr	r3, [pc, #64]	; (800d158 <prvInsertTimerInActiveList+0x7c>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3304      	adds	r3, #4
 800d11e:	4619      	mov	r1, r3
 800d120:	4610      	mov	r0, r2
 800d122:	f7fe f874 	bl	800b20e <vListInsert>
 800d126:	e012      	b.n	800d14e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d206      	bcs.n	800d13e <prvInsertTimerInActiveList+0x62>
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d302      	bcc.n	800d13e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d138:	2301      	movs	r3, #1
 800d13a:	617b      	str	r3, [r7, #20]
 800d13c:	e007      	b.n	800d14e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d13e:	4b07      	ldr	r3, [pc, #28]	; (800d15c <prvInsertTimerInActiveList+0x80>)
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3304      	adds	r3, #4
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f7fe f860 	bl	800b20e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d14e:	697b      	ldr	r3, [r7, #20]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20001818 	.word	0x20001818
 800d15c:	20001814 	.word	0x20001814

0800d160 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08e      	sub	sp, #56	; 0x38
 800d164:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d166:	e0d0      	b.n	800d30a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	da1a      	bge.n	800d1a4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d16e:	1d3b      	adds	r3, r7, #4
 800d170:	3304      	adds	r3, #4
 800d172:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10c      	bne.n	800d194 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	b672      	cpsid	i
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	b662      	cpsie	i
 800d18e:	61fb      	str	r3, [r7, #28]
}
 800d190:	bf00      	nop
 800d192:	e7fe      	b.n	800d192 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d19a:	6850      	ldr	r0, [r2, #4]
 800d19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d19e:	6892      	ldr	r2, [r2, #8]
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f2c0 80ae 	blt.w	800d308 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d004      	beq.n	800d1c2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe f85f 	bl	800b280 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1c2:	463b      	mov	r3, r7
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7ff ff69 	bl	800d09c <prvSampleTimeNow>
 800d1ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b09      	cmp	r3, #9
 800d1d0:	f200 809b 	bhi.w	800d30a <prvProcessReceivedCommands+0x1aa>
 800d1d4:	a201      	add	r2, pc, #4	; (adr r2, 800d1dc <prvProcessReceivedCommands+0x7c>)
 800d1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1da:	bf00      	nop
 800d1dc:	0800d205 	.word	0x0800d205
 800d1e0:	0800d205 	.word	0x0800d205
 800d1e4:	0800d205 	.word	0x0800d205
 800d1e8:	0800d27d 	.word	0x0800d27d
 800d1ec:	0800d291 	.word	0x0800d291
 800d1f0:	0800d2df 	.word	0x0800d2df
 800d1f4:	0800d205 	.word	0x0800d205
 800d1f8:	0800d205 	.word	0x0800d205
 800d1fc:	0800d27d 	.word	0x0800d27d
 800d200:	0800d291 	.word	0x0800d291
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d20a:	f043 0301 	orr.w	r3, r3, #1
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	699b      	ldr	r3, [r3, #24]
 800d21c:	18d1      	adds	r1, r2, r3
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d224:	f7ff ff5a 	bl	800d0dc <prvInsertTimerInActiveList>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d06d      	beq.n	800d30a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d234:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d23c:	f003 0304 	and.w	r3, r3, #4
 800d240:	2b00      	cmp	r3, #0
 800d242:	d062      	beq.n	800d30a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d244:	68ba      	ldr	r2, [r7, #8]
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	441a      	add	r2, r3
 800d24c:	2300      	movs	r3, #0
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	2300      	movs	r3, #0
 800d252:	2100      	movs	r1, #0
 800d254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d256:	f7ff fdff 	bl	800ce58 <xTimerGenericCommand>
 800d25a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d153      	bne.n	800d30a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	b672      	cpsid	i
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	b662      	cpsie	i
 800d276:	61bb      	str	r3, [r7, #24]
}
 800d278:	bf00      	nop
 800d27a:	e7fe      	b.n	800d27a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d282:	f023 0301 	bic.w	r3, r3, #1
 800d286:	b2da      	uxtb	r2, r3
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d28e:	e03c      	b.n	800d30a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d296:	f043 0301 	orr.w	r3, r3, #1
 800d29a:	b2da      	uxtb	r2, r3
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10c      	bne.n	800d2ca <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	b672      	cpsid	i
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	b662      	cpsie	i
 800d2c4:	617b      	str	r3, [r7, #20]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	699a      	ldr	r2, [r3, #24]
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	18d1      	adds	r1, r2, r3
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d8:	f7ff ff00 	bl	800d0dc <prvInsertTimerInActiveList>
					break;
 800d2dc:	e015      	b.n	800d30a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2e4:	f003 0302 	and.w	r3, r3, #2
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ee:	f000 fbcb 	bl	800da88 <vPortFree>
 800d2f2:	e00a      	b.n	800d30a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2fa:	f023 0301 	bic.w	r3, r3, #1
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d306:	e000      	b.n	800d30a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d308:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d30a:	4b08      	ldr	r3, [pc, #32]	; (800d32c <prvProcessReceivedCommands+0x1cc>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	1d39      	adds	r1, r7, #4
 800d310:	2200      	movs	r2, #0
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe fad6 	bl	800b8c4 <xQueueReceive>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f47f af24 	bne.w	800d168 <prvProcessReceivedCommands+0x8>
	}
}
 800d320:	bf00      	nop
 800d322:	bf00      	nop
 800d324:	3730      	adds	r7, #48	; 0x30
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2000181c 	.word	0x2000181c

0800d330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d336:	e04a      	b.n	800d3ce <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d338:	4b2e      	ldr	r3, [pc, #184]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d342:	4b2c      	ldr	r3, [pc, #176]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3304      	adds	r3, #4
 800d350:	4618      	mov	r0, r3
 800d352:	f7fd ff95 	bl	800b280 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d364:	f003 0304 	and.w	r3, r3, #4
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d030      	beq.n	800d3ce <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	4413      	add	r3, r2
 800d374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d90e      	bls.n	800d39c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d38a:	4b1a      	ldr	r3, [pc, #104]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3304      	adds	r3, #4
 800d392:	4619      	mov	r1, r3
 800d394:	4610      	mov	r0, r2
 800d396:	f7fd ff3a 	bl	800b20e <vListInsert>
 800d39a:	e018      	b.n	800d3ce <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d39c:	2300      	movs	r3, #0
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fd56 	bl	800ce58 <xTimerGenericCommand>
 800d3ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10c      	bne.n	800d3ce <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	b672      	cpsid	i
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	b662      	cpsie	i
 800d3c8:	603b      	str	r3, [r7, #0]
}
 800d3ca:	bf00      	nop
 800d3cc:	e7fe      	b.n	800d3cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ce:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1af      	bne.n	800d338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3d8:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3de:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <prvSwitchTimerLists+0xc8>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a04      	ldr	r2, [pc, #16]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d3e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d3e6:	4a04      	ldr	r2, [pc, #16]	; (800d3f8 <prvSwitchTimerLists+0xc8>)
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	6013      	str	r3, [r2, #0]
}
 800d3ec:	bf00      	nop
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	20001814 	.word	0x20001814
 800d3f8:	20001818 	.word	0x20001818

0800d3fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d402:	f000 f94b 	bl	800d69c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d406:	4b15      	ldr	r3, [pc, #84]	; (800d45c <prvCheckForValidListAndQueue+0x60>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d120      	bne.n	800d450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d40e:	4814      	ldr	r0, [pc, #80]	; (800d460 <prvCheckForValidListAndQueue+0x64>)
 800d410:	f7fd feac 	bl	800b16c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d414:	4813      	ldr	r0, [pc, #76]	; (800d464 <prvCheckForValidListAndQueue+0x68>)
 800d416:	f7fd fea9 	bl	800b16c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d41a:	4b13      	ldr	r3, [pc, #76]	; (800d468 <prvCheckForValidListAndQueue+0x6c>)
 800d41c:	4a10      	ldr	r2, [pc, #64]	; (800d460 <prvCheckForValidListAndQueue+0x64>)
 800d41e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d420:	4b12      	ldr	r3, [pc, #72]	; (800d46c <prvCheckForValidListAndQueue+0x70>)
 800d422:	4a10      	ldr	r2, [pc, #64]	; (800d464 <prvCheckForValidListAndQueue+0x68>)
 800d424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d426:	2300      	movs	r3, #0
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	4b11      	ldr	r3, [pc, #68]	; (800d470 <prvCheckForValidListAndQueue+0x74>)
 800d42c:	4a11      	ldr	r2, [pc, #68]	; (800d474 <prvCheckForValidListAndQueue+0x78>)
 800d42e:	2110      	movs	r1, #16
 800d430:	200a      	movs	r0, #10
 800d432:	f7fd ffb9 	bl	800b3a8 <xQueueGenericCreateStatic>
 800d436:	4603      	mov	r3, r0
 800d438:	4a08      	ldr	r2, [pc, #32]	; (800d45c <prvCheckForValidListAndQueue+0x60>)
 800d43a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d43c:	4b07      	ldr	r3, [pc, #28]	; (800d45c <prvCheckForValidListAndQueue+0x60>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d005      	beq.n	800d450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d444:	4b05      	ldr	r3, [pc, #20]	; (800d45c <prvCheckForValidListAndQueue+0x60>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	490b      	ldr	r1, [pc, #44]	; (800d478 <prvCheckForValidListAndQueue+0x7c>)
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fc60 	bl	800bd10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d450:	f000 f958 	bl	800d704 <vPortExitCritical>
}
 800d454:	bf00      	nop
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	2000181c 	.word	0x2000181c
 800d460:	200017ec 	.word	0x200017ec
 800d464:	20001800 	.word	0x20001800
 800d468:	20001814 	.word	0x20001814
 800d46c:	20001818 	.word	0x20001818
 800d470:	200018c8 	.word	0x200018c8
 800d474:	20001828 	.word	0x20001828
 800d478:	0800fc28 	.word	0x0800fc28

0800d47c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	3b04      	subs	r3, #4
 800d48c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3b04      	subs	r3, #4
 800d49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	f023 0201 	bic.w	r2, r3, #1
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3b04      	subs	r3, #4
 800d4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4ac:	4a0c      	ldr	r2, [pc, #48]	; (800d4e0 <pxPortInitialiseStack+0x64>)
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3b14      	subs	r3, #20
 800d4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3b04      	subs	r3, #4
 800d4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f06f 0202 	mvn.w	r2, #2
 800d4ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3b20      	subs	r3, #32
 800d4d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	0800d4e5 	.word	0x0800d4e5

0800d4e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4ee:	4b14      	ldr	r3, [pc, #80]	; (800d540 <prvTaskExitError+0x5c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f6:	d00c      	beq.n	800d512 <prvTaskExitError+0x2e>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fc:	b672      	cpsid	i
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	b662      	cpsie	i
 800d50c:	60fb      	str	r3, [r7, #12]
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <prvTaskExitError+0x2c>
	__asm volatile
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	b672      	cpsid	i
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	b662      	cpsie	i
 800d526:	60bb      	str	r3, [r7, #8]
}
 800d528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d52a:	bf00      	nop
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0fc      	beq.n	800d52c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20000010 	.word	0x20000010
	...

0800d550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <pxCurrentTCBConst2>)
 800d552:	6819      	ldr	r1, [r3, #0]
 800d554:	6808      	ldr	r0, [r1, #0]
 800d556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	f380 8809 	msr	PSP, r0
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f04f 0000 	mov.w	r0, #0
 800d566:	f380 8811 	msr	BASEPRI, r0
 800d56a:	4770      	bx	lr
 800d56c:	f3af 8000 	nop.w

0800d570 <pxCurrentTCBConst2>:
 800d570:	200012ec 	.word	0x200012ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop

0800d578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d578:	4808      	ldr	r0, [pc, #32]	; (800d59c <prvPortStartFirstTask+0x24>)
 800d57a:	6800      	ldr	r0, [r0, #0]
 800d57c:	6800      	ldr	r0, [r0, #0]
 800d57e:	f380 8808 	msr	MSP, r0
 800d582:	f04f 0000 	mov.w	r0, #0
 800d586:	f380 8814 	msr	CONTROL, r0
 800d58a:	b662      	cpsie	i
 800d58c:	b661      	cpsie	f
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	df00      	svc	0
 800d598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d59a:	bf00      	nop
 800d59c:	e000ed08 	.word	0xe000ed08

0800d5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5a6:	4b37      	ldr	r3, [pc, #220]	; (800d684 <xPortStartScheduler+0xe4>)
 800d5a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	22ff      	movs	r2, #255	; 0xff
 800d5b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	4b2f      	ldr	r3, [pc, #188]	; (800d688 <xPortStartScheduler+0xe8>)
 800d5cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5ce:	4b2f      	ldr	r3, [pc, #188]	; (800d68c <xPortStartScheduler+0xec>)
 800d5d0:	2207      	movs	r2, #7
 800d5d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5d4:	e009      	b.n	800d5ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d5d6:	4b2d      	ldr	r3, [pc, #180]	; (800d68c <xPortStartScheduler+0xec>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	4a2b      	ldr	r2, [pc, #172]	; (800d68c <xPortStartScheduler+0xec>)
 800d5de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5ea:	78fb      	ldrb	r3, [r7, #3]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f2:	2b80      	cmp	r3, #128	; 0x80
 800d5f4:	d0ef      	beq.n	800d5d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5f6:	4b25      	ldr	r3, [pc, #148]	; (800d68c <xPortStartScheduler+0xec>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f1c3 0307 	rsb	r3, r3, #7
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d00c      	beq.n	800d61c <xPortStartScheduler+0x7c>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	b672      	cpsid	i
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	b662      	cpsie	i
 800d616:	60bb      	str	r3, [r7, #8]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d61c:	4b1b      	ldr	r3, [pc, #108]	; (800d68c <xPortStartScheduler+0xec>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	021b      	lsls	r3, r3, #8
 800d622:	4a1a      	ldr	r2, [pc, #104]	; (800d68c <xPortStartScheduler+0xec>)
 800d624:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d626:	4b19      	ldr	r3, [pc, #100]	; (800d68c <xPortStartScheduler+0xec>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d62e:	4a17      	ldr	r2, [pc, #92]	; (800d68c <xPortStartScheduler+0xec>)
 800d630:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	b2da      	uxtb	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d63a:	4b15      	ldr	r3, [pc, #84]	; (800d690 <xPortStartScheduler+0xf0>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a14      	ldr	r2, [pc, #80]	; (800d690 <xPortStartScheduler+0xf0>)
 800d640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d644:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d646:	4b12      	ldr	r3, [pc, #72]	; (800d690 <xPortStartScheduler+0xf0>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a11      	ldr	r2, [pc, #68]	; (800d690 <xPortStartScheduler+0xf0>)
 800d64c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d650:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d652:	f000 f8dd 	bl	800d810 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d656:	4b0f      	ldr	r3, [pc, #60]	; (800d694 <xPortStartScheduler+0xf4>)
 800d658:	2200      	movs	r2, #0
 800d65a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d65c:	f000 f8fc 	bl	800d858 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d660:	4b0d      	ldr	r3, [pc, #52]	; (800d698 <xPortStartScheduler+0xf8>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a0c      	ldr	r2, [pc, #48]	; (800d698 <xPortStartScheduler+0xf8>)
 800d666:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d66a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d66c:	f7ff ff84 	bl	800d578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d670:	f7fe ffe6 	bl	800c640 <vTaskSwitchContext>
	prvTaskExitError();
 800d674:	f7ff ff36 	bl	800d4e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	e000e400 	.word	0xe000e400
 800d688:	20001918 	.word	0x20001918
 800d68c:	2000191c 	.word	0x2000191c
 800d690:	e000ed20 	.word	0xe000ed20
 800d694:	20000010 	.word	0x20000010
 800d698:	e000ef34 	.word	0xe000ef34

0800d69c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	b672      	cpsid	i
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	b662      	cpsie	i
 800d6b6:	607b      	str	r3, [r7, #4]
}
 800d6b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6ba:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <vPortEnterCritical+0x60>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	4a0e      	ldr	r2, [pc, #56]	; (800d6fc <vPortEnterCritical+0x60>)
 800d6c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <vPortEnterCritical+0x60>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d111      	bne.n	800d6f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d6cc:	4b0c      	ldr	r3, [pc, #48]	; (800d700 <vPortEnterCritical+0x64>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00c      	beq.n	800d6f0 <vPortEnterCritical+0x54>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	b672      	cpsid	i
 800d6dc:	f383 8811 	msr	BASEPRI, r3
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	b662      	cpsie	i
 800d6ea:	603b      	str	r3, [r7, #0]
}
 800d6ec:	bf00      	nop
 800d6ee:	e7fe      	b.n	800d6ee <vPortEnterCritical+0x52>
	}
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	20000010 	.word	0x20000010
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d70a:	4b13      	ldr	r3, [pc, #76]	; (800d758 <vPortExitCritical+0x54>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10c      	bne.n	800d72c <vPortExitCritical+0x28>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	b672      	cpsid	i
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	b662      	cpsie	i
 800d726:	607b      	str	r3, [r7, #4]
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d72c:	4b0a      	ldr	r3, [pc, #40]	; (800d758 <vPortExitCritical+0x54>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3b01      	subs	r3, #1
 800d732:	4a09      	ldr	r2, [pc, #36]	; (800d758 <vPortExitCritical+0x54>)
 800d734:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d736:	4b08      	ldr	r3, [pc, #32]	; (800d758 <vPortExitCritical+0x54>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d105      	bne.n	800d74a <vPortExitCritical+0x46>
 800d73e:	2300      	movs	r3, #0
 800d740:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	f383 8811 	msr	BASEPRI, r3
}
 800d748:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d74a:	bf00      	nop
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	20000010 	.word	0x20000010
 800d75c:	00000000 	.word	0x00000000

0800d760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d760:	f3ef 8009 	mrs	r0, PSP
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	4b15      	ldr	r3, [pc, #84]	; (800d7c0 <pxCurrentTCBConst>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	f01e 0f10 	tst.w	lr, #16
 800d770:	bf08      	it	eq
 800d772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77a:	6010      	str	r0, [r2, #0]
 800d77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d780:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d784:	b672      	cpsid	i
 800d786:	f380 8811 	msr	BASEPRI, r0
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	b662      	cpsie	i
 800d794:	f7fe ff54 	bl	800c640 <vTaskSwitchContext>
 800d798:	f04f 0000 	mov.w	r0, #0
 800d79c:	f380 8811 	msr	BASEPRI, r0
 800d7a0:	bc09      	pop	{r0, r3}
 800d7a2:	6819      	ldr	r1, [r3, #0]
 800d7a4:	6808      	ldr	r0, [r1, #0]
 800d7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7aa:	f01e 0f10 	tst.w	lr, #16
 800d7ae:	bf08      	it	eq
 800d7b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7b4:	f380 8809 	msr	PSP, r0
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop

0800d7c0 <pxCurrentTCBConst>:
 800d7c0:	200012ec 	.word	0x200012ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop

0800d7c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	b672      	cpsid	i
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	b662      	cpsie	i
 800d7e2:	607b      	str	r3, [r7, #4]
}
 800d7e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7e6:	f7fe fe6b 	bl	800c4c0 <xTaskIncrementTick>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d003      	beq.n	800d7f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7f0:	4b06      	ldr	r3, [pc, #24]	; (800d80c <SysTick_Handler+0x44>)
 800d7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	f383 8811 	msr	BASEPRI, r3
}
 800d802:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d804:	bf00      	nop
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	e000ed04 	.word	0xe000ed04

0800d810 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d810:	b480      	push	{r7}
 800d812:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d814:	4b0b      	ldr	r3, [pc, #44]	; (800d844 <vPortSetupTimerInterrupt+0x34>)
 800d816:	2200      	movs	r2, #0
 800d818:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d81a:	4b0b      	ldr	r3, [pc, #44]	; (800d848 <vPortSetupTimerInterrupt+0x38>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d820:	4b0a      	ldr	r3, [pc, #40]	; (800d84c <vPortSetupTimerInterrupt+0x3c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a0a      	ldr	r2, [pc, #40]	; (800d850 <vPortSetupTimerInterrupt+0x40>)
 800d826:	fba2 2303 	umull	r2, r3, r2, r3
 800d82a:	099b      	lsrs	r3, r3, #6
 800d82c:	4a09      	ldr	r2, [pc, #36]	; (800d854 <vPortSetupTimerInterrupt+0x44>)
 800d82e:	3b01      	subs	r3, #1
 800d830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d832:	4b04      	ldr	r3, [pc, #16]	; (800d844 <vPortSetupTimerInterrupt+0x34>)
 800d834:	2207      	movs	r2, #7
 800d836:	601a      	str	r2, [r3, #0]
}
 800d838:	bf00      	nop
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	e000e010 	.word	0xe000e010
 800d848:	e000e018 	.word	0xe000e018
 800d84c:	20000004 	.word	0x20000004
 800d850:	10624dd3 	.word	0x10624dd3
 800d854:	e000e014 	.word	0xe000e014

0800d858 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d858:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d868 <vPortEnableVFP+0x10>
 800d85c:	6801      	ldr	r1, [r0, #0]
 800d85e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d862:	6001      	str	r1, [r0, #0]
 800d864:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d866:	bf00      	nop
 800d868:	e000ed88 	.word	0xe000ed88

0800d86c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d872:	f3ef 8305 	mrs	r3, IPSR
 800d876:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2b0f      	cmp	r3, #15
 800d87c:	d916      	bls.n	800d8ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d87e:	4a19      	ldr	r2, [pc, #100]	; (800d8e4 <vPortValidateInterruptPriority+0x78>)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4413      	add	r3, r2
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d888:	4b17      	ldr	r3, [pc, #92]	; (800d8e8 <vPortValidateInterruptPriority+0x7c>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	7afa      	ldrb	r2, [r7, #11]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d20c      	bcs.n	800d8ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d896:	b672      	cpsid	i
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	b662      	cpsie	i
 800d8a6:	607b      	str	r3, [r7, #4]
}
 800d8a8:	bf00      	nop
 800d8aa:	e7fe      	b.n	800d8aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8ac:	4b0f      	ldr	r3, [pc, #60]	; (800d8ec <vPortValidateInterruptPriority+0x80>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8b4:	4b0e      	ldr	r3, [pc, #56]	; (800d8f0 <vPortValidateInterruptPriority+0x84>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d90c      	bls.n	800d8d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c0:	b672      	cpsid	i
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	b662      	cpsie	i
 800d8d0:	603b      	str	r3, [r7, #0]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <vPortValidateInterruptPriority+0x68>
	}
 800d8d6:	bf00      	nop
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	e000e3f0 	.word	0xe000e3f0
 800d8e8:	20001918 	.word	0x20001918
 800d8ec:	e000ed0c 	.word	0xe000ed0c
 800d8f0:	2000191c 	.word	0x2000191c

0800d8f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08a      	sub	sp, #40	; 0x28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d900:	f7fe fd0a 	bl	800c318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d904:	4b5b      	ldr	r3, [pc, #364]	; (800da74 <pvPortMalloc+0x180>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d90c:	f000 f91a 	bl	800db44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d910:	4b59      	ldr	r3, [pc, #356]	; (800da78 <pvPortMalloc+0x184>)
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	4013      	ands	r3, r2
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f040 8092 	bne.w	800da42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d01f      	beq.n	800d964 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d924:	2208      	movs	r2, #8
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4413      	add	r3, r2
 800d92a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f003 0307 	and.w	r3, r3, #7
 800d932:	2b00      	cmp	r3, #0
 800d934:	d016      	beq.n	800d964 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f023 0307 	bic.w	r3, r3, #7
 800d93c:	3308      	adds	r3, #8
 800d93e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f003 0307 	and.w	r3, r3, #7
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00c      	beq.n	800d964 <pvPortMalloc+0x70>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94e:	b672      	cpsid	i
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	b662      	cpsie	i
 800d95e:	617b      	str	r3, [r7, #20]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d06b      	beq.n	800da42 <pvPortMalloc+0x14e>
 800d96a:	4b44      	ldr	r3, [pc, #272]	; (800da7c <pvPortMalloc+0x188>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	429a      	cmp	r2, r3
 800d972:	d866      	bhi.n	800da42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d974:	4b42      	ldr	r3, [pc, #264]	; (800da80 <pvPortMalloc+0x18c>)
 800d976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d978:	4b41      	ldr	r3, [pc, #260]	; (800da80 <pvPortMalloc+0x18c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d97e:	e004      	b.n	800d98a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	429a      	cmp	r2, r3
 800d992:	d903      	bls.n	800d99c <pvPortMalloc+0xa8>
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1f1      	bne.n	800d980 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d99c:	4b35      	ldr	r3, [pc, #212]	; (800da74 <pvPortMalloc+0x180>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d04d      	beq.n	800da42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2208      	movs	r2, #8
 800d9ac:	4413      	add	r3, r2
 800d9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	1ad2      	subs	r2, r2, r3
 800d9c0:	2308      	movs	r3, #8
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d921      	bls.n	800da0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00c      	beq.n	800d9f4 <pvPortMalloc+0x100>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	b672      	cpsid	i
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	b662      	cpsie	i
 800d9ee:	613b      	str	r3, [r7, #16]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	685a      	ldr	r2, [r3, #4]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	1ad2      	subs	r2, r2, r3
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da06:	69b8      	ldr	r0, [r7, #24]
 800da08:	f000 f8fe 	bl	800dc08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da0c:	4b1b      	ldr	r3, [pc, #108]	; (800da7c <pvPortMalloc+0x188>)
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	4a19      	ldr	r2, [pc, #100]	; (800da7c <pvPortMalloc+0x188>)
 800da18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da1a:	4b18      	ldr	r3, [pc, #96]	; (800da7c <pvPortMalloc+0x188>)
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	4b19      	ldr	r3, [pc, #100]	; (800da84 <pvPortMalloc+0x190>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	429a      	cmp	r2, r3
 800da24:	d203      	bcs.n	800da2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da26:	4b15      	ldr	r3, [pc, #84]	; (800da7c <pvPortMalloc+0x188>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a16      	ldr	r2, [pc, #88]	; (800da84 <pvPortMalloc+0x190>)
 800da2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	4b11      	ldr	r3, [pc, #68]	; (800da78 <pvPortMalloc+0x184>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	431a      	orrs	r2, r3
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	2200      	movs	r2, #0
 800da40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da42:	f7fe fc77 	bl	800c334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	f003 0307 	and.w	r3, r3, #7
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00c      	beq.n	800da6a <pvPortMalloc+0x176>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da54:	b672      	cpsid	i
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	b662      	cpsie	i
 800da64:	60fb      	str	r3, [r7, #12]
}
 800da66:	bf00      	nop
 800da68:	e7fe      	b.n	800da68 <pvPortMalloc+0x174>
	return pvReturn;
 800da6a:	69fb      	ldr	r3, [r7, #28]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3728      	adds	r7, #40	; 0x28
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20005528 	.word	0x20005528
 800da78:	20005534 	.word	0x20005534
 800da7c:	2000552c 	.word	0x2000552c
 800da80:	20005520 	.word	0x20005520
 800da84:	20005530 	.word	0x20005530

0800da88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d04c      	beq.n	800db34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da9a:	2308      	movs	r3, #8
 800da9c:	425b      	negs	r3, r3
 800da9e:	697a      	ldr	r2, [r7, #20]
 800daa0:	4413      	add	r3, r2
 800daa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	4b23      	ldr	r3, [pc, #140]	; (800db3c <vPortFree+0xb4>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4013      	ands	r3, r2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10c      	bne.n	800dad0 <vPortFree+0x48>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	b672      	cpsid	i
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	b662      	cpsie	i
 800daca:	60fb      	str	r3, [r7, #12]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00c      	beq.n	800daf2 <vPortFree+0x6a>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	b672      	cpsid	i
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	b662      	cpsie	i
 800daec:	60bb      	str	r3, [r7, #8]
}
 800daee:	bf00      	nop
 800daf0:	e7fe      	b.n	800daf0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	4b11      	ldr	r3, [pc, #68]	; (800db3c <vPortFree+0xb4>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4013      	ands	r3, r2
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d019      	beq.n	800db34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d115      	bne.n	800db34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	685a      	ldr	r2, [r3, #4]
 800db0c:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <vPortFree+0xb4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	43db      	mvns	r3, r3
 800db12:	401a      	ands	r2, r3
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db18:	f7fe fbfe 	bl	800c318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	4b07      	ldr	r3, [pc, #28]	; (800db40 <vPortFree+0xb8>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4413      	add	r3, r2
 800db26:	4a06      	ldr	r2, [pc, #24]	; (800db40 <vPortFree+0xb8>)
 800db28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db2a:	6938      	ldr	r0, [r7, #16]
 800db2c:	f000 f86c 	bl	800dc08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800db30:	f7fe fc00 	bl	800c334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db34:	bf00      	nop
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20005534 	.word	0x20005534
 800db40:	2000552c 	.word	0x2000552c

0800db44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800db4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db50:	4b27      	ldr	r3, [pc, #156]	; (800dbf0 <prvHeapInit+0xac>)
 800db52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00c      	beq.n	800db78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3307      	adds	r3, #7
 800db62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f023 0307 	bic.w	r3, r3, #7
 800db6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	4a1f      	ldr	r2, [pc, #124]	; (800dbf0 <prvHeapInit+0xac>)
 800db74:	4413      	add	r3, r2
 800db76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db7c:	4a1d      	ldr	r2, [pc, #116]	; (800dbf4 <prvHeapInit+0xb0>)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db82:	4b1c      	ldr	r3, [pc, #112]	; (800dbf4 <prvHeapInit+0xb0>)
 800db84:	2200      	movs	r2, #0
 800db86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	4413      	add	r3, r2
 800db8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db90:	2208      	movs	r2, #8
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	1a9b      	subs	r3, r3, r2
 800db96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f023 0307 	bic.w	r3, r3, #7
 800db9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	4a15      	ldr	r2, [pc, #84]	; (800dbf8 <prvHeapInit+0xb4>)
 800dba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dba6:	4b14      	ldr	r3, [pc, #80]	; (800dbf8 <prvHeapInit+0xb4>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbae:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <prvHeapInit+0xb4>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	1ad2      	subs	r2, r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dbc4:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <prvHeapInit+0xb4>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	4a0a      	ldr	r2, [pc, #40]	; (800dbfc <prvHeapInit+0xb8>)
 800dbd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	4a09      	ldr	r2, [pc, #36]	; (800dc00 <prvHeapInit+0xbc>)
 800dbda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dbdc:	4b09      	ldr	r3, [pc, #36]	; (800dc04 <prvHeapInit+0xc0>)
 800dbde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dbe2:	601a      	str	r2, [r3, #0]
}
 800dbe4:	bf00      	nop
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	20001920 	.word	0x20001920
 800dbf4:	20005520 	.word	0x20005520
 800dbf8:	20005528 	.word	0x20005528
 800dbfc:	20005530 	.word	0x20005530
 800dc00:	2000552c 	.word	0x2000552c
 800dc04:	20005534 	.word	0x20005534

0800dc08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc10:	4b28      	ldr	r3, [pc, #160]	; (800dcb4 <prvInsertBlockIntoFreeList+0xac>)
 800dc12:	60fb      	str	r3, [r7, #12]
 800dc14:	e002      	b.n	800dc1c <prvInsertBlockIntoFreeList+0x14>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d8f7      	bhi.n	800dc16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	4413      	add	r3, r2
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d108      	bne.n	800dc4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	441a      	add	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	441a      	add	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d118      	bne.n	800dc90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <prvInsertBlockIntoFreeList+0xb0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d00d      	beq.n	800dc86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	441a      	add	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	e008      	b.n	800dc98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc86:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <prvInsertBlockIntoFreeList+0xb0>)
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	601a      	str	r2, [r3, #0]
 800dc8e:	e003      	b.n	800dc98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d002      	beq.n	800dca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dca6:	bf00      	nop
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20005520 	.word	0x20005520
 800dcb8:	20005528 	.word	0x20005528

0800dcbc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800dcc2:	4b21      	ldr	r3, [pc, #132]	; (800dd48 <_DoInit+0x8c>)
 800dcc4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2203      	movs	r2, #3
 800dcca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2203      	movs	r2, #3
 800dcd0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a1d      	ldr	r2, [pc, #116]	; (800dd4c <_DoInit+0x90>)
 800dcd6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a1d      	ldr	r2, [pc, #116]	; (800dd50 <_DoInit+0x94>)
 800dcdc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dce4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a14      	ldr	r2, [pc, #80]	; (800dd4c <_DoInit+0x90>)
 800dcfc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a14      	ldr	r2, [pc, #80]	; (800dd54 <_DoInit+0x98>)
 800dd02:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2210      	movs	r2, #16
 800dd08:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	3307      	adds	r3, #7
 800dd20:	4a0d      	ldr	r2, [pc, #52]	; (800dd58 <_DoInit+0x9c>)
 800dd22:	6810      	ldr	r0, [r2, #0]
 800dd24:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a0c      	ldr	r2, [pc, #48]	; (800dd5c <_DoInit+0xa0>)
 800dd2a:	6810      	ldr	r0, [r2, #0]
 800dd2c:	6018      	str	r0, [r3, #0]
 800dd2e:	8891      	ldrh	r1, [r2, #4]
 800dd30:	7992      	ldrb	r2, [r2, #6]
 800dd32:	8099      	strh	r1, [r3, #4]
 800dd34:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2220      	movs	r2, #32
 800dd3a:	719a      	strb	r2, [r3, #6]
}
 800dd3c:	bf00      	nop
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	20005538 	.word	0x20005538
 800dd4c:	0800fc30 	.word	0x0800fc30
 800dd50:	200055e0 	.word	0x200055e0
 800dd54:	200059e0 	.word	0x200059e0
 800dd58:	0800fc3c 	.word	0x0800fc3c
 800dd5c:	0800fc40 	.word	0x0800fc40

0800dd60 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	; 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800dd6c:	4b3c      	ldr	r3, [pc, #240]	; (800de60 <SEGGER_RTT_ReadNoLock+0x100>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <SEGGER_RTT_ReadNoLock+0x18>
 800dd74:	f7ff ffa2 	bl	800dcbc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	4413      	add	r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	3360      	adds	r3, #96	; 0x60
 800dd84:	4a36      	ldr	r2, [pc, #216]	; (800de60 <SEGGER_RTT_ReadNoLock+0x100>)
 800dd86:	4413      	add	r3, r2
 800dd88:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800dd9e:	6a3a      	ldr	r2, [r7, #32]
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d92a      	bls.n	800ddfc <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	689a      	ldr	r2, [r3, #8]
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	bf28      	it	cs
 800ddb8:	4613      	movcs	r3, r2
 800ddba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	69f8      	ldr	r0, [r7, #28]
 800ddca:	f001 fc81 	bl	800f6d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800ddce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800ddd6:	69fa      	ldr	r2, [r7, #28]
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	4413      	add	r3, r2
 800dddc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800dde6:	6a3a      	ldr	r2, [r7, #32]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	4413      	add	r3, r2
 800ddec:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	6a3a      	ldr	r2, [r7, #32]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d101      	bne.n	800ddfc <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4293      	cmp	r3, r2
 800de0a:	bf28      	it	cs
 800de0c:	4613      	movcs	r3, r2
 800de0e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d018      	beq.n	800de48 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	4413      	add	r3, r2
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	4619      	mov	r1, r3
 800de22:	69f8      	ldr	r0, [r7, #28]
 800de24:	f001 fc54 	bl	800f6d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800de28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	4413      	add	r3, r2
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	4413      	add	r3, r2
 800de36:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800de40:	6a3a      	ldr	r2, [r7, #32]
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	4413      	add	r3, r2
 800de46:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d002      	beq.n	800de54 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	6a3a      	ldr	r2, [r7, #32]
 800de52:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de56:	4618      	mov	r0, r3
 800de58:	3728      	adds	r7, #40	; 0x28
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20005538 	.word	0x20005538

0800de64 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800de72:	4b30      	ldr	r3, [pc, #192]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d101      	bne.n	800de7e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800de7a:	f7ff ff1f 	bl	800dcbc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800de7e:	4b2d      	ldr	r3, [pc, #180]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	461a      	mov	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4293      	cmp	r3, r2
 800de88:	d24c      	bcs.n	800df24 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800de8a:	f3ef 8311 	mrs	r3, BASEPRI
 800de8e:	f04f 0120 	mov.w	r1, #32
 800de92:	f381 8811 	msr	BASEPRI, r1
 800de96:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d032      	beq.n	800df04 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800de9e:	4925      	ldr	r1, [pc, #148]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	1c5a      	adds	r2, r3, #1
 800dea4:	4613      	mov	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	00db      	lsls	r3, r3, #3
 800deac:	440b      	add	r3, r1
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800deb2:	4920      	ldr	r1, [pc, #128]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	1c5a      	adds	r2, r3, #1
 800deb8:	4613      	mov	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	4413      	add	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	440b      	add	r3, r1
 800dec2:	3304      	adds	r3, #4
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800dec8:	491a      	ldr	r1, [pc, #104]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	4613      	mov	r3, r2
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	4413      	add	r3, r2
 800ded2:	00db      	lsls	r3, r3, #3
 800ded4:	440b      	add	r3, r1
 800ded6:	3320      	adds	r3, #32
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800dedc:	4915      	ldr	r1, [pc, #84]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	4613      	mov	r3, r2
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4413      	add	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	440b      	add	r3, r1
 800deea:	3328      	adds	r3, #40	; 0x28
 800deec:	2200      	movs	r2, #0
 800deee:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800def0:	4910      	ldr	r1, [pc, #64]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	4613      	mov	r3, r2
 800def6:	005b      	lsls	r3, r3, #1
 800def8:	4413      	add	r3, r2
 800defa:	00db      	lsls	r3, r3, #3
 800defc:	440b      	add	r3, r1
 800defe:	3324      	adds	r3, #36	; 0x24
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800df04:	490b      	ldr	r1, [pc, #44]	; (800df34 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4613      	mov	r3, r2
 800df0a:	005b      	lsls	r3, r3, #1
 800df0c:	4413      	add	r3, r2
 800df0e:	00db      	lsls	r3, r3, #3
 800df10:	440b      	add	r3, r1
 800df12:	332c      	adds	r3, #44	; 0x2c
 800df14:	6a3a      	ldr	r2, [r7, #32]
 800df16:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800df1e:	2300      	movs	r3, #0
 800df20:	617b      	str	r3, [r7, #20]
 800df22:	e002      	b.n	800df2a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800df24:	f04f 33ff 	mov.w	r3, #4294967295
 800df28:	617b      	str	r3, [r7, #20]
  }
  return r;
 800df2a:	697b      	ldr	r3, [r7, #20]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	20005538 	.word	0x20005538

0800df38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800df46:	4b30      	ldr	r3, [pc, #192]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800df4e:	f7ff feb5 	bl	800dcbc <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800df52:	4b2d      	ldr	r3, [pc, #180]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	461a      	mov	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d24b      	bcs.n	800dff6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800df5e:	f3ef 8311 	mrs	r3, BASEPRI
 800df62:	f04f 0120 	mov.w	r1, #32
 800df66:	f381 8811 	msr	BASEPRI, r1
 800df6a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d031      	beq.n	800dfd6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800df72:	4925      	ldr	r1, [pc, #148]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	4613      	mov	r3, r2
 800df78:	005b      	lsls	r3, r3, #1
 800df7a:	4413      	add	r3, r2
 800df7c:	00db      	lsls	r3, r3, #3
 800df7e:	440b      	add	r3, r1
 800df80:	3360      	adds	r3, #96	; 0x60
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800df86:	4920      	ldr	r1, [pc, #128]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	4613      	mov	r3, r2
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	4413      	add	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	440b      	add	r3, r1
 800df94:	3364      	adds	r3, #100	; 0x64
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800df9a:	491b      	ldr	r1, [pc, #108]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	4413      	add	r3, r2
 800dfa4:	00db      	lsls	r3, r3, #3
 800dfa6:	440b      	add	r3, r1
 800dfa8:	3368      	adds	r3, #104	; 0x68
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800dfae:	4916      	ldr	r1, [pc, #88]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	4413      	add	r3, r2
 800dfb8:	00db      	lsls	r3, r3, #3
 800dfba:	440b      	add	r3, r1
 800dfbc:	3370      	adds	r3, #112	; 0x70
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800dfc2:	4911      	ldr	r1, [pc, #68]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	005b      	lsls	r3, r3, #1
 800dfca:	4413      	add	r3, r2
 800dfcc:	00db      	lsls	r3, r3, #3
 800dfce:	440b      	add	r3, r1
 800dfd0:	336c      	adds	r3, #108	; 0x6c
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800dfd6:	490c      	ldr	r1, [pc, #48]	; (800e008 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3374      	adds	r3, #116	; 0x74
 800dfe6:	6a3a      	ldr	r2, [r7, #32]
 800dfe8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800dff0:	2300      	movs	r3, #0
 800dff2:	617b      	str	r3, [r7, #20]
 800dff4:	e002      	b.n	800dffc <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800dff6:	f04f 33ff 	mov.w	r3, #4294967295
 800dffa:	617b      	str	r3, [r7, #20]
  }
  return r;
 800dffc:	697b      	ldr	r3, [r7, #20]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20005538 	.word	0x20005538

0800e00c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800e00c:	b480      	push	{r7}
 800e00e:	b087      	sub	sp, #28
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e01c:	e002      	b.n	800e024 <_EncodeStr+0x18>
    Len++;
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	3301      	adds	r3, #1
 800e022:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	4413      	add	r3, r2
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f6      	bne.n	800e01e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800e030:	693a      	ldr	r2, [r7, #16]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	429a      	cmp	r2, r3
 800e036:	d901      	bls.n	800e03c <_EncodeStr+0x30>
    Len = Limit;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	2bfe      	cmp	r3, #254	; 0xfe
 800e040:	d806      	bhi.n	800e050 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	60fa      	str	r2, [r7, #12]
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	b2d2      	uxtb	r2, r2
 800e04c:	701a      	strb	r2, [r3, #0]
 800e04e:	e011      	b.n	800e074 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	60fa      	str	r2, [r7, #12]
 800e056:	22ff      	movs	r2, #255	; 0xff
 800e058:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	1c5a      	adds	r2, r3, #1
 800e05e:	60fa      	str	r2, [r7, #12]
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	b2d2      	uxtb	r2, r2
 800e064:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	0a19      	lsrs	r1, r3, #8
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	60fa      	str	r2, [r7, #12]
 800e070:	b2ca      	uxtb	r2, r1
 800e072:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e078:	e00a      	b.n	800e090 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	1c53      	adds	r3, r2, #1
 800e07e:	60bb      	str	r3, [r7, #8]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	1c59      	adds	r1, r3, #1
 800e084:	60f9      	str	r1, [r7, #12]
 800e086:	7812      	ldrb	r2, [r2, #0]
 800e088:	701a      	strb	r2, [r3, #0]
    n++;
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	3301      	adds	r3, #1
 800e08e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e090:	697a      	ldr	r2, [r7, #20]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	429a      	cmp	r2, r3
 800e096:	d3f0      	bcc.n	800e07a <_EncodeStr+0x6e>
  }
  return pPayload;
 800e098:	68fb      	ldr	r3, [r7, #12]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	371c      	adds	r7, #28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr

0800e0a6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800e0a6:	b480      	push	{r7}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3304      	adds	r3, #4
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	370c      	adds	r7, #12
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
	...

0800e0c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e0c6:	1cfb      	adds	r3, r7, #3
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	2001      	movs	r0, #1
 800e0ce:	f7ff fe47 	bl	800dd60 <SEGGER_RTT_ReadNoLock>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	dd4c      	ble.n	800e176 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800e0dc:	78fb      	ldrb	r3, [r7, #3]
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	dc16      	bgt.n	800e110 <_HandleIncomingPacket+0x50>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dd3c      	ble.n	800e160 <_HandleIncomingPacket+0xa0>
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	2b06      	cmp	r3, #6
 800e0ea:	d839      	bhi.n	800e160 <_HandleIncomingPacket+0xa0>
 800e0ec:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <_HandleIncomingPacket+0x34>)
 800e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f2:	bf00      	nop
 800e0f4:	0800e117 	.word	0x0800e117
 800e0f8:	0800e11d 	.word	0x0800e11d
 800e0fc:	0800e123 	.word	0x0800e123
 800e100:	0800e129 	.word	0x0800e129
 800e104:	0800e12f 	.word	0x0800e12f
 800e108:	0800e135 	.word	0x0800e135
 800e10c:	0800e13b 	.word	0x0800e13b
 800e110:	2b80      	cmp	r3, #128	; 0x80
 800e112:	d015      	beq.n	800e140 <_HandleIncomingPacket+0x80>
 800e114:	e024      	b.n	800e160 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800e116:	f000 fc43 	bl	800e9a0 <SEGGER_SYSVIEW_Start>
      break;
 800e11a:	e031      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800e11c:	f000 fcfc 	bl	800eb18 <SEGGER_SYSVIEW_Stop>
      break;
 800e120:	e02e      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800e122:	f000 fed7 	bl	800eed4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800e126:	e02b      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800e128:	f000 fe9c 	bl	800ee64 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800e12c:	e028      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800e12e:	f000 fd19 	bl	800eb64 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800e132:	e025      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800e134:	f001 f898 	bl	800f268 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800e138:	e022      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800e13a:	f001 f877 	bl	800f22c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800e13e:	e01f      	b.n	800e180 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e140:	1cfb      	adds	r3, r7, #3
 800e142:	2201      	movs	r2, #1
 800e144:	4619      	mov	r1, r3
 800e146:	2001      	movs	r0, #1
 800e148:	f7ff fe0a 	bl	800dd60 <SEGGER_RTT_ReadNoLock>
 800e14c:	4603      	mov	r3, r0
 800e14e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	dd11      	ble.n	800e17a <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800e156:	78fb      	ldrb	r3, [r7, #3]
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 ffe7 	bl	800f12c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800e15e:	e00c      	b.n	800e17a <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800e160:	78fb      	ldrb	r3, [r7, #3]
 800e162:	b25b      	sxtb	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	da0a      	bge.n	800e17e <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e168:	1cfb      	adds	r3, r7, #3
 800e16a:	2201      	movs	r2, #1
 800e16c:	4619      	mov	r1, r3
 800e16e:	2001      	movs	r0, #1
 800e170:	f7ff fdf6 	bl	800dd60 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800e174:	e003      	b.n	800e17e <_HandleIncomingPacket+0xbe>
    }
  }
 800e176:	bf00      	nop
 800e178:	e002      	b.n	800e180 <_HandleIncomingPacket+0xc0>
      break;
 800e17a:	bf00      	nop
 800e17c:	e000      	b.n	800e180 <_HandleIncomingPacket+0xc0>
      break;
 800e17e:	bf00      	nop
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08c      	sub	sp, #48	; 0x30
 800e18c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800e18e:	2301      	movs	r3, #1
 800e190:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800e192:	1d3b      	adds	r3, r7, #4
 800e194:	3301      	adds	r3, #1
 800e196:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e19c:	4b30      	ldr	r3, [pc, #192]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e19e:	695b      	ldr	r3, [r3, #20]
 800e1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1a2:	e00b      	b.n	800e1bc <_TrySendOverflowPacket+0x34>
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	1c59      	adds	r1, r3, #1
 800e1ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e1ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e1b2:	b2d2      	uxtb	r2, r2
 800e1b4:	701a      	strb	r2, [r3, #0]
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	09db      	lsrs	r3, r3, #7
 800e1ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1be:	2b7f      	cmp	r3, #127	; 0x7f
 800e1c0:	d8f0      	bhi.n	800e1a4 <_TrySendOverflowPacket+0x1c>
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e1c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ca:	b2d2      	uxtb	r2, r2
 800e1cc:	701a      	strb	r2, [r3, #0]
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e1d2:	4b24      	ldr	r3, [pc, #144]	; (800e264 <_TrySendOverflowPacket+0xdc>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e1d8:	4b21      	ldr	r3, [pc, #132]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	69ba      	ldr	r2, [r7, #24]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	623b      	str	r3, [r7, #32]
 800e1ea:	e00b      	b.n	800e204 <_TrySendOverflowPacket+0x7c>
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	1c59      	adds	r1, r3, #1
 800e1f4:	6279      	str	r1, [r7, #36]	; 0x24
 800e1f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e1fa:	b2d2      	uxtb	r2, r2
 800e1fc:	701a      	strb	r2, [r3, #0]
 800e1fe:	6a3b      	ldr	r3, [r7, #32]
 800e200:	09db      	lsrs	r3, r3, #7
 800e202:	623b      	str	r3, [r7, #32]
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	2b7f      	cmp	r3, #127	; 0x7f
 800e208:	d8f0      	bhi.n	800e1ec <_TrySendOverflowPacket+0x64>
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	627a      	str	r2, [r7, #36]	; 0x24
 800e210:	6a3a      	ldr	r2, [r7, #32]
 800e212:	b2d2      	uxtb	r2, r2
 800e214:	701a      	strb	r2, [r3, #0]
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800e21a:	1d3b      	adds	r3, r7, #4
 800e21c:	69fa      	ldr	r2, [r7, #28]
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	461a      	mov	r2, r3
 800e222:	1d3b      	adds	r3, r7, #4
 800e224:	4619      	mov	r1, r3
 800e226:	2001      	movs	r0, #1
 800e228:	f7f2 f80a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e22c:	4603      	mov	r3, r0
 800e22e:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d009      	beq.n	800e24a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e236:	4a0a      	ldr	r2, [pc, #40]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800e23c:	4b08      	ldr	r3, [pc, #32]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	3b01      	subs	r3, #1
 800e242:	b2da      	uxtb	r2, r3
 800e244:	4b06      	ldr	r3, [pc, #24]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e246:	701a      	strb	r2, [r3, #0]
 800e248:	e004      	b.n	800e254 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	3301      	adds	r3, #1
 800e250:	4a03      	ldr	r2, [pc, #12]	; (800e260 <_TrySendOverflowPacket+0xd8>)
 800e252:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800e254:	693b      	ldr	r3, [r7, #16]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3730      	adds	r7, #48	; 0x30
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20005df8 	.word	0x20005df8
 800e264:	e0001004 	.word	0xe0001004

0800e268 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08a      	sub	sp, #40	; 0x28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800e274:	4b63      	ldr	r3, [pc, #396]	; (800e404 <_SendPacket+0x19c>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d010      	beq.n	800e29e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e27c:	4b61      	ldr	r3, [pc, #388]	; (800e404 <_SendPacket+0x19c>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	f000 80a1 	beq.w	800e3c8 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800e286:	4b5f      	ldr	r3, [pc, #380]	; (800e404 <_SendPacket+0x19c>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d109      	bne.n	800e2a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800e28e:	f7ff ff7b 	bl	800e188 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800e292:	4b5c      	ldr	r3, [pc, #368]	; (800e404 <_SendPacket+0x19c>)
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	2b01      	cmp	r3, #1
 800e298:	f040 8098 	bne.w	800e3cc <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800e29c:	e001      	b.n	800e2a2 <_SendPacket+0x3a>
    goto Send;
 800e29e:	bf00      	nop
 800e2a0:	e000      	b.n	800e2a4 <_SendPacket+0x3c>
Send:
 800e2a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b1f      	cmp	r3, #31
 800e2a8:	d809      	bhi.n	800e2be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800e2aa:	4b56      	ldr	r3, [pc, #344]	; (800e404 <_SendPacket+0x19c>)
 800e2ac:	69da      	ldr	r2, [r3, #28]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f040 8089 	bne.w	800e3d0 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b17      	cmp	r3, #23
 800e2c2:	d807      	bhi.n	800e2d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	e03d      	b.n	800e350 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	2b7f      	cmp	r3, #127	; 0x7f
 800e2e0:	d912      	bls.n	800e308 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	09da      	lsrs	r2, r3, #7
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	3a01      	subs	r2, #1
 800e2fa:	60fa      	str	r2, [r7, #12]
 800e2fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e300:	b2da      	uxtb	r2, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	701a      	strb	r2, [r3, #0]
 800e306:	e006      	b.n	800e316 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	3b01      	subs	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	b2da      	uxtb	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b7f      	cmp	r3, #127	; 0x7f
 800e31a:	d912      	bls.n	800e342 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	09da      	lsrs	r2, r3, #7
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3b01      	subs	r3, #1
 800e324:	60fb      	str	r3, [r7, #12]
 800e326:	b2d2      	uxtb	r2, r2
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	3a01      	subs	r2, #1
 800e334:	60fa      	str	r2, [r7, #12]
 800e336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	701a      	strb	r2, [r3, #0]
 800e340:	e006      	b.n	800e350 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3b01      	subs	r3, #1
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e350:	4b2d      	ldr	r3, [pc, #180]	; (800e408 <_SendPacket+0x1a0>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e356:	4b2b      	ldr	r3, [pc, #172]	; (800e404 <_SendPacket+0x19c>)
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	69ba      	ldr	r2, [r7, #24]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	623b      	str	r3, [r7, #32]
 800e368:	e00b      	b.n	800e382 <_SendPacket+0x11a>
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	1c59      	adds	r1, r3, #1
 800e372:	6279      	str	r1, [r7, #36]	; 0x24
 800e374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e378:	b2d2      	uxtb	r2, r2
 800e37a:	701a      	strb	r2, [r3, #0]
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	09db      	lsrs	r3, r3, #7
 800e380:	623b      	str	r3, [r7, #32]
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	2b7f      	cmp	r3, #127	; 0x7f
 800e386:	d8f0      	bhi.n	800e36a <_SendPacket+0x102>
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	1c5a      	adds	r2, r3, #1
 800e38c:	627a      	str	r2, [r7, #36]	; 0x24
 800e38e:	6a3a      	ldr	r2, [r7, #32]
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	701a      	strb	r2, [r3, #0]
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	461a      	mov	r2, r3
 800e3a0:	68f9      	ldr	r1, [r7, #12]
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	f7f1 ff4c 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e3b2:	4a14      	ldr	r2, [pc, #80]	; (800e404 <_SendPacket+0x19c>)
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	60d3      	str	r3, [r2, #12]
 800e3b8:	e00b      	b.n	800e3d2 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800e3ba:	4b12      	ldr	r3, [pc, #72]	; (800e404 <_SendPacket+0x19c>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	b2da      	uxtb	r2, r3
 800e3c2:	4b10      	ldr	r3, [pc, #64]	; (800e404 <_SendPacket+0x19c>)
 800e3c4:	701a      	strb	r2, [r3, #0]
 800e3c6:	e004      	b.n	800e3d2 <_SendPacket+0x16a>
    goto SendDone;
 800e3c8:	bf00      	nop
 800e3ca:	e002      	b.n	800e3d2 <_SendPacket+0x16a>
      goto SendDone;
 800e3cc:	bf00      	nop
 800e3ce:	e000      	b.n	800e3d2 <_SendPacket+0x16a>
      goto SendDone;
 800e3d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800e3d2:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <_SendPacket+0x1a4>)
 800e3d4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <_SendPacket+0x1a4>)
 800e3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d00b      	beq.n	800e3fa <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800e3e2:	4b08      	ldr	r3, [pc, #32]	; (800e404 <_SendPacket+0x19c>)
 800e3e4:	789b      	ldrb	r3, [r3, #2]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d107      	bne.n	800e3fa <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800e3ea:	4b06      	ldr	r3, [pc, #24]	; (800e404 <_SendPacket+0x19c>)
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800e3f0:	f7ff fe66 	bl	800e0c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800e3f4:	4b03      	ldr	r3, [pc, #12]	; (800e404 <_SendPacket+0x19c>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800e3fa:	bf00      	nop
 800e3fc:	3728      	adds	r7, #40	; 0x28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20005df8 	.word	0x20005df8
 800e408:	e0001004 	.word	0xe0001004
 800e40c:	20005538 	.word	0x20005538

0800e410 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800e410:	b580      	push	{r7, lr}
 800e412:	b0a2      	sub	sp, #136	; 0x88
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800e426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800e432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e436:	2b00      	cmp	r3, #0
 800e438:	d01d      	beq.n	800e476 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800e43a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e43e:	2b25      	cmp	r3, #37	; 0x25
 800e440:	d1f1      	bne.n	800e426 <_VPrintHost+0x16>
      c = *p;
 800e442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	1d19      	adds	r1, r3, #4
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	6011      	str	r1, [r2, #0]
 800e454:	6819      	ldr	r1, [r3, #0]
 800e456:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e460:	460a      	mov	r2, r1
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	3388      	adds	r3, #136	; 0x88
 800e466:	443b      	add	r3, r7
 800e468:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800e46c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e470:	2b10      	cmp	r3, #16
 800e472:	d002      	beq.n	800e47a <_VPrintHost+0x6a>
    c = *p++;
 800e474:	e7d7      	b.n	800e426 <_VPrintHost+0x16>
      break;
 800e476:	bf00      	nop
 800e478:	e000      	b.n	800e47c <_VPrintHost+0x6c>
        break;
 800e47a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800e47c:	f3ef 8311 	mrs	r3, BASEPRI
 800e480:	f04f 0120 	mov.w	r1, #32
 800e484:	f381 8811 	msr	BASEPRI, r1
 800e488:	65bb      	str	r3, [r7, #88]	; 0x58
 800e48a:	483f      	ldr	r0, [pc, #252]	; (800e588 <_VPrintHost+0x178>)
 800e48c:	f7ff fe0b 	bl	800e0a6 <_PreparePacket>
 800e490:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e492:	2280      	movs	r2, #128	; 0x80
 800e494:	68f9      	ldr	r1, [r7, #12]
 800e496:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e498:	f7ff fdb8 	bl	800e00c <_EncodeStr>
 800e49c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800e49e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4a0:	677b      	str	r3, [r7, #116]	; 0x74
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	673b      	str	r3, [r7, #112]	; 0x70
 800e4a6:	e00b      	b.n	800e4c0 <_VPrintHost+0xb0>
 800e4a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ae:	1c59      	adds	r1, r3, #1
 800e4b0:	6779      	str	r1, [r7, #116]	; 0x74
 800e4b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e4b6:	b2d2      	uxtb	r2, r2
 800e4b8:	701a      	strb	r2, [r3, #0]
 800e4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4bc:	09db      	lsrs	r3, r3, #7
 800e4be:	673b      	str	r3, [r7, #112]	; 0x70
 800e4c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4c2:	2b7f      	cmp	r3, #127	; 0x7f
 800e4c4:	d8f0      	bhi.n	800e4a8 <_VPrintHost+0x98>
 800e4c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	677a      	str	r2, [r7, #116]	; 0x74
 800e4cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e4ce:	b2d2      	uxtb	r2, r2
 800e4d0:	701a      	strb	r2, [r3, #0]
 800e4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4d4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800e4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4de:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4e0:	e00b      	b.n	800e4fa <_VPrintHost+0xea>
 800e4e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4e8:	1c59      	adds	r1, r3, #1
 800e4ea:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e4ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e4f0:	b2d2      	uxtb	r2, r2
 800e4f2:	701a      	strb	r2, [r3, #0]
 800e4f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4f6:	09db      	lsrs	r3, r3, #7
 800e4f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4fc:	2b7f      	cmp	r3, #127	; 0x7f
 800e4fe:	d8f0      	bhi.n	800e4e2 <_VPrintHost+0xd2>
 800e500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e506:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e508:	b2d2      	uxtb	r2, r2
 800e50a:	701a      	strb	r2, [r3, #0]
 800e50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800e510:	f107 0314 	add.w	r3, r7, #20
 800e514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e518:	e022      	b.n	800e560 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800e51a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e51c:	667b      	str	r3, [r7, #100]	; 0x64
 800e51e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	663b      	str	r3, [r7, #96]	; 0x60
 800e526:	e00b      	b.n	800e540 <_VPrintHost+0x130>
 800e528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52e:	1c59      	adds	r1, r3, #1
 800e530:	6679      	str	r1, [r7, #100]	; 0x64
 800e532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e536:	b2d2      	uxtb	r2, r2
 800e538:	701a      	strb	r2, [r3, #0]
 800e53a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e53c:	09db      	lsrs	r3, r3, #7
 800e53e:	663b      	str	r3, [r7, #96]	; 0x60
 800e540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e542:	2b7f      	cmp	r3, #127	; 0x7f
 800e544:	d8f0      	bhi.n	800e528 <_VPrintHost+0x118>
 800e546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	667a      	str	r2, [r7, #100]	; 0x64
 800e54c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e54e:	b2d2      	uxtb	r2, r2
 800e550:	701a      	strb	r2, [r3, #0]
 800e552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e554:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800e556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e55a:	3304      	adds	r3, #4
 800e55c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e564:	1e5a      	subs	r2, r3, #1
 800e566:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1d5      	bne.n	800e51a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e56e:	221a      	movs	r2, #26
 800e570:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e572:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e574:	f7ff fe78 	bl	800e268 <_SendPacket>
    RECORD_END();
 800e578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e57a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3788      	adds	r7, #136	; 0x88
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	20005e28 	.word	0x20005e28

0800e58c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af02      	add	r7, sp, #8
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
 800e598:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e59a:	2300      	movs	r3, #0
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5a2:	4a14      	ldr	r2, [pc, #80]	; (800e5f4 <SEGGER_SYSVIEW_Init+0x68>)
 800e5a4:	4914      	ldr	r1, [pc, #80]	; (800e5f8 <SEGGER_SYSVIEW_Init+0x6c>)
 800e5a6:	2001      	movs	r0, #1
 800e5a8:	f7ff fc5c 	bl	800de64 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	4a12      	ldr	r2, [pc, #72]	; (800e5fc <SEGGER_SYSVIEW_Init+0x70>)
 800e5b4:	4910      	ldr	r1, [pc, #64]	; (800e5f8 <SEGGER_SYSVIEW_Init+0x6c>)
 800e5b6:	2001      	movs	r0, #1
 800e5b8:	f7ff fcbe 	bl	800df38 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800e5bc:	4b10      	ldr	r3, [pc, #64]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c2:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e5c4:	4b0f      	ldr	r3, [pc, #60]	; (800e604 <SEGGER_SYSVIEW_Init+0x78>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a0d      	ldr	r2, [pc, #52]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5ca:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800e5cc:	4a0c      	ldr	r2, [pc, #48]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800e5d2:	4a0b      	ldr	r2, [pc, #44]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800e5d8:	4a09      	ldr	r2, [pc, #36]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800e5de:	4a08      	ldr	r2, [pc, #32]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800e5e4:	4b06      	ldr	r3, [pc, #24]	; (800e600 <SEGGER_SYSVIEW_Init+0x74>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200059f0 	.word	0x200059f0
 800e5f8:	0800fc48 	.word	0x0800fc48
 800e5fc:	20005df0 	.word	0x20005df0
 800e600:	20005df8 	.word	0x20005df8
 800e604:	e0001004 	.word	0xe0001004

0800e608 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800e610:	4a04      	ldr	r2, [pc, #16]	; (800e624 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6113      	str	r3, [r2, #16]
}
 800e616:	bf00      	nop
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20005df8 	.word	0x20005df8

0800e628 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e630:	f3ef 8311 	mrs	r3, BASEPRI
 800e634:	f04f 0120 	mov.w	r1, #32
 800e638:	f381 8811 	msr	BASEPRI, r1
 800e63c:	60fb      	str	r3, [r7, #12]
 800e63e:	4808      	ldr	r0, [pc, #32]	; (800e660 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800e640:	f7ff fd31 	bl	800e0a6 <_PreparePacket>
 800e644:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	68b9      	ldr	r1, [r7, #8]
 800e64a:	68b8      	ldr	r0, [r7, #8]
 800e64c:	f7ff fe0c 	bl	800e268 <_SendPacket>
  RECORD_END();
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f383 8811 	msr	BASEPRI, r3
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20005e28 	.word	0x20005e28

0800e664 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e66e:	f3ef 8311 	mrs	r3, BASEPRI
 800e672:	f04f 0120 	mov.w	r1, #32
 800e676:	f381 8811 	msr	BASEPRI, r1
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	4816      	ldr	r0, [pc, #88]	; (800e6d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800e67e:	f7ff fd12 	bl	800e0a6 <_PreparePacket>
 800e682:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	61fb      	str	r3, [r7, #28]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	61bb      	str	r3, [r7, #24]
 800e690:	e00b      	b.n	800e6aa <SEGGER_SYSVIEW_RecordU32+0x46>
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	b2da      	uxtb	r2, r3
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	1c59      	adds	r1, r3, #1
 800e69a:	61f9      	str	r1, [r7, #28]
 800e69c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e6a0:	b2d2      	uxtb	r2, r2
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	09db      	lsrs	r3, r3, #7
 800e6a8:	61bb      	str	r3, [r7, #24]
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	2b7f      	cmp	r3, #127	; 0x7f
 800e6ae:	d8f0      	bhi.n	800e692 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	61fa      	str	r2, [r7, #28]
 800e6b6:	69ba      	ldr	r2, [r7, #24]
 800e6b8:	b2d2      	uxtb	r2, r2
 800e6ba:	701a      	strb	r2, [r3, #0]
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	68f9      	ldr	r1, [r7, #12]
 800e6c4:	6938      	ldr	r0, [r7, #16]
 800e6c6:	f7ff fdcf 	bl	800e268 <_SendPacket>
  RECORD_END();
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f383 8811 	msr	BASEPRI, r3
}
 800e6d0:	bf00      	nop
 800e6d2:	3720      	adds	r7, #32
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	20005e28 	.word	0x20005e28

0800e6dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08c      	sub	sp, #48	; 0x30
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e6e8:	f3ef 8311 	mrs	r3, BASEPRI
 800e6ec:	f04f 0120 	mov.w	r1, #32
 800e6f0:	f381 8811 	msr	BASEPRI, r1
 800e6f4:	61fb      	str	r3, [r7, #28]
 800e6f6:	4825      	ldr	r0, [pc, #148]	; (800e78c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800e6f8:	f7ff fcd5 	bl	800e0a6 <_PreparePacket>
 800e6fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	62bb      	str	r3, [r7, #40]	; 0x28
 800e70a:	e00b      	b.n	800e724 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800e70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	1c59      	adds	r1, r3, #1
 800e714:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e71a:	b2d2      	uxtb	r2, r2
 800e71c:	701a      	strb	r2, [r3, #0]
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	09db      	lsrs	r3, r3, #7
 800e722:	62bb      	str	r3, [r7, #40]	; 0x28
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	2b7f      	cmp	r3, #127	; 0x7f
 800e728:	d8f0      	bhi.n	800e70c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	1c5a      	adds	r2, r3, #1
 800e72e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e732:	b2d2      	uxtb	r2, r2
 800e734:	701a      	strb	r2, [r3, #0]
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	627b      	str	r3, [r7, #36]	; 0x24
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	623b      	str	r3, [r7, #32]
 800e742:	e00b      	b.n	800e75c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	b2da      	uxtb	r2, r3
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	1c59      	adds	r1, r3, #1
 800e74c:	6279      	str	r1, [r7, #36]	; 0x24
 800e74e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e752:	b2d2      	uxtb	r2, r2
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	09db      	lsrs	r3, r3, #7
 800e75a:	623b      	str	r3, [r7, #32]
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	2b7f      	cmp	r3, #127	; 0x7f
 800e760:	d8f0      	bhi.n	800e744 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	627a      	str	r2, [r7, #36]	; 0x24
 800e768:	6a3a      	ldr	r2, [r7, #32]
 800e76a:	b2d2      	uxtb	r2, r2
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	6979      	ldr	r1, [r7, #20]
 800e776:	69b8      	ldr	r0, [r7, #24]
 800e778:	f7ff fd76 	bl	800e268 <_SendPacket>
  RECORD_END();
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	f383 8811 	msr	BASEPRI, r3
}
 800e782:	bf00      	nop
 800e784:	3730      	adds	r7, #48	; 0x30
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20005e28 	.word	0x20005e28

0800e790 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800e790:	b580      	push	{r7, lr}
 800e792:	b08e      	sub	sp, #56	; 0x38
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800e79e:	f3ef 8311 	mrs	r3, BASEPRI
 800e7a2:	f04f 0120 	mov.w	r1, #32
 800e7a6:	f381 8811 	msr	BASEPRI, r1
 800e7aa:	61fb      	str	r3, [r7, #28]
 800e7ac:	4832      	ldr	r0, [pc, #200]	; (800e878 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800e7ae:	f7ff fc7a 	bl	800e0a6 <_PreparePacket>
 800e7b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	637b      	str	r3, [r7, #52]	; 0x34
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	633b      	str	r3, [r7, #48]	; 0x30
 800e7c0:	e00b      	b.n	800e7da <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c8:	1c59      	adds	r1, r3, #1
 800e7ca:	6379      	str	r1, [r7, #52]	; 0x34
 800e7cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e7d0:	b2d2      	uxtb	r2, r2
 800e7d2:	701a      	strb	r2, [r3, #0]
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	09db      	lsrs	r3, r3, #7
 800e7d8:	633b      	str	r3, [r7, #48]	; 0x30
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	2b7f      	cmp	r3, #127	; 0x7f
 800e7de:	d8f0      	bhi.n	800e7c2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	637a      	str	r2, [r7, #52]	; 0x34
 800e7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7e8:	b2d2      	uxtb	r2, r2
 800e7ea:	701a      	strb	r2, [r3, #0]
 800e7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7f8:	e00b      	b.n	800e812 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e800:	1c59      	adds	r1, r3, #1
 800e802:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e808:	b2d2      	uxtb	r2, r2
 800e80a:	701a      	strb	r2, [r3, #0]
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	09db      	lsrs	r3, r3, #7
 800e810:	62bb      	str	r3, [r7, #40]	; 0x28
 800e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e814:	2b7f      	cmp	r3, #127	; 0x7f
 800e816:	d8f0      	bhi.n	800e7fa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	1c5a      	adds	r2, r3, #1
 800e81c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e820:	b2d2      	uxtb	r2, r2
 800e822:	701a      	strb	r2, [r3, #0]
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	627b      	str	r3, [r7, #36]	; 0x24
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	623b      	str	r3, [r7, #32]
 800e830:	e00b      	b.n	800e84a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	b2da      	uxtb	r2, r3
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	1c59      	adds	r1, r3, #1
 800e83a:	6279      	str	r1, [r7, #36]	; 0x24
 800e83c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e840:	b2d2      	uxtb	r2, r2
 800e842:	701a      	strb	r2, [r3, #0]
 800e844:	6a3b      	ldr	r3, [r7, #32]
 800e846:	09db      	lsrs	r3, r3, #7
 800e848:	623b      	str	r3, [r7, #32]
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	2b7f      	cmp	r3, #127	; 0x7f
 800e84e:	d8f0      	bhi.n	800e832 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	627a      	str	r2, [r7, #36]	; 0x24
 800e856:	6a3a      	ldr	r2, [r7, #32]
 800e858:	b2d2      	uxtb	r2, r2
 800e85a:	701a      	strb	r2, [r3, #0]
 800e85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	6979      	ldr	r1, [r7, #20]
 800e864:	69b8      	ldr	r0, [r7, #24]
 800e866:	f7ff fcff 	bl	800e268 <_SendPacket>
  RECORD_END();
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	f383 8811 	msr	BASEPRI, r3
}
 800e870:	bf00      	nop
 800e872:	3738      	adds	r7, #56	; 0x38
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	20005e28 	.word	0x20005e28

0800e87c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b090      	sub	sp, #64	; 0x40
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800e88a:	f3ef 8311 	mrs	r3, BASEPRI
 800e88e:	f04f 0120 	mov.w	r1, #32
 800e892:	f381 8811 	msr	BASEPRI, r1
 800e896:	61fb      	str	r3, [r7, #28]
 800e898:	4840      	ldr	r0, [pc, #256]	; (800e99c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800e89a:	f7ff fc04 	bl	800e0a6 <_PreparePacket>
 800e89e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8ac:	e00b      	b.n	800e8c6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b4:	1c59      	adds	r1, r3, #1
 800e8b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e8b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e8bc:	b2d2      	uxtb	r2, r2
 800e8be:	701a      	strb	r2, [r3, #0]
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	09db      	lsrs	r3, r3, #7
 800e8c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	2b7f      	cmp	r3, #127	; 0x7f
 800e8ca:	d8f0      	bhi.n	800e8ae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800e8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e8d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8d4:	b2d2      	uxtb	r2, r2
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	637b      	str	r3, [r7, #52]	; 0x34
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e8e4:	e00b      	b.n	800e8fe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ec:	1c59      	adds	r1, r3, #1
 800e8ee:	6379      	str	r1, [r7, #52]	; 0x34
 800e8f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e8f4:	b2d2      	uxtb	r2, r2
 800e8f6:	701a      	strb	r2, [r3, #0]
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fa:	09db      	lsrs	r3, r3, #7
 800e8fc:	633b      	str	r3, [r7, #48]	; 0x30
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	2b7f      	cmp	r3, #127	; 0x7f
 800e902:	d8f0      	bhi.n	800e8e6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800e904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	637a      	str	r2, [r7, #52]	; 0x34
 800e90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e90c:	b2d2      	uxtb	r2, r2
 800e90e:	701a      	strb	r2, [r3, #0]
 800e910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e912:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e91c:	e00b      	b.n	800e936 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800e91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e920:	b2da      	uxtb	r2, r3
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	1c59      	adds	r1, r3, #1
 800e926:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e928:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e92c:	b2d2      	uxtb	r2, r2
 800e92e:	701a      	strb	r2, [r3, #0]
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	09db      	lsrs	r3, r3, #7
 800e934:	62bb      	str	r3, [r7, #40]	; 0x28
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	2b7f      	cmp	r3, #127	; 0x7f
 800e93a:	d8f0      	bhi.n	800e91e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	1c5a      	adds	r2, r3, #1
 800e940:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e944:	b2d2      	uxtb	r2, r2
 800e946:	701a      	strb	r2, [r3, #0]
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	627b      	str	r3, [r7, #36]	; 0x24
 800e950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e952:	623b      	str	r3, [r7, #32]
 800e954:	e00b      	b.n	800e96e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800e956:	6a3b      	ldr	r3, [r7, #32]
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	1c59      	adds	r1, r3, #1
 800e95e:	6279      	str	r1, [r7, #36]	; 0x24
 800e960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e964:	b2d2      	uxtb	r2, r2
 800e966:	701a      	strb	r2, [r3, #0]
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	09db      	lsrs	r3, r3, #7
 800e96c:	623b      	str	r3, [r7, #32]
 800e96e:	6a3b      	ldr	r3, [r7, #32]
 800e970:	2b7f      	cmp	r3, #127	; 0x7f
 800e972:	d8f0      	bhi.n	800e956 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	627a      	str	r2, [r7, #36]	; 0x24
 800e97a:	6a3a      	ldr	r2, [r7, #32]
 800e97c:	b2d2      	uxtb	r2, r2
 800e97e:	701a      	strb	r2, [r3, #0]
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	6979      	ldr	r1, [r7, #20]
 800e988:	69b8      	ldr	r0, [r7, #24]
 800e98a:	f7ff fc6d 	bl	800e268 <_SendPacket>
  RECORD_END();
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	f383 8811 	msr	BASEPRI, r3
}
 800e994:	bf00      	nop
 800e996:	3740      	adds	r7, #64	; 0x40
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	20005e28 	.word	0x20005e28

0800e9a0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b08c      	sub	sp, #48	; 0x30
 800e9a4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e9a6:	4b59      	ldr	r3, [pc, #356]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f040 80aa 	bne.w	800eb04 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800e9b0:	4b56      	ldr	r3, [pc, #344]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800e9b6:	f3ef 8311 	mrs	r3, BASEPRI
 800e9ba:	f04f 0120 	mov.w	r1, #32
 800e9be:	f381 8811 	msr	BASEPRI, r1
 800e9c2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800e9c4:	220a      	movs	r2, #10
 800e9c6:	4952      	ldr	r1, [pc, #328]	; (800eb10 <SEGGER_SYSVIEW_Start+0x170>)
 800e9c8:	2001      	movs	r0, #1
 800e9ca:	f7f1 fc39 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800e9d4:	200a      	movs	r0, #10
 800e9d6:	f7ff fe27 	bl	800e628 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800e9da:	f3ef 8311 	mrs	r3, BASEPRI
 800e9de:	f04f 0120 	mov.w	r1, #32
 800e9e2:	f381 8811 	msr	BASEPRI, r1
 800e9e6:	60bb      	str	r3, [r7, #8]
 800e9e8:	484a      	ldr	r0, [pc, #296]	; (800eb14 <SEGGER_SYSVIEW_Start+0x174>)
 800e9ea:	f7ff fb5c 	bl	800e0a6 <_PreparePacket>
 800e9ee:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9f8:	4b44      	ldr	r3, [pc, #272]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9fe:	e00b      	b.n	800ea18 <SEGGER_SYSVIEW_Start+0x78>
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea06:	1c59      	adds	r1, r3, #1
 800ea08:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ea0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea0e:	b2d2      	uxtb	r2, r2
 800ea10:	701a      	strb	r2, [r3, #0]
 800ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea14:	09db      	lsrs	r3, r3, #7
 800ea16:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea1c:	d8f0      	bhi.n	800ea00 <SEGGER_SYSVIEW_Start+0x60>
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea26:	b2d2      	uxtb	r2, r2
 800ea28:	701a      	strb	r2, [r3, #0]
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	627b      	str	r3, [r7, #36]	; 0x24
 800ea32:	4b36      	ldr	r3, [pc, #216]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	623b      	str	r3, [r7, #32]
 800ea38:	e00b      	b.n	800ea52 <SEGGER_SYSVIEW_Start+0xb2>
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea40:	1c59      	adds	r1, r3, #1
 800ea42:	6279      	str	r1, [r7, #36]	; 0x24
 800ea44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea48:	b2d2      	uxtb	r2, r2
 800ea4a:	701a      	strb	r2, [r3, #0]
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	09db      	lsrs	r3, r3, #7
 800ea50:	623b      	str	r3, [r7, #32]
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	2b7f      	cmp	r3, #127	; 0x7f
 800ea56:	d8f0      	bhi.n	800ea3a <SEGGER_SYSVIEW_Start+0x9a>
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	1c5a      	adds	r2, r3, #1
 800ea5c:	627a      	str	r2, [r7, #36]	; 0x24
 800ea5e:	6a3a      	ldr	r2, [r7, #32]
 800ea60:	b2d2      	uxtb	r2, r2
 800ea62:	701a      	strb	r2, [r3, #0]
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	61fb      	str	r3, [r7, #28]
 800ea6c:	4b27      	ldr	r3, [pc, #156]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	61bb      	str	r3, [r7, #24]
 800ea72:	e00b      	b.n	800ea8c <SEGGER_SYSVIEW_Start+0xec>
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	1c59      	adds	r1, r3, #1
 800ea7c:	61f9      	str	r1, [r7, #28]
 800ea7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea82:	b2d2      	uxtb	r2, r2
 800ea84:	701a      	strb	r2, [r3, #0]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	09db      	lsrs	r3, r3, #7
 800ea8a:	61bb      	str	r3, [r7, #24]
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	2b7f      	cmp	r3, #127	; 0x7f
 800ea90:	d8f0      	bhi.n	800ea74 <SEGGER_SYSVIEW_Start+0xd4>
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	61fa      	str	r2, [r7, #28]
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	b2d2      	uxtb	r2, r2
 800ea9c:	701a      	strb	r2, [r3, #0]
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	617b      	str	r3, [r7, #20]
 800eaa6:	2302      	movs	r3, #2
 800eaa8:	613b      	str	r3, [r7, #16]
 800eaaa:	e00b      	b.n	800eac4 <SEGGER_SYSVIEW_Start+0x124>
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	1c59      	adds	r1, r3, #1
 800eab4:	6179      	str	r1, [r7, #20]
 800eab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eaba:	b2d2      	uxtb	r2, r2
 800eabc:	701a      	strb	r2, [r3, #0]
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	09db      	lsrs	r3, r3, #7
 800eac2:	613b      	str	r3, [r7, #16]
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	2b7f      	cmp	r3, #127	; 0x7f
 800eac8:	d8f0      	bhi.n	800eaac <SEGGER_SYSVIEW_Start+0x10c>
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	617a      	str	r2, [r7, #20]
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	701a      	strb	r2, [r3, #0]
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800eada:	2218      	movs	r2, #24
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7ff fbc2 	bl	800e268 <_SendPacket>
      RECORD_END();
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800eaea:	4b08      	ldr	r3, [pc, #32]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d002      	beq.n	800eaf8 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800eaf2:	4b06      	ldr	r3, [pc, #24]	; (800eb0c <SEGGER_SYSVIEW_Start+0x16c>)
 800eaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf6:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800eaf8:	f000 f9ec 	bl	800eed4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800eafc:	f000 f9b2 	bl	800ee64 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800eb00:	f000 fbb2 	bl	800f268 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800eb04:	bf00      	nop
 800eb06:	3730      	adds	r7, #48	; 0x30
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20005df8 	.word	0x20005df8
 800eb10:	0800fd30 	.word	0x0800fd30
 800eb14:	20005e28 	.word	0x20005e28

0800eb18 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800eb1e:	f3ef 8311 	mrs	r3, BASEPRI
 800eb22:	f04f 0120 	mov.w	r1, #32
 800eb26:	f381 8811 	msr	BASEPRI, r1
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	480b      	ldr	r0, [pc, #44]	; (800eb5c <SEGGER_SYSVIEW_Stop+0x44>)
 800eb2e:	f7ff faba 	bl	800e0a6 <_PreparePacket>
 800eb32:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800eb34:	4b0a      	ldr	r3, [pc, #40]	; (800eb60 <SEGGER_SYSVIEW_Stop+0x48>)
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d007      	beq.n	800eb4c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800eb3c:	220b      	movs	r2, #11
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6838      	ldr	r0, [r7, #0]
 800eb42:	f7ff fb91 	bl	800e268 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800eb46:	4b06      	ldr	r3, [pc, #24]	; (800eb60 <SEGGER_SYSVIEW_Stop+0x48>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f383 8811 	msr	BASEPRI, r3
}
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20005e28 	.word	0x20005e28
 800eb60:	20005df8 	.word	0x20005df8

0800eb64 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08c      	sub	sp, #48	; 0x30
 800eb68:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800eb6a:	f3ef 8311 	mrs	r3, BASEPRI
 800eb6e:	f04f 0120 	mov.w	r1, #32
 800eb72:	f381 8811 	msr	BASEPRI, r1
 800eb76:	60fb      	str	r3, [r7, #12]
 800eb78:	4845      	ldr	r0, [pc, #276]	; (800ec90 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800eb7a:	f7ff fa94 	bl	800e0a6 <_PreparePacket>
 800eb7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb88:	4b42      	ldr	r3, [pc, #264]	; (800ec94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb8e:	e00b      	b.n	800eba8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	1c59      	adds	r1, r3, #1
 800eb98:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eb9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb9e:	b2d2      	uxtb	r2, r2
 800eba0:	701a      	strb	r2, [r3, #0]
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	09db      	lsrs	r3, r3, #7
 800eba6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebaa:	2b7f      	cmp	r3, #127	; 0x7f
 800ebac:	d8f0      	bhi.n	800eb90 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	1c5a      	adds	r2, r3, #1
 800ebb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb6:	b2d2      	uxtb	r2, r2
 800ebb8:	701a      	strb	r2, [r3, #0]
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc2:	4b34      	ldr	r3, [pc, #208]	; (800ec94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	623b      	str	r3, [r7, #32]
 800ebc8:	e00b      	b.n	800ebe2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	b2da      	uxtb	r2, r3
 800ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd0:	1c59      	adds	r1, r3, #1
 800ebd2:	6279      	str	r1, [r7, #36]	; 0x24
 800ebd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebd8:	b2d2      	uxtb	r2, r2
 800ebda:	701a      	strb	r2, [r3, #0]
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	09db      	lsrs	r3, r3, #7
 800ebe0:	623b      	str	r3, [r7, #32]
 800ebe2:	6a3b      	ldr	r3, [r7, #32]
 800ebe4:	2b7f      	cmp	r3, #127	; 0x7f
 800ebe6:	d8f0      	bhi.n	800ebca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	627a      	str	r2, [r7, #36]	; 0x24
 800ebee:	6a3a      	ldr	r2, [r7, #32]
 800ebf0:	b2d2      	uxtb	r2, r2
 800ebf2:	701a      	strb	r2, [r3, #0]
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	61fb      	str	r3, [r7, #28]
 800ebfc:	4b25      	ldr	r3, [pc, #148]	; (800ec94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	61bb      	str	r3, [r7, #24]
 800ec02:	e00b      	b.n	800ec1c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	1c59      	adds	r1, r3, #1
 800ec0c:	61f9      	str	r1, [r7, #28]
 800ec0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec12:	b2d2      	uxtb	r2, r2
 800ec14:	701a      	strb	r2, [r3, #0]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	09db      	lsrs	r3, r3, #7
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ec20:	d8f0      	bhi.n	800ec04 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	1c5a      	adds	r2, r3, #1
 800ec26:	61fa      	str	r2, [r7, #28]
 800ec28:	69ba      	ldr	r2, [r7, #24]
 800ec2a:	b2d2      	uxtb	r2, r2
 800ec2c:	701a      	strb	r2, [r3, #0]
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	2302      	movs	r3, #2
 800ec38:	613b      	str	r3, [r7, #16]
 800ec3a:	e00b      	b.n	800ec54 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	1c59      	adds	r1, r3, #1
 800ec44:	6179      	str	r1, [r7, #20]
 800ec46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec4a:	b2d2      	uxtb	r2, r2
 800ec4c:	701a      	strb	r2, [r3, #0]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	09db      	lsrs	r3, r3, #7
 800ec52:	613b      	str	r3, [r7, #16]
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	2b7f      	cmp	r3, #127	; 0x7f
 800ec58:	d8f0      	bhi.n	800ec3c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	617a      	str	r2, [r7, #20]
 800ec60:	693a      	ldr	r2, [r7, #16]
 800ec62:	b2d2      	uxtb	r2, r2
 800ec64:	701a      	strb	r2, [r3, #0]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ec6a:	2218      	movs	r2, #24
 800ec6c:	6879      	ldr	r1, [r7, #4]
 800ec6e:	68b8      	ldr	r0, [r7, #8]
 800ec70:	f7ff fafa 	bl	800e268 <_SendPacket>
  RECORD_END();
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ec7a:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800ec82:	4b04      	ldr	r3, [pc, #16]	; (800ec94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec86:	4798      	blx	r3
  }
}
 800ec88:	bf00      	nop
 800ec8a:	3730      	adds	r7, #48	; 0x30
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	20005e28 	.word	0x20005e28
 800ec94:	20005df8 	.word	0x20005df8

0800ec98 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b092      	sub	sp, #72	; 0x48
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800eca0:	f3ef 8311 	mrs	r3, BASEPRI
 800eca4:	f04f 0120 	mov.w	r1, #32
 800eca8:	f381 8811 	msr	BASEPRI, r1
 800ecac:	617b      	str	r3, [r7, #20]
 800ecae:	486b      	ldr	r0, [pc, #428]	; (800ee5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ecb0:	f7ff f9f9 	bl	800e0a6 <_PreparePacket>
 800ecb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	647b      	str	r3, [r7, #68]	; 0x44
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	4b67      	ldr	r3, [pc, #412]	; (800ee60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	089b      	lsrs	r3, r3, #2
 800ecca:	643b      	str	r3, [r7, #64]	; 0x40
 800eccc:	e00b      	b.n	800ece6 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800ecce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecd4:	1c59      	adds	r1, r3, #1
 800ecd6:	6479      	str	r1, [r7, #68]	; 0x44
 800ecd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ecdc:	b2d2      	uxtb	r2, r2
 800ecde:	701a      	strb	r2, [r3, #0]
 800ece0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece2:	09db      	lsrs	r3, r3, #7
 800ece4:	643b      	str	r3, [r7, #64]	; 0x40
 800ece6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece8:	2b7f      	cmp	r3, #127	; 0x7f
 800ecea:	d8f0      	bhi.n	800ecce <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800ecec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	647a      	str	r2, [r7, #68]	; 0x44
 800ecf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecf4:	b2d2      	uxtb	r2, r2
 800ecf6:	701a      	strb	r2, [r3, #0]
 800ecf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecfa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed06:	e00b      	b.n	800ed20 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800ed08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0e:	1c59      	adds	r1, r3, #1
 800ed10:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ed12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed16:	b2d2      	uxtb	r2, r2
 800ed18:	701a      	strb	r2, [r3, #0]
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1c:	09db      	lsrs	r3, r3, #7
 800ed1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed22:	2b7f      	cmp	r3, #127	; 0x7f
 800ed24:	d8f0      	bhi.n	800ed08 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800ed26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ed2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed2e:	b2d2      	uxtb	r2, r2
 800ed30:	701a      	strb	r2, [r3, #0]
 800ed32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed34:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f7ff f964 	bl	800e00c <_EncodeStr>
 800ed44:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800ed46:	2209      	movs	r2, #9
 800ed48:	68f9      	ldr	r1, [r7, #12]
 800ed4a:	6938      	ldr	r0, [r7, #16]
 800ed4c:	f7ff fa8c 	bl	800e268 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	637b      	str	r3, [r7, #52]	; 0x34
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	4b40      	ldr	r3, [pc, #256]	; (800ee60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	089b      	lsrs	r3, r3, #2
 800ed64:	633b      	str	r3, [r7, #48]	; 0x30
 800ed66:	e00b      	b.n	800ed80 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800ed68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6e:	1c59      	adds	r1, r3, #1
 800ed70:	6379      	str	r1, [r7, #52]	; 0x34
 800ed72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed76:	b2d2      	uxtb	r2, r2
 800ed78:	701a      	strb	r2, [r3, #0]
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	09db      	lsrs	r3, r3, #7
 800ed7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	2b7f      	cmp	r3, #127	; 0x7f
 800ed84:	d8f0      	bhi.n	800ed68 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800ed86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	637a      	str	r2, [r7, #52]	; 0x34
 800ed8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed8e:	b2d2      	uxtb	r2, r2
 800ed90:	701a      	strb	r2, [r3, #0]
 800ed92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800eda0:	e00b      	b.n	800edba <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800eda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	1c59      	adds	r1, r3, #1
 800edaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800edac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800edb0:	b2d2      	uxtb	r2, r2
 800edb2:	701a      	strb	r2, [r3, #0]
 800edb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb6:	09db      	lsrs	r3, r3, #7
 800edb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	2b7f      	cmp	r3, #127	; 0x7f
 800edbe:	d8f0      	bhi.n	800eda2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800edc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc2:	1c5a      	adds	r2, r3, #1
 800edc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800edc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc8:	b2d2      	uxtb	r2, r2
 800edca:	701a      	strb	r2, [r3, #0]
 800edcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	627b      	str	r3, [r7, #36]	; 0x24
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	623b      	str	r3, [r7, #32]
 800edda:	e00b      	b.n	800edf4 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede2:	1c59      	adds	r1, r3, #1
 800ede4:	6279      	str	r1, [r7, #36]	; 0x24
 800ede6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800edea:	b2d2      	uxtb	r2, r2
 800edec:	701a      	strb	r2, [r3, #0]
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	09db      	lsrs	r3, r3, #7
 800edf2:	623b      	str	r3, [r7, #32]
 800edf4:	6a3b      	ldr	r3, [r7, #32]
 800edf6:	2b7f      	cmp	r3, #127	; 0x7f
 800edf8:	d8f0      	bhi.n	800eddc <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	1c5a      	adds	r2, r3, #1
 800edfe:	627a      	str	r2, [r7, #36]	; 0x24
 800ee00:	6a3a      	ldr	r2, [r7, #32]
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	701a      	strb	r2, [r3, #0]
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	61fb      	str	r3, [r7, #28]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	61bb      	str	r3, [r7, #24]
 800ee12:	e00b      	b.n	800ee2c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	b2da      	uxtb	r2, r3
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	1c59      	adds	r1, r3, #1
 800ee1c:	61f9      	str	r1, [r7, #28]
 800ee1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee22:	b2d2      	uxtb	r2, r2
 800ee24:	701a      	strb	r2, [r3, #0]
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	09db      	lsrs	r3, r3, #7
 800ee2a:	61bb      	str	r3, [r7, #24]
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ee30:	d8f0      	bhi.n	800ee14 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	61fa      	str	r2, [r7, #28]
 800ee38:	69ba      	ldr	r2, [r7, #24]
 800ee3a:	b2d2      	uxtb	r2, r2
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ee42:	2215      	movs	r2, #21
 800ee44:	68f9      	ldr	r1, [r7, #12]
 800ee46:	6938      	ldr	r0, [r7, #16]
 800ee48:	f7ff fa0e 	bl	800e268 <_SendPacket>
  RECORD_END();
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	f383 8811 	msr	BASEPRI, r3
}
 800ee52:	bf00      	nop
 800ee54:	3748      	adds	r7, #72	; 0x48
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20005e28 	.word	0x20005e28
 800ee60:	20005df8 	.word	0x20005df8

0800ee64 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ee64:	b580      	push	{r7, lr}
 800ee66:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800ee68:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ee6a:	6a1b      	ldr	r3, [r3, #32]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d008      	beq.n	800ee82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800ee70:	4b05      	ldr	r3, [pc, #20]	; (800ee88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800ee7a:	4b03      	ldr	r3, [pc, #12]	; (800ee88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	4798      	blx	r3
  }
}
 800ee82:	bf00      	nop
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	20005df8 	.word	0x20005df8

0800ee8c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ee94:	f3ef 8311 	mrs	r3, BASEPRI
 800ee98:	f04f 0120 	mov.w	r1, #32
 800ee9c:	f381 8811 	msr	BASEPRI, r1
 800eea0:	617b      	str	r3, [r7, #20]
 800eea2:	480b      	ldr	r0, [pc, #44]	; (800eed0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800eea4:	f7ff f8ff 	bl	800e0a6 <_PreparePacket>
 800eea8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800eeaa:	2280      	movs	r2, #128	; 0x80
 800eeac:	6879      	ldr	r1, [r7, #4]
 800eeae:	6938      	ldr	r0, [r7, #16]
 800eeb0:	f7ff f8ac 	bl	800e00c <_EncodeStr>
 800eeb4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800eeb6:	220e      	movs	r2, #14
 800eeb8:	68f9      	ldr	r1, [r7, #12]
 800eeba:	6938      	ldr	r0, [r7, #16]
 800eebc:	f7ff f9d4 	bl	800e268 <_SendPacket>
  RECORD_END();
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	f383 8811 	msr	BASEPRI, r3
}
 800eec6:	bf00      	nop
 800eec8:	3718      	adds	r7, #24
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	20005e28 	.word	0x20005e28

0800eed4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800eeda:	4b15      	ldr	r3, [pc, #84]	; (800ef30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d01a      	beq.n	800ef18 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800eee2:	4b13      	ldr	r3, [pc, #76]	; (800ef30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d015      	beq.n	800ef18 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800eeec:	4b10      	ldr	r3, [pc, #64]	; (800ef30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800eeee:	6a1b      	ldr	r3, [r3, #32]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4798      	blx	r3
 800eef4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800eef8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800eefa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eefe:	f04f 0200 	mov.w	r2, #0
 800ef02:	f04f 0300 	mov.w	r3, #0
 800ef06:	000a      	movs	r2, r1
 800ef08:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	4621      	mov	r1, r4
 800ef10:	200d      	movs	r0, #13
 800ef12:	f7ff fbe3 	bl	800e6dc <SEGGER_SYSVIEW_RecordU32x2>
 800ef16:	e006      	b.n	800ef26 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800ef18:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	200c      	movs	r0, #12
 800ef20:	f7ff fba0 	bl	800e664 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd90      	pop	{r4, r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	20005df8 	.word	0x20005df8
 800ef34:	e0001004 	.word	0xe0001004

0800ef38 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ef3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ef42:	f04f 0120 	mov.w	r1, #32
 800ef46:	f381 8811 	msr	BASEPRI, r1
 800ef4a:	607b      	str	r3, [r7, #4]
 800ef4c:	4807      	ldr	r0, [pc, #28]	; (800ef6c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ef4e:	f7ff f8aa 	bl	800e0a6 <_PreparePacket>
 800ef52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ef54:	2211      	movs	r2, #17
 800ef56:	6839      	ldr	r1, [r7, #0]
 800ef58:	6838      	ldr	r0, [r7, #0]
 800ef5a:	f7ff f985 	bl	800e268 <_SendPacket>
  RECORD_END();
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f383 8811 	msr	BASEPRI, r3
}
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20005e28 	.word	0x20005e28

0800ef70 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ef78:	f3ef 8311 	mrs	r3, BASEPRI
 800ef7c:	f04f 0120 	mov.w	r1, #32
 800ef80:	f381 8811 	msr	BASEPRI, r1
 800ef84:	617b      	str	r3, [r7, #20]
 800ef86:	481a      	ldr	r0, [pc, #104]	; (800eff0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ef88:	f7ff f88d 	bl	800e0a6 <_PreparePacket>
 800ef8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ef92:	4b18      	ldr	r3, [pc, #96]	; (800eff4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	089b      	lsrs	r3, r3, #2
 800ef9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	61fb      	str	r3, [r7, #28]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	61bb      	str	r3, [r7, #24]
 800efa6:	e00b      	b.n	800efc0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	1c59      	adds	r1, r3, #1
 800efb0:	61f9      	str	r1, [r7, #28]
 800efb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800efb6:	b2d2      	uxtb	r2, r2
 800efb8:	701a      	strb	r2, [r3, #0]
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	09db      	lsrs	r3, r3, #7
 800efbe:	61bb      	str	r3, [r7, #24]
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	2b7f      	cmp	r3, #127	; 0x7f
 800efc4:	d8f0      	bhi.n	800efa8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	1c5a      	adds	r2, r3, #1
 800efca:	61fa      	str	r2, [r7, #28]
 800efcc:	69ba      	ldr	r2, [r7, #24]
 800efce:	b2d2      	uxtb	r2, r2
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800efd6:	2208      	movs	r2, #8
 800efd8:	68f9      	ldr	r1, [r7, #12]
 800efda:	6938      	ldr	r0, [r7, #16]
 800efdc:	f7ff f944 	bl	800e268 <_SendPacket>
  RECORD_END();
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	f383 8811 	msr	BASEPRI, r3
}
 800efe6:	bf00      	nop
 800efe8:	3720      	adds	r7, #32
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	20005e28 	.word	0x20005e28
 800eff4:	20005df8 	.word	0x20005df8

0800eff8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f000:	f3ef 8311 	mrs	r3, BASEPRI
 800f004:	f04f 0120 	mov.w	r1, #32
 800f008:	f381 8811 	msr	BASEPRI, r1
 800f00c:	617b      	str	r3, [r7, #20]
 800f00e:	481a      	ldr	r0, [pc, #104]	; (800f078 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800f010:	f7ff f849 	bl	800e0a6 <_PreparePacket>
 800f014:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f01a:	4b18      	ldr	r3, [pc, #96]	; (800f07c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	1ad3      	subs	r3, r2, r3
 800f022:	089b      	lsrs	r3, r3, #2
 800f024:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	61fb      	str	r3, [r7, #28]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	61bb      	str	r3, [r7, #24]
 800f02e:	e00b      	b.n	800f048 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	b2da      	uxtb	r2, r3
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	1c59      	adds	r1, r3, #1
 800f038:	61f9      	str	r1, [r7, #28]
 800f03a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f03e:	b2d2      	uxtb	r2, r2
 800f040:	701a      	strb	r2, [r3, #0]
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	09db      	lsrs	r3, r3, #7
 800f046:	61bb      	str	r3, [r7, #24]
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	2b7f      	cmp	r3, #127	; 0x7f
 800f04c:	d8f0      	bhi.n	800f030 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	61fa      	str	r2, [r7, #28]
 800f054:	69ba      	ldr	r2, [r7, #24]
 800f056:	b2d2      	uxtb	r2, r2
 800f058:	701a      	strb	r2, [r3, #0]
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800f05e:	2204      	movs	r2, #4
 800f060:	68f9      	ldr	r1, [r7, #12]
 800f062:	6938      	ldr	r0, [r7, #16]
 800f064:	f7ff f900 	bl	800e268 <_SendPacket>
  RECORD_END();
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f383 8811 	msr	BASEPRI, r3
}
 800f06e:	bf00      	nop
 800f070:	3720      	adds	r7, #32
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	20005e28 	.word	0x20005e28
 800f07c:	20005df8 	.word	0x20005df8

0800f080 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f088:	f3ef 8311 	mrs	r3, BASEPRI
 800f08c:	f04f 0120 	mov.w	r1, #32
 800f090:	f381 8811 	msr	BASEPRI, r1
 800f094:	617b      	str	r3, [r7, #20]
 800f096:	481a      	ldr	r0, [pc, #104]	; (800f100 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800f098:	f7ff f805 	bl	800e0a6 <_PreparePacket>
 800f09c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f0a2:	4b18      	ldr	r3, [pc, #96]	; (800f104 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	089b      	lsrs	r3, r3, #2
 800f0ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	61fb      	str	r3, [r7, #28]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	61bb      	str	r3, [r7, #24]
 800f0b6:	e00b      	b.n	800f0d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	1c59      	adds	r1, r3, #1
 800f0c0:	61f9      	str	r1, [r7, #28]
 800f0c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0c6:	b2d2      	uxtb	r2, r2
 800f0c8:	701a      	strb	r2, [r3, #0]
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	09db      	lsrs	r3, r3, #7
 800f0ce:	61bb      	str	r3, [r7, #24]
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	2b7f      	cmp	r3, #127	; 0x7f
 800f0d4:	d8f0      	bhi.n	800f0b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	1c5a      	adds	r2, r3, #1
 800f0da:	61fa      	str	r2, [r7, #28]
 800f0dc:	69ba      	ldr	r2, [r7, #24]
 800f0de:	b2d2      	uxtb	r2, r2
 800f0e0:	701a      	strb	r2, [r3, #0]
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800f0e6:	2206      	movs	r2, #6
 800f0e8:	68f9      	ldr	r1, [r7, #12]
 800f0ea:	6938      	ldr	r0, [r7, #16]
 800f0ec:	f7ff f8bc 	bl	800e268 <_SendPacket>
  RECORD_END();
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	f383 8811 	msr	BASEPRI, r3
}
 800f0f6:	bf00      	nop
 800f0f8:	3720      	adds	r7, #32
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	20005e28 	.word	0x20005e28
 800f104:	20005df8 	.word	0x20005df8

0800f108 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800f110:	4b05      	ldr	r3, [pc, #20]	; (800f128 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	089b      	lsrs	r3, r3, #2
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	370c      	adds	r7, #12
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop
 800f128:	20005df8 	.word	0x20005df8

0800f12c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08c      	sub	sp, #48	; 0x30
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800f136:	4b3b      	ldr	r3, [pc, #236]	; (800f224 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d06d      	beq.n	800f21a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800f13e:	4b39      	ldr	r3, [pc, #228]	; (800f224 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800f144:	2300      	movs	r3, #0
 800f146:	62bb      	str	r3, [r7, #40]	; 0x28
 800f148:	e008      	b.n	800f15c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	2b00      	cmp	r3, #0
 800f154:	d007      	beq.n	800f166 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800f156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f158:	3301      	adds	r3, #1
 800f15a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f160:	429a      	cmp	r2, r3
 800f162:	d3f2      	bcc.n	800f14a <SEGGER_SYSVIEW_SendModule+0x1e>
 800f164:	e000      	b.n	800f168 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800f166:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800f168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d055      	beq.n	800f21a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f16e:	f3ef 8311 	mrs	r3, BASEPRI
 800f172:	f04f 0120 	mov.w	r1, #32
 800f176:	f381 8811 	msr	BASEPRI, r1
 800f17a:	617b      	str	r3, [r7, #20]
 800f17c:	482a      	ldr	r0, [pc, #168]	; (800f228 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800f17e:	f7fe ff92 	bl	800e0a6 <_PreparePacket>
 800f182:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	627b      	str	r3, [r7, #36]	; 0x24
 800f18c:	79fb      	ldrb	r3, [r7, #7]
 800f18e:	623b      	str	r3, [r7, #32]
 800f190:	e00b      	b.n	800f1aa <SEGGER_SYSVIEW_SendModule+0x7e>
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	b2da      	uxtb	r2, r3
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	1c59      	adds	r1, r3, #1
 800f19a:	6279      	str	r1, [r7, #36]	; 0x24
 800f19c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1a0:	b2d2      	uxtb	r2, r2
 800f1a2:	701a      	strb	r2, [r3, #0]
 800f1a4:	6a3b      	ldr	r3, [r7, #32]
 800f1a6:	09db      	lsrs	r3, r3, #7
 800f1a8:	623b      	str	r3, [r7, #32]
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	2b7f      	cmp	r3, #127	; 0x7f
 800f1ae:	d8f0      	bhi.n	800f192 <SEGGER_SYSVIEW_SendModule+0x66>
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	627a      	str	r2, [r7, #36]	; 0x24
 800f1b6:	6a3a      	ldr	r2, [r7, #32]
 800f1b8:	b2d2      	uxtb	r2, r2
 800f1ba:	701a      	strb	r2, [r3, #0]
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	61fb      	str	r3, [r7, #28]
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	61bb      	str	r3, [r7, #24]
 800f1ca:	e00b      	b.n	800f1e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	1c59      	adds	r1, r3, #1
 800f1d4:	61f9      	str	r1, [r7, #28]
 800f1d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1da:	b2d2      	uxtb	r2, r2
 800f1dc:	701a      	strb	r2, [r3, #0]
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	09db      	lsrs	r3, r3, #7
 800f1e2:	61bb      	str	r3, [r7, #24]
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	2b7f      	cmp	r3, #127	; 0x7f
 800f1e8:	d8f0      	bhi.n	800f1cc <SEGGER_SYSVIEW_SendModule+0xa0>
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	61fa      	str	r2, [r7, #28]
 800f1f0:	69ba      	ldr	r2, [r7, #24]
 800f1f2:	b2d2      	uxtb	r2, r2
 800f1f4:	701a      	strb	r2, [r3, #0]
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2280      	movs	r2, #128	; 0x80
 800f200:	4619      	mov	r1, r3
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7fe ff02 	bl	800e00c <_EncodeStr>
 800f208:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800f20a:	2216      	movs	r2, #22
 800f20c:	68f9      	ldr	r1, [r7, #12]
 800f20e:	6938      	ldr	r0, [r7, #16]
 800f210:	f7ff f82a 	bl	800e268 <_SendPacket>
      RECORD_END();
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800f21a:	bf00      	nop
 800f21c:	3730      	adds	r7, #48	; 0x30
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20005e20 	.word	0x20005e20
 800f228:	20005e28 	.word	0x20005e28

0800f22c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800f232:	4b0c      	ldr	r3, [pc, #48]	; (800f264 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00f      	beq.n	800f25a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800f23a:	4b0a      	ldr	r3, [pc, #40]	; (800f264 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1f2      	bne.n	800f240 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800f25a:	bf00      	nop
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	20005e20 	.word	0x20005e20

0800f268 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f26e:	f3ef 8311 	mrs	r3, BASEPRI
 800f272:	f04f 0120 	mov.w	r1, #32
 800f276:	f381 8811 	msr	BASEPRI, r1
 800f27a:	60fb      	str	r3, [r7, #12]
 800f27c:	4817      	ldr	r0, [pc, #92]	; (800f2dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800f27e:	f7fe ff12 	bl	800e0a6 <_PreparePacket>
 800f282:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	4b14      	ldr	r3, [pc, #80]	; (800f2e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	613b      	str	r3, [r7, #16]
 800f292:	e00b      	b.n	800f2ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	b2da      	uxtb	r2, r3
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	1c59      	adds	r1, r3, #1
 800f29c:	6179      	str	r1, [r7, #20]
 800f29e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f2a2:	b2d2      	uxtb	r2, r2
 800f2a4:	701a      	strb	r2, [r3, #0]
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	09db      	lsrs	r3, r3, #7
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	2b7f      	cmp	r3, #127	; 0x7f
 800f2b0:	d8f0      	bhi.n	800f294 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	1c5a      	adds	r2, r3, #1
 800f2b6:	617a      	str	r2, [r7, #20]
 800f2b8:	693a      	ldr	r2, [r7, #16]
 800f2ba:	b2d2      	uxtb	r2, r2
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f2c2:	221b      	movs	r2, #27
 800f2c4:	6879      	ldr	r1, [r7, #4]
 800f2c6:	68b8      	ldr	r0, [r7, #8]
 800f2c8:	f7fe ffce 	bl	800e268 <_SendPacket>
  RECORD_END();
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f383 8811 	msr	BASEPRI, r3
}
 800f2d2:	bf00      	nop
 800f2d4:	3718      	adds	r7, #24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20005e28 	.word	0x20005e28
 800f2e0:	20005e24 	.word	0x20005e24

0800f2e4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800f2e4:	b40f      	push	{r0, r1, r2, r3}
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b082      	sub	sp, #8
 800f2ea:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800f2ec:	f107 0314 	add.w	r3, r7, #20
 800f2f0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800f2f2:	1d3b      	adds	r3, r7, #4
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	6938      	ldr	r0, [r7, #16]
 800f2fa:	f7ff f889 	bl	800e410 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800f2fe:	bf00      	nop
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f308:	b004      	add	sp, #16
 800f30a:	4770      	bx	lr

0800f30c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08a      	sub	sp, #40	; 0x28
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f314:	f3ef 8311 	mrs	r3, BASEPRI
 800f318:	f04f 0120 	mov.w	r1, #32
 800f31c:	f381 8811 	msr	BASEPRI, r1
 800f320:	617b      	str	r3, [r7, #20]
 800f322:	4827      	ldr	r0, [pc, #156]	; (800f3c0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800f324:	f7fe febf 	bl	800e0a6 <_PreparePacket>
 800f328:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f32a:	2280      	movs	r2, #128	; 0x80
 800f32c:	6879      	ldr	r1, [r7, #4]
 800f32e:	6938      	ldr	r0, [r7, #16]
 800f330:	f7fe fe6c 	bl	800e00c <_EncodeStr>
 800f334:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	627b      	str	r3, [r7, #36]	; 0x24
 800f33a:	2301      	movs	r3, #1
 800f33c:	623b      	str	r3, [r7, #32]
 800f33e:	e00b      	b.n	800f358 <SEGGER_SYSVIEW_Warn+0x4c>
 800f340:	6a3b      	ldr	r3, [r7, #32]
 800f342:	b2da      	uxtb	r2, r3
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	1c59      	adds	r1, r3, #1
 800f348:	6279      	str	r1, [r7, #36]	; 0x24
 800f34a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f34e:	b2d2      	uxtb	r2, r2
 800f350:	701a      	strb	r2, [r3, #0]
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	09db      	lsrs	r3, r3, #7
 800f356:	623b      	str	r3, [r7, #32]
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	2b7f      	cmp	r3, #127	; 0x7f
 800f35c:	d8f0      	bhi.n	800f340 <SEGGER_SYSVIEW_Warn+0x34>
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	627a      	str	r2, [r7, #36]	; 0x24
 800f364:	6a3a      	ldr	r2, [r7, #32]
 800f366:	b2d2      	uxtb	r2, r2
 800f368:	701a      	strb	r2, [r3, #0]
 800f36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	61fb      	str	r3, [r7, #28]
 800f372:	2300      	movs	r3, #0
 800f374:	61bb      	str	r3, [r7, #24]
 800f376:	e00b      	b.n	800f390 <SEGGER_SYSVIEW_Warn+0x84>
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	b2da      	uxtb	r2, r3
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	1c59      	adds	r1, r3, #1
 800f380:	61f9      	str	r1, [r7, #28]
 800f382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f386:	b2d2      	uxtb	r2, r2
 800f388:	701a      	strb	r2, [r3, #0]
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	09db      	lsrs	r3, r3, #7
 800f38e:	61bb      	str	r3, [r7, #24]
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	2b7f      	cmp	r3, #127	; 0x7f
 800f394:	d8f0      	bhi.n	800f378 <SEGGER_SYSVIEW_Warn+0x6c>
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	61fa      	str	r2, [r7, #28]
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	b2d2      	uxtb	r2, r2
 800f3a0:	701a      	strb	r2, [r3, #0]
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800f3a6:	221a      	movs	r2, #26
 800f3a8:	68f9      	ldr	r1, [r7, #12]
 800f3aa:	6938      	ldr	r0, [r7, #16]
 800f3ac:	f7fe ff5c 	bl	800e268 <_SendPacket>
  RECORD_END();
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f383 8811 	msr	BASEPRI, r3
}
 800f3b6:	bf00      	nop
 800f3b8:	3728      	adds	r7, #40	; 0x28
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20005e28 	.word	0x20005e28

0800f3c4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800f3c8:	4803      	ldr	r0, [pc, #12]	; (800f3d8 <_cbSendSystemDesc+0x14>)
 800f3ca:	f7ff fd5f 	bl	800ee8c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800f3ce:	4803      	ldr	r0, [pc, #12]	; (800f3dc <_cbSendSystemDesc+0x18>)
 800f3d0:	f7ff fd5c 	bl	800ee8c <SEGGER_SYSVIEW_SendSysDesc>
}
 800f3d4:	bf00      	nop
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	0800fc50 	.word	0x0800fc50
 800f3dc:	0800fc84 	.word	0x0800fc84

0800f3e0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800f3e4:	4b06      	ldr	r3, [pc, #24]	; (800f400 <SEGGER_SYSVIEW_Conf+0x20>)
 800f3e6:	6818      	ldr	r0, [r3, #0]
 800f3e8:	4b05      	ldr	r3, [pc, #20]	; (800f400 <SEGGER_SYSVIEW_Conf+0x20>)
 800f3ea:	6819      	ldr	r1, [r3, #0]
 800f3ec:	4b05      	ldr	r3, [pc, #20]	; (800f404 <SEGGER_SYSVIEW_Conf+0x24>)
 800f3ee:	4a06      	ldr	r2, [pc, #24]	; (800f408 <SEGGER_SYSVIEW_Conf+0x28>)
 800f3f0:	f7ff f8cc 	bl	800e58c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800f3f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f3f8:	f7ff f906 	bl	800e608 <SEGGER_SYSVIEW_SetRAMBase>
}
 800f3fc:	bf00      	nop
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20000004 	.word	0x20000004
 800f404:	0800f3c5 	.word	0x0800f3c5
 800f408:	0800fd3c 	.word	0x0800fd3c

0800f40c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800f40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f40e:	b085      	sub	sp, #20
 800f410:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800f412:	2300      	movs	r3, #0
 800f414:	607b      	str	r3, [r7, #4]
 800f416:	e048      	b.n	800f4aa <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800f418:	4929      	ldr	r1, [pc, #164]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	4613      	mov	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	440b      	add	r3, r1
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fd fb6d 	bl	800cb08 <uxTaskGetStackHighWaterMark>
 800f42e:	4601      	mov	r1, r0
 800f430:	4823      	ldr	r0, [pc, #140]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	4613      	mov	r3, r2
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	4413      	add	r3, r2
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4403      	add	r3, r0
 800f43e:	3310      	adds	r3, #16
 800f440:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800f442:	491f      	ldr	r1, [pc, #124]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	4613      	mov	r3, r2
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	4413      	add	r3, r2
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	440b      	add	r3, r1
 800f450:	6818      	ldr	r0, [r3, #0]
 800f452:	491b      	ldr	r1, [pc, #108]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	4613      	mov	r3, r2
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	4413      	add	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	440b      	add	r3, r1
 800f460:	3304      	adds	r3, #4
 800f462:	6819      	ldr	r1, [r3, #0]
 800f464:	4c16      	ldr	r4, [pc, #88]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	4613      	mov	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	4413      	add	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4423      	add	r3, r4
 800f472:	3308      	adds	r3, #8
 800f474:	681c      	ldr	r4, [r3, #0]
 800f476:	4d12      	ldr	r5, [pc, #72]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	4613      	mov	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4413      	add	r3, r2
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	442b      	add	r3, r5
 800f484:	330c      	adds	r3, #12
 800f486:	681d      	ldr	r5, [r3, #0]
 800f488:	4e0d      	ldr	r6, [pc, #52]	; (800f4c0 <_cbSendTaskList+0xb4>)
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	4613      	mov	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4433      	add	r3, r6
 800f496:	3310      	adds	r3, #16
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	462b      	mov	r3, r5
 800f49e:	4622      	mov	r2, r4
 800f4a0:	f000 f8be 	bl	800f620 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	607b      	str	r3, [r7, #4]
 800f4aa:	4b06      	ldr	r3, [pc, #24]	; (800f4c4 <_cbSendTaskList+0xb8>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d3b1      	bcc.n	800f418 <_cbSendTaskList+0xc>
  }
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop
 800f4b8:	370c      	adds	r7, #12
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	20005f0c 	.word	0x20005f0c
 800f4c4:	20005fac 	.word	0x20005fac

0800f4c8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800f4c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4cc:	b082      	sub	sp, #8
 800f4ce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800f4d0:	f7fc ffe4 	bl	800c49c <xTaskGetTickCountFromISR>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	469a      	mov	sl, r3
 800f4da:	4693      	mov	fp, r2
 800f4dc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800f4e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	f04f 0a00 	mov.w	sl, #0
 800f4ec:	f04f 0b00 	mov.w	fp, #0
 800f4f0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f4f4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800f4f8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800f4fc:	4652      	mov	r2, sl
 800f4fe:	465b      	mov	r3, fp
 800f500:	1a14      	subs	r4, r2, r0
 800f502:	eb63 0501 	sbc.w	r5, r3, r1
 800f506:	f04f 0200 	mov.w	r2, #0
 800f50a:	f04f 0300 	mov.w	r3, #0
 800f50e:	00ab      	lsls	r3, r5, #2
 800f510:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f514:	00a2      	lsls	r2, r4, #2
 800f516:	4614      	mov	r4, r2
 800f518:	461d      	mov	r5, r3
 800f51a:	eb14 0800 	adds.w	r8, r4, r0
 800f51e:	eb45 0901 	adc.w	r9, r5, r1
 800f522:	f04f 0200 	mov.w	r2, #0
 800f526:	f04f 0300 	mov.w	r3, #0
 800f52a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f52e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f536:	4690      	mov	r8, r2
 800f538:	4699      	mov	r9, r3
 800f53a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800f53e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f542:	4610      	mov	r0, r2
 800f544:	4619      	mov	r1, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800f550 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f55e:	2205      	movs	r2, #5
 800f560:	492b      	ldr	r1, [pc, #172]	; (800f610 <SYSVIEW_AddTask+0xc0>)
 800f562:	68b8      	ldr	r0, [r7, #8]
 800f564:	f000 f8a4 	bl	800f6b0 <memcmp>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d04b      	beq.n	800f606 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f56e:	4b29      	ldr	r3, [pc, #164]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b07      	cmp	r3, #7
 800f574:	d903      	bls.n	800f57e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f576:	4828      	ldr	r0, [pc, #160]	; (800f618 <SYSVIEW_AddTask+0xc8>)
 800f578:	f7ff fec8 	bl	800f30c <SEGGER_SYSVIEW_Warn>
    return;
 800f57c:	e044      	b.n	800f608 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f57e:	4b25      	ldr	r3, [pc, #148]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	4926      	ldr	r1, [pc, #152]	; (800f61c <SYSVIEW_AddTask+0xcc>)
 800f584:	4613      	mov	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	4413      	add	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	440b      	add	r3, r1
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800f592:	4b20      	ldr	r3, [pc, #128]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	4921      	ldr	r1, [pc, #132]	; (800f61c <SYSVIEW_AddTask+0xcc>)
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	440b      	add	r3, r1
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	491b      	ldr	r1, [pc, #108]	; (800f61c <SYSVIEW_AddTask+0xcc>)
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	4413      	add	r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	440b      	add	r3, r1
 800f5b8:	3308      	adds	r3, #8
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800f5be:	4b15      	ldr	r3, [pc, #84]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	4916      	ldr	r1, [pc, #88]	; (800f61c <SYSVIEW_AddTask+0xcc>)
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	440b      	add	r3, r1
 800f5ce:	330c      	adds	r3, #12
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f5d4:	4b0f      	ldr	r3, [pc, #60]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	4910      	ldr	r1, [pc, #64]	; (800f61c <SYSVIEW_AddTask+0xcc>)
 800f5da:	4613      	mov	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	440b      	add	r3, r1
 800f5e4:	3310      	adds	r3, #16
 800f5e6:	69ba      	ldr	r2, [r7, #24]
 800f5e8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800f5ea:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	4a08      	ldr	r2, [pc, #32]	; (800f614 <SYSVIEW_AddTask+0xc4>)
 800f5f2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	9300      	str	r3, [sp, #0]
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	68b9      	ldr	r1, [r7, #8]
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f000 f80e 	bl	800f620 <SYSVIEW_SendTaskInfo>
 800f604:	e000      	b.n	800f608 <SYSVIEW_AddTask+0xb8>
    return;
 800f606:	bf00      	nop

}
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	0800fc94 	.word	0x0800fc94
 800f614:	20005fac 	.word	0x20005fac
 800f618:	0800fc9c 	.word	0x0800fc9c
 800f61c:	20005f0c 	.word	0x20005f0c

0800f620 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800f620:	b580      	push	{r7, lr}
 800f622:	b08a      	sub	sp, #40	; 0x28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800f62e:	f107 0314 	add.w	r3, r7, #20
 800f632:	2214      	movs	r2, #20
 800f634:	2100      	movs	r1, #0
 800f636:	4618      	mov	r0, r3
 800f638:	f000 f858 	bl	800f6ec <memset>
  TaskInfo.TaskID     = TaskID;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f650:	f107 0314 	add.w	r3, r7, #20
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff fb1f 	bl	800ec98 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f65a:	bf00      	nop
 800f65c:	3728      	adds	r7, #40	; 0x28
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <__libc_init_array>:
 800f664:	b570      	push	{r4, r5, r6, lr}
 800f666:	4d0d      	ldr	r5, [pc, #52]	; (800f69c <__libc_init_array+0x38>)
 800f668:	4c0d      	ldr	r4, [pc, #52]	; (800f6a0 <__libc_init_array+0x3c>)
 800f66a:	1b64      	subs	r4, r4, r5
 800f66c:	10a4      	asrs	r4, r4, #2
 800f66e:	2600      	movs	r6, #0
 800f670:	42a6      	cmp	r6, r4
 800f672:	d109      	bne.n	800f688 <__libc_init_array+0x24>
 800f674:	4d0b      	ldr	r5, [pc, #44]	; (800f6a4 <__libc_init_array+0x40>)
 800f676:	4c0c      	ldr	r4, [pc, #48]	; (800f6a8 <__libc_init_array+0x44>)
 800f678:	f000 f902 	bl	800f880 <_init>
 800f67c:	1b64      	subs	r4, r4, r5
 800f67e:	10a4      	asrs	r4, r4, #2
 800f680:	2600      	movs	r6, #0
 800f682:	42a6      	cmp	r6, r4
 800f684:	d105      	bne.n	800f692 <__libc_init_array+0x2e>
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	f855 3b04 	ldr.w	r3, [r5], #4
 800f68c:	4798      	blx	r3
 800f68e:	3601      	adds	r6, #1
 800f690:	e7ee      	b.n	800f670 <__libc_init_array+0xc>
 800f692:	f855 3b04 	ldr.w	r3, [r5], #4
 800f696:	4798      	blx	r3
 800f698:	3601      	adds	r6, #1
 800f69a:	e7f2      	b.n	800f682 <__libc_init_array+0x1e>
 800f69c:	0800fdac 	.word	0x0800fdac
 800f6a0:	0800fdac 	.word	0x0800fdac
 800f6a4:	0800fdac 	.word	0x0800fdac
 800f6a8:	0800fdb0 	.word	0x0800fdb0

0800f6ac <__retarget_lock_acquire_recursive>:
 800f6ac:	4770      	bx	lr

0800f6ae <__retarget_lock_release_recursive>:
 800f6ae:	4770      	bx	lr

0800f6b0 <memcmp>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	3901      	subs	r1, #1
 800f6b4:	4402      	add	r2, r0
 800f6b6:	4290      	cmp	r0, r2
 800f6b8:	d101      	bne.n	800f6be <memcmp+0xe>
 800f6ba:	2000      	movs	r0, #0
 800f6bc:	e005      	b.n	800f6ca <memcmp+0x1a>
 800f6be:	7803      	ldrb	r3, [r0, #0]
 800f6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	d001      	beq.n	800f6cc <memcmp+0x1c>
 800f6c8:	1b18      	subs	r0, r3, r4
 800f6ca:	bd10      	pop	{r4, pc}
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	e7f2      	b.n	800f6b6 <memcmp+0x6>

0800f6d0 <memcpy>:
 800f6d0:	440a      	add	r2, r1
 800f6d2:	4291      	cmp	r1, r2
 800f6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6d8:	d100      	bne.n	800f6dc <memcpy+0xc>
 800f6da:	4770      	bx	lr
 800f6dc:	b510      	push	{r4, lr}
 800f6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6e6:	4291      	cmp	r1, r2
 800f6e8:	d1f9      	bne.n	800f6de <memcpy+0xe>
 800f6ea:	bd10      	pop	{r4, pc}

0800f6ec <memset>:
 800f6ec:	4402      	add	r2, r0
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d100      	bne.n	800f6f6 <memset+0xa>
 800f6f4:	4770      	bx	lr
 800f6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f6fa:	e7f9      	b.n	800f6f0 <memset+0x4>

0800f6fc <cleanup_glue>:
 800f6fc:	b538      	push	{r3, r4, r5, lr}
 800f6fe:	460c      	mov	r4, r1
 800f700:	6809      	ldr	r1, [r1, #0]
 800f702:	4605      	mov	r5, r0
 800f704:	b109      	cbz	r1, 800f70a <cleanup_glue+0xe>
 800f706:	f7ff fff9 	bl	800f6fc <cleanup_glue>
 800f70a:	4621      	mov	r1, r4
 800f70c:	4628      	mov	r0, r5
 800f70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f712:	f000 b869 	b.w	800f7e8 <_free_r>
	...

0800f718 <_reclaim_reent>:
 800f718:	4b2c      	ldr	r3, [pc, #176]	; (800f7cc <_reclaim_reent+0xb4>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4283      	cmp	r3, r0
 800f71e:	b570      	push	{r4, r5, r6, lr}
 800f720:	4604      	mov	r4, r0
 800f722:	d051      	beq.n	800f7c8 <_reclaim_reent+0xb0>
 800f724:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f726:	b143      	cbz	r3, 800f73a <_reclaim_reent+0x22>
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d14a      	bne.n	800f7c4 <_reclaim_reent+0xac>
 800f72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f730:	6819      	ldr	r1, [r3, #0]
 800f732:	b111      	cbz	r1, 800f73a <_reclaim_reent+0x22>
 800f734:	4620      	mov	r0, r4
 800f736:	f000 f857 	bl	800f7e8 <_free_r>
 800f73a:	6961      	ldr	r1, [r4, #20]
 800f73c:	b111      	cbz	r1, 800f744 <_reclaim_reent+0x2c>
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 f852 	bl	800f7e8 <_free_r>
 800f744:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f746:	b111      	cbz	r1, 800f74e <_reclaim_reent+0x36>
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 f84d 	bl	800f7e8 <_free_r>
 800f74e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f750:	b111      	cbz	r1, 800f758 <_reclaim_reent+0x40>
 800f752:	4620      	mov	r0, r4
 800f754:	f000 f848 	bl	800f7e8 <_free_r>
 800f758:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f75a:	b111      	cbz	r1, 800f762 <_reclaim_reent+0x4a>
 800f75c:	4620      	mov	r0, r4
 800f75e:	f000 f843 	bl	800f7e8 <_free_r>
 800f762:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f764:	b111      	cbz	r1, 800f76c <_reclaim_reent+0x54>
 800f766:	4620      	mov	r0, r4
 800f768:	f000 f83e 	bl	800f7e8 <_free_r>
 800f76c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f76e:	b111      	cbz	r1, 800f776 <_reclaim_reent+0x5e>
 800f770:	4620      	mov	r0, r4
 800f772:	f000 f839 	bl	800f7e8 <_free_r>
 800f776:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f778:	b111      	cbz	r1, 800f780 <_reclaim_reent+0x68>
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 f834 	bl	800f7e8 <_free_r>
 800f780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f782:	b111      	cbz	r1, 800f78a <_reclaim_reent+0x72>
 800f784:	4620      	mov	r0, r4
 800f786:	f000 f82f 	bl	800f7e8 <_free_r>
 800f78a:	69a3      	ldr	r3, [r4, #24]
 800f78c:	b1e3      	cbz	r3, 800f7c8 <_reclaim_reent+0xb0>
 800f78e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f790:	4620      	mov	r0, r4
 800f792:	4798      	blx	r3
 800f794:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f796:	b1b9      	cbz	r1, 800f7c8 <_reclaim_reent+0xb0>
 800f798:	4620      	mov	r0, r4
 800f79a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f79e:	f7ff bfad 	b.w	800f6fc <cleanup_glue>
 800f7a2:	5949      	ldr	r1, [r1, r5]
 800f7a4:	b941      	cbnz	r1, 800f7b8 <_reclaim_reent+0xa0>
 800f7a6:	3504      	adds	r5, #4
 800f7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7aa:	2d80      	cmp	r5, #128	; 0x80
 800f7ac:	68d9      	ldr	r1, [r3, #12]
 800f7ae:	d1f8      	bne.n	800f7a2 <_reclaim_reent+0x8a>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 f819 	bl	800f7e8 <_free_r>
 800f7b6:	e7ba      	b.n	800f72e <_reclaim_reent+0x16>
 800f7b8:	680e      	ldr	r6, [r1, #0]
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 f814 	bl	800f7e8 <_free_r>
 800f7c0:	4631      	mov	r1, r6
 800f7c2:	e7ef      	b.n	800f7a4 <_reclaim_reent+0x8c>
 800f7c4:	2500      	movs	r5, #0
 800f7c6:	e7ef      	b.n	800f7a8 <_reclaim_reent+0x90>
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ca:	bf00      	nop
 800f7cc:	20000014 	.word	0x20000014

0800f7d0 <__malloc_lock>:
 800f7d0:	4801      	ldr	r0, [pc, #4]	; (800f7d8 <__malloc_lock+0x8>)
 800f7d2:	f7ff bf6b 	b.w	800f6ac <__retarget_lock_acquire_recursive>
 800f7d6:	bf00      	nop
 800f7d8:	20005fb0 	.word	0x20005fb0

0800f7dc <__malloc_unlock>:
 800f7dc:	4801      	ldr	r0, [pc, #4]	; (800f7e4 <__malloc_unlock+0x8>)
 800f7de:	f7ff bf66 	b.w	800f6ae <__retarget_lock_release_recursive>
 800f7e2:	bf00      	nop
 800f7e4:	20005fb0 	.word	0x20005fb0

0800f7e8 <_free_r>:
 800f7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7ea:	2900      	cmp	r1, #0
 800f7ec:	d044      	beq.n	800f878 <_free_r+0x90>
 800f7ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7f2:	9001      	str	r0, [sp, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f7fa:	bfb8      	it	lt
 800f7fc:	18e4      	addlt	r4, r4, r3
 800f7fe:	f7ff ffe7 	bl	800f7d0 <__malloc_lock>
 800f802:	4a1e      	ldr	r2, [pc, #120]	; (800f87c <_free_r+0x94>)
 800f804:	9801      	ldr	r0, [sp, #4]
 800f806:	6813      	ldr	r3, [r2, #0]
 800f808:	b933      	cbnz	r3, 800f818 <_free_r+0x30>
 800f80a:	6063      	str	r3, [r4, #4]
 800f80c:	6014      	str	r4, [r2, #0]
 800f80e:	b003      	add	sp, #12
 800f810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f814:	f7ff bfe2 	b.w	800f7dc <__malloc_unlock>
 800f818:	42a3      	cmp	r3, r4
 800f81a:	d908      	bls.n	800f82e <_free_r+0x46>
 800f81c:	6825      	ldr	r5, [r4, #0]
 800f81e:	1961      	adds	r1, r4, r5
 800f820:	428b      	cmp	r3, r1
 800f822:	bf01      	itttt	eq
 800f824:	6819      	ldreq	r1, [r3, #0]
 800f826:	685b      	ldreq	r3, [r3, #4]
 800f828:	1949      	addeq	r1, r1, r5
 800f82a:	6021      	streq	r1, [r4, #0]
 800f82c:	e7ed      	b.n	800f80a <_free_r+0x22>
 800f82e:	461a      	mov	r2, r3
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	b10b      	cbz	r3, 800f838 <_free_r+0x50>
 800f834:	42a3      	cmp	r3, r4
 800f836:	d9fa      	bls.n	800f82e <_free_r+0x46>
 800f838:	6811      	ldr	r1, [r2, #0]
 800f83a:	1855      	adds	r5, r2, r1
 800f83c:	42a5      	cmp	r5, r4
 800f83e:	d10b      	bne.n	800f858 <_free_r+0x70>
 800f840:	6824      	ldr	r4, [r4, #0]
 800f842:	4421      	add	r1, r4
 800f844:	1854      	adds	r4, r2, r1
 800f846:	42a3      	cmp	r3, r4
 800f848:	6011      	str	r1, [r2, #0]
 800f84a:	d1e0      	bne.n	800f80e <_free_r+0x26>
 800f84c:	681c      	ldr	r4, [r3, #0]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	6053      	str	r3, [r2, #4]
 800f852:	4421      	add	r1, r4
 800f854:	6011      	str	r1, [r2, #0]
 800f856:	e7da      	b.n	800f80e <_free_r+0x26>
 800f858:	d902      	bls.n	800f860 <_free_r+0x78>
 800f85a:	230c      	movs	r3, #12
 800f85c:	6003      	str	r3, [r0, #0]
 800f85e:	e7d6      	b.n	800f80e <_free_r+0x26>
 800f860:	6825      	ldr	r5, [r4, #0]
 800f862:	1961      	adds	r1, r4, r5
 800f864:	428b      	cmp	r3, r1
 800f866:	bf04      	itt	eq
 800f868:	6819      	ldreq	r1, [r3, #0]
 800f86a:	685b      	ldreq	r3, [r3, #4]
 800f86c:	6063      	str	r3, [r4, #4]
 800f86e:	bf04      	itt	eq
 800f870:	1949      	addeq	r1, r1, r5
 800f872:	6021      	streq	r1, [r4, #0]
 800f874:	6054      	str	r4, [r2, #4]
 800f876:	e7ca      	b.n	800f80e <_free_r+0x26>
 800f878:	b003      	add	sp, #12
 800f87a:	bd30      	pop	{r4, r5, pc}
 800f87c:	20005fb4 	.word	0x20005fb4

0800f880 <_init>:
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f882:	bf00      	nop
 800f884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f886:	bc08      	pop	{r3}
 800f888:	469e      	mov	lr, r3
 800f88a:	4770      	bx	lr

0800f88c <_fini>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	bf00      	nop
 800f890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f892:	bc08      	pop	{r3}
 800f894:	469e      	mov	lr, r3
 800f896:	4770      	bx	lr
