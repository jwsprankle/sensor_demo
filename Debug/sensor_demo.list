
sensor_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f828  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800fa28  0800fa28  0001fa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff90  0800ff90  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff90  0800ff90  0001ff90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff98  0800ff98  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff98  0800ff98  0001ff98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff9c  0800ff9c  0001ff9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ffa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  08010018  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  080100b8  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e00  200001b8  08010158  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005fb8  08010158  00025fb8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043f7f  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000061e6  00000000  00000000  00064165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003480  00000000  00000000  0006a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000031e8  00000000  00000000  0006d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e5f9  00000000  00000000  000709b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00035ea6  00000000  00000000  0009efb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011f947  00000000  00000000  000d4e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f479e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e50c  00000000  00000000  001f47f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fa10 	.word	0x0800fa10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	0800fa10 	.word	0x0800fa10

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80002c8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d32e      	bcc.n	80002ba <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d312      	bcc.n	800028c <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000284:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000286:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028a:	4770      	bx	lr

0800028c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800028c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800028e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000290:	d317      	bcc.n	80002c2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000292:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000294:	1b12      	subs	r2, r2, r4

08000296 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000296:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800029e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a0:	d1f9      	bne.n	8000296 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a4:	d005      	beq.n	80002b2 <_No2ChunkNeeded>

080002a6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002aa:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002ae:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b0:	d1f9      	bne.n	80002a6 <_LoopCopyAfterWrapAround>

080002b2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002b2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002b4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002b8:	4770      	bx	lr

080002ba <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002ba:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002bc:	3801      	subs	r0, #1
        CMP      R0,R2
 80002be:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c0:	d2d1      	bcs.n	8000266 <_Case4>

080002c2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002c2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002c4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002c6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002c8:	20005538 	.word	0x20005538

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295
 80002e0:	f000 b974 	b.w	80005cc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f000 f806 	bl	80002fc <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__udivmoddi4>:
 80002fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000300:	9d08      	ldr	r5, [sp, #32]
 8000302:	4604      	mov	r4, r0
 8000304:	468e      	mov	lr, r1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d14d      	bne.n	80003a6 <__udivmoddi4+0xaa>
 800030a:	428a      	cmp	r2, r1
 800030c:	4694      	mov	ip, r2
 800030e:	d969      	bls.n	80003e4 <__udivmoddi4+0xe8>
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	b152      	cbz	r2, 800032c <__udivmoddi4+0x30>
 8000316:	fa01 f302 	lsl.w	r3, r1, r2
 800031a:	f1c2 0120 	rsb	r1, r2, #32
 800031e:	fa20 f101 	lsr.w	r1, r0, r1
 8000322:	fa0c fc02 	lsl.w	ip, ip, r2
 8000326:	ea41 0e03 	orr.w	lr, r1, r3
 800032a:	4094      	lsls	r4, r2
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	0c21      	lsrs	r1, r4, #16
 8000332:	fbbe f6f8 	udiv	r6, lr, r8
 8000336:	fa1f f78c 	uxth.w	r7, ip
 800033a:	fb08 e316 	mls	r3, r8, r6, lr
 800033e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000342:	fb06 f107 	mul.w	r1, r6, r7
 8000346:	4299      	cmp	r1, r3
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x64>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 811f 	bcs.w	8000594 <__udivmoddi4+0x298>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 811c 	bls.w	8000594 <__udivmoddi4+0x298>
 800035c:	3e02      	subs	r6, #2
 800035e:	4463      	add	r3, ip
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 f707 	mul.w	r7, r0, r7
 8000374:	42a7      	cmp	r7, r4
 8000376:	d90a      	bls.n	800038e <__udivmoddi4+0x92>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	f080 810a 	bcs.w	8000598 <__udivmoddi4+0x29c>
 8000384:	42a7      	cmp	r7, r4
 8000386:	f240 8107 	bls.w	8000598 <__udivmoddi4+0x29c>
 800038a:	4464      	add	r4, ip
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	1be4      	subs	r4, r4, r7
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa4>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xc2>
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	f000 80ef 	beq.w	800058e <__udivmoddi4+0x292>
 80003b0:	2600      	movs	r6, #0
 80003b2:	e9c5 0100 	strd	r0, r1, [r5]
 80003b6:	4630      	mov	r0, r6
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f683 	clz	r6, r3
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d14a      	bne.n	800045c <__udivmoddi4+0x160>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd4>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80f9 	bhi.w	80005c2 <__udivmoddi4+0x2c6>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	469e      	mov	lr, r3
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa4>
 80003de:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa4>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xec>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 8092 	bne.w	8000516 <__udivmoddi4+0x21a>
 80003f2:	eba1 010c 	sub.w	r1, r1, ip
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2601      	movs	r6, #1
 8000400:	0c20      	lsrs	r0, r4, #16
 8000402:	fbb1 f3f7 	udiv	r3, r1, r7
 8000406:	fb07 1113 	mls	r1, r7, r3, r1
 800040a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040e:	fb0e f003 	mul.w	r0, lr, r3
 8000412:	4288      	cmp	r0, r1
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x12c>
 8000416:	eb1c 0101 	adds.w	r1, ip, r1
 800041a:	f103 38ff 	add.w	r8, r3, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x12a>
 8000420:	4288      	cmp	r0, r1
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2c0>
 8000426:	4643      	mov	r3, r8
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1110 	mls	r1, r7, r0, r1
 8000434:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x156>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x154>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2ca>
 8000450:	4608      	mov	r0, r1
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045a:	e79c      	b.n	8000396 <__udivmoddi4+0x9a>
 800045c:	f1c6 0720 	rsb	r7, r6, #32
 8000460:	40b3      	lsls	r3, r6
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa20 f407 	lsr.w	r4, r0, r7
 800046e:	fa01 f306 	lsl.w	r3, r1, r6
 8000472:	431c      	orrs	r4, r3
 8000474:	40f9      	lsrs	r1, r7
 8000476:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047a:	fa00 f306 	lsl.w	r3, r0, r6
 800047e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000482:	0c20      	lsrs	r0, r4, #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fb09 1118 	mls	r1, r9, r8, r1
 800048c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000490:	fb08 f00e 	mul.w	r0, r8, lr
 8000494:	4288      	cmp	r0, r1
 8000496:	fa02 f206 	lsl.w	r2, r2, r6
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b8>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2bc>
 80004a8:	4288      	cmp	r0, r1
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2bc>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004bc:	fb09 1110 	mls	r1, r9, r0, r1
 80004c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c8:	458e      	cmp	lr, r1
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1e2>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2b4>
 80004d6:	458e      	cmp	lr, r1
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2b4>
 80004da:	3802      	subs	r0, #2
 80004dc:	4461      	add	r1, ip
 80004de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e2:	fba0 9402 	umull	r9, r4, r0, r2
 80004e6:	eba1 010e 	sub.w	r1, r1, lr
 80004ea:	42a1      	cmp	r1, r4
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46a6      	mov	lr, r4
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x2a4>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x2a0>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x212>
 80004f6:	ebb3 0208 	subs.w	r2, r3, r8
 80004fa:	eb61 010e 	sbc.w	r1, r1, lr
 80004fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000502:	fa22 f306 	lsr.w	r3, r2, r6
 8000506:	40f1      	lsrs	r1, r6
 8000508:	431f      	orrs	r7, r3
 800050a:	e9c5 7100 	strd	r7, r1, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	f1c2 0320 	rsb	r3, r2, #32
 800051a:	40d8      	lsrs	r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa21 f303 	lsr.w	r3, r1, r3
 8000524:	4091      	lsls	r1, r2
 8000526:	4301      	orrs	r1, r0
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb3 f0f7 	udiv	r0, r3, r7
 8000534:	fb07 3610 	mls	r6, r7, r0, r3
 8000538:	0c0b      	lsrs	r3, r1, #16
 800053a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053e:	fb00 f60e 	mul.w	r6, r0, lr
 8000542:	429e      	cmp	r6, r3
 8000544:	fa04 f402 	lsl.w	r4, r4, r2
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x260>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b8>
 8000554:	429e      	cmp	r6, r3
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b8>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1b9b      	subs	r3, r3, r6
 800055e:	b289      	uxth	r1, r1
 8000560:	fbb3 f6f7 	udiv	r6, r3, r7
 8000564:	fb07 3316 	mls	r3, r7, r6, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb06 f30e 	mul.w	r3, r6, lr
 8000570:	428b      	cmp	r3, r1
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x28a>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f106 38ff 	add.w	r8, r6, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2b0>
 800057e:	428b      	cmp	r3, r1
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2b0>
 8000582:	3e02      	subs	r6, #2
 8000584:	4461      	add	r1, ip
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0x104>
 800058e:	462e      	mov	r6, r5
 8000590:	4628      	mov	r0, r5
 8000592:	e705      	b.n	80003a0 <__udivmoddi4+0xa4>
 8000594:	4606      	mov	r6, r0
 8000596:	e6e3      	b.n	8000360 <__udivmoddi4+0x64>
 8000598:	4618      	mov	r0, r3
 800059a:	e6f8      	b.n	800038e <__udivmoddi4+0x92>
 800059c:	454b      	cmp	r3, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f8>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a8:	3801      	subs	r0, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f8>
 80005ac:	4646      	mov	r6, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x28a>
 80005b0:	4620      	mov	r0, r4
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1e2>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x260>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b8>
 80005bc:	3b02      	subs	r3, #2
 80005be:	4461      	add	r1, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x12c>
 80005c2:	4630      	mov	r0, r6
 80005c4:	e709      	b.n	80003da <__udivmoddi4+0xde>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x156>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <bsp_lsm303agr_init>:
#include "main.h"
#include "non_block_queue_ndx.h"

static LSM303AGR_MAG_Object_t bsp_mag_lsm303agr_Obj = { 0 };

int32_t bsp_lsm303agr_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
	LSM303AGR_IO_t mag_io_ctx;
	uint8_t id;

	mag_io_ctx.BusType = LSM303AGR_I2C_BUS;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	mag_io_ctx.Address = LSM303AGR_I2C_ADD_MG;
 80005da:	233d      	movs	r3, #61	; 0x3d
 80005dc:	743b      	strb	r3, [r7, #16]
	mag_io_ctx.Init = BSP_I2C1_Init;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <bsp_lsm303agr_init+0xa4>)
 80005e0:	607b      	str	r3, [r7, #4]
	mag_io_ctx.DeInit = BSP_I2C1_DeInit;
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <bsp_lsm303agr_init+0xa8>)
 80005e4:	60bb      	str	r3, [r7, #8]
	mag_io_ctx.ReadReg = BSP_I2C1_ReadReg;
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <bsp_lsm303agr_init+0xac>)
 80005e8:	61bb      	str	r3, [r7, #24]
	mag_io_ctx.WriteReg = BSP_I2C1_WriteReg;
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <bsp_lsm303agr_init+0xb0>)
 80005ec:	617b      	str	r3, [r7, #20]
	mag_io_ctx.GetTick = BSP_GetTick;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <bsp_lsm303agr_init+0xb4>)
 80005f0:	61fb      	str	r3, [r7, #28]

	if (LSM303AGR_MAG_RegisterBusIO(&bsp_mag_lsm303agr_Obj,
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4824      	ldr	r0, [pc, #144]	; (8000688 <bsp_lsm303agr_init+0xb8>)
 80005f8:	f001 fac4 	bl	8001b84 <LSM303AGR_MAG_RegisterBusIO>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <bsp_lsm303agr_init+0x38>
			&mag_io_ctx) != LSM303AGR_OK) {
		return LSM303AGR_ERROR;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e031      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	}

	// Reset device and wait for powerup
	if (lsm303agr_mag_boot_set(&bsp_mag_lsm303agr_Obj.Ctx, 1) != LSM303AGR_OK) {
 8000608:	2101      	movs	r1, #1
 800060a:	4820      	ldr	r0, [pc, #128]	; (800068c <bsp_lsm303agr_init+0xbc>)
 800060c:	f001 fca6 	bl	8001f5c <lsm303agr_mag_boot_set>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <bsp_lsm303agr_init+0x4c>
		return LSM303AGR_ERROR;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e027      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	}
	HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f002 fc27 	bl	8002e70 <HAL_Delay>

	// Vefify sensor ID (This is to just verify that connection is make to chip)
	if (LSM303AGR_MAG_ReadID(&bsp_mag_lsm303agr_Obj, &id) != LSM303AGR_OK) {
 8000622:	1cfb      	adds	r3, r7, #3
 8000624:	4619      	mov	r1, r3
 8000626:	4818      	ldr	r0, [pc, #96]	; (8000688 <bsp_lsm303agr_init+0xb8>)
 8000628:	f001 fb4d 	bl	8001cc6 <LSM303AGR_MAG_ReadID>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <bsp_lsm303agr_init+0x68>
		return LSM303AGR_ERROR;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e019      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	} else {
		if (id != LSM303AGR_ID_MG) {
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2b40      	cmp	r3, #64	; 0x40
 800063c:	d002      	beq.n	8000644 <bsp_lsm303agr_init+0x74>
			return LSM303AGR_ERROR;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	e013      	b.n	800066c <bsp_lsm303agr_init+0x9c>
		}
	}

	// Standard init
	if (LSM303AGR_MAG_Init(&bsp_mag_lsm303agr_Obj) != LSM303AGR_OK) {
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <bsp_lsm303agr_init+0xb8>)
 8000646:	f001 fb01 	bl	8001c4c <LSM303AGR_MAG_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <bsp_lsm303agr_init+0x86>
		return LSM303AGR_ERROR;
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	e00a      	b.n	800066c <bsp_lsm303agr_init+0x9c>
	}

	// Setup interrupt on data ready

	if (lsm303agr_mag_drdy_on_pin_set(&bsp_mag_lsm303agr_Obj.Ctx,
 8000656:	2101      	movs	r1, #1
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <bsp_lsm303agr_init+0xbc>)
 800065a:	f001 fccb 	bl	8001ff4 <lsm303agr_mag_drdy_on_pin_set>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <bsp_lsm303agr_init+0x9a>
			1) != LSM303AGR_OK) {
		return LSM303AGR_ERROR;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	e000      	b.n	800066c <bsp_lsm303agr_init+0x9c>
//  if (lsm303agr_mag_data_rate_set(&(bsp_mag_lsm303agr_Obj.Ctx), LSM303AGR_MG_ODR_50Hz) != LSM303AGR_OK)
//  {
//    return LSM303AGR_ERROR;
//  }

	return LSM303AGR_OK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	080016ed 	.word	0x080016ed
 8000678:	08001769 	.word	0x08001769
 800067c:	0800181d 	.word	0x0800181d
 8000680:	080017b9 	.word	0x080017b9
 8000684:	08001881 	.word	0x08001881
 8000688:	200001d4 	.word	0x200001d4
 800068c:	200001f0 	.word	0x200001f0

08000690 <bsp_lsm303agr_enable>:

int32_t bsp_lsm303agr_enable(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// Start up mag
	if (LSM303AGR_MAG_Enable(&bsp_mag_lsm303agr_Obj) != LSM303AGR_OK) {
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <bsp_lsm303agr_enable+0x1c>)
 8000696:	f001 fb2c 	bl	8001cf2 <LSM303AGR_MAG_Enable>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <bsp_lsm303agr_enable+0x16>
		return LSM303AGR_ERROR;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	e000      	b.n	80006a8 <bsp_lsm303agr_enable+0x18>
	}

	return LSM303AGR_OK;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200001d4 	.word	0x200001d4

080006b0 <bsp_lsm6dsl_init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */

int32_t bsp_lsm6dsl_init() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	lsm6dsl_ctrl3_c_t ctrl3_c;
	uint8_t id;

	io_ctx.BusType = LSM6DSL_I2C_BUS;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
	io_ctx.Address = LSM6DSL_I2C_ADD_H;
 80006ba:	23d7      	movs	r3, #215	; 0xd7
 80006bc:	763b      	strb	r3, [r7, #24]
	io_ctx.Init = BSP_I2C1_Init;
 80006be:	4b56      	ldr	r3, [pc, #344]	; (8000818 <bsp_lsm6dsl_init+0x168>)
 80006c0:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit = BSP_I2C1_DeInit;
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <bsp_lsm6dsl_init+0x16c>)
 80006c4:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg = BSP_I2C1_ReadReg;
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <bsp_lsm6dsl_init+0x170>)
 80006c8:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg = BSP_I2C1_WriteReg;
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <bsp_lsm6dsl_init+0x174>)
 80006cc:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick = BSP_GetTick;
 80006ce:	4b56      	ldr	r3, [pc, #344]	; (8000828 <bsp_lsm6dsl_init+0x178>)
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24

	if (LSM6DSL_RegisterBusIO(&bsp_lsm6dsl_Obj, &io_ctx) != LSM6DSL_OK) {
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4619      	mov	r1, r3
 80006d8:	4854      	ldr	r0, [pc, #336]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80006da:	f001 fcd7 	bl	800208c <LSM6DSL_RegisterBusIO>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <bsp_lsm6dsl_init+0x3a>
		return LSM6DSL_ERROR;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	e091      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Vefify sensor ID
	if (LSM6DSL_ReadID(&bsp_lsm6dsl_Obj, &id) != LSM6DSL_OK) {
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	4619      	mov	r1, r3
 80006ee:	484f      	ldr	r0, [pc, #316]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80006f0:	f001 fd9b 	bl	800222a <LSM6DSL_ReadID>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <bsp_lsm6dsl_init+0x50>
		return LSM6DSL_ERROR;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	e086      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (id != LSM6DSL_ID) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b6a      	cmp	r3, #106	; 0x6a
 8000704:	d002      	beq.n	800070c <bsp_lsm6dsl_init+0x5c>
		return LSM6DSL_ERROR;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e080      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Reset device
	if (lsm6dsl_reset_set(&bsp_lsm6dsl_Obj.Ctx, 1) != LSM6DSL_OK) {
 800070c:	2101      	movs	r1, #1
 800070e:	4848      	ldr	r0, [pc, #288]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 8000710:	f002 f903 	bl	800291a <lsm6dsl_reset_set>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <bsp_lsm6dsl_init+0x70>
		return LSM6DSL_ERROR;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e076      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Wait for reset to complete
	do {
		if (lsm6dsl_read_reg(&bsp_lsm6dsl_Obj.Ctx, LSM6DSL_CTRL3_C,
 8000720:	f107 0208 	add.w	r2, r7, #8
 8000724:	2301      	movs	r3, #1
 8000726:	2112      	movs	r1, #18
 8000728:	4841      	ldr	r0, [pc, #260]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 800072a:	f001 ff2c 	bl	8002586 <lsm6dsl_read_reg>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <bsp_lsm6dsl_init+0x8a>
				(uint8_t*) &ctrl3_c, 1) != LSM6DSL_OK) {
			return LSM6DSL_ERROR;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	e069      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
		}
	} while (ctrl3_c.sw_reset == 1);
 800073a:	7a3b      	ldrb	r3, [r7, #8]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ec      	bne.n	8000720 <bsp_lsm6dsl_init+0x70>

	// Init using default settings
	if (LSM6DSL_Init(&bsp_lsm6dsl_Obj) != LSM6DSL_OK) {
 8000746:	4839      	ldr	r0, [pc, #228]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 8000748:	f001 fd06 	bl	8002158 <LSM6DSL_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <bsp_lsm6dsl_init+0xa8>
		return LSM6DSL_ERROR;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	e05a      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Override default data rate for acc and gyro
	bsp_lsm6dsl_Obj.acc_odr = (lsm6dsl_odr_xl_t) GYRO_ACC_RATE;
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 800075a:	2206      	movs	r2, #6
 800075c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	bsp_lsm6dsl_Obj.gyro_odr = (lsm6dsl_odr_g_t) GYRO_ACC_RATE;
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 8000762:	2206      	movs	r2, #6
 8000764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	LSM6DSL_ACC_Disable(&bsp_lsm6dsl_Obj);
 8000768:	4830      	ldr	r0, [pc, #192]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 800076a:	f001 fd98 	bl	800229e <LSM6DSL_ACC_Disable>
	LSM6DSL_GYRO_Disable(&bsp_lsm6dsl_Obj);
 800076e:	482f      	ldr	r0, [pc, #188]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 8000770:	f001 fde8 	bl	8002344 <LSM6DSL_GYRO_Disable>

	if (lsm6dsl_fifo_data_rate_set(&(bsp_lsm6dsl_Obj.Ctx),
 8000774:	2106      	movs	r1, #6
 8000776:	482e      	ldr	r0, [pc, #184]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 8000778:	f002 fb26 	bl	8002dc8 <lsm6dsl_fifo_data_rate_set>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <bsp_lsm6dsl_init+0xd8>
			(lsm6dsl_odr_fifo_t) GYRO_ACC_RATE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	e042      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_ACC_Set_Decimation(&bsp_lsm6dsl_Obj,
 8000788:	2101      	movs	r1, #1
 800078a:	4828      	ldr	r0, [pc, #160]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 800078c:	f001 fe75 	bl	800247a <LSM6DSL_FIFO_ACC_Set_Decimation>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <bsp_lsm6dsl_init+0xec>
			LSM6DSL_FIFO_XL_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	e038      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_GYRO_Set_Decimation(&bsp_lsm6dsl_Obj,
 800079c:	2101      	movs	r1, #1
 800079e:	4823      	ldr	r0, [pc, #140]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007a0:	f001 fe93 	bl	80024ca <LSM6DSL_FIFO_GYRO_Set_Decimation>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <bsp_lsm6dsl_init+0x100>
			LSM6DSL_FIFO_GY_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e02e      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_Set_Mode(&bsp_lsm6dsl_Obj,
 80007b0:	2106      	movs	r1, #6
 80007b2:	481e      	ldr	r0, [pc, #120]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007b4:	f001 fe28 	bl	8002408 <LSM6DSL_FIFO_Set_Mode>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <bsp_lsm6dsl_init+0x114>
			LSM6DSL_STREAM_MODE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e024      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	if (LSM6DSL_FIFO_Set_Watermark_Level(&bsp_lsm6dsl_Obj,
 80007c4:	213c      	movs	r1, #60	; 0x3c
 80007c6:	4819      	ldr	r0, [pc, #100]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007c8:	f001 fe06 	bl	80023d8 <LSM6DSL_FIFO_Set_Watermark_Level>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <bsp_lsm6dsl_init+0x128>
			GYRO_ACC_WATERMARK) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	e01a      	b.n	800080e <bsp_lsm6dsl_init+0x15e>
	}

	// Setup watermark interrupt
	lsm6dsl_int1_route_t fth_route = { 0 };
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2100      	movs	r1, #0
 80007dc:	460a      	mov	r2, r1
 80007de:	801a      	strh	r2, [r3, #0]
 80007e0:	460a      	mov	r2, r1
 80007e2:	709a      	strb	r2, [r3, #2]
	fth_route.int1_fth = 1;
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&(bsp_lsm6dsl_Obj.Ctx), fth_route);
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <bsp_lsm6dsl_init+0x180>)
 80007f0:	f002 f8df 	bl	80029b2 <lsm6dsl_pin_int1_route_set>

	bsp_lsm6dsl_Obj.is_initialized = 1;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <bsp_lsm6dsl_init+0x17c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// Enable interrupt
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2017      	movs	r0, #23
 8000802:	f002 fc4b 	bl	800309c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000806:	2017      	movs	r0, #23
 8000808:	f002 fc74 	bl	80030f4 <HAL_NVIC_EnableIRQ>

	return LSM6DSL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	080016ed 	.word	0x080016ed
 800081c:	08001769 	.word	0x08001769
 8000820:	0800181d 	.word	0x0800181d
 8000824:	080017b9 	.word	0x080017b9
 8000828:	08001881 	.word	0x08001881
 800082c:	20000200 	.word	0x20000200
 8000830:	2000021c 	.word	0x2000021c

08000834 <bsp_lsm6dsl_enable>:
//	

//	DebugExtAnalyzerReset1();
//}

void bsp_lsm6dsl_enable(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	LSM6DSL_ACC_Enable(&bsp_lsm6dsl_Obj);
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <bsp_lsm6dsl_enable+0x14>)
 800083a:	f001 fd0c 	bl	8002256 <LSM6DSL_ACC_Enable>
	LSM6DSL_GYRO_Enable(&bsp_lsm6dsl_Obj);
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <bsp_lsm6dsl_enable+0x14>)
 8000840:	f001 fd5c 	bl	80022fc <LSM6DSL_GYRO_Enable>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000200 	.word	0x20000200

0800084c <DebugExtAnalyzerPulse1>:

#include "debug_analyzer.h"
#include "main.h"

void DebugExtAnalyzerPulse1(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(ExtAnalyzer1_GPIO_Port, ExtAnalyzer1_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <DebugExtAnalyzerPulse1+0x20>)
 8000858:	f004 faae 	bl	8004db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ExtAnalyzer1_GPIO_Port, ExtAnalyzer1_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <DebugExtAnalyzerPulse1+0x20>)
 8000864:	f004 faa8 	bl	8004db8 <HAL_GPIO_WritePin>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020c00 	.word	0x40020c00

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f002 face 	bl	8002e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f828 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 f96a 	bl	8000b54 <MX_GPIO_Init>
  MX_ETH_Init();
 8000880:	f000 f896 	bl	80009b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000884:	f000 f8e2 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000888:	f000 f910 	bl	8000aac <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 800088c:	f000 f93c 	bl	8000b08 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8000890:	f00e fe6e 	bl	800f570 <SEGGER_SYSVIEW_Conf>
  InitSensorBus1(&AccGyroCallback, &MagCallback);
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <main+0x48>)
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0x4c>)
 8000898:	f000 fb32 	bl	8000f00 <InitSensorBus1>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089c:	f00a fbc0 	bl	800b020 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <main+0x50>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <main+0x54>)
 80008a6:	f00a fc25 	bl	800b0f4 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <main+0x58>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b0:	f00a fbea 	bl	800b088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008b4:	e7fe      	b.n	80008b4 <main+0x44>
 80008b6:	bf00      	nop
 80008b8:	08000e6d 	.word	0x08000e6d
 80008bc:	08000d81 	.word	0x08000d81
 80008c0:	0800fed8 	.word	0x0800fed8
 80008c4:	08000ea1 	.word	0x08000ea1
 80008c8:	200008a8 	.word	0x200008a8

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f00e ffce 	bl	800f87c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f0:	f006 ff2c 	bl	800774c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <SystemClock_Config+0xdc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <SystemClock_Config+0xdc>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <SystemClock_Config+0xdc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <SystemClock_Config+0xe0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000914:	4a25      	ldr	r2, [pc, #148]	; (80009ac <SystemClock_Config+0xe0>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <SystemClock_Config+0xe0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000940:	2360      	movs	r3, #96	; 0x60
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4618      	mov	r0, r3
 8000956:	f006 ff59 	bl	800780c <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000960:	f000 faba 	bl	8000ed8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000964:	f006 ff02 	bl	800776c <HAL_PWREx_EnableOverDrive>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800096e:	f000 fab3 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2103      	movs	r1, #3
 800098e:	4618      	mov	r0, r3
 8000990:	f007 faac 	bl	8007eec <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800099a:	f000 fa9d 	bl	8000ed8 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ETH_Init+0x84>)
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_ETH_Init+0x88>)
 80009b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009c8:	22e1      	movs	r2, #225	; 0xe1
 80009ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ETH_Init+0x84>)
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_ETH_Init+0x84>)
 80009e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ETH_Init+0x84>)
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <MX_ETH_Init+0x90>)
 80009f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_ETH_Init+0x84>)
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_ETH_Init+0x94>)
 80009f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_ETH_Init+0x84>)
 80009fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x84>)
 8000a02:	f003 f9d5 	bl	8003db0 <HAL_ETH_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 fa64 	bl	8000ed8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a10:	2238      	movs	r2, #56	; 0x38
 8000a12:	2100      	movs	r1, #0
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a16:	f00e ff31 	bl	800f87c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a1c:	2221      	movs	r2, #33	; 0x21
 8000a1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000268 	.word	0x20000268
 8000a38:	40028000 	.word	0x40028000
 8000a3c:	200008ac 	.word	0x200008ac
 8000a40:	20000118 	.word	0x20000118
 8000a44:	20000078 	.word	0x20000078
 8000a48:	20000230 	.word	0x20000230

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_USART3_UART_Init+0x5c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a90:	f009 f9a8 	bl	8009de4 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 fa1d 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000318 	.word	0x20000318
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2206      	movs	r2, #6
 8000abc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	f006 fcd2 	bl	8007498 <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f9ed 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003a0 	.word	0x200003a0

08000b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_DMA_Init+0x48>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MX_DMA_Init+0x48>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_DMA_Init+0x48>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f002 fab6 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b30:	200b      	movs	r0, #11
 8000b32:	f002 fadf 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	2011      	movs	r0, #17
 8000b3c:	f002 faae 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b40:	2011      	movs	r0, #17
 8000b42:	f002 fad7 	bl	80030f4 <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b70      	ldr	r3, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a6f      	ldr	r2, [pc, #444]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b6d      	ldr	r3, [pc, #436]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a63      	ldr	r2, [pc, #396]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b61      	ldr	r3, [pc, #388]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b5b      	ldr	r3, [pc, #364]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b52      	ldr	r3, [pc, #328]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a51      	ldr	r2, [pc, #324]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b4f      	ldr	r3, [pc, #316]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a4b      	ldr	r2, [pc, #300]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c18:	4845      	ldr	r0, [pc, #276]	; (8000d30 <MX_GPIO_Init+0x1dc>)
 8000c1a:	f004 f8cd 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ExtAnalyzer3_GPIO_Port, ExtAnalyzer3_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4843      	ldr	r0, [pc, #268]	; (8000d34 <MX_GPIO_Init+0x1e0>)
 8000c26:	f004 f8c7 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ExtAnalyzer1_Pin|ExtAnalyzer2_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c30:	4841      	ldr	r0, [pc, #260]	; (8000d38 <MX_GPIO_Init+0x1e4>)
 8000c32:	f004 f8c1 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2140      	movs	r1, #64	; 0x40
 8000c3a:	4840      	ldr	r0, [pc, #256]	; (8000d3c <MX_GPIO_Init+0x1e8>)
 8000c3c:	f004 f8bc 	bl	8004db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MagDataRdy_Pin */
  GPIO_InitStruct.Pin = MagDataRdy_Pin;
 8000c40:	2308      	movs	r3, #8
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MagDataRdy_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	483a      	ldr	r0, [pc, #232]	; (8000d40 <MX_GPIO_Init+0x1ec>)
 8000c56:	f003 fbd1 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c5a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <MX_GPIO_Init+0x1dc>)
 8000c74:	f003 fbc2 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtAnalyzer3_Pin */
  GPIO_InitStruct.Pin = ExtAnalyzer3_Pin;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ExtAnalyzer3_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4828      	ldr	r0, [pc, #160]	; (8000d34 <MX_GPIO_Init+0x1e0>)
 8000c92:	f003 fbb3 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Lms6dsl_Int1_Pin */
  GPIO_InitStruct.Pin = Lms6dsl_Int1_Pin;
 8000c96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Lms6dsl_Int1_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4821      	ldr	r0, [pc, #132]	; (8000d34 <MX_GPIO_Init+0x1e0>)
 8000cae:	f003 fba5 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ExtAnalyzer1_Pin ExtAnalyzer2_Pin */
  GPIO_InitStruct.Pin = ExtAnalyzer1_Pin|ExtAnalyzer2_Pin;
 8000cb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481b      	ldr	r0, [pc, #108]	; (8000d38 <MX_GPIO_Init+0x1e4>)
 8000ccc:	f003 fb96 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4815      	ldr	r0, [pc, #84]	; (8000d3c <MX_GPIO_Init+0x1e8>)
 8000ce8:	f003 fb88 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <MX_GPIO_Init+0x1e8>)
 8000d00:	f003 fb7c 	bl	80043fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2105      	movs	r1, #5
 8000d08:	2009      	movs	r0, #9
 8000d0a:	f002 f9c7 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d0e:	2009      	movs	r0, #9
 8000d10:	f002 f9f0 	bl	80030f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	2028      	movs	r0, #40	; 0x28
 8000d1a:	f002 f9bf 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d1e:	2028      	movs	r0, #40	; 0x28
 8000d20:	f002 f9e8 	bl	80030f4 <HAL_NVIC_EnableIRQ>

}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40021400 	.word	0x40021400
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021800 	.word	0x40021800
 8000d40:	40020800 	.word	0x40020800

08000d44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Here when data is ready to read using DMA

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]

	if ( (GPIO_Pin == MagDataRdy_Pin) || (GPIO_Pin == Lms6dsl_Int1_Pin)) {
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_EXTI_Callback+0x18>
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d5a:	d103      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x20>
		UpdateSensorBus1(GPIO_Pin);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f910 	bl	8000f84 <UpdateSensorBus1>
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_I2C_MemRxCpltCallback>:

// Here when DMA is complete and data is ready to use
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	SensorBus1_DMA_CallBack();
 8000d74:	f000 f9ac 	bl	80010d0 <SensorBus1_DMA_CallBack>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <AccGyroCallback>:


void AccGyroCallback(GYRO_ACC_t * pRawData, uint16_t numItems) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]

	// First, average raw data
	LSM6DSL_Axes_t gyroAvg = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
	LSM6DSL_Axes_t accAvg = {0};
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]

	GYRO_ACC_t * pCruRawData = pRawData;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t itemCount = numItems;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	847b      	strh	r3, [r7, #34]	; 0x22

	// Now sum data sets
	while(itemCount) {
 8000dac:	e029      	b.n	8000e02 <AccGyroCallback+0x82>
		gyroAvg.x += pCruRawData->gyro_data.x;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000db6:	4413      	add	r3, r2
 8000db8:	617b      	str	r3, [r7, #20]
		gyroAvg.y += pCruRawData->gyro_data.y;
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dbe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
		gyroAvg.z += pCruRawData->gyro_data.z;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	61fb      	str	r3, [r7, #28]

		accAvg.x += pCruRawData->acc_data.x;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
		accAvg.y += pCruRawData->acc_data.y;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
		accAvg.z += pCruRawData->acc_data.z;
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dee:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000df2:	4413      	add	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]

		pCruRawData++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	330c      	adds	r3, #12
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
		itemCount--;
 8000dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	847b      	strh	r3, [r7, #34]	; 0x22
	while(itemCount) {
 8000e02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1d2      	bne.n	8000dae <AccGyroCallback+0x2e>
	}

	// Complete average
	gyroAvg.x /= numItems;
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
	gyroAvg.y /= numItems;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e1a:	61bb      	str	r3, [r7, #24]
	gyroAvg.z /= numItems;
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e24:	61fb      	str	r3, [r7, #28]

	accAvg.x /= numItems;
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	60bb      	str	r3, [r7, #8]
	accAvg.y /= numItems;
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e38:	60fb      	str	r3, [r7, #12]
	accAvg.z /= numItems;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e42:	613b      	str	r3, [r7, #16]


	SEGGER_SYSVIEW_PrintfHost("Gyro Value: X = %d, Y = %d, Z = %d, ",
 8000e44:	6979      	ldr	r1, [r7, #20]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <AccGyroCallback+0xe4>)
 8000e4c:	f00e fb12 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
			gyroAvg.x, gyroAvg.y, gyroAvg.z);

	SEGGER_SYSVIEW_PrintfHost("Acc Value: X = %d, Y = %d, Z = %d, ",
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <AccGyroCallback+0xe8>)
 8000e58:	f00e fb0c 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
			accAvg.x, accAvg.y, accAvg.z);
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0800fa34 	.word	0x0800fa34
 8000e68:	0800fa5c 	.word	0x0800fa5c

08000e6c <MagCallback>:


static void MagCallback(LSM303AGR_AxesRaw_t * pRawData, uint16_t numItems) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
//	HAL_GetTick();

	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
				 pRawData->x, pRawData->y, pRawData->z);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8000e7e:	4619      	mov	r1, r3
				 pRawData->x, pRawData->y, pRawData->z);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8000e86:	461a      	mov	r2, r3
				 pRawData->x, pRawData->y, pRawData->z);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <MagCallback+0x30>)
 8000e90:	f00e faf0 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	0800fa80 	.word	0x0800fa80

08000ea0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	StartSensorBus1();
 8000ea8:	f000 f864 	bl	8000f74 <StartSensorBus1>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f00a f9c7 	bl	800b240 <osDelay>
 8000eb2:	e7fb      	b.n	8000eac <StartDefaultTask+0xc>

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec6:	f001 ffb3 	bl	8002e30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40000c00 	.word	0x40000c00

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4802      	ldr	r0, [pc, #8]	; (8000efc <assert_failed+0x18>)
 8000ef4:	f00e fabe 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
	                            on line %d\r\n", file, line);
	  while(1);
 8000ef8:	e7fe      	b.n	8000ef8 <assert_failed+0x14>
 8000efa:	bf00      	nop
 8000efc:	0800faa4 	.word	0x0800faa4

08000f00 <InitSensorBus1>:
static MagCallback_t pMagCallback = NULL;

static void run_pending_dma(void);


void InitSensorBus1(AccGyroCallback_t pAccGyroCB, MagCallback_t pMagCB) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]

	pAccGyroCallback = pAccGyroCB;
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <InitSensorBus1+0x4c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
	pMagCallback = pMagCB;
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <InitSensorBus1+0x50>)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6013      	str	r3, [r2, #0]

	req_mag = GP_FALSE;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <InitSensorBus1+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
	req_gyro_acc = GP_FALSE;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <InitSensorBus1+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
	lock_update = GP_FALSE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <InitSensorBus1+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	in_process_dma = DMA_RDY;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <InitSensorBus1+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <InitSensorBus1+0x64>)
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <InitSensorBus1+0x68>)
 8000f32:	601a      	str	r2, [r3, #0]
	p_mag_raw_data = &mag_raw_data1;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <InitSensorBus1+0x6c>)
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <InitSensorBus1+0x70>)
 8000f38:	601a      	str	r2, [r3, #0]

	bsp_lsm6dsl_init();
 8000f3a:	f7ff fbb9 	bl	80006b0 <bsp_lsm6dsl_init>
	bsp_lsm303agr_init();
 8000f3e:	f7ff fb47 	bl	80005d0 <bsp_lsm303agr_init>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200009c0 	.word	0x200009c0
 8000f50:	200009c4 	.word	0x200009c4
 8000f54:	200008b3 	.word	0x200008b3
 8000f58:	200008b4 	.word	0x200008b4
 8000f5c:	200008b5 	.word	0x200008b5
 8000f60:	200008b2 	.word	0x200008b2
 8000f64:	200009a8 	.word	0x200009a8
 8000f68:	200008b8 	.word	0x200008b8
 8000f6c:	200009bc 	.word	0x200009bc
 8000f70:	200009ac 	.word	0x200009ac

08000f74 <StartSensorBus1>:


void StartSensorBus1(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	bsp_lsm6dsl_enable();
 8000f78:	f7ff fc5c 	bl	8000834 <bsp_lsm6dsl_enable>
	bsp_lsm303agr_enable();
 8000f7c:	f7ff fb88 	bl	8000690 <bsp_lsm303agr_enable>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <UpdateSensorBus1>:


void UpdateSensorBus1(uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
	SEGGER_SYSVIEW_PrintfHost("UpdateSensorBus1");
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <UpdateSensorBus1+0x44>)
 8000f90:	f00e fa70 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>

	// If acc/gyro
	if (GPIO_Pin == Lms6dsl_Int1_Pin) {
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f9a:	d105      	bne.n	8000fa8 <UpdateSensorBus1+0x24>
		req_gyro_acc = GP_TRUE;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <UpdateSensorBus1+0x48>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc");
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <UpdateSensorBus1+0x4c>)
 8000fa4:	f00e fa66 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
	}

	// if mag
	if (GPIO_Pin == MagDataRdy_Pin) {
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d105      	bne.n	8000fba <UpdateSensorBus1+0x36>
		req_mag = GP_TRUE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <UpdateSensorBus1+0x50>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_mag");
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <UpdateSensorBus1+0x54>)
 8000fb6:	f00e fa5d 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
	}
	run_pending_dma();
 8000fba:	f000 f80f 	bl	8000fdc <run_pending_dma>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	0800fae8 	.word	0x0800fae8
 8000fcc:	200008b4 	.word	0x200008b4
 8000fd0:	0800fafc 	.word	0x0800fafc
 8000fd4:	200008b3 	.word	0x200008b3
 8000fd8:	0800fb0c 	.word	0x0800fb0c

08000fdc <run_pending_dma>:


void run_pending_dma(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af02      	add	r7, sp, #8
	SEGGER_SYSVIEW_PrintfHost("run_pending_dma");
 8000fe2:	482f      	ldr	r0, [pc, #188]	; (80010a0 <run_pending_dma+0xc4>)
 8000fe4:	f00e fa46 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
	// Must not be reentrant, this will catch that
	// Must have SensorBus1_DMA_CallBack and UpdateSensorBus1 on same interrupt level
	assert_param(lock_update == GP_FALSE);
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <run_pending_dma+0xc8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <run_pending_dma+0x1e>
 8000ff2:	2151      	movs	r1, #81	; 0x51
 8000ff4:	482c      	ldr	r0, [pc, #176]	; (80010a8 <run_pending_dma+0xcc>)
 8000ff6:	f7ff ff75 	bl	8000ee4 <assert_failed>
	lock_update = GP_TRUE;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <run_pending_dma+0xc8>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]

	if (in_process_dma != DMA_RDY) { // exit if previous still running
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <run_pending_dma+0xd0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <run_pending_dma+0x36>
		lock_update = GP_FALSE;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <run_pending_dma+0xc8>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
		return;
 8001010:	e044      	b.n	800109c <run_pending_dma+0xc0>
	}

	// Else check for ryro/acc DMA read
	if (req_gyro_acc) {
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <run_pending_dma+0xd4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d01c      	beq.n	8001056 <run_pending_dma+0x7a>
		assert_param(HAL_I2C_Mem_Read_DMA(&hi2c1, LSM6DSL_I2C_ADD_H, LSM6DSL_FIFO_DATA_OUT_L,
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <run_pending_dma+0xd8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <run_pending_dma+0xdc>)
 8001022:	8812      	ldrh	r2, [r2, #0]
 8001024:	9201      	str	r2, [sp, #4]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	223e      	movs	r2, #62	; 0x3e
 800102c:	21d7      	movs	r1, #215	; 0xd7
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <run_pending_dma+0xe0>)
 8001030:	f004 fad8 	bl	80055e4 <HAL_I2C_Mem_Read_DMA>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <run_pending_dma+0x66>
 800103a:	215b      	movs	r1, #91	; 0x5b
 800103c:	481a      	ldr	r0, [pc, #104]	; (80010a8 <run_pending_dma+0xcc>)
 800103e:	f7ff ff51 	bl	8000ee4 <assert_failed>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) p_acc_gyro_raw_data,
				acc_gyro_raw_data_size) == HAL_OK);

		in_process_dma = DMA_ACC_GYRO;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <run_pending_dma+0xd0>)
 8001044:	2202      	movs	r2, #2
 8001046:	701a      	strb	r2, [r3, #0]
		req_gyro_acc = GP_FALSE;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <run_pending_dma+0xd4>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc DMA");
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <run_pending_dma+0xe4>)
 8001050:	f00e fa10 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
 8001054:	e01f      	b.n	8001096 <run_pending_dma+0xba>
	// Else check for mag request
	} else if (req_mag) {
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <run_pending_dma+0xe8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d01a      	beq.n	8001096 <run_pending_dma+0xba>
		assert_param(HAL_I2C_Mem_Read_DMA(&hi2c1, LSM303AGR_I2C_ADD_MG,
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <run_pending_dma+0xec>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2206      	movs	r2, #6
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2268      	movs	r2, #104	; 0x68
 800106e:	213d      	movs	r1, #61	; 0x3d
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <run_pending_dma+0xe0>)
 8001072:	f004 fab7 	bl	80055e4 <HAL_I2C_Mem_Read_DMA>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <run_pending_dma+0xa8>
 800107c:	2164      	movs	r1, #100	; 0x64
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <run_pending_dma+0xcc>)
 8001080:	f7ff ff30 	bl	8000ee4 <assert_failed>
				LSM303AGR_OUTX_L_REG_M, I2C_MEMADD_SIZE_8BIT,
				(uint8_t*) p_mag_raw_data, sizeof(LSM303AGR_AxesRaw_t)) == HAL_OK);


		in_process_dma = DMA_MAG;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <run_pending_dma+0xd0>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
		req_mag = GP_FALSE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <run_pending_dma+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_mag DMA");
 8001090:	480e      	ldr	r0, [pc, #56]	; (80010cc <run_pending_dma+0xf0>)
 8001092:	f00e f9ef 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
	}

	lock_update = GP_FALSE;
 8001096:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <run_pending_dma+0xc8>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
}
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	0800fb14 	.word	0x0800fb14
 80010a4:	200008b5 	.word	0x200008b5
 80010a8:	0800fb24 	.word	0x0800fb24
 80010ac:	200008b2 	.word	0x200008b2
 80010b0:	200008b4 	.word	0x200008b4
 80010b4:	200009a8 	.word	0x200009a8
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000a14 	.word	0x20000a14
 80010c0:	0800fb40 	.word	0x0800fb40
 80010c4:	200008b3 	.word	0x200008b3
 80010c8:	200009bc 	.word	0x200009bc
 80010cc:	0800fb54 	.word	0x0800fb54

080010d0 <SensorBus1_DMA_CallBack>:


void SensorBus1_DMA_CallBack(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

	DebugExtAnalyzerPulse1();
 80010d4:	f7ff fbba 	bl	800084c <DebugExtAnalyzerPulse1>

	// Handle data ready from last dma request
	switch (in_process_dma) {
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <SensorBus1_DMA_CallBack+0xc0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d026      	beq.n	8001130 <SensorBus1_DMA_CallBack+0x60>
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d148      	bne.n	8001178 <SensorBus1_DMA_CallBack+0xa8>

	case DMA_ACC_GYRO:
		SEGGER_SYSVIEW_PrintfHost("DMA_ACC_GYRO DMA CALLBACK");
 80010e6:	482b      	ldr	r0, [pc, #172]	; (8001194 <SensorBus1_DMA_CallBack+0xc4>)
 80010e8:	f00e f9c4 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
			// Acc Gyro call back with current raw data
		pAccGyroCallback(p_acc_gyro_raw_data, GYRO_ACC_SAMPLES);
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <SensorBus1_DMA_CallBack+0xc8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a2a      	ldr	r2, [pc, #168]	; (800119c <SensorBus1_DMA_CallBack+0xcc>)
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	210a      	movs	r1, #10
 80010f6:	4610      	mov	r0, r2
 80010f8:	4798      	blx	r3

		// Swap raw data storage
		if (p_acc_gyro_raw_data == &acc_gyro_raw_data1[0]) {
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <SensorBus1_DMA_CallBack+0xcc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <SensorBus1_DMA_CallBack+0xd0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d103      	bne.n	800110c <SensorBus1_DMA_CallBack+0x3c>
			p_acc_gyro_raw_data = &acc_gyro_raw_data2[0];
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <SensorBus1_DMA_CallBack+0xcc>)
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <SensorBus1_DMA_CallBack+0xd4>)
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e002      	b.n	8001112 <SensorBus1_DMA_CallBack+0x42>
		} else {
			p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <SensorBus1_DMA_CallBack+0xcc>)
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <SensorBus1_DMA_CallBack+0xd0>)
 8001110:	601a      	str	r2, [r3, #0]
		// Check if we have back to back gyro/acc interrupts.
		// This can happen if we halt for debug.
		// In this case the interrupt line remains high between data sets and
		// therefore does not generate second rising edge.
		// We'll just check for interrupt still high and schedule DMA again
		if (HAL_GPIO_ReadPin(Lms6dsl_Int1_GPIO_Port, Lms6dsl_Int1_Pin) == GPIO_PIN_SET) {
 8001112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001116:	4824      	ldr	r0, [pc, #144]	; (80011a8 <SensorBus1_DMA_CallBack+0xd8>)
 8001118:	f003 fe2e 	bl	8004d78 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d12c      	bne.n	800117c <SensorBus1_DMA_CallBack+0xac>
			req_gyro_acc = GP_TRUE;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SensorBus1_DMA_CallBack+0xdc>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfHost("Reschedule req_gyro_acc");
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <SensorBus1_DMA_CallBack+0xe0>)
 800112a:	f00e f9a3 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
		}

		break;
 800112e:	e025      	b.n	800117c <SensorBus1_DMA_CallBack+0xac>

	case DMA_MAG:
		SEGGER_SYSVIEW_PrintfHost("DMA_MAG DMA CALLBACK");
 8001130:	4820      	ldr	r0, [pc, #128]	; (80011b4 <SensorBus1_DMA_CallBack+0xe4>)
 8001132:	f00e f99f 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
		// Mag call back with current raw data
		pMagCallback(p_mag_raw_data, 1);
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <SensorBus1_DMA_CallBack+0xe8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a20      	ldr	r2, [pc, #128]	; (80011bc <SensorBus1_DMA_CallBack+0xec>)
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	2101      	movs	r1, #1
 8001140:	4610      	mov	r0, r2
 8001142:	4798      	blx	r3

		// Swap raw data storage
		if (p_mag_raw_data == &mag_raw_data1) {
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <SensorBus1_DMA_CallBack+0xec>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <SensorBus1_DMA_CallBack+0xf0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d103      	bne.n	8001156 <SensorBus1_DMA_CallBack+0x86>
			p_mag_raw_data = &mag_raw_data2;
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <SensorBus1_DMA_CallBack+0xec>)
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <SensorBus1_DMA_CallBack+0xf4>)
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e002      	b.n	800115c <SensorBus1_DMA_CallBack+0x8c>
		} else {
			p_mag_raw_data = &mag_raw_data1;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <SensorBus1_DMA_CallBack+0xec>)
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <SensorBus1_DMA_CallBack+0xf0>)
 800115a:	601a      	str	r2, [r3, #0]
		// Check if we have back to back gyro ready interrupts.
		// This can happen if we halt for debug.
		// In this case the interrupt line remains high between data sets and
		// therefore does not generate second rising edge.
		// We'll just check for interrupt still high and schedule DMA again
		if (HAL_GPIO_ReadPin(MagDataRdy_GPIO_Port, MagDataRdy_Pin) == GPIO_PIN_SET) {
 800115c:	2108      	movs	r1, #8
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <SensorBus1_DMA_CallBack+0xf8>)
 8001160:	f003 fe0a 	bl	8004d78 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10a      	bne.n	8001180 <SensorBus1_DMA_CallBack+0xb0>
			req_mag = GP_TRUE;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <SensorBus1_DMA_CallBack+0xfc>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfHost("Reschedule req_mag");
 8001170:	4817      	ldr	r0, [pc, #92]	; (80011d0 <SensorBus1_DMA_CallBack+0x100>)
 8001172:	f00e f97f 	bl	800f474 <SEGGER_SYSVIEW_PrintfHost>
		}

		break;
 8001176:	e003      	b.n	8001180 <SensorBus1_DMA_CallBack+0xb0>

	default:
		assert_param(!HAL_OK);
		break;
 8001178:	bf00      	nop
 800117a:	e002      	b.n	8001182 <SensorBus1_DMA_CallBack+0xb2>
		break;
 800117c:	bf00      	nop
 800117e:	e000      	b.n	8001182 <SensorBus1_DMA_CallBack+0xb2>
		break;
 8001180:	bf00      	nop
	}

	in_process_dma = DMA_RDY; // Indicate ready for more
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <SensorBus1_DMA_CallBack+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

	// Schedule next pending
	run_pending_dma();
 8001188:	f7ff ff28 	bl	8000fdc <run_pending_dma>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200008b2 	.word	0x200008b2
 8001194:	0800fb60 	.word	0x0800fb60
 8001198:	200009c0 	.word	0x200009c0
 800119c:	200009a8 	.word	0x200009a8
 80011a0:	200008b8 	.word	0x200008b8
 80011a4:	20000930 	.word	0x20000930
 80011a8:	40021400 	.word	0x40021400
 80011ac:	200008b4 	.word	0x200008b4
 80011b0:	0800fb7c 	.word	0x0800fb7c
 80011b4:	0800fb94 	.word	0x0800fb94
 80011b8:	200009c4 	.word	0x200009c4
 80011bc:	200009bc 	.word	0x200009bc
 80011c0:	200009ac 	.word	0x200009ac
 80011c4:	200009b4 	.word	0x200009b4
 80011c8:	40020800 	.word	0x40020800
 80011cc:	200008b3 	.word	0x200008b3
 80011d0:	0800fbac 	.word	0x0800fbac

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_MspInit+0x4c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_MspInit+0x4c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	210f      	movs	r1, #15
 800120e:	f06f 0001 	mvn.w	r0, #1
 8001212:	f001 ff43 	bl	800309c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_ETH_MspInit+0x158>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 8096 	bne.w	8001374 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800124e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a40      	ldr	r2, [pc, #256]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800127e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a3a      	ldr	r2, [pc, #232]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012f0:	2332      	movs	r3, #50	; 0x32
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001300:	230b      	movs	r3, #11
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <HAL_ETH_MspInit+0x160>)
 800130c:	f003 f876 	bl	80043fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001310:	2386      	movs	r3, #134	; 0x86
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001320:	230b      	movs	r3, #11
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <HAL_ETH_MspInit+0x164>)
 800132c:	f003 f866 	bl	80043fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001342:	230b      	movs	r3, #11
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <HAL_ETH_MspInit+0x168>)
 800134e:	f003 f855 	bl	80043fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_ETH_MspInit+0x16c>)
 8001370:	f003 f844 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40028000 	.word	0x40028000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40021800 	.word	0x40021800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0ae      	sub	sp, #184	; 0xb8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2290      	movs	r2, #144	; 0x90
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00e fa61 	bl	800f87c <memset>
  if(huart->Instance==USART3)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_UART_MspInit+0xb4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d13c      	bne.n	800143e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 f89e 	bl	8008514 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013de:	f7ff fd7b 	bl	8000ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_UART_MspInit+0xb8>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_UART_MspInit+0xb8>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_UART_MspInit+0xb8>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_UART_MspInit+0xb8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <HAL_UART_MspInit+0xb8>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_UART_MspInit+0xb8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001432:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_UART_MspInit+0xbc>)
 800143a:	f002 ffdf 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	37b8      	adds	r7, #184	; 0xb8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40004800 	.word	0x40004800
 800144c:	40023800 	.word	0x40023800
 8001450:	40020c00 	.word	0x40020c00

08001454 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0ae      	sub	sp, #184	; 0xb8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2290      	movs	r2, #144	; 0x90
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f00e fa01 	bl	800f87c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001482:	d159      	bne.n	8001538 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001488:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f007 f83d 	bl	8008514 <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014a0:	f7ff fd1a 	bl	8000ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_PCD_MspInit+0xec>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <HAL_PCD_MspInit+0xec>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_PCD_MspInit+0xec>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014d6:	230a      	movs	r3, #10
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <HAL_PCD_MspInit+0xf0>)
 80014e4:	f002 ff8a 	bl	80043fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001500:	4619      	mov	r1, r3
 8001502:	4810      	ldr	r0, [pc, #64]	; (8001544 <HAL_PCD_MspInit+0xf0>)
 8001504:	f002 ff7a 	bl	80043fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_PCD_MspInit+0xec>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <HAL_PCD_MspInit+0xec>)
 800150e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001512:	6353      	str	r3, [r2, #52]	; 0x34
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_PCD_MspInit+0xec>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_PCD_MspInit+0xec>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_PCD_MspInit+0xec>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152a:	6453      	str	r3, [r2, #68]	; 0x44
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_PCD_MspInit+0xec>)
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	37b8      	adds	r7, #184	; 0xb8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000

08001548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_InitTick+0xe0>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a32      	ldr	r2, [pc, #200]	; (8001628 <HAL_InitTick+0xe0>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <HAL_InitTick+0xe0>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001570:	f107 0210 	add.w	r2, r7, #16
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f006 ff98 	bl	80084b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800158a:	f006 ff69 	bl	8008460 <HAL_RCC_GetPCLK1Freq>
 800158e:	6378      	str	r0, [r7, #52]	; 0x34
 8001590:	e004      	b.n	800159c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001592:	f006 ff65 	bl	8008460 <HAL_RCC_GetPCLK1Freq>
 8001596:	4603      	mov	r3, r0
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_InitTick+0xe4>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	3b01      	subs	r3, #1
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_InitTick+0xe8>)
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_InitTick+0xec>)
 80015ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_InitTick+0xe8>)
 80015b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80015b8:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <HAL_InitTick+0xe8>)
 80015ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015bc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_InitTick+0xe8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_InitTick+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_InitTick+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80015d0:	4817      	ldr	r0, [pc, #92]	; (8001630 <HAL_InitTick+0xe8>)
 80015d2:	f008 f809 	bl	80095e8 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11b      	bne.n	800161c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <HAL_InitTick+0xe8>)
 80015e6:	f008 f929 	bl	800983c <HAL_TIM_Base_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015f8:	2032      	movs	r0, #50	; 0x32
 80015fa:	f001 fd7b 	bl	80030f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d808      	bhi.n	8001616 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	2032      	movs	r0, #50	; 0x32
 800160a:	f001 fd47 	bl	800309c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0xf0>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e002      	b.n	800161c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800161c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001620:	4618      	mov	r0, r3
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	431bde83 	.word	0x431bde83
 8001630:	200009c8 	.word	0x200009c8
 8001634:	40000c00 	.word	0x40000c00
 8001638:	20000008 	.word	0x20000008

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MagDataRdy_Pin);
 800166c:	2008      	movs	r0, #8
 800166e:	f003 fbcf 	bl	8004e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Stream0_IRQHandler+0x10>)
 800167e:	f002 f913 	bl	80038a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000a6c 	.word	0x20000a6c

0800168c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Stream6_IRQHandler+0x10>)
 8001692:	f002 f909 	bl	80038a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000acc 	.word	0x20000acc

080016a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <I2C1_EV_IRQHandler+0x10>)
 80016a6:	f004 f88f 	bl	80057c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000a14 	.word	0x20000a14

080016b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <I2C1_ER_IRQHandler+0x10>)
 80016ba:	f004 f89f 	bl	80057fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000a14 	.word	0x20000a14

080016c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lms6dsl_Int1_Pin);
 80016cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016d0:	f003 fb9e 	bl	8004e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <TIM5_IRQHandler+0x10>)
 80016de:	f008 f97b 	bl	80099d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200009c8 	.word	0x200009c8

080016ec <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <BSP_I2C1_Init+0x70>)
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <BSP_I2C1_Init+0x74>)
 80016fa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <BSP_I2C1_Init+0x78>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	4918      	ldr	r1, [pc, #96]	; (8001764 <BSP_I2C1_Init+0x78>)
 8001704:	600a      	str	r2, [r1, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d122      	bne.n	8001750 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <BSP_I2C1_Init+0x70>)
 800170c:	f004 f935 	bl	800597a <HAL_I2C_GetState>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11c      	bne.n	8001750 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001716:	4811      	ldr	r0, [pc, #68]	; (800175c <BSP_I2C1_Init+0x70>)
 8001718:	f000 f8fe 	bl	8001918 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <BSP_I2C1_Init+0x70>)
 8001724:	f000 f8b4 	bl	8001890 <MX_I2C1_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800172e:	f06f 0307 	mvn.w	r3, #7
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e00c      	b.n	8001750 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <BSP_I2C1_Init+0x70>)
 800173a:	f005 fdc3 	bl	80072c4 <HAL_I2CEx_ConfigAnalogFilter>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001744:	f06f 0307 	mvn.w	r3, #7
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	e001      	b.n	8001750 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000a14 	.word	0x20000a14
 8001760:	40005400 	.word	0x40005400
 8001764:	20000a68 	.word	0x20000a68

08001768 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <BSP_I2C1_DeInit+0x48>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d014      	beq.n	80017a4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <BSP_I2C1_DeInit+0x48>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <BSP_I2C1_DeInit+0x48>)
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <BSP_I2C1_DeInit+0x48>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10b      	bne.n	80017a4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <BSP_I2C1_DeInit+0x4c>)
 800178e:	f000 f991 	bl	8001ab4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <BSP_I2C1_DeInit+0x4c>)
 8001794:	f003 fc76 	bl	8005084 <HAL_I2C_DeInit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800179e:	f06f 0307 	mvn.w	r3, #7
 80017a2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000a68 	.word	0x20000a68
 80017b4:	20000a14 	.word	0x20000a14

080017b8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af04      	add	r7, sp, #16
 80017be:	60ba      	str	r2, [r7, #8]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	81fb      	strh	r3, [r7, #14]
 80017c6:	460b      	mov	r3, r1
 80017c8:	81bb      	strh	r3, [r7, #12]
 80017ca:	4613      	mov	r3, r2
 80017cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80017d2:	89ba      	ldrh	r2, [r7, #12]
 80017d4:	89f9      	ldrh	r1, [r7, #14]
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <BSP_I2C1_WriteReg+0x60>)
 80017e8:	f003 fcb2 	bl	8005150 <HAL_I2C_Mem_Write>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <BSP_I2C1_WriteReg+0x60>)
 80017f4:	f004 f8cf 	bl	8005996 <HAL_I2C_GetError>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d103      	bne.n	8001806 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80017fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e002      	b.n	800180c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001806:	f06f 0303 	mvn.w	r3, #3
 800180a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800180c:	697b      	ldr	r3, [r7, #20]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000a14 	.word	0x20000a14

0800181c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af04      	add	r7, sp, #16
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	81fb      	strh	r3, [r7, #14]
 800182a:	460b      	mov	r3, r1
 800182c:	81bb      	strh	r3, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001836:	89ba      	ldrh	r2, [r7, #12]
 8001838:	89f9      	ldrh	r1, [r7, #14]
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	480c      	ldr	r0, [pc, #48]	; (800187c <BSP_I2C1_ReadReg+0x60>)
 800184c:	f003 fda2 	bl	8005394 <HAL_I2C_Mem_Read>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <BSP_I2C1_ReadReg+0x60>)
 8001858:	f004 f89d 	bl	8005996 <HAL_I2C_GetError>
 800185c:	4603      	mov	r3, r0
 800185e:	2b04      	cmp	r3, #4
 8001860:	d103      	bne.n	800186a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001862:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e002      	b.n	8001870 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800186a:	f06f 0303 	mvn.w	r3, #3
 800186e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001870:	697b      	ldr	r3, [r7, #20]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000a14 	.word	0x20000a14

08001880 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001884:	f001 fae8 	bl	8002e58 <HAL_GetTick>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <MX_I2C1_Init+0x80>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <MX_I2C1_Init+0x84>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f003 fab4 	bl	8004e40 <HAL_I2C_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e2:	2100      	movs	r1, #0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 fced 	bl	80072c4 <HAL_I2CEx_ConfigAnalogFilter>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f005 fd5a 	bl	80073b0 <HAL_I2CEx_ConfigDigitalFilter>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40005400 	.word	0x40005400
 8001914:	2010091a 	.word	0x2010091a

08001918 <I2C1_MspInit>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ae      	sub	sp, #184	; 0xb8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2290      	movs	r2, #144	; 0x90
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f00d ffa7 	bl	800f87c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800192e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001932:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001934:	2300      	movs	r3, #0
 8001936:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4618      	mov	r0, r3
 800193e:	f006 fde9 	bl	8008514 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <I2C1_MspInit+0x184>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <I2C1_MspInit+0x184>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <I2C1_MspInit+0x184>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001962:	2312      	movs	r3, #18
 8001964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001974:	2304      	movs	r3, #4
 8001976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800197a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800197e:	4619      	mov	r1, r3
 8001980:	4847      	ldr	r0, [pc, #284]	; (8001aa0 <I2C1_MspInit+0x188>)
 8001982:	f002 fd3b 	bl	80043fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198e:	2312      	movs	r3, #18
 8001990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80019a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019aa:	4619      	mov	r1, r3
 80019ac:	483c      	ldr	r0, [pc, #240]	; (8001aa0 <I2C1_MspInit+0x188>)
 80019ae:	f002 fd25 	bl	80043fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b2:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <I2C1_MspInit+0x184>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <I2C1_MspInit+0x184>)
 80019b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <I2C1_MspInit+0x184>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral DMA init*/

    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019cc:	4a36      	ldr	r2, [pc, #216]	; (8001aa8 <I2C1_MspInit+0x190>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <I2C1_MspInit+0x18c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <I2C1_MspInit+0x18c>)
 8001a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <I2C1_MspInit+0x18c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_i2c1_rx);
 8001a0c:	4825      	ldr	r0, [pc, #148]	; (8001aa4 <I2C1_MspInit+0x18c>)
 8001a0e:	f001 fba1 	bl	8003154 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <I2C1_MspInit+0x18c>)
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a18:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <I2C1_MspInit+0x18c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6393      	str	r3, [r2, #56]	; 0x38

    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <I2C1_MspInit+0x194>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <I2C1_MspInit+0x198>)
 8001a22:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <I2C1_MspInit+0x194>)
 8001a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <I2C1_MspInit+0x194>)
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <I2C1_MspInit+0x194>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <I2C1_MspInit+0x194>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <I2C1_MspInit+0x194>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <I2C1_MspInit+0x194>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <I2C1_MspInit+0x194>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <I2C1_MspInit+0x194>)
 8001a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a58:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <I2C1_MspInit+0x194>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_i2c1_tx);
 8001a60:	4812      	ldr	r0, [pc, #72]	; (8001aac <I2C1_MspInit+0x194>)
 8001a62:	f001 fb77 	bl	8003154 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <I2C1_MspInit+0x194>)
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <I2C1_MspInit+0x194>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6393      	str	r3, [r2, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2105      	movs	r1, #5
 8001a76:	201f      	movs	r0, #31
 8001a78:	f001 fb10 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a7c:	201f      	movs	r0, #31
 8001a7e:	f001 fb39 	bl	80030f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2105      	movs	r1, #5
 8001a86:	2020      	movs	r0, #32
 8001a88:	f001 fb08 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a8c:	2020      	movs	r0, #32
 8001a8e:	f001 fb31 	bl	80030f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	37b8      	adds	r7, #184	; 0xb8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	20000a6c 	.word	0x20000a6c
 8001aa8:	40026010 	.word	0x40026010
 8001aac:	20000acc 	.word	0x20000acc
 8001ab0:	400260a0 	.word	0x400260a0

08001ab4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <I2C1_MspDeInit+0x50>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <I2C1_MspDeInit+0x50>)
 8001ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <I2C1_MspDeInit+0x54>)
 8001ace:	f003 f815 	bl	8004afc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <I2C1_MspDeInit+0x54>)
 8001ad8:	f003 f810 	bl	8004afc <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fd7b 	bl	80035dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fd76 	bl	80035dc <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001af0:	201f      	movs	r0, #31
 8001af2:	f001 fb17 	bl	8003124 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001af6:	2020      	movs	r0, #32
 8001af8:	f001 fb14 	bl	8003124 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020400 	.word	0x40020400

08001b0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b4c:	4c0b      	ldr	r4, [pc, #44]	; (8001b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff ffd7 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f00d fe49 	bl	800f7f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fe85 	bl	8000870 <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b74:	0800ffa0 	.word	0x0800ffa0
  ldr r2, =_sbss
 8001b78:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8001b7c:	20005fb8 	.word	0x20005fb8

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d103      	bne.n	8001ba0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e04b      	b.n	8001c38 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7b1a      	ldrb	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8001bdc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8001be2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e01e      	b.n	8001c38 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4798      	blx	r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e014      	b.n	8001c38 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	331c      	adds	r3, #28
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fa0a 	bl	8002040 <lsm303agr_mag_i2c_interface_set>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e000      	b.n	8001c3a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08001d33 	.word	0x08001d33
 8001c48:	08001d95 	.word	0x08001d95

08001c4c <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	331c      	adds	r3, #28
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f947 	bl	8001eee <lsm303agr_mag_block_data_update_set>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e028      	b.n	8001cbe <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	331c      	adds	r3, #28
 8001c70:	2102      	movs	r1, #2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f8ef 	bl	8001e56 <lsm303agr_mag_operating_mode_set>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e01c      	b.n	8001cbe <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	331c      	adds	r3, #28
 8001c88:	2103      	movs	r1, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f909 	bl	8001ea2 <lsm303agr_mag_data_rate_set>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e010      	b.n	8001cbe <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	331c      	adds	r3, #28
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f980 	bl	8001fa8 <lsm303agr_mag_self_test_set>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e004      	b.n	8001cbe <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	331c      	adds	r3, #28
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f92f 	bl	8001f3a <lsm303agr_mag_device_id_get>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e000      	b.n	8001cea <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e010      	b.n	8001d2a <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	331c      	adds	r3, #28
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f8a1 	bl	8001e56 <lsm303agr_mag_operating_mode_set>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e004      	b.n	8001d2a <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d32:	b590      	push	{r4, r7, lr}
 8001d34:	b087      	sub	sp, #28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	460b      	mov	r3, r1
 8001d40:	72fb      	strb	r3, [r7, #11]
 8001d42:	4613      	mov	r3, r2
 8001d44:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10e      	bne.n	8001d70 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	695c      	ldr	r4, [r3, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	b298      	uxth	r0, r3
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	b299      	uxth	r1, r3
 8001d66:	893b      	ldrh	r3, [r7, #8]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	47a0      	blx	r4
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	e00d      	b.n	8001d8c <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	695c      	ldr	r4, [r3, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	b298      	uxth	r0, r3
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	b299      	uxth	r1, r3
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	47a0      	blx	r4
 8001d8a:	4603      	mov	r3, r0
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	460b      	mov	r3, r1
 8001da2:	72fb      	strb	r3, [r7, #11]
 8001da4:	4613      	mov	r3, r2
 8001da6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10e      	bne.n	8001dd2 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	691c      	ldr	r4, [r3, #16]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	7b1b      	ldrb	r3, [r3, #12]
 8001dbc:	b298      	uxth	r0, r3
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	b299      	uxth	r1, r3
 8001dc8:	893b      	ldrh	r3, [r7, #8]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	47a0      	blx	r4
 8001dce:	4603      	mov	r3, r0
 8001dd0:	e00d      	b.n	8001dee <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	691c      	ldr	r4, [r3, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	7b1b      	ldrb	r3, [r3, #12]
 8001dda:	b298      	uxth	r0, r3
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	b299      	uxth	r1, r3
 8001de6:	893b      	ldrh	r3, [r7, #8]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	47a0      	blx	r4
 8001dec:	4603      	mov	r3, r0
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}

08001df6 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001df6:	b590      	push	{r4, r7, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	461a      	mov	r2, r3
 8001e02:	460b      	mov	r3, r1
 8001e04:	72fb      	strb	r3, [r7, #11]
 8001e06:	4613      	mov	r3, r2
 8001e08:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685c      	ldr	r4, [r3, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6898      	ldr	r0, [r3, #8]
 8001e12:	893b      	ldrh	r3, [r7, #8]
 8001e14:	7af9      	ldrb	r1, [r7, #11]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	47a0      	blx	r4
 8001e1a:	6178      	str	r0, [r7, #20]

  return ret;
 8001e1c:	697b      	ldr	r3, [r7, #20]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}

08001e26 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b087      	sub	sp, #28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	461a      	mov	r2, r3
 8001e32:	460b      	mov	r3, r1
 8001e34:	72fb      	strb	r3, [r7, #11]
 8001e36:	4613      	mov	r3, r2
 8001e38:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681c      	ldr	r4, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6898      	ldr	r0, [r3, #8]
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	7af9      	ldrb	r1, [r7, #11]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	47a0      	blx	r4
 8001e4a:	6178      	str	r0, [r7, #20]

  return ret;
 8001e4c:	697b      	ldr	r3, [r7, #20]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}

08001e56 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001e62:	f107 0208 	add.w	r2, r7, #8
 8001e66:	2301      	movs	r3, #1
 8001e68:	2160      	movs	r1, #96	; 0x60
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffc3 	bl	8001df6 <lsm303agr_read_reg>
 8001e70:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10f      	bne.n	8001e98 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	7a3b      	ldrb	r3, [r7, #8]
 8001e82:	f362 0301 	bfi	r3, r2, #0, #2
 8001e86:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001e88:	f107 0208 	add.w	r2, r7, #8
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	2160      	movs	r1, #96	; 0x60
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ffc8 	bl	8001e26 <lsm303agr_write_reg>
 8001e96:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001eae:	f107 0208 	add.w	r2, r7, #8
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	2160      	movs	r1, #96	; 0x60
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff9d 	bl	8001df6 <lsm303agr_read_reg>
 8001ebc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10f      	bne.n	8001ee4 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	7a3b      	ldrb	r3, [r7, #8]
 8001ece:	f362 0383 	bfi	r3, r2, #2, #2
 8001ed2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001ed4:	f107 0208 	add.w	r2, r7, #8
 8001ed8:	2301      	movs	r3, #1
 8001eda:	2160      	movs	r1, #96	; 0x60
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffa2 	bl	8001e26 <lsm303agr_write_reg>
 8001ee2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	2301      	movs	r3, #1
 8001f00:	2162      	movs	r1, #98	; 0x62
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff77 	bl	8001df6 <lsm303agr_read_reg>
 8001f08:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	7a3b      	ldrb	r3, [r7, #8]
 8001f1a:	f362 1304 	bfi	r3, r2, #4, #1
 8001f1e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001f20:	f107 0208 	add.w	r2, r7, #8
 8001f24:	2301      	movs	r3, #1
 8001f26:	2162      	movs	r1, #98	; 0x62
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff7c 	bl	8001e26 <lsm303agr_write_reg>
 8001f2e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8001f44:	2301      	movs	r3, #1
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	214f      	movs	r1, #79	; 0x4f
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ff53 	bl	8001df6 <lsm303agr_read_reg>
 8001f50:	60f8      	str	r0, [r7, #12]

  return ret;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <lsm303agr_mag_boot_set>:
  * @param  val    Change the values of reboot in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2160      	movs	r1, #96	; 0x60
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff40 	bl	8001df6 <lsm303agr_read_reg>
 8001f76:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <lsm303agr_mag_boot_set+0x42>
  {
    cfg_reg_a_m.reboot = (uint8_t)val;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7a3b      	ldrb	r3, [r7, #8]
 8001f88:	f362 1386 	bfi	r3, r2, #6, #1
 8001f8c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001f8e:	f107 0208 	add.w	r2, r7, #8
 8001f92:	2301      	movs	r3, #1
 8001f94:	2160      	movs	r1, #96	; 0x60
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff45 	bl	8001e26 <lsm303agr_write_reg>
 8001f9c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2162      	movs	r1, #98	; 0x62
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff1a 	bl	8001df6 <lsm303agr_read_reg>
 8001fc2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	7a3b      	ldrb	r3, [r7, #8]
 8001fd4:	f362 0341 	bfi	r3, r2, #1, #1
 8001fd8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8001fda:	f107 0208 	add.w	r2, r7, #8
 8001fde:	2301      	movs	r3, #1
 8001fe0:	2162      	movs	r1, #98	; 0x62
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff1f 	bl	8001e26 <lsm303agr_write_reg>
 8001fe8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <lsm303agr_mag_drdy_on_pin_set>:
  * @param  val    Change the values of drdy_on_pin in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_drdy_on_pin_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002000:	f107 0208 	add.w	r2, r7, #8
 8002004:	2301      	movs	r3, #1
 8002006:	2162      	movs	r1, #98	; 0x62
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fef4 	bl	8001df6 <lsm303agr_read_reg>
 800200e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <lsm303agr_mag_drdy_on_pin_set+0x42>
  {
    cfg_reg_c_m.int_mag = (uint8_t)val;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	7a3b      	ldrb	r3, [r7, #8]
 8002020:	f362 0300 	bfi	r3, r2, #0, #1
 8002024:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	2301      	movs	r3, #1
 800202c:	2162      	movs	r1, #98	; 0x62
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fef9 	bl	8001e26 <lsm303agr_write_reg>
 8002034:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800204c:	f107 0208 	add.w	r2, r7, #8
 8002050:	2301      	movs	r3, #1
 8002052:	2162      	movs	r1, #98	; 0x62
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff fece 	bl	8001df6 <lsm303agr_read_reg>
 800205a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	7a3b      	ldrb	r3, [r7, #8]
 800206c:	f362 1345 	bfi	r3, r2, #5, #1
 8002070:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8002072:	f107 0208 	add.w	r2, r7, #8
 8002076:	2301      	movs	r3, #1
 8002078:	2162      	movs	r1, #98	; 0x62
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fed3 	bl	8001e26 <lsm303agr_write_reg>
 8002080:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e04d      	b.n	8002144 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7b1a      	ldrb	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <LSM6DSL_RegisterBusIO+0xc4>)
 80020e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <LSM6DSL_RegisterBusIO+0xc8>)
 80020ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e020      	b.n	8002144 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4798      	blx	r3
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e016      	b.n	8002144 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d112      	bne.n	8002144 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002128:	230c      	movs	r3, #12
 800212a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	461a      	mov	r2, r3
 8002130:	2112      	movs	r1, #18
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f935 	bl	80023a2 <LSM6DSL_Write_Reg>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	0800251b 	.word	0x0800251b
 8002154:	08002551 	.word	0x08002551

08002158 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	331c      	adds	r3, #28
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fbfd 	bl	8002966 <lsm6dsl_auto_increment_set>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e054      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	331c      	adds	r3, #28
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fb94 	bl	80028ac <lsm6dsl_block_data_update_set>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e048      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	331c      	adds	r3, #28
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fdf0 	bl	8002d7c <lsm6dsl_fifo_mode_set>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e03c      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2204      	movs	r2, #4
 80021ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	331c      	adds	r3, #28
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fa3b 	bl	8002632 <lsm6dsl_xl_data_rate_set>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e02c      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	331c      	adds	r3, #28
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fa09 	bl	80025e6 <lsm6dsl_xl_full_scale_set>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e020      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2204      	movs	r2, #4
 80021e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	331c      	adds	r3, #28
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fad4 	bl	800279c <lsm6dsl_gy_data_rate_set>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e010      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	331c      	adds	r3, #28
 8002204:	2106      	movs	r1, #6
 8002206:	4618      	mov	r0, r3
 8002208:	f000 faa2 	bl	8002750 <lsm6dsl_gy_full_scale_set>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e004      	b.n	8002222 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	331c      	adds	r3, #28
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fb5c 	bl	80028f8 <lsm6dsl_device_id_get>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e000      	b.n	800224e <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e014      	b.n	8002296 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 021c 	add.w	r2, r3, #28
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 f9d9 	bl	8002632 <lsm6dsl_xl_data_rate_set>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	e004      	b.n	8002296 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e01f      	b.n	80022f4 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f103 021c 	add.w	r2, r3, #28
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	332b      	adds	r3, #43	; 0x2b
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f000 f9dd 	bl	8002680 <lsm6dsl_xl_data_rate_get>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	e010      	b.n	80022f4 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	331c      	adds	r3, #28
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f9aa 	bl	8002632 <lsm6dsl_xl_data_rate_set>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	e004      	b.n	80022f4 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e014      	b.n	800233c <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f103 021c 	add.w	r2, r3, #28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f000 fa3b 	bl	800279c <lsm6dsl_gy_data_rate_set>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	e004      	b.n	800233c <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e01f      	b.n	800239a <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f103 021c 	add.w	r2, r3, #28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	332c      	adds	r3, #44	; 0x2c
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f000 fa3e 	bl	80027e8 <lsm6dsl_gy_data_rate_get>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e010      	b.n	800239a <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	331c      	adds	r3, #28
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fa0c 	bl	800279c <lsm6dsl_gy_data_rate_set>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e004      	b.n	800239a <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
 80023ae:	4613      	mov	r3, r2
 80023b0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f103 001c 	add.w	r0, r3, #28
 80023b8:	1cba      	adds	r2, r7, #2
 80023ba:	78f9      	ldrb	r1, [r7, #3]
 80023bc:	2301      	movs	r3, #1
 80023be:	f000 f8fa 	bl	80025b6 <lsm6dsl_write_reg>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	e000      	b.n	80023d0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <LSM6DSL_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	331c      	adds	r3, #28
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fc43 	bl	8002c78 <lsm6dsl_fifo_watermark_set>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	e000      	b.n	8002400 <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <LSM6DSL_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b06      	cmp	r3, #6
 800241c:	bf8c      	ite	hi
 800241e:	2201      	movhi	r2, #1
 8002420:	2200      	movls	r2, #0
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	2a00      	cmp	r2, #0
 8002426:	d10b      	bne.n	8002440 <LSM6DSL_FIFO_Set_Mode+0x38>
 8002428:	2201      	movs	r2, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	60fb      	str	r3, [r7, #12]
      break;
 8002446:	e000      	b.n	800244a <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 8002448:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d101      	bne.n	8002456 <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	e00d      	b.n	8002472 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	331c      	adds	r3, #28
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fc8c 	bl	8002d7c <lsm6dsl_fifo_mode_set>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e000      	b.n	8002472 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <LSM6DSL_FIFO_ACC_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO accelero decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	2b07      	cmp	r3, #7
 800248e:	d903      	bls.n	8002498 <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	60fb      	str	r3, [r7, #12]
      break;
 8002496:	e000      	b.n	800249a <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 8002498:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d101      	bne.n	80024a6 <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	e00d      	b.n	80024c2 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	331c      	adds	r3, #28
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fc18 	bl	8002ce4 <lsm6dsl_fifo_xl_batch_set>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e000      	b.n	80024c2 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 80024c0:	68fb      	ldr	r3, [r7, #12]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <LSM6DSL_FIFO_GYRO_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO gyro decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d903      	bls.n	80024e8 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	60fb      	str	r3, [r7, #12]
      break;
 80024e6:	e000      	b.n	80024ea <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 80024e8:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d101      	bne.n	80024f6 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	e00d      	b.n	8002512 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	331c      	adds	r3, #28
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fc16 	bl	8002d30 <lsm6dsl_fifo_gy_batch_set>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e000      	b.n	8002512 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800251a:	b590      	push	{r4, r7, lr}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	461a      	mov	r2, r3
 8002526:	460b      	mov	r3, r1
 8002528:	72fb      	strb	r3, [r7, #11]
 800252a:	4613      	mov	r3, r2
 800252c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	695c      	ldr	r4, [r3, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	7b1b      	ldrb	r3, [r3, #12]
 800253a:	b298      	uxth	r0, r3
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	b299      	uxth	r1, r3
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	47a0      	blx	r4
 8002546:	4603      	mov	r3, r0
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd90      	pop	{r4, r7, pc}

08002550 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	461a      	mov	r2, r3
 800255c:	460b      	mov	r3, r1
 800255e:	72fb      	strb	r3, [r7, #11]
 8002560:	4613      	mov	r3, r2
 8002562:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	691c      	ldr	r4, [r3, #16]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	b298      	uxth	r0, r3
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	b299      	uxth	r1, r3
 8002576:	893b      	ldrh	r3, [r7, #8]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	47a0      	blx	r4
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}

08002586 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002586:	b590      	push	{r4, r7, lr}
 8002588:	b087      	sub	sp, #28
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	461a      	mov	r2, r3
 8002592:	460b      	mov	r3, r1
 8002594:	72fb      	strb	r3, [r7, #11]
 8002596:	4613      	mov	r3, r2
 8002598:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685c      	ldr	r4, [r3, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6898      	ldr	r0, [r3, #8]
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	7af9      	ldrb	r1, [r7, #11]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	47a0      	blx	r4
 80025aa:	6178      	str	r0, [r7, #20]

  return ret;
 80025ac:	697b      	ldr	r3, [r7, #20]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}

080025b6 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80025b6:	b590      	push	{r4, r7, lr}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	461a      	mov	r2, r3
 80025c2:	460b      	mov	r3, r1
 80025c4:	72fb      	strb	r3, [r7, #11]
 80025c6:	4613      	mov	r3, r2
 80025c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681c      	ldr	r4, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6898      	ldr	r0, [r3, #8]
 80025d2:	893b      	ldrh	r3, [r7, #8]
 80025d4:	7af9      	ldrb	r1, [r7, #11]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	47a0      	blx	r4
 80025da:	6178      	str	r0, [r7, #20]

  return ret;
 80025dc:	697b      	ldr	r3, [r7, #20]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}

080025e6 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	2301      	movs	r3, #1
 80025f8:	2110      	movs	r1, #16
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffc3 	bl	8002586 <lsm6dsl_read_reg>
 8002600:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10f      	bne.n	8002628 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	b2da      	uxtb	r2, r3
 8002610:	7a3b      	ldrb	r3, [r7, #8]
 8002612:	f362 0383 	bfi	r3, r2, #2, #2
 8002616:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002618:	f107 0208 	add.w	r2, r7, #8
 800261c:	2301      	movs	r3, #1
 800261e:	2110      	movs	r1, #16
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ffc8 	bl	80025b6 <lsm6dsl_write_reg>
 8002626:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800263e:	f107 0208 	add.w	r2, r7, #8
 8002642:	2301      	movs	r3, #1
 8002644:	2110      	movs	r1, #16
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff9d 	bl	8002586 <lsm6dsl_read_reg>
 800264c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10f      	bne.n	8002674 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	b2da      	uxtb	r2, r3
 800265c:	7a3b      	ldrb	r3, [r7, #8]
 800265e:	f362 1307 	bfi	r3, r2, #4, #4
 8002662:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002664:	f107 0208 	add.w	r2, r7, #8
 8002668:	2301      	movs	r3, #1
 800266a:	2110      	movs	r1, #16
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ffa2 	bl	80025b6 <lsm6dsl_write_reg>
 8002672:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800268a:	f107 0208 	add.w	r2, r7, #8
 800268e:	2301      	movs	r3, #1
 8002690:	2110      	movs	r1, #16
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ff77 	bl	8002586 <lsm6dsl_read_reg>
 8002698:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800269a:	7a3b      	ldrb	r3, [r7, #8]
 800269c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b0b      	cmp	r3, #11
 80026a4:	d84a      	bhi.n	800273c <lsm6dsl_xl_data_rate_get+0xbc>
 80026a6:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <lsm6dsl_xl_data_rate_get+0x2c>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080026dd 	.word	0x080026dd
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	080026ed 	.word	0x080026ed
 80026b8:	080026f5 	.word	0x080026f5
 80026bc:	080026fd 	.word	0x080026fd
 80026c0:	08002705 	.word	0x08002705
 80026c4:	0800270d 	.word	0x0800270d
 80026c8:	08002715 	.word	0x08002715
 80026cc:	0800271d 	.word	0x0800271d
 80026d0:	08002725 	.word	0x08002725
 80026d4:	0800272d 	.word	0x0800272d
 80026d8:	08002735 	.word	0x08002735
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
      break;
 80026e2:	e02f      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
      break;
 80026ea:	e02b      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
      break;
 80026f2:	e027      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2203      	movs	r2, #3
 80026f8:	701a      	strb	r2, [r3, #0]
      break;
 80026fa:	e023      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2204      	movs	r2, #4
 8002700:	701a      	strb	r2, [r3, #0]
      break;
 8002702:	e01f      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2205      	movs	r2, #5
 8002708:	701a      	strb	r2, [r3, #0]
      break;
 800270a:	e01b      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2206      	movs	r2, #6
 8002710:	701a      	strb	r2, [r3, #0]
      break;
 8002712:	e017      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2207      	movs	r2, #7
 8002718:	701a      	strb	r2, [r3, #0]
      break;
 800271a:	e013      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2208      	movs	r2, #8
 8002720:	701a      	strb	r2, [r3, #0]
      break;
 8002722:	e00f      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2209      	movs	r2, #9
 8002728:	701a      	strb	r2, [r3, #0]
      break;
 800272a:	e00b      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	220a      	movs	r2, #10
 8002730:	701a      	strb	r2, [r3, #0]
      break;
 8002732:	e007      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	220b      	movs	r2, #11
 8002738:	701a      	strb	r2, [r3, #0]
      break;
 800273a:	e003      	b.n	8002744 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	220c      	movs	r2, #12
 8002740:	701a      	strb	r2, [r3, #0]
      break;
 8002742:	bf00      	nop
  }

  return ret;
 8002744:	68fb      	ldr	r3, [r7, #12]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop

08002750 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800275c:	f107 0208 	add.w	r2, r7, #8
 8002760:	2301      	movs	r3, #1
 8002762:	2111      	movs	r1, #17
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff0e 	bl	8002586 <lsm6dsl_read_reg>
 800276a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	b2da      	uxtb	r2, r3
 800277a:	7a3b      	ldrb	r3, [r7, #8]
 800277c:	f362 0343 	bfi	r3, r2, #1, #3
 8002780:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002782:	f107 0208 	add.w	r2, r7, #8
 8002786:	2301      	movs	r3, #1
 8002788:	2111      	movs	r1, #17
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ff13 	bl	80025b6 <lsm6dsl_write_reg>
 8002790:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80027a8:	f107 0208 	add.w	r2, r7, #8
 80027ac:	2301      	movs	r3, #1
 80027ae:	2111      	movs	r1, #17
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fee8 	bl	8002586 <lsm6dsl_read_reg>
 80027b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	7a3b      	ldrb	r3, [r7, #8]
 80027c8:	f362 1307 	bfi	r3, r2, #4, #4
 80027cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80027ce:	f107 0208 	add.w	r2, r7, #8
 80027d2:	2301      	movs	r3, #1
 80027d4:	2111      	movs	r1, #17
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff feed 	bl	80025b6 <lsm6dsl_write_reg>
 80027dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80027f2:	f107 0208 	add.w	r2, r7, #8
 80027f6:	2301      	movs	r3, #1
 80027f8:	2111      	movs	r1, #17
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fec3 	bl	8002586 <lsm6dsl_read_reg>
 8002800:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 8002802:	7a3b      	ldrb	r3, [r7, #8]
 8002804:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b0a      	cmp	r3, #10
 800280c:	d844      	bhi.n	8002898 <lsm6dsl_gy_data_rate_get+0xb0>
 800280e:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <lsm6dsl_gy_data_rate_get+0x2c>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	08002841 	.word	0x08002841
 8002818:	08002849 	.word	0x08002849
 800281c:	08002851 	.word	0x08002851
 8002820:	08002859 	.word	0x08002859
 8002824:	08002861 	.word	0x08002861
 8002828:	08002869 	.word	0x08002869
 800282c:	08002871 	.word	0x08002871
 8002830:	08002879 	.word	0x08002879
 8002834:	08002881 	.word	0x08002881
 8002838:	08002889 	.word	0x08002889
 800283c:	08002891 	.word	0x08002891
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e02b      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
      break;
 800284e:	e027      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
      break;
 8002856:	e023      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2203      	movs	r2, #3
 800285c:	701a      	strb	r2, [r3, #0]
      break;
 800285e:	e01f      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2204      	movs	r2, #4
 8002864:	701a      	strb	r2, [r3, #0]
      break;
 8002866:	e01b      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2205      	movs	r2, #5
 800286c:	701a      	strb	r2, [r3, #0]
      break;
 800286e:	e017      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2206      	movs	r2, #6
 8002874:	701a      	strb	r2, [r3, #0]
      break;
 8002876:	e013      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2207      	movs	r2, #7
 800287c:	701a      	strb	r2, [r3, #0]
      break;
 800287e:	e00f      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2208      	movs	r2, #8
 8002884:	701a      	strb	r2, [r3, #0]
      break;
 8002886:	e00b      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2209      	movs	r2, #9
 800288c:	701a      	strb	r2, [r3, #0]
      break;
 800288e:	e007      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	220a      	movs	r2, #10
 8002894:	701a      	strb	r2, [r3, #0]
      break;
 8002896:	e003      	b.n	80028a0 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	220b      	movs	r2, #11
 800289c:	701a      	strb	r2, [r3, #0]
      break;
 800289e:	bf00      	nop
  }

  return ret;
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop

080028ac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028b8:	f107 0208 	add.w	r2, r7, #8
 80028bc:	2301      	movs	r3, #1
 80028be:	2112      	movs	r1, #18
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fe60 	bl	8002586 <lsm6dsl_read_reg>
 80028c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	7a3b      	ldrb	r3, [r7, #8]
 80028d8:	f362 1386 	bfi	r3, r2, #6, #1
 80028dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028de:	f107 0208 	add.w	r2, r7, #8
 80028e2:	2301      	movs	r3, #1
 80028e4:	2112      	movs	r1, #18
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fe65 	bl	80025b6 <lsm6dsl_write_reg>
 80028ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002902:	2301      	movs	r3, #1
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	210f      	movs	r1, #15
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe3c 	bl	8002586 <lsm6dsl_read_reg>
 800290e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002910:	68fb      	ldr	r3, [r7, #12]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002926:	f107 0208 	add.w	r2, r7, #8
 800292a:	2301      	movs	r3, #1
 800292c:	2112      	movs	r1, #18
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fe29 	bl	8002586 <lsm6dsl_read_reg>
 8002934:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	7a3b      	ldrb	r3, [r7, #8]
 8002946:	f362 0300 	bfi	r3, r2, #0, #1
 800294a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800294c:	f107 0208 	add.w	r2, r7, #8
 8002950:	2301      	movs	r3, #1
 8002952:	2112      	movs	r1, #18
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fe2e 	bl	80025b6 <lsm6dsl_write_reg>
 800295a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800295c:	68fb      	ldr	r3, [r7, #12]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002972:	f107 0208 	add.w	r2, r7, #8
 8002976:	2301      	movs	r3, #1
 8002978:	2112      	movs	r1, #18
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fe03 	bl	8002586 <lsm6dsl_read_reg>
 8002980:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	7a3b      	ldrb	r3, [r7, #8]
 8002992:	f362 0382 	bfi	r3, r2, #2, #1
 8002996:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002998:	f107 0208 	add.w	r2, r7, #8
 800299c:	2301      	movs	r3, #1
 800299e:	2112      	movs	r1, #18
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe08 	bl	80025b6 <lsm6dsl_write_reg>
 80029a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029a8:	68fb      	ldr	r3, [r7, #12]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80029bc:	f107 021c 	add.w	r2, r7, #28
 80029c0:	2301      	movs	r3, #1
 80029c2:	210d      	movs	r1, #13
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fdde 	bl	8002586 <lsm6dsl_read_reg>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d147      	bne.n	8002a62 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 80029d2:	783b      	ldrb	r3, [r7, #0]
 80029d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	7f3b      	ldrb	r3, [r7, #28]
 80029dc:	f362 0300 	bfi	r3, r2, #0, #1
 80029e0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80029e2:	783b      	ldrb	r3, [r7, #0]
 80029e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	7f3b      	ldrb	r3, [r7, #28]
 80029ec:	f362 0341 	bfi	r3, r2, #1, #1
 80029f0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80029f2:	783b      	ldrb	r3, [r7, #0]
 80029f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	7f3b      	ldrb	r3, [r7, #28]
 80029fc:	f362 0382 	bfi	r3, r2, #2, #1
 8002a00:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8002a02:	783b      	ldrb	r3, [r7, #0]
 8002a04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	7f3b      	ldrb	r3, [r7, #28]
 8002a0c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002a10:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8002a12:	783b      	ldrb	r3, [r7, #0]
 8002a14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	7f3b      	ldrb	r3, [r7, #28]
 8002a1c:	f362 1304 	bfi	r3, r2, #4, #1
 8002a20:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8002a22:	783b      	ldrb	r3, [r7, #0]
 8002a24:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	7f3b      	ldrb	r3, [r7, #28]
 8002a2c:	f362 1345 	bfi	r3, r2, #5, #1
 8002a30:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8002a32:	783b      	ldrb	r3, [r7, #0]
 8002a34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	7f3b      	ldrb	r3, [r7, #28]
 8002a3c:	f362 1386 	bfi	r3, r2, #6, #1
 8002a40:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8002a42:	783b      	ldrb	r3, [r7, #0]
 8002a44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	7f3b      	ldrb	r3, [r7, #28]
 8002a4c:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a50:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002a52:	f107 021c 	add.w	r2, r7, #28
 8002a56:	2301      	movs	r3, #1
 8002a58:	210d      	movs	r1, #13
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fdab 	bl	80025b6 <lsm6dsl_write_reg>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002a68:	f107 0218 	add.w	r2, r7, #24
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	215e      	movs	r1, #94	; 0x5e
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fd88 	bl	8002586 <lsm6dsl_read_reg>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d107      	bne.n	8002a8e <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002a7e:	f107 0214 	add.w	r2, r7, #20
 8002a82:	2301      	movs	r3, #1
 8002a84:	215f      	movs	r1, #95	; 0x5f
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fd7d 	bl	8002586 <lsm6dsl_read_reg>
 8002a8c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d147      	bne.n	8002b24 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	7e3b      	ldrb	r3, [r7, #24]
 8002a9e:	f362 0300 	bfi	r3, r2, #0, #1
 8002aa2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	7e3b      	ldrb	r3, [r7, #24]
 8002aae:	f362 0341 	bfi	r3, r2, #1, #1
 8002ab2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	7e3b      	ldrb	r3, [r7, #24]
 8002abe:	f362 0382 	bfi	r3, r2, #2, #1
 8002ac2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	7e3b      	ldrb	r3, [r7, #24]
 8002ace:	f362 03c3 	bfi	r3, r2, #3, #1
 8002ad2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	7e3b      	ldrb	r3, [r7, #24]
 8002ade:	f362 1304 	bfi	r3, r2, #4, #1
 8002ae2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	7e3b      	ldrb	r3, [r7, #24]
 8002aee:	f362 1345 	bfi	r3, r2, #5, #1
 8002af2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	7e3b      	ldrb	r3, [r7, #24]
 8002afe:	f362 1386 	bfi	r3, r2, #6, #1
 8002b02:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	7e3b      	ldrb	r3, [r7, #24]
 8002b0e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b12:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002b14:	f107 0218 	add.w	r2, r7, #24
 8002b18:	2301      	movs	r3, #1
 8002b1a:	215e      	movs	r1, #94	; 0x5e
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fd4a 	bl	80025b6 <lsm6dsl_write_reg>
 8002b22:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d107      	bne.n	8002b3a <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002b2a:	f107 0210 	add.w	r2, r7, #16
 8002b2e:	2301      	movs	r3, #1
 8002b30:	2113      	movs	r1, #19
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fd27 	bl	8002586 <lsm6dsl_read_reg>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002b40:	78bb      	ldrb	r3, [r7, #2]
 8002b42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	7c3b      	ldrb	r3, [r7, #16]
 8002b4a:	f362 1304 	bfi	r3, r2, #4, #1
 8002b4e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002b50:	f107 0210 	add.w	r2, r7, #16
 8002b54:	2301      	movs	r3, #1
 8002b56:	2113      	movs	r1, #19
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fd2c 	bl	80025b6 <lsm6dsl_write_reg>
 8002b5e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b66:	f107 0220 	add.w	r2, r7, #32
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	211a      	movs	r1, #26
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fd09 	bl	8002586 <lsm6dsl_read_reg>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d111      	bne.n	8002ba0 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8002b7c:	78bb      	ldrb	r3, [r7, #2]
 8002b7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b88:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b8c:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b90:	f107 0220 	add.w	r2, r7, #32
 8002b94:	2301      	movs	r3, #1
 8002b96:	211a      	movs	r1, #26
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fd0c 	bl	80025b6 <lsm6dsl_write_reg>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d158      	bne.n	8002c58 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002ba6:	f107 020c 	add.w	r2, r7, #12
 8002baa:	2301      	movs	r3, #1
 8002bac:	2158      	movs	r1, #88	; 0x58
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fce9 	bl	8002586 <lsm6dsl_read_reg>
 8002bb4:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d141      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002bc2:	787b      	ldrb	r3, [r7, #1]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d13b      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002bce:	787b      	ldrb	r3, [r7, #1]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d135      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002bda:	787b      	ldrb	r3, [r7, #1]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d12f      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002be6:	787b      	ldrb	r3, [r7, #1]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d129      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002bf2:	787b      	ldrb	r3, [r7, #1]
 8002bf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bf8:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d123      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002bfe:	7d3b      	ldrb	r3, [r7, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11d      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002c0a:	7d3b      	ldrb	r3, [r7, #20]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d117      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002c16:	7d3b      	ldrb	r3, [r7, #20]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d111      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002c22:	7d3b      	ldrb	r3, [r7, #20]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002c2e:	7d3b      	ldrb	r3, [r7, #20]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8002c3a:	7d3b      	ldrb	r3, [r7, #20]
 8002c3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c40:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002c46:	7b3b      	ldrb	r3, [r7, #12]
 8002c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4c:	733b      	strb	r3, [r7, #12]
 8002c4e:	e003      	b.n	8002c58 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	f36f 13c7 	bfc	r3, #7, #1
 8002c56:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002c5e:	f107 020c 	add.w	r2, r7, #12
 8002c62:	2301      	movs	r3, #1
 8002c64:	2158      	movs	r1, #88	; 0x58
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fca5 	bl	80025b6 <lsm6dsl_write_reg>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8002c84:	f107 020c 	add.w	r2, r7, #12
 8002c88:	2301      	movs	r3, #1
 8002c8a:	2107      	movs	r1, #7
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fc7a 	bl	8002586 <lsm6dsl_read_reg>
 8002c92:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11f      	bne.n	8002cda <lsm6dsl_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.fth = (uint8_t)(0x00FFU & val);
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t)((0x0700U & val) >> 8);
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	7b3b      	ldrb	r3, [r7, #12]
 8002cae:	f362 0302 	bfi	r3, r2, #0, #3
 8002cb2:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 8002cb4:	f107 0210 	add.w	r2, r7, #16
 8002cb8:	2301      	movs	r3, #1
 8002cba:	2106      	movs	r1, #6
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fc7a 	bl	80025b6 <lsm6dsl_write_reg>
 8002cc2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <lsm6dsl_fifo_watermark_set+0x62>
    {
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8002cca:	f107 020c 	add.w	r2, r7, #12
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2107      	movs	r1, #7
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fc6f 	bl	80025b6 <lsm6dsl_write_reg>
 8002cd8:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 8002cda:	697b      	ldr	r3, [r7, #20]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002cf0:	f107 0208 	add.w	r2, r7, #8
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fc44 	bl	8002586 <lsm6dsl_read_reg>
 8002cfe:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <lsm6dsl_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	7a3b      	ldrb	r3, [r7, #8]
 8002d10:	f362 0302 	bfi	r3, r2, #0, #3
 8002d14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002d16:	f107 0208 	add.w	r2, r7, #8
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fc49 	bl	80025b6 <lsm6dsl_write_reg>
 8002d24:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	2301      	movs	r3, #1
 8002d42:	2108      	movs	r1, #8
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fc1e 	bl	8002586 <lsm6dsl_read_reg>
 8002d4a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <lsm6dsl_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	7a3b      	ldrb	r3, [r7, #8]
 8002d5c:	f362 03c5 	bfi	r3, r2, #3, #3
 8002d60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8002d62:	f107 0208 	add.w	r2, r7, #8
 8002d66:	2301      	movs	r3, #1
 8002d68:	2108      	movs	r1, #8
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fc23 	bl	80025b6 <lsm6dsl_write_reg>
 8002d70:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d88:	f107 0208 	add.w	r2, r7, #8
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	210a      	movs	r1, #10
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff fbf8 	bl	8002586 <lsm6dsl_read_reg>
 8002d96:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	7a3b      	ldrb	r3, [r7, #8]
 8002da8:	f362 0302 	bfi	r3, r2, #0, #3
 8002dac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002dae:	f107 0208 	add.w	r2, r7, #8
 8002db2:	2301      	movs	r3, #1
 8002db4:	210a      	movs	r1, #10
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fbfd 	bl	80025b6 <lsm6dsl_write_reg>
 8002dbc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002dd4:	f107 0208 	add.w	r2, r7, #8
 8002dd8:	2301      	movs	r3, #1
 8002dda:	210a      	movs	r1, #10
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fbd2 	bl	8002586 <lsm6dsl_read_reg>
 8002de2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <lsm6dsl_fifo_data_rate_set+0x42>
  {
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	7a3b      	ldrb	r3, [r7, #8]
 8002df4:	f362 03c6 	bfi	r3, r2, #3, #4
 8002df8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002dfa:	f107 0208 	add.w	r2, r7, #8
 8002dfe:	2301      	movs	r3, #1
 8002e00:	210a      	movs	r1, #10
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fbd7 	bl	80025b6 <lsm6dsl_write_reg>
 8002e08:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f000 f91f 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1e:	200f      	movs	r0, #15
 8002e20:	f7fe fb92 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e24:	f7fe f9d6 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_IncTick+0x20>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_IncTick+0x24>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_IncTick+0x24>)
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	2000000c 	.word	0x2000000c
 8002e54:	20000b2c 	.word	0x20000b2c

08002e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_GetTick+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000b2c 	.word	0x20000b2c

08002e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff ffee 	bl	8002e58 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d005      	beq.n	8002e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_Delay+0x44>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e96:	bf00      	nop
 8002e98:	f7ff ffde 	bl	8002e58 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d8f7      	bhi.n	8002e98 <HAL_Delay+0x28>
  {
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00
 8002efc:	05fa0000 	.word	0x05fa0000

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db12      	blt.n	8002f90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	490a      	ldr	r1, [pc, #40]	; (8002f9c <__NVIC_DisableIRQ+0x44>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	3320      	adds	r3, #32
 8002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f84:	f3bf 8f4f 	dsb	sy
}
 8002f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f8a:	f3bf 8f6f 	isb	sy
}
 8002f8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	; (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b07      	cmp	r3, #7
 8003068:	d00f      	beq.n	800308a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d00c      	beq.n	800308a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b05      	cmp	r3, #5
 8003074:	d009      	beq.n	800308a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d006      	beq.n	800308a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d003      	beq.n	800308a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003082:	2191      	movs	r1, #145	; 0x91
 8003084:	4804      	ldr	r0, [pc, #16]	; (8003098 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003086:	f7fd ff2d 	bl	8000ee4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff14 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	0800fbc0 	.word	0x0800fbc0

0800309c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d903      	bls.n	80030bc <HAL_NVIC_SetPriority+0x20>
 80030b4:	21a9      	movs	r1, #169	; 0xa9
 80030b6:	480e      	ldr	r0, [pc, #56]	; (80030f0 <HAL_NVIC_SetPriority+0x54>)
 80030b8:	f7fd ff14 	bl	8000ee4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	d903      	bls.n	80030ca <HAL_NVIC_SetPriority+0x2e>
 80030c2:	21aa      	movs	r1, #170	; 0xaa
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <HAL_NVIC_SetPriority+0x54>)
 80030c6:	f7fd ff0d 	bl	8000ee4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ca:	f7ff ff19 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 80030ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f7ff ff8d 	bl	8002ff4 <NVIC_EncodePriority>
 80030da:	4602      	mov	r2, r0
 80030dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff5c 	bl	8002fa0 <__NVIC_SetPriority>
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	0800fbc0 	.word	0x0800fbc0

080030f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da03      	bge.n	800310e <HAL_NVIC_EnableIRQ+0x1a>
 8003106:	21bd      	movs	r1, #189	; 0xbd
 8003108:	4805      	ldr	r0, [pc, #20]	; (8003120 <HAL_NVIC_EnableIRQ+0x2c>)
 800310a:	f7fd feeb 	bl	8000ee4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff02 	bl	8002f1c <__NVIC_EnableIRQ>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	0800fbc0 	.word	0x0800fbc0

08003124 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	da03      	bge.n	800313e <HAL_NVIC_DisableIRQ+0x1a>
 8003136:	21cd      	movs	r1, #205	; 0xcd
 8003138:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_NVIC_DisableIRQ+0x2c>)
 800313a:	f7fd fed3 	bl	8000ee4 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff08 	bl	8002f58 <__NVIC_DisableIRQ>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0800fbc0 	.word	0x0800fbc0

08003154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff fe7a 	bl	8002e58 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e22c      	b.n	80035ca <HAL_DMA_Init+0x476>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a82      	ldr	r2, [pc, #520]	; (8003380 <HAL_DMA_Init+0x22c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04e      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a81      	ldr	r2, [pc, #516]	; (8003384 <HAL_DMA_Init+0x230>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d049      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7f      	ldr	r2, [pc, #508]	; (8003388 <HAL_DMA_Init+0x234>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d044      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7e      	ldr	r2, [pc, #504]	; (800338c <HAL_DMA_Init+0x238>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d03f      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7c      	ldr	r2, [pc, #496]	; (8003390 <HAL_DMA_Init+0x23c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03a      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a7b      	ldr	r2, [pc, #492]	; (8003394 <HAL_DMA_Init+0x240>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d035      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a79      	ldr	r2, [pc, #484]	; (8003398 <HAL_DMA_Init+0x244>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d030      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a78      	ldr	r2, [pc, #480]	; (800339c <HAL_DMA_Init+0x248>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02b      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a76      	ldr	r2, [pc, #472]	; (80033a0 <HAL_DMA_Init+0x24c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d026      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <HAL_DMA_Init+0x250>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d021      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a73      	ldr	r2, [pc, #460]	; (80033a8 <HAL_DMA_Init+0x254>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01c      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a72      	ldr	r2, [pc, #456]	; (80033ac <HAL_DMA_Init+0x258>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d017      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a70      	ldr	r2, [pc, #448]	; (80033b0 <HAL_DMA_Init+0x25c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d012      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6f      	ldr	r2, [pc, #444]	; (80033b4 <HAL_DMA_Init+0x260>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00d      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_DMA_Init+0x264>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d008      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6c      	ldr	r2, [pc, #432]	; (80033bc <HAL_DMA_Init+0x268>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <HAL_DMA_Init+0xc4>
 8003210:	21b8      	movs	r1, #184	; 0xb8
 8003212:	486b      	ldr	r0, [pc, #428]	; (80033c0 <HAL_DMA_Init+0x26c>)
 8003214:	f7fd fe66 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d04e      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003228:	d049      	beq.n	80032be <HAL_DMA_Init+0x16a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003232:	d044      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800323c:	d03f      	beq.n	80032be <HAL_DMA_Init+0x16a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003246:	d03a      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003250:	d035      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800325a:	d030      	beq.n	80032be <HAL_DMA_Init+0x16a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003264:	d02b      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326e:	d026      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f1b3 5f90 	cmp.w	r3, #301989888	; 0x12000000
 8003278:	d021      	beq.n	80032be <HAL_DMA_Init+0x16a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8003282:	d01c      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f1b3 5fb0 	cmp.w	r3, #369098752	; 0x16000000
 800328c:	d017      	beq.n	80032be <HAL_DMA_Init+0x16a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003296:	d012      	beq.n	80032be <HAL_DMA_Init+0x16a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f1b3 5fd0 	cmp.w	r3, #436207616	; 0x1a000000
 80032a0:	d00d      	beq.n	80032be <HAL_DMA_Init+0x16a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80032aa:	d008      	beq.n	80032be <HAL_DMA_Init+0x16a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f1b3 5ff0 	cmp.w	r3, #503316480	; 0x1e000000
 80032b4:	d003      	beq.n	80032be <HAL_DMA_Init+0x16a>
 80032b6:	21b9      	movs	r1, #185	; 0xb9
 80032b8:	4841      	ldr	r0, [pc, #260]	; (80033c0 <HAL_DMA_Init+0x26c>)
 80032ba:	f7fd fe13 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_DMA_Init+0x18a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d007      	beq.n	80032de <HAL_DMA_Init+0x18a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b80      	cmp	r3, #128	; 0x80
 80032d4:	d003      	beq.n	80032de <HAL_DMA_Init+0x18a>
 80032d6:	21ba      	movs	r1, #186	; 0xba
 80032d8:	4839      	ldr	r0, [pc, #228]	; (80033c0 <HAL_DMA_Init+0x26c>)
 80032da:	f7fd fe03 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e6:	d007      	beq.n	80032f8 <HAL_DMA_Init+0x1a4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_DMA_Init+0x1a4>
 80032f0:	21bb      	movs	r1, #187	; 0xbb
 80032f2:	4833      	ldr	r0, [pc, #204]	; (80033c0 <HAL_DMA_Init+0x26c>)
 80032f4:	f7fd fdf6 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003300:	d007      	beq.n	8003312 <HAL_DMA_Init+0x1be>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_DMA_Init+0x1be>
 800330a:	21bc      	movs	r1, #188	; 0xbc
 800330c:	482c      	ldr	r0, [pc, #176]	; (80033c0 <HAL_DMA_Init+0x26c>)
 800330e:	f7fd fde9 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <HAL_DMA_Init+0x1e2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Init+0x1e2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d003      	beq.n	8003336 <HAL_DMA_Init+0x1e2>
 800332e:	21bd      	movs	r1, #189	; 0xbd
 8003330:	4823      	ldr	r0, [pc, #140]	; (80033c0 <HAL_DMA_Init+0x26c>)
 8003332:	f7fd fdd7 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <HAL_DMA_Init+0x206>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d008      	beq.n	800335a <HAL_DMA_Init+0x206>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003350:	d003      	beq.n	800335a <HAL_DMA_Init+0x206>
 8003352:	21be      	movs	r1, #190	; 0xbe
 8003354:	481a      	ldr	r0, [pc, #104]	; (80033c0 <HAL_DMA_Init+0x26c>)
 8003356:	f7fd fdc5 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d030      	beq.n	80033c4 <HAL_DMA_Init+0x270>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336a:	d02b      	beq.n	80033c4 <HAL_DMA_Init+0x270>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b20      	cmp	r3, #32
 8003372:	d027      	beq.n	80033c4 <HAL_DMA_Init+0x270>
 8003374:	21bf      	movs	r1, #191	; 0xbf
 8003376:	4812      	ldr	r0, [pc, #72]	; (80033c0 <HAL_DMA_Init+0x26c>)
 8003378:	f7fd fdb4 	bl	8000ee4 <assert_failed>
 800337c:	e022      	b.n	80033c4 <HAL_DMA_Init+0x270>
 800337e:	bf00      	nop
 8003380:	40026010 	.word	0x40026010
 8003384:	40026028 	.word	0x40026028
 8003388:	40026040 	.word	0x40026040
 800338c:	40026058 	.word	0x40026058
 8003390:	40026070 	.word	0x40026070
 8003394:	40026088 	.word	0x40026088
 8003398:	400260a0 	.word	0x400260a0
 800339c:	400260b8 	.word	0x400260b8
 80033a0:	40026410 	.word	0x40026410
 80033a4:	40026428 	.word	0x40026428
 80033a8:	40026440 	.word	0x40026440
 80033ac:	40026458 	.word	0x40026458
 80033b0:	40026470 	.word	0x40026470
 80033b4:	40026488 	.word	0x40026488
 80033b8:	400264a0 	.word	0x400264a0
 80033bc:	400264b8 	.word	0x400264b8
 80033c0:	0800fbfc 	.word	0x0800fbfc
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <HAL_DMA_Init+0x29e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d00d      	beq.n	80033f2 <HAL_DMA_Init+0x29e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Init+0x29e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033e8:	d003      	beq.n	80033f2 <HAL_DMA_Init+0x29e>
 80033ea:	21c0      	movs	r1, #192	; 0xc0
 80033ec:	4879      	ldr	r0, [pc, #484]	; (80035d4 <HAL_DMA_Init+0x480>)
 80033ee:	f7fd fd79 	bl	8000ee4 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Init+0x2b6>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d003      	beq.n	800340a <HAL_DMA_Init+0x2b6>
 8003402:	21c1      	movs	r1, #193	; 0xc1
 8003404:	4873      	ldr	r0, [pc, #460]	; (80035d4 <HAL_DMA_Init+0x480>)
 8003406:	f7fd fd6d 	bl	8000ee4 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d041      	beq.n	8003496 <HAL_DMA_Init+0x342>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00f      	beq.n	800343a <HAL_DMA_Init+0x2e6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	2b01      	cmp	r3, #1
 8003420:	d00b      	beq.n	800343a <HAL_DMA_Init+0x2e6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	2b02      	cmp	r3, #2
 8003428:	d007      	beq.n	800343a <HAL_DMA_Init+0x2e6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	2b03      	cmp	r3, #3
 8003430:	d003      	beq.n	800343a <HAL_DMA_Init+0x2e6>
 8003432:	21c6      	movs	r1, #198	; 0xc6
 8003434:	4867      	ldr	r0, [pc, #412]	; (80035d4 <HAL_DMA_Init+0x480>)
 8003436:	f7fd fd55 	bl	8000ee4 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <HAL_DMA_Init+0x314>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800344a:	d00d      	beq.n	8003468 <HAL_DMA_Init+0x314>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d008      	beq.n	8003468 <HAL_DMA_Init+0x314>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800345e:	d003      	beq.n	8003468 <HAL_DMA_Init+0x314>
 8003460:	21c7      	movs	r1, #199	; 0xc7
 8003462:	485c      	ldr	r0, [pc, #368]	; (80035d4 <HAL_DMA_Init+0x480>)
 8003464:	f7fd fd3e 	bl	8000ee4 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <HAL_DMA_Init+0x342>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003478:	d00d      	beq.n	8003496 <HAL_DMA_Init+0x342>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003482:	d008      	beq.n	8003496 <HAL_DMA_Init+0x342>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800348c:	d003      	beq.n	8003496 <HAL_DMA_Init+0x342>
 800348e:	21c8      	movs	r1, #200	; 0xc8
 8003490:	4850      	ldr	r0, [pc, #320]	; (80035d4 <HAL_DMA_Init+0x480>)
 8003492:	f7fd fd27 	bl	8000ee4 <assert_failed>
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b6:	e00f      	b.n	80034d8 <HAL_DMA_Init+0x384>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b8:	f7ff fcce 	bl	8002e58 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d908      	bls.n	80034d8 <HAL_DMA_Init+0x384>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e078      	b.n	80035ca <HAL_DMA_Init+0x476>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e8      	bne.n	80034b8 <HAL_DMA_Init+0x364>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_DMA_Init+0x484>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	2b04      	cmp	r3, #4
 8003530:	d107      	bne.n	8003542 <HAL_DMA_Init+0x3ee>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4313      	orrs	r3, r2
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0307 	bic.w	r3, r3, #7
 8003558:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b04      	cmp	r3, #4
 800356a:	d117      	bne.n	800359c <HAL_DMA_Init+0x448>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <HAL_DMA_Init+0x448>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fb9a 	bl	8003cb8 <DMA_CheckFifoParam>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_DMA_Init+0x448>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003598:	2301      	movs	r3, #1
 800359a:	e016      	b.n	80035ca <HAL_DMA_Init+0x476>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb51 	bl	8003c4c <DMA_CalcBaseAndBitshift>
 80035aa:	4603      	mov	r3, r0
 80035ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	223f      	movs	r2, #63	; 0x3f
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	0800fbfc 	.word	0x0800fbfc
 80035d8:	e010803f 	.word	0xe010803f

080035dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0a5      	b.n	800373a <HAL_DMA_DeInit+0x15e>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d101      	bne.n	80035fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
 80035fc:	e09d      	b.n	800373a <HAL_DMA_DeInit+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a50      	ldr	r2, [pc, #320]	; (8003744 <HAL_DMA_DeInit+0x168>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04f      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_DMA_DeInit+0x16c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4d      	ldr	r2, [pc, #308]	; (800374c <HAL_DMA_DeInit+0x170>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_DMA_DeInit+0x174>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4a      	ldr	r2, [pc, #296]	; (8003754 <HAL_DMA_DeInit+0x178>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a48      	ldr	r2, [pc, #288]	; (8003758 <HAL_DMA_DeInit+0x17c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a47      	ldr	r2, [pc, #284]	; (800375c <HAL_DMA_DeInit+0x180>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a45      	ldr	r2, [pc, #276]	; (8003760 <HAL_DMA_DeInit+0x184>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a44      	ldr	r2, [pc, #272]	; (8003764 <HAL_DMA_DeInit+0x188>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a42      	ldr	r2, [pc, #264]	; (8003768 <HAL_DMA_DeInit+0x18c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_DMA_DeInit+0x190>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <HAL_DMA_DeInit+0x194>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3e      	ldr	r2, [pc, #248]	; (8003774 <HAL_DMA_DeInit+0x198>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3c      	ldr	r2, [pc, #240]	; (8003778 <HAL_DMA_DeInit+0x19c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3b      	ldr	r2, [pc, #236]	; (800377c <HAL_DMA_DeInit+0x1a0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a39      	ldr	r2, [pc, #228]	; (8003780 <HAL_DMA_DeInit+0x1a4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_DeInit+0xcc>
 800369e:	f240 1149 	movw	r1, #329	; 0x149
 80036a2:	4838      	ldr	r0, [pc, #224]	; (8003784 <HAL_DMA_DeInit+0x1a8>)
 80036a4:	f7fd fc1e 	bl	8000ee4 <assert_failed>

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 faaf 	bl	8003c4c <DMA_CalcBaseAndBitshift>
 80036ee:	4603      	mov	r3, r0
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	223f      	movs	r2, #63	; 0x3f
 80036f8:	409a      	lsls	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40026010 	.word	0x40026010
 8003748:	40026028 	.word	0x40026028
 800374c:	40026040 	.word	0x40026040
 8003750:	40026058 	.word	0x40026058
 8003754:	40026070 	.word	0x40026070
 8003758:	40026088 	.word	0x40026088
 800375c:	400260a0 	.word	0x400260a0
 8003760:	400260b8 	.word	0x400260b8
 8003764:	40026410 	.word	0x40026410
 8003768:	40026428 	.word	0x40026428
 800376c:	40026440 	.word	0x40026440
 8003770:	40026458 	.word	0x40026458
 8003774:	40026470 	.word	0x40026470
 8003778:	40026488 	.word	0x40026488
 800377c:	400264a0 	.word	0x400264a0
 8003780:	400264b8 	.word	0x400264b8
 8003784:	0800fbfc 	.word	0x0800fbfc

08003788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_DMA_Start_IT+0x26>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d304      	bcc.n	80037b8 <HAL_DMA_Start_IT+0x30>
 80037ae:	f240 11cd 	movw	r1, #461	; 0x1cd
 80037b2:	482b      	ldr	r0, [pc, #172]	; (8003860 <HAL_DMA_Start_IT+0xd8>)
 80037b4:	f7fd fb96 	bl	8000ee4 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_Start_IT+0x3e>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e048      	b.n	8003858 <HAL_DMA_Start_IT+0xd0>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d137      	bne.n	800384a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f9fe 	bl	8003bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	223f      	movs	r2, #63	; 0x3f
 80037fa:	409a      	lsls	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0216 	orr.w	r2, r2, #22
 800380e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800381e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e005      	b.n	8003856 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003856:	7dfb      	ldrb	r3, [r7, #23]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0800fbfc 	.word	0x0800fbfc

08003864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d004      	beq.n	8003882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e00c      	b.n	800389c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2205      	movs	r2, #5
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80038b4:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_DMA_IRQHandler+0x248>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a8e      	ldr	r2, [pc, #568]	; (8003af4 <HAL_DMA_IRQHandler+0x24c>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	2208      	movs	r2, #8
 80038d4:	409a      	lsls	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01a      	beq.n	8003914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0204 	bic.w	r2, r2, #4
 80038fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	2208      	movs	r2, #8
 8003902:	409a      	lsls	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	2201      	movs	r2, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	2201      	movs	r2, #1
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2204      	movs	r2, #4
 8003950:	409a      	lsls	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	2204      	movs	r2, #4
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	2210      	movs	r2, #16
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d043      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03c      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	2210      	movs	r2, #16
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d018      	beq.n	80039ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d024      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
 80039d6:	e01f      	b.n	8003a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
 80039e8:	e016      	b.n	8003a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0208 	bic.w	r2, r2, #8
 8003a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 808f 	beq.w	8003b48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8087 	beq.w	8003b48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2220      	movs	r2, #32
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d136      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0216 	bic.w	r2, r2, #22
 8003a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x1da>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0208 	bic.w	r2, r2, #8
 8003a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	223f      	movs	r2, #63	; 0x3f
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d07e      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
        }
        return;
 8003abe:	e079      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d031      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
 8003aec:	e02c      	b.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
 8003aee:	bf00      	nop
 8003af0:	20000004 	.word	0x20000004
 8003af4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	e01e      	b.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10f      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0210 	bic.w	r2, r2, #16
 8003b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d032      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2205      	movs	r2, #5
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d307      	bcc.n	8003b90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f2      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x2cc>
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
 8003bb2:	e000      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bb4:	bf00      	nop
    }
  }
}
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d108      	bne.n	8003c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c2e:	e007      	b.n	8003c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	3b10      	subs	r3, #16
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <DMA_CalcBaseAndBitshift+0x60>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d908      	bls.n	8003c8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	1d1a      	adds	r2, r3, #4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8a:	e006      	b.n	8003c9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	0800ff14 	.word	0x0800ff14
 8003cb4:	fffffc00 	.word	0xfffffc00

08003cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11f      	bne.n	8003d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d856      	bhi.n	8003d86 <DMA_CheckFifoParam+0xce>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <DMA_CheckFifoParam+0x28>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003cf1 	.word	0x08003cf1
 8003cec:	08003d87 	.word	0x08003d87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d046      	beq.n	8003d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d00:	e043      	b.n	8003d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d0a:	d140      	bne.n	8003d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e03d      	b.n	8003d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d121      	bne.n	8003d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d837      	bhi.n	8003d92 <DMA_CheckFifoParam+0xda>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x70>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d3f 	.word	0x08003d3f
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003d51 	.word	0x08003d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e030      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d025      	beq.n	8003d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4e:	e022      	b.n	8003d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5e:	e01c      	b.n	8003d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d903      	bls.n	8003d6e <DMA_CheckFifoParam+0xb6>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d6c:	e018      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      break;
 8003d72:	e015      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e00b      	b.n	8003d9e <DMA_CheckFifoParam+0xe6>
      break;
 8003d86:	bf00      	nop
 8003d88:	e00a      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e008      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e06a      	b.n	8003e98 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2223      	movs	r2, #35	; 0x23
 8003dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fd fa25 	bl	8001224 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_ETH_Init+0xf0>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	4a30      	ldr	r2, [pc, #192]	; (8003ea0 <HAL_ETH_Init+0xf0>)
 8003de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de4:	6453      	str	r3, [r2, #68]	; 0x44
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <HAL_ETH_Init+0xf0>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_ETH_Init+0xf4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_ETH_Init+0xf4>)
 8003df8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dfc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_ETH_Init+0xf4>)
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4927      	ldr	r1, [pc, #156]	; (8003ea4 <HAL_ETH_Init+0xf4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_ETH_Init+0xf4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e28:	f7ff f816 	bl	8002e58 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e2e:	e011      	b.n	8003e54 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e30:	f7ff f812 	bl	8002e58 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e3e:	d909      	bls.n	8003e54 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	22e0      	movs	r2, #224	; 0xe0
 8003e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e021      	b.n	8003e98 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e4      	bne.n	8003e30 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f958 	bl	800411c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f9ff 	bl	8004270 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa55 	bl	8004322 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2100      	movs	r1, #0
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f9bd 	bl	8004200 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2210      	movs	r2, #16
 8003e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40013800 	.word	0x40013800

08003ea8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4b51      	ldr	r3, [pc, #324]	; (8004004 <ETH_SetMACConfig+0x15c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7c1b      	ldrb	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <ETH_SetMACConfig+0x28>
 8003eca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ece:	e000      	b.n	8003ed2 <ETH_SetMACConfig+0x2a>
 8003ed0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	7c5b      	ldrb	r3, [r3, #17]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <ETH_SetMACConfig+0x38>
 8003eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ede:	e000      	b.n	8003ee2 <ETH_SetMACConfig+0x3a>
 8003ee0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ee2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ee8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	7fdb      	ldrb	r3, [r3, #31]
 8003eee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ef0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	7f92      	ldrb	r2, [r2, #30]
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d102      	bne.n	8003f06 <ETH_SetMACConfig+0x5e>
 8003f00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f04:	e000      	b.n	8003f08 <ETH_SetMACConfig+0x60>
 8003f06:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	7f1b      	ldrb	r3, [r3, #28]
 8003f0e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f10:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f26:	2a00      	cmp	r2, #0
 8003f28:	d102      	bne.n	8003f30 <ETH_SetMACConfig+0x88>
 8003f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2e:	e000      	b.n	8003f32 <ETH_SetMACConfig+0x8a>
 8003f30:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7bdb      	ldrb	r3, [r3, #15]
 8003f38:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f3a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f48:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f62:	2001      	movs	r0, #1
 8003f64:	f7fe ff84 	bl	8002e70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f86:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d101      	bne.n	8003f96 <ETH_SetMACConfig+0xee>
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	e000      	b.n	8003f98 <ETH_SetMACConfig+0xf0>
 8003f96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f98:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003fa6:	2a01      	cmp	r2, #1
 8003fa8:	d101      	bne.n	8003fae <ETH_SetMACConfig+0x106>
 8003faa:	2208      	movs	r2, #8
 8003fac:	e000      	b.n	8003fb0 <ETH_SetMACConfig+0x108>
 8003fae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003fb0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003fb8:	2a01      	cmp	r2, #1
 8003fba:	d101      	bne.n	8003fc0 <ETH_SetMACConfig+0x118>
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	e000      	b.n	8003fc2 <ETH_SetMACConfig+0x11a>
 8003fc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003fca:	2a01      	cmp	r2, #1
 8003fcc:	d101      	bne.n	8003fd2 <ETH_SetMACConfig+0x12a>
 8003fce:	2202      	movs	r2, #2
 8003fd0:	e000      	b.n	8003fd4 <ETH_SetMACConfig+0x12c>
 8003fd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fec:	2001      	movs	r0, #1
 8003fee:	f7fe ff3f 	bl	8002e70 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	ff20810f 	.word	0xff20810f

08004008 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <ETH_SetDMAConfig+0x110>)
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	7b1b      	ldrb	r3, [r3, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <ETH_SetDMAConfig+0x2c>
 800402e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004032:	e000      	b.n	8004036 <ETH_SetDMAConfig+0x2e>
 8004034:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	7b5b      	ldrb	r3, [r3, #13]
 800403a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800403c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	7f52      	ldrb	r2, [r2, #29]
 8004042:	2a00      	cmp	r2, #0
 8004044:	d102      	bne.n	800404c <ETH_SetDMAConfig+0x44>
 8004046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800404a:	e000      	b.n	800404e <ETH_SetDMAConfig+0x46>
 800404c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800404e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	7b9b      	ldrb	r3, [r3, #14]
 8004054:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004056:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800405c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	7f1b      	ldrb	r3, [r3, #28]
 8004062:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004064:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	7f9b      	ldrb	r3, [r3, #30]
 800406a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800406c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004072:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800407a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800407c:	4313      	orrs	r3, r2
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408c:	461a      	mov	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800409e:	2001      	movs	r0, #1
 80040a0:	f7fe fee6 	bl	8002e70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	461a      	mov	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	791b      	ldrb	r3, [r3, #4]
 80040b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80040c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80040d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040fc:	2001      	movs	r0, #1
 80040fe:	f7fe feb7 	bl	8002e70 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	f8de3f23 	.word	0xf8de3f23

0800411c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b0a6      	sub	sp, #152	; 0x98
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004130:	2300      	movs	r3, #0
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800414c:	2300      	movs	r3, #0
 800414e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004158:	2300      	movs	r3, #0
 800415a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004162:	2300      	movs	r3, #0
 8004164:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800417e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004182:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004188:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fe86 	bl	8003ea8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800419c:	2301      	movs	r3, #1
 800419e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041be:	2300      	movs	r3, #0
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80041ec:	f107 0308 	add.w	r3, r7, #8
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff08 	bl	8004008 <ETH_SetDMAConfig>
}
 80041f8:	bf00      	nop
 80041fa:	3798      	adds	r7, #152	; 0x98
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3305      	adds	r3, #5
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	3204      	adds	r2, #4
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <ETH_MACAddressConfig+0x68>)
 8004222:	4413      	add	r3, r2
 8004224:	461a      	mov	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3303      	adds	r3, #3
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	061a      	lsls	r2, r3, #24
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3302      	adds	r3, #2
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3301      	adds	r3, #1
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	4313      	orrs	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <ETH_MACAddressConfig+0x6c>)
 8004252:	4413      	add	r3, r2
 8004254:	461a      	mov	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6013      	str	r3, [r2, #0]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40028040 	.word	0x40028040
 800426c:	40028044 	.word	0x40028044

08004270 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e03e      	b.n	80042fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	3206      	adds	r2, #6
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d80c      	bhi.n	80042e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e004      	b.n	80042ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3301      	adds	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d9bd      	bls.n	800427e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004314:	611a      	str	r2, [r3, #16]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e046      	b.n	80043be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6919      	ldr	r1, [r3, #16]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800436c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004374:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	3212      	adds	r2, #18
 800438a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d80c      	bhi.n	80043ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6919      	ldr	r1, [r3, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	461a      	mov	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e004      	b.n	80043b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d9b5      	bls.n	8004330 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ee:	60da      	str	r2, [r3, #12]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <HAL_GPIO_Init+0x108>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02b      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a39      	ldr	r2, [pc, #228]	; (8004508 <HAL_GPIO_Init+0x10c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a38      	ldr	r2, [pc, #224]	; (800450c <HAL_GPIO_Init+0x110>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d023      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a37      	ldr	r2, [pc, #220]	; (8004510 <HAL_GPIO_Init+0x114>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a36      	ldr	r2, [pc, #216]	; (8004514 <HAL_GPIO_Init+0x118>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01b      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a35      	ldr	r2, [pc, #212]	; (8004518 <HAL_GPIO_Init+0x11c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d017      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a34      	ldr	r2, [pc, #208]	; (800451c <HAL_GPIO_Init+0x120>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a33      	ldr	r2, [pc, #204]	; (8004520 <HAL_GPIO_Init+0x124>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a32      	ldr	r2, [pc, #200]	; (8004524 <HAL_GPIO_Init+0x128>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a31      	ldr	r2, [pc, #196]	; (8004528 <HAL_GPIO_Init+0x12c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a30      	ldr	r2, [pc, #192]	; (800452c <HAL_GPIO_Init+0x130>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x7a>
 800446e:	21aa      	movs	r1, #170	; 0xaa
 8004470:	482f      	ldr	r0, [pc, #188]	; (8004530 <HAL_GPIO_Init+0x134>)
 8004472:	f7fc fd37 	bl	8000ee4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <HAL_GPIO_Init+0x8c>
 8004480:	21ab      	movs	r1, #171	; 0xab
 8004482:	482b      	ldr	r0, [pc, #172]	; (8004530 <HAL_GPIO_Init+0x134>)
 8004484:	f7fc fd2e 	bl	8000ee4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d035      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d031      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b11      	cmp	r3, #17
 800449e:	d02d      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d029      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b12      	cmp	r3, #18
 80044ae:	d025      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80044b8:	d020      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80044c2:	d01b      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80044cc:	d016      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80044d6:	d011      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80044e0:	d00c      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80044ea:	d007      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x100>
 80044f4:	21ac      	movs	r1, #172	; 0xac
 80044f6:	480e      	ldr	r0, [pc, #56]	; (8004530 <HAL_GPIO_Init+0x134>)
 80044f8:	f7fc fcf4 	bl	8000ee4 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e2d6      	b.n	8004ab0 <HAL_GPIO_Init+0x6b4>
 8004502:	bf00      	nop
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40021400 	.word	0x40021400
 800451c:	40021800 	.word	0x40021800
 8004520:	40021c00 	.word	0x40021c00
 8004524:	40022000 	.word	0x40022000
 8004528:	40022400 	.word	0x40022400
 800452c:	40022800 	.word	0x40022800
 8004530:	0800fc34 	.word	0x0800fc34
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004534:	2201      	movs	r2, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	429a      	cmp	r2, r3
 800454e:	f040 82ac 	bne.w	8004aaa <HAL_GPIO_Init+0x6ae>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d005      	beq.n	800456a <HAL_GPIO_Init+0x16e>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d144      	bne.n	80045f4 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <HAL_GPIO_Init+0x196>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d00b      	beq.n	8004592 <HAL_GPIO_Init+0x196>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d007      	beq.n	8004592 <HAL_GPIO_Init+0x196>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x196>
 800458a:	21bd      	movs	r1, #189	; 0xbd
 800458c:	4831      	ldr	r0, [pc, #196]	; (8004654 <HAL_GPIO_Init+0x258>)
 800458e:	f7fc fca9 	bl	8000ee4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045c8:	2201      	movs	r2, #1
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 0201 	and.w	r2, r3, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d02b      	beq.n	8004658 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_GPIO_Init+0x224>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d007      	beq.n	8004620 <HAL_GPIO_Init+0x224>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x224>
 8004618:	21ce      	movs	r1, #206	; 0xce
 800461a:	480e      	ldr	r0, [pc, #56]	; (8004654 <HAL_GPIO_Init+0x258>)
 800461c:	f7fc fc62 	bl	8000ee4 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	2203      	movs	r2, #3
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e002      	b.n	8004658 <HAL_GPIO_Init+0x25c>
 8004652:	bf00      	nop
 8004654:	0800fc34 	.word	0x0800fc34
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b02      	cmp	r3, #2
 8004662:	f040 8143 	bne.w	80048ec <HAL_GPIO_Init+0x4f0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 811a 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b01      	cmp	r3, #1
 8004676:	f000 8115 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8110 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 810b 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8106 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b01      	cmp	r3, #1
 800469e:	f000 8101 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	f000 80fc 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f000 80f7 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	f000 80f2 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	f000 80ed 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	f000 80e8 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	f000 80e3 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	f000 80de 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	f000 80d9 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	f000 80d4 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b04      	cmp	r3, #4
 8004702:	f000 80cf 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b04      	cmp	r3, #4
 800470c:	f000 80ca 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b04      	cmp	r3, #4
 8004716:	f000 80c5 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b04      	cmp	r3, #4
 8004720:	f000 80c0 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b04      	cmp	r3, #4
 800472a:	f000 80bb 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b05      	cmp	r3, #5
 8004734:	f000 80b6 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b05      	cmp	r3, #5
 800473e:	f000 80b1 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b05      	cmp	r3, #5
 8004748:	f000 80ac 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b05      	cmp	r3, #5
 8004752:	f000 80a7 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b05      	cmp	r3, #5
 800475c:	f000 80a2 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b05      	cmp	r3, #5
 8004766:	f000 809d 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b06      	cmp	r3, #6
 8004770:	f000 8098 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b06      	cmp	r3, #6
 800477a:	f000 8093 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b07      	cmp	r3, #7
 8004784:	f000 808e 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b07      	cmp	r3, #7
 800478e:	f000 8089 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b07      	cmp	r3, #7
 8004798:	f000 8084 	beq.w	80048a4 <HAL_GPIO_Init+0x4a8>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b07      	cmp	r3, #7
 80047a2:	d07f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b07      	cmp	r3, #7
 80047aa:	d07b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b07      	cmp	r3, #7
 80047b2:	d077      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b07      	cmp	r3, #7
 80047ba:	d073      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d06f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d06b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d067      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d063      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d05f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d05b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d057      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b09      	cmp	r3, #9
 80047fa:	d053      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b09      	cmp	r3, #9
 8004802:	d04f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b09      	cmp	r3, #9
 800480a:	d04b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b09      	cmp	r3, #9
 8004812:	d047      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b09      	cmp	r3, #9
 800481a:	d043      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b09      	cmp	r3, #9
 8004822:	d03f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b0a      	cmp	r3, #10
 800482a:	d03b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b09      	cmp	r3, #9
 8004832:	d037      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b0a      	cmp	r3, #10
 800483a:	d033      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b0a      	cmp	r3, #10
 8004842:	d02f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b0a      	cmp	r3, #10
 800484a:	d02b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b0b      	cmp	r3, #11
 8004852:	d027      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b0a      	cmp	r3, #10
 800485a:	d023      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b0b      	cmp	r3, #11
 8004862:	d01f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b0b      	cmp	r3, #11
 800486a:	d01b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d017      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d013      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d00f      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b0f      	cmp	r3, #15
 800488a:	d00b      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b0d      	cmp	r3, #13
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b0e      	cmp	r3, #14
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x4a8>
 800489c:	21db      	movs	r1, #219	; 0xdb
 800489e:	4889      	ldr	r0, [pc, #548]	; (8004ac4 <HAL_GPIO_Init+0x6c8>)
 80048a0:	f7fc fb20 	bl	8000ee4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	08da      	lsrs	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3208      	adds	r2, #8
 80048ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	220f      	movs	r2, #15
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	08da      	lsrs	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3208      	adds	r2, #8
 80048e6:	69b9      	ldr	r1, [r7, #24]
 80048e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0203 	and.w	r2, r3, #3
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80be 	beq.w	8004aaa <HAL_GPIO_Init+0x6ae>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800492e:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <HAL_GPIO_Init+0x6cc>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	4a65      	ldr	r2, [pc, #404]	; (8004ac8 <HAL_GPIO_Init+0x6cc>)
 8004934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004938:	6453      	str	r3, [r2, #68]	; 0x44
 800493a:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <HAL_GPIO_Init+0x6cc>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004946:	4a61      	ldr	r2, [pc, #388]	; (8004acc <HAL_GPIO_Init+0x6d0>)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3302      	adds	r3, #2
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a58      	ldr	r2, [pc, #352]	; (8004ad0 <HAL_GPIO_Init+0x6d4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d037      	beq.n	80049e2 <HAL_GPIO_Init+0x5e6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a57      	ldr	r2, [pc, #348]	; (8004ad4 <HAL_GPIO_Init+0x6d8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_GPIO_Init+0x5e2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a56      	ldr	r2, [pc, #344]	; (8004ad8 <HAL_GPIO_Init+0x6dc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02b      	beq.n	80049da <HAL_GPIO_Init+0x5de>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a55      	ldr	r2, [pc, #340]	; (8004adc <HAL_GPIO_Init+0x6e0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d025      	beq.n	80049d6 <HAL_GPIO_Init+0x5da>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a54      	ldr	r2, [pc, #336]	; (8004ae0 <HAL_GPIO_Init+0x6e4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01f      	beq.n	80049d2 <HAL_GPIO_Init+0x5d6>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a53      	ldr	r2, [pc, #332]	; (8004ae4 <HAL_GPIO_Init+0x6e8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d019      	beq.n	80049ce <HAL_GPIO_Init+0x5d2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a52      	ldr	r2, [pc, #328]	; (8004ae8 <HAL_GPIO_Init+0x6ec>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_GPIO_Init+0x5ce>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a51      	ldr	r2, [pc, #324]	; (8004aec <HAL_GPIO_Init+0x6f0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00d      	beq.n	80049c6 <HAL_GPIO_Init+0x5ca>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a50      	ldr	r2, [pc, #320]	; (8004af0 <HAL_GPIO_Init+0x6f4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <HAL_GPIO_Init+0x5c6>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4f      	ldr	r2, [pc, #316]	; (8004af4 <HAL_GPIO_Init+0x6f8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_GPIO_Init+0x5c2>
 80049ba:	2309      	movs	r3, #9
 80049bc:	e012      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049be:	230a      	movs	r3, #10
 80049c0:	e010      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049c2:	2308      	movs	r3, #8
 80049c4:	e00e      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049c6:	2307      	movs	r3, #7
 80049c8:	e00c      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049ca:	2306      	movs	r3, #6
 80049cc:	e00a      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049ce:	2305      	movs	r3, #5
 80049d0:	e008      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049d2:	2304      	movs	r3, #4
 80049d4:	e006      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049d6:	2303      	movs	r3, #3
 80049d8:	e004      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049da:	2302      	movs	r3, #2
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_GPIO_Init+0x5e8>
 80049e2:	2300      	movs	r3, #0
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f002 0203 	and.w	r2, r2, #3
 80049ea:	0092      	lsls	r2, r2, #2
 80049ec:	4093      	lsls	r3, r2
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049f4:	4935      	ldr	r1, [pc, #212]	; (8004acc <HAL_GPIO_Init+0x6d0>)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a02:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x62a>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a26:	4a34      	ldr	r2, [pc, #208]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a2c:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x654>
        {
          temp |= iocurrent;
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a50:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x67e>
        {
          temp |= iocurrent;
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x6a8>
        {
          temp |= iocurrent;
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <HAL_GPIO_Init+0x6fc>)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	f67f ad3e 	bls.w	8004534 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	0800fc34 	.word	0x0800fc34
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	40020400 	.word	0x40020400
 8004ad8:	40020800 	.word	0x40020800
 8004adc:	40020c00 	.word	0x40020c00
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40021400 	.word	0x40021400
 8004ae8:	40021800 	.word	0x40021800
 8004aec:	40021c00 	.word	0x40021c00
 8004af0:	40022000 	.word	0x40022000
 8004af4:	40022400 	.word	0x40022400
 8004af8:	40013c00 	.word	0x40013c00

08004afc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a8a      	ldr	r2, [pc, #552]	; (8004d40 <HAL_GPIO_DeInit+0x244>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d02c      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a89      	ldr	r2, [pc, #548]	; (8004d44 <HAL_GPIO_DeInit+0x248>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d028      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a88      	ldr	r2, [pc, #544]	; (8004d48 <HAL_GPIO_DeInit+0x24c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d024      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a87      	ldr	r2, [pc, #540]	; (8004d4c <HAL_GPIO_DeInit+0x250>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d020      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a86      	ldr	r2, [pc, #536]	; (8004d50 <HAL_GPIO_DeInit+0x254>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01c      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a85      	ldr	r2, [pc, #532]	; (8004d54 <HAL_GPIO_DeInit+0x258>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a84      	ldr	r2, [pc, #528]	; (8004d58 <HAL_GPIO_DeInit+0x25c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d014      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a83      	ldr	r2, [pc, #524]	; (8004d5c <HAL_GPIO_DeInit+0x260>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d010      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a82      	ldr	r2, [pc, #520]	; (8004d60 <HAL_GPIO_DeInit+0x264>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00c      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a81      	ldr	r2, [pc, #516]	; (8004d64 <HAL_GPIO_DeInit+0x268>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d008      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_GPIO_DeInit+0x26c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_GPIO_DeInit+0x78>
 8004b6a:	f240 112b 	movw	r1, #299	; 0x12b
 8004b6e:	487f      	ldr	r0, [pc, #508]	; (8004d6c <HAL_GPIO_DeInit+0x270>)
 8004b70:	f7fc f9b8 	bl	8000ee4 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e0d9      	b.n	8004d2e <HAL_GPIO_DeInit+0x232>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f040 80c9 	bne.w	8004d28 <HAL_GPIO_DeInit+0x22c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004b96:	4a76      	ldr	r2, [pc, #472]	; (8004d70 <HAL_GPIO_DeInit+0x274>)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba2:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	220f      	movs	r2, #15
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a61      	ldr	r2, [pc, #388]	; (8004d40 <HAL_GPIO_DeInit+0x244>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d037      	beq.n	8004c30 <HAL_GPIO_DeInit+0x134>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a60      	ldr	r2, [pc, #384]	; (8004d44 <HAL_GPIO_DeInit+0x248>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <HAL_GPIO_DeInit+0x130>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a5f      	ldr	r2, [pc, #380]	; (8004d48 <HAL_GPIO_DeInit+0x24c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d02b      	beq.n	8004c28 <HAL_GPIO_DeInit+0x12c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_GPIO_DeInit+0x250>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d025      	beq.n	8004c24 <HAL_GPIO_DeInit+0x128>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a5d      	ldr	r2, [pc, #372]	; (8004d50 <HAL_GPIO_DeInit+0x254>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01f      	beq.n	8004c20 <HAL_GPIO_DeInit+0x124>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a5c      	ldr	r2, [pc, #368]	; (8004d54 <HAL_GPIO_DeInit+0x258>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d019      	beq.n	8004c1c <HAL_GPIO_DeInit+0x120>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a5b      	ldr	r2, [pc, #364]	; (8004d58 <HAL_GPIO_DeInit+0x25c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_GPIO_DeInit+0x11c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a5a      	ldr	r2, [pc, #360]	; (8004d5c <HAL_GPIO_DeInit+0x260>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00d      	beq.n	8004c14 <HAL_GPIO_DeInit+0x118>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a59      	ldr	r2, [pc, #356]	; (8004d60 <HAL_GPIO_DeInit+0x264>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <HAL_GPIO_DeInit+0x114>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_GPIO_DeInit+0x268>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_GPIO_DeInit+0x110>
 8004c08:	2309      	movs	r3, #9
 8004c0a:	e012      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c0c:	230a      	movs	r3, #10
 8004c0e:	e010      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c10:	2308      	movs	r3, #8
 8004c12:	e00e      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c14:	2307      	movs	r3, #7
 8004c16:	e00c      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c18:	2306      	movs	r3, #6
 8004c1a:	e00a      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c1c:	2305      	movs	r3, #5
 8004c1e:	e008      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c20:	2304      	movs	r3, #4
 8004c22:	e006      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c24:	2303      	movs	r3, #3
 8004c26:	e004      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e002      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_GPIO_DeInit+0x136>
 8004c30:	2300      	movs	r3, #0
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	f002 0203 	and.w	r2, r2, #3
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	4093      	lsls	r3, r2
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d132      	bne.n	8004ca8 <HAL_GPIO_DeInit+0x1ac>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c42:	4b4c      	ldr	r3, [pc, #304]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	494a      	ldr	r1, [pc, #296]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c50:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	4946      	ldr	r1, [pc, #280]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c5e:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	4943      	ldr	r1, [pc, #268]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c6c:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	493f      	ldr	r1, [pc, #252]	; (8004d74 <HAL_GPIO_DeInit+0x278>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	220f      	movs	r2, #15
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004c8a:	4a39      	ldr	r2, [pc, #228]	; (8004d70 <HAL_GPIO_DeInit+0x274>)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	3302      	adds	r3, #2
 8004c92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	4835      	ldr	r0, [pc, #212]	; (8004d70 <HAL_GPIO_DeInit+0x274>)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	2103      	movs	r1, #3
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	401a      	ands	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	220f      	movs	r2, #15
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	08d2      	lsrs	r2, r2, #3
 8004cde:	4019      	ands	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3208      	adds	r2, #8
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	2103      	movs	r1, #3
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	2101      	movs	r1, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	2103      	movs	r1, #3
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	401a      	ands	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b0f      	cmp	r3, #15
 8004d32:	f67f af22 	bls.w	8004b7a <HAL_GPIO_DeInit+0x7e>
    }
  }
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40020000 	.word	0x40020000
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40020800 	.word	0x40020800
 8004d4c:	40020c00 	.word	0x40020c00
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40021400 	.word	0x40021400
 8004d58:	40021800 	.word	0x40021800
 8004d5c:	40021c00 	.word	0x40021c00
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40022400 	.word	0x40022400
 8004d68:	40022800 	.word	0x40022800
 8004d6c:	0800fc34 	.word	0x0800fc34
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40013c00 	.word	0x40013c00

08004d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_GPIO_ReadPin+0x1c>
 8004d8a:	f240 1177 	movw	r1, #375	; 0x177
 8004d8e:	4809      	ldr	r0, [pc, #36]	; (8004db4 <HAL_GPIO_ReadPin+0x3c>)
 8004d90:	f7fc f8a8 	bl	8000ee4 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	887b      	ldrh	r3, [r7, #2]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e001      	b.n	8004daa <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	0800fc34 	.word	0x0800fc34

08004db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004dc8:	887b      	ldrh	r3, [r7, #2]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_GPIO_WritePin+0x20>
 8004dce:	f240 1197 	movw	r1, #407	; 0x197
 8004dd2:	480e      	ldr	r0, [pc, #56]	; (8004e0c <HAL_GPIO_WritePin+0x54>)
 8004dd4:	f7fc f886 	bl	8000ee4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_GPIO_WritePin+0x36>
 8004dde:	787b      	ldrb	r3, [r7, #1]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d004      	beq.n	8004dee <HAL_GPIO_WritePin+0x36>
 8004de4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004de8:	4808      	ldr	r0, [pc, #32]	; (8004e0c <HAL_GPIO_WritePin+0x54>)
 8004dea:	f7fc f87b 	bl	8000ee4 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004dee:	787b      	ldrb	r3, [r7, #1]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df4:	887a      	ldrh	r2, [r7, #2]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004dfa:	e003      	b.n	8004e04 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	041a      	lsls	r2, r3, #16
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	619a      	str	r2, [r3, #24]
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	0800fc34 	.word	0x0800fc34

08004e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e26:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb ff88 	bl	8000d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40013c00 	.word	0x40013c00

08004e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e107      	b.n	8005062 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a85      	ldr	r2, [pc, #532]	; (800506c <HAL_I2C_Init+0x22c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_I2C_Init+0x44>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a83      	ldr	r2, [pc, #524]	; (8005070 <HAL_I2C_Init+0x230>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_I2C_Init+0x44>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a82      	ldr	r2, [pc, #520]	; (8005074 <HAL_I2C_Init+0x234>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_I2C_Init+0x44>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a80      	ldr	r2, [pc, #512]	; (8005078 <HAL_I2C_Init+0x238>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_I2C_Init+0x44>
 8004e7a:	f240 2119 	movw	r1, #537	; 0x219
 8004e7e:	487f      	ldr	r0, [pc, #508]	; (800507c <HAL_I2C_Init+0x23c>)
 8004e80:	f7fc f830 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d304      	bcc.n	8004e98 <HAL_I2C_Init+0x58>
 8004e8e:	f240 211a 	movw	r1, #538	; 0x21a
 8004e92:	487a      	ldr	r0, [pc, #488]	; (800507c <HAL_I2C_Init+0x23c>)
 8004e94:	f7fc f826 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d008      	beq.n	8004eb2 <HAL_I2C_Init+0x72>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_I2C_Init+0x72>
 8004ea8:	f240 211b 	movw	r1, #539	; 0x21b
 8004eac:	4873      	ldr	r0, [pc, #460]	; (800507c <HAL_I2C_Init+0x23c>)
 8004eae:	f7fc f819 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_I2C_Init+0x8e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec2:	d004      	beq.n	8004ece <HAL_I2C_Init+0x8e>
 8004ec4:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004ec8:	486c      	ldr	r0, [pc, #432]	; (800507c <HAL_I2C_Init+0x23c>)
 8004eca:	f7fc f80b 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	2bff      	cmp	r3, #255	; 0xff
 8004ed4:	d904      	bls.n	8004ee0 <HAL_I2C_Init+0xa0>
 8004ed6:	f240 211d 	movw	r1, #541	; 0x21d
 8004eda:	4868      	ldr	r0, [pc, #416]	; (800507c <HAL_I2C_Init+0x23c>)
 8004edc:	f7fc f802 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d020      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d01c      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d018      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d014      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d010      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d00c      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b06      	cmp	r3, #6
 8004f16:	d008      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b07      	cmp	r3, #7
 8004f1e:	d004      	beq.n	8004f2a <HAL_I2C_Init+0xea>
 8004f20:	f240 211e 	movw	r1, #542	; 0x21e
 8004f24:	4855      	ldr	r0, [pc, #340]	; (800507c <HAL_I2C_Init+0x23c>)
 8004f26:	f7fb ffdd 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_I2C_Init+0x106>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f3a:	d004      	beq.n	8004f46 <HAL_I2C_Init+0x106>
 8004f3c:	f240 211f 	movw	r1, #543	; 0x21f
 8004f40:	484e      	ldr	r0, [pc, #312]	; (800507c <HAL_I2C_Init+0x23c>)
 8004f42:	f7fb ffcf 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_I2C_Init+0x122>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f56:	d004      	beq.n	8004f62 <HAL_I2C_Init+0x122>
 8004f58:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004f5c:	4847      	ldr	r0, [pc, #284]	; (800507c <HAL_I2C_Init+0x23c>)
 8004f5e:	f7fb ffc1 	bl	8000ee4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8d6 	bl	8005128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e006      	b.n	8004fd8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d104      	bne.n	8004fea <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <HAL_I2C_Init+0x240>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005008:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40005400 	.word	0x40005400
 8005070:	40005800 	.word	0x40005800
 8005074:	40005c00 	.word	0x40005c00
 8005078:	40006000 	.word	0x40006000
 800507c:	0800fc70 	.word	0x0800fc70
 8005080:	02008000 	.word	0x02008000

08005084 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e03a      	b.n	800510c <HAL_I2C_DeInit+0x88>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_I2C_DeInit+0x90>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <HAL_I2C_DeInit+0x44>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <HAL_I2C_DeInit+0x94>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <HAL_I2C_DeInit+0x44>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1b      	ldr	r2, [pc, #108]	; (800511c <HAL_I2C_DeInit+0x98>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <HAL_I2C_DeInit+0x44>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a19      	ldr	r2, [pc, #100]	; (8005120 <HAL_I2C_DeInit+0x9c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_I2C_DeInit+0x44>
 80050be:	f240 2187 	movw	r1, #647	; 0x287
 80050c2:	4818      	ldr	r0, [pc, #96]	; (8005124 <HAL_I2C_DeInit+0xa0>)
 80050c4:	f7fb ff0e 	bl	8000ee4 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	; 0x24
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f82b 	bl	800513c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40005400 	.word	0x40005400
 8005118:	40005800 	.word	0x40005800
 800511c:	40005c00 	.word	0x40005c00
 8005120:	40006000 	.word	0x40006000
 8005124:	0800fc70 	.word	0x0800fc70

08005128 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	4603      	mov	r3, r0
 8005160:	817b      	strh	r3, [r7, #10]
 8005162:	460b      	mov	r3, r1
 8005164:	813b      	strh	r3, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d007      	beq.n	8005180 <HAL_I2C_Mem_Write+0x30>
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d004      	beq.n	8005180 <HAL_I2C_Mem_Write+0x30>
 8005176:	f640 1141 	movw	r1, #2369	; 0x941
 800517a:	4884      	ldr	r0, [pc, #528]	; (800538c <HAL_I2C_Mem_Write+0x23c>)
 800517c:	f7fb feb2 	bl	8000ee4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	f040 80f9 	bne.w	8005380 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_I2C_Mem_Write+0x4a>
 8005194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0ed      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_I2C_Mem_Write+0x64>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0e6      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051bc:	f7fd fe4c 	bl	8002e58 <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2319      	movs	r3, #25
 80051c8:	2201      	movs	r2, #1
 80051ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f001 fd98 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e0d1      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2221      	movs	r2, #33	; 0x21
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2240      	movs	r2, #64	; 0x40
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005206:	88f8      	ldrh	r0, [r7, #6]
 8005208:	893a      	ldrh	r2, [r7, #8]
 800520a:	8979      	ldrh	r1, [r7, #10]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	4603      	mov	r3, r0
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 ffc4 	bl	80061a4 <I2C_RequestMemoryWrite>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0a9      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	2bff      	cmp	r3, #255	; 0xff
 8005236:	d90e      	bls.n	8005256 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	22ff      	movs	r2, #255	; 0xff
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	b2da      	uxtb	r2, r3
 8005244:	8979      	ldrh	r1, [r7, #10]
 8005246:	2300      	movs	r3, #0
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f001 fef4 	bl	800703c <I2C_TransferConfig>
 8005254:	e00f      	b.n	8005276 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	b2da      	uxtb	r2, r3
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f001 fee3 	bl	800703c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 fd82 	bl	8006d84 <I2C_WaitOnTXISFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e07b      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d034      	beq.n	800532e <HAL_I2C_Mem_Write+0x1de>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d130      	bne.n	800532e <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2200      	movs	r2, #0
 80052d4:	2180      	movs	r1, #128	; 0x80
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f001 fd14 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e04d      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2bff      	cmp	r3, #255	; 0xff
 80052ee:	d90e      	bls.n	800530e <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	22ff      	movs	r2, #255	; 0xff
 80052f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	8979      	ldrh	r1, [r7, #10]
 80052fe:	2300      	movs	r3, #0
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f001 fe98 	bl	800703c <I2C_TransferConfig>
 800530c:	e00f      	b.n	800532e <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531c:	b2da      	uxtb	r2, r3
 800531e:	8979      	ldrh	r1, [r7, #10]
 8005320:	2300      	movs	r3, #0
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f001 fe87 	bl	800703c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d19e      	bne.n	8005276 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f001 fd61 	bl	8006e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e01a      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2220      	movs	r2, #32
 8005352:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <HAL_I2C_Mem_Write+0x240>)
 8005360:	400b      	ands	r3, r1
 8005362:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	0800fc70 	.word	0x0800fc70
 8005390:	fe00e800 	.word	0xfe00e800

08005394 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	817b      	strh	r3, [r7, #10]
 80053a6:	460b      	mov	r3, r1
 80053a8:	813b      	strh	r3, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d007      	beq.n	80053c4 <HAL_I2C_Mem_Read+0x30>
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d004      	beq.n	80053c4 <HAL_I2C_Mem_Read+0x30>
 80053ba:	f640 11ca 	movw	r1, #2506	; 0x9ca
 80053be:	4886      	ldr	r0, [pc, #536]	; (80055d8 <HAL_I2C_Mem_Read+0x244>)
 80053c0:	f7fb fd90 	bl	8000ee4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	f040 80fd 	bne.w	80055cc <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_I2C_Mem_Read+0x4a>
 80053d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d105      	bne.n	80053ea <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0f1      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_I2C_Mem_Read+0x64>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0ea      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005400:	f7fd fd2a 	bl	8002e58 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2319      	movs	r3, #25
 800540c:	2201      	movs	r2, #1
 800540e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f001 fc76 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0d5      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2222      	movs	r2, #34	; 0x22
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2240      	movs	r2, #64	; 0x40
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544a:	88f8      	ldrh	r0, [r7, #6]
 800544c:	893a      	ldrh	r2, [r7, #8]
 800544e:	8979      	ldrh	r1, [r7, #10]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4603      	mov	r3, r0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fef6 	bl	800624c <I2C_RequestMemoryRead>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0ad      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2bff      	cmp	r3, #255	; 0xff
 800547a:	d90e      	bls.n	800549a <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	22ff      	movs	r2, #255	; 0xff
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	b2da      	uxtb	r2, r3
 8005488:	8979      	ldrh	r1, [r7, #10]
 800548a:	4b54      	ldr	r3, [pc, #336]	; (80055dc <HAL_I2C_Mem_Read+0x248>)
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f001 fdd2 	bl	800703c <I2C_TransferConfig>
 8005498:	e00f      	b.n	80054ba <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	8979      	ldrh	r1, [r7, #10]
 80054ac:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <HAL_I2C_Mem_Read+0x248>)
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f001 fdc1 	bl	800703c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2200      	movs	r2, #0
 80054c2:	2104      	movs	r1, #4
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f001 fc1d 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e07c      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d034      	beq.n	800557a <HAL_I2C_Mem_Read+0x1e6>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	d130      	bne.n	800557a <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f001 fbee 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e04d      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2bff      	cmp	r3, #255	; 0xff
 800553a:	d90e      	bls.n	800555a <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005546:	b2da      	uxtb	r2, r3
 8005548:	8979      	ldrh	r1, [r7, #10]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f001 fd72 	bl	800703c <I2C_TransferConfig>
 8005558:	e00f      	b.n	800557a <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005568:	b2da      	uxtb	r2, r3
 800556a:	8979      	ldrh	r1, [r7, #10]
 800556c:	2300      	movs	r3, #0
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f001 fd61 	bl	800703c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d19a      	bne.n	80054ba <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f001 fc3b 	bl	8006e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e01a      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2220      	movs	r2, #32
 800559e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <HAL_I2C_Mem_Read+0x24c>)
 80055ac:	400b      	ands	r3, r1
 80055ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	0800fc70 	.word	0x0800fc70
 80055dc:	80002400 	.word	0x80002400
 80055e0:	fe00e800 	.word	0xfe00e800

080055e4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d007      	beq.n	8005614 <HAL_I2C_Mem_Read_DMA+0x30>
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d004      	beq.n	8005614 <HAL_I2C_Mem_Read_DMA+0x30>
 800560a:	f640 3192 	movw	r1, #2962	; 0xb92
 800560e:	4868      	ldr	r0, [pc, #416]	; (80057b0 <HAL_I2C_Mem_Read_DMA+0x1cc>)
 8005610:	f7fb fc68 	bl	8000ee4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b20      	cmp	r3, #32
 800561e:	f040 80c2 	bne.w	80057a6 <HAL_I2C_Mem_Read_DMA+0x1c2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_I2C_Mem_Read_DMA+0x4a>
 8005628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_I2C_Mem_Read_DMA+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e0b6      	b.n	80057a8 <HAL_I2C_Mem_Read_DMA+0x1c4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	d101      	bne.n	800564e <HAL_I2C_Mem_Read_DMA+0x6a>
    {
      return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	e0ac      	b.n	80057a8 <HAL_I2C_Mem_Read_DMA+0x1c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2C_Mem_Read_DMA+0x78>
 8005658:	2302      	movs	r3, #2
 800565a:	e0a5      	b.n	80057a8 <HAL_I2C_Mem_Read_DMA+0x1c4>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2222      	movs	r2, #34	; 0x22
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2240      	movs	r2, #64	; 0x40
 8005670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a4a      	ldr	r2, [pc, #296]	; (80057b4 <HAL_I2C_Mem_Read_DMA+0x1d0>)
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a4a      	ldr	r2, [pc, #296]	; (80057b8 <HAL_I2C_Mem_Read_DMA+0x1d4>)
 8005690:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8005692:	897a      	ldrh	r2, [r7, #10]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	2bff      	cmp	r3, #255	; 0xff
 80056a0:	d903      	bls.n	80056aa <HAL_I2C_Mem_Read_DMA+0xc6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80056a8:	e004      	b.n	80056b4 <HAL_I2C_Mem_Read_DMA+0xd0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d109      	bne.n	80056ce <HAL_I2C_Mem_Read_DMA+0xea>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ba:	893b      	ldrh	r3, [r7, #8]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ca:	651a      	str	r2, [r3, #80]	; 0x50
 80056cc:	e00b      	b.n	80056e6 <HAL_I2C_Mem_Read_DMA+0x102>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056ce:	893b      	ldrh	r3, [r7, #8]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80056dc:	893b      	ldrh	r3, [r7, #8]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d020      	beq.n	8005730 <HAL_I2C_Mem_Read_DMA+0x14c>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	4a32      	ldr	r2, [pc, #200]	; (80057bc <HAL_I2C_Mem_Read_DMA+0x1d8>)
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	4a31      	ldr	r2, [pc, #196]	; (80057c0 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80056fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	2200      	movs	r2, #0
 800570c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3324      	adds	r3, #36	; 0x24
 8005718:	4619      	mov	r1, r3
 800571a:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005720:	f7fe f832 	bl	8003788 <HAL_DMA_Start_IT>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d127      	bne.n	800577e <HAL_I2C_Mem_Read_DMA+0x19a>
 800572e:	e013      	b.n	8005758 <HAL_I2C_Mem_Read_DMA+0x174>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e027      	b.n	80057a8 <HAL_I2C_Mem_Read_DMA+0x1c4>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	8979      	ldrh	r1, [r7, #10]
 800575e:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f001 fc69 	bl	800703c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005772:	2101      	movs	r1, #1
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f001 fcdd 	bl	8007134 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e014      	b.n	80057a8 <HAL_I2C_Mem_Read_DMA+0x1c4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f043 0210 	orr.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_I2C_Mem_Read_DMA+0x1c4>
  }
  else
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	0800fc70 	.word	0x0800fc70
 80057b4:	ffff0000 	.word	0xffff0000
 80057b8:	08005d9d 	.word	0x08005d9d
 80057bc:	08006bbf 	.word	0x08006bbf
 80057c0:	08006c55 	.word	0x08006c55
 80057c4:	80002000 	.word	0x80002000

080057c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
  }
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	09db      	lsrs	r3, r3, #7
 8005824:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005840:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	0a9b      	lsrs	r3, r3, #10
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	09db      	lsrs	r3, r3, #7
 8005852:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f043 0208 	orr.w	r2, r3, #8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800586e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	0a5b      	lsrs	r3, r3, #9
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d010      	beq.n	800589e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	f043 0202 	orr.w	r2, r3, #2
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 030b 	and.w	r3, r3, #11
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 f869 	bl	8006988 <I2C_ITError>
  }
}
 80058b6:	bf00      	nop
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
 800591a:	4613      	mov	r3, r2
 800591c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <I2C_Slave_ISR_IT+0x24>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e0ec      	b.n	8005bac <I2C_Slave_ISR_IT+0x1fe>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fe67 	bl	80066c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d04d      	beq.n	8005aa2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d047      	beq.n	8005aa2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d128      	bne.n	8005a6e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b28      	cmp	r3, #40	; 0x28
 8005a26:	d108      	bne.n	8005a3a <I2C_Slave_ISR_IT+0x8c>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a2e:	d104      	bne.n	8005a3a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a30:	6939      	ldr	r1, [r7, #16]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 ff52 	bl	80068dc <I2C_ITListenCplt>
 8005a38:	e032      	b.n	8005aa0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b29      	cmp	r3, #41	; 0x29
 8005a44:	d10e      	bne.n	8005a64 <I2C_Slave_ISR_IT+0xb6>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a4c:	d00a      	beq.n	8005a64 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2210      	movs	r2, #16
 8005a54:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f001 f88d 	bl	8006b76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fd0a 	bl	8006476 <I2C_ITSlaveSeqCplt>
 8005a62:	e01d      	b.n	8005aa0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005a6c:	e096      	b.n	8005b9c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2210      	movs	r2, #16
 8005a74:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	f043 0204 	orr.w	r2, r3, #4
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <I2C_Slave_ISR_IT+0xe4>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a8e:	f040 8085 	bne.w	8005b9c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	4619      	mov	r1, r3
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 ff75 	bl	8006988 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a9e:	e07d      	b.n	8005b9c <I2C_Slave_ISR_IT+0x1ee>
 8005aa0:	e07c      	b.n	8005b9c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d030      	beq.n	8005b10 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	089b      	lsrs	r3, r3, #2
 8005ab2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02a      	beq.n	8005b10 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d018      	beq.n	8005af6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d14f      	bne.n	8005ba0 <I2C_Slave_ISR_IT+0x1f2>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b06:	d04b      	beq.n	8005ba0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fcb4 	bl	8006476 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b0e:	e047      	b.n	8005ba0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	08db      	lsrs	r3, r3, #3
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	08db      	lsrs	r3, r3, #3
 8005b20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b28:	6939      	ldr	r1, [r7, #16]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fbe2 	bl	80062f4 <I2C_ITAddrCplt>
 8005b30:	e037      	b.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d031      	beq.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d02b      	beq.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d018      	beq.n	8005b86 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b84:	e00d      	b.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b8c:	d002      	beq.n	8005b94 <I2C_Slave_ISR_IT+0x1e6>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fc6e 	bl	8006476 <I2C_ITSlaveSeqCplt>
 8005b9a:	e002      	b.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005ba0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <I2C_Master_ISR_DMA+0x1a>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e0e1      	b.n	8005d92 <I2C_Master_ISR_DMA+0x1de>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d017      	beq.n	8005c12 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c02:	2120      	movs	r1, #32
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f001 fa95 	bl	8007134 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 ffb3 	bl	8006b76 <I2C_Flush_TXDR>
 8005c10:	e0ba      	b.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	09db      	lsrs	r3, r3, #7
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d072      	beq.n	8005d04 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	099b      	lsrs	r3, r3, #6
 8005c22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d06c      	beq.n	8005d04 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c38:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d04e      	beq.n	8005ce2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c50:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2bff      	cmp	r3, #255	; 0xff
 8005c5a:	d906      	bls.n	8005c6a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	22ff      	movs	r2, #255	; 0xff
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005c62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e010      	b.n	8005c8c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c7c:	d003      	beq.n	8005c86 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e002      	b.n	8005c8c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c8a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	8a79      	ldrh	r1, [r7, #18]
 8005c94:	2300      	movs	r3, #0
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f001 f9ce 	bl	800703c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b22      	cmp	r3, #34	; 0x22
 8005cbc:	d108      	bne.n	8005cd0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ccc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005cce:	e05b      	b.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005ce0:	e052      	b.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cf0:	d003      	beq.n	8005cfa <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb82 	bl	80063fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005cf8:	e046      	b.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005cfa:	2140      	movs	r1, #64	; 0x40
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fe43 	bl	8006988 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d02:	e041      	b.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d029      	beq.n	8005d64 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	099b      	lsrs	r3, r3, #6
 8005d14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d023      	beq.n	8005d64 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d119      	bne.n	8005d5a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d34:	d027      	beq.n	8005d86 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d3e:	d108      	bne.n	8005d52 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d4e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005d50:	e019      	b.n	8005d86 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fb52 	bl	80063fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005d58:	e015      	b.n	8005d86 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d5a:	2140      	movs	r1, #64	; 0x40
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fe13 	bl	8006988 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d62:	e010      	b.n	8005d86 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fbd8 	bl	8006534 <I2C_ITMasterCplt>
 8005d84:	e000      	b.n	8005d88 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005d86:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005da8:	4b8c      	ldr	r3, [pc, #560]	; (8005fdc <I2C_Mem_ISR_DMA+0x240>)
 8005daa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <I2C_Mem_ISR_DMA+0x1e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e10c      	b.n	8005fd4 <I2C_Mem_ISR_DMA+0x238>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d017      	beq.n	8005dfe <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d011      	beq.n	8005dfe <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	f043 0204 	orr.w	r2, r3, #4
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005dee:	2120      	movs	r1, #32
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f001 f99f 	bl	8007134 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 febd 	bl	8006b76 <I2C_Flush_TXDR>
 8005dfc:	e0e5      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00f      	beq.n	8005e2a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295
 8005e26:	651a      	str	r2, [r3, #80]	; 0x50
 8005e28:	e0cf      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d05c      	beq.n	8005ef0 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	099b      	lsrs	r3, r3, #6
 8005e3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d056      	beq.n	8005ef0 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005e42:	2110      	movs	r1, #16
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f001 f975 	bl	8007134 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d048      	beq.n	8005ee6 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2bff      	cmp	r3, #255	; 0xff
 8005e5c:	d910      	bls.n	8005e80 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	22ff      	movs	r2, #255	; 0xff
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 f8df 	bl	800703c <I2C_TransferConfig>
 8005e7e:	e011      	b.n	8005ea4 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 f8cc 	bl	800703c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b22      	cmp	r3, #34	; 0x22
 8005ec0:	d108      	bne.n	8005ed4 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005ed2:	e07a      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005ee4:	e071      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ee6:	2140      	movs	r1, #64	; 0x40
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fd4d 	bl	8006988 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005eee:	e06c      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d056      	beq.n	8005faa <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	099b      	lsrs	r3, r3, #6
 8005f00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d050      	beq.n	8005faa <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b22      	cmp	r3, #34	; 0x22
 8005f12:	d101      	bne.n	8005f18 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8005f14:	4b32      	ldr	r3, [pc, #200]	; (8005fe0 <I2C_Mem_ISR_DMA+0x244>)
 8005f16:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2bff      	cmp	r3, #255	; 0xff
 8005f20:	d910      	bls.n	8005f44 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f001 f87d 	bl	800703c <I2C_TransferConfig>
 8005f42:	e011      	b.n	8005f68 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	b299      	uxth	r1, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f001 f86a 	bl	800703c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b22      	cmp	r3, #34	; 0x22
 8005f84:	d108      	bne.n	8005f98 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f94:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f96:	e018      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fa6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fa8:	e00f      	b.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fab5 	bl	8006534 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	80002000 	.word	0x80002000
 8005fe0:	80002400 	.word	0x80002400

08005fe4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <I2C_Slave_ISR_DMA+0x24>
 8006004:	2302      	movs	r3, #2
 8006006:	e0c9      	b.n	800619c <I2C_Slave_ISR_DMA+0x1b8>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fb4c 	bl	80066c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	091b      	lsrs	r3, r3, #4
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 809a 	beq.w	8006172 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8093 	beq.w	8006172 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0b9b      	lsrs	r3, r3, #14
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0bdb      	lsrs	r3, r3, #15
 800605c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006060:	2b00      	cmp	r3, #0
 8006062:	d07f      	beq.n	8006164 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	0bdb      	lsrs	r3, r3, #15
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8006084:	2301      	movs	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	0b9b      	lsrs	r3, r3, #14
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80060a8:	2301      	movs	r3, #1
 80060aa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d128      	bne.n	8006104 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b28      	cmp	r3, #40	; 0x28
 80060bc:	d108      	bne.n	80060d0 <I2C_Slave_ISR_DMA+0xec>
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c4:	d104      	bne.n	80060d0 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fc07 	bl	80068dc <I2C_ITListenCplt>
 80060ce:	e048      	b.n	8006162 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b29      	cmp	r3, #41	; 0x29
 80060da:	d10e      	bne.n	80060fa <I2C_Slave_ISR_DMA+0x116>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060e2:	d00a      	beq.n	80060fa <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2210      	movs	r2, #16
 80060ea:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fd42 	bl	8006b76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f9bf 	bl	8006476 <I2C_ITSlaveSeqCplt>
 80060f8:	e033      	b.n	8006162 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2210      	movs	r2, #16
 8006100:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006102:	e034      	b.n	800616e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2210      	movs	r2, #16
 800610a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006110:	f043 0204 	orr.w	r2, r3, #4
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <I2C_Slave_ISR_DMA+0x14a>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800612c:	d11f      	bne.n	800616e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b21      	cmp	r3, #33	; 0x21
 8006132:	d002      	beq.n	800613a <I2C_Slave_ISR_DMA+0x156>
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	2b29      	cmp	r3, #41	; 0x29
 8006138:	d103      	bne.n	8006142 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
 8006140:	e008      	b.n	8006154 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	2b22      	cmp	r3, #34	; 0x22
 8006146:	d002      	beq.n	800614e <I2C_Slave_ISR_DMA+0x16a>
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	2b2a      	cmp	r3, #42	; 0x2a
 800614c:	d102      	bne.n	8006154 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2222      	movs	r2, #34	; 0x22
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	4619      	mov	r1, r3
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fc14 	bl	8006988 <I2C_ITError>
      if (treatdmanack == 1U)
 8006160:	e005      	b.n	800616e <I2C_Slave_ISR_DMA+0x18a>
 8006162:	e004      	b.n	800616e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2210      	movs	r2, #16
 800616a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800616c:	e011      	b.n	8006192 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800616e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006170:	e00f      	b.n	8006192 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	08db      	lsrs	r3, r3, #3
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	08db      	lsrs	r3, r3, #3
 8006182:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f8b1 	bl	80062f4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	461a      	mov	r2, r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	817b      	strh	r3, [r7, #10]
 80061b6:	460b      	mov	r3, r1
 80061b8:	813b      	strh	r3, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	8979      	ldrh	r1, [r7, #10]
 80061c4:	4b20      	ldr	r3, [pc, #128]	; (8006248 <I2C_RequestMemoryWrite+0xa4>)
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 ff35 	bl	800703c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fdd4 	bl	8006d84 <I2C_WaitOnTXISFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e02c      	b.n	8006240 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ec:	893b      	ldrh	r3, [r7, #8]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
 80061f6:	e015      	b.n	8006224 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061f8:	893b      	ldrh	r3, [r7, #8]
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	69b9      	ldr	r1, [r7, #24]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fdba 	bl	8006d84 <I2C_WaitOnTXISFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e012      	b.n	8006240 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2200      	movs	r2, #0
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fd68 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	80002000 	.word	0x80002000

0800624c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	4603      	mov	r3, r0
 800625c:	817b      	strh	r3, [r7, #10]
 800625e:	460b      	mov	r3, r1
 8006260:	813b      	strh	r3, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	8979      	ldrh	r1, [r7, #10]
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <I2C_RequestMemoryRead+0xa4>)
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fee2 	bl	800703c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	69b9      	ldr	r1, [r7, #24]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fd81 	bl	8006d84 <I2C_WaitOnTXISFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e02c      	b.n	80062e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d105      	bne.n	800629e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006292:	893b      	ldrh	r3, [r7, #8]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
 800629c:	e015      	b.n	80062ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800629e:	893b      	ldrh	r3, [r7, #8]
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	69b9      	ldr	r1, [r7, #24]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fd67 	bl	8006d84 <I2C_WaitOnTXISFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e012      	b.n	80062e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062c0:	893b      	ldrh	r3, [r7, #8]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2140      	movs	r1, #64	; 0x40
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fd15 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	80002000 	.word	0x80002000

080062f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800630a:	2b28      	cmp	r3, #40	; 0x28
 800630c:	d16a      	bne.n	80063e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	b29b      	uxth	r3, r3
 8006328:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800632c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800633a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006348:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d138      	bne.n	80063c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006352:	897b      	ldrh	r3, [r7, #10]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	b29a      	uxth	r2, r3
 8006358:	89bb      	ldrh	r3, [r7, #12]
 800635a:	4053      	eors	r3, r2
 800635c:	b29b      	uxth	r3, r3
 800635e:	f003 0306 	and.w	r3, r3, #6
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11c      	bne.n	80063a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006366:	897b      	ldrh	r3, [r7, #10]
 8006368:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006378:	2b02      	cmp	r3, #2
 800637a:	d13b      	bne.n	80063f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2208      	movs	r2, #8
 8006388:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006392:	89ba      	ldrh	r2, [r7, #12]
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff fab8 	bl	800590e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800639e:	e029      	b.n	80063f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80063a0:	893b      	ldrh	r3, [r7, #8]
 80063a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ff2d 	bl	8007208 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063b6:	89ba      	ldrh	r2, [r7, #12]
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff faa6 	bl	800590e <HAL_I2C_AddrCallback>
}
 80063c2:	e017      	b.n	80063f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 ff1d 	bl	8007208 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063d6:	89ba      	ldrh	r2, [r7, #12]
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fa96 	bl	800590e <HAL_I2C_AddrCallback>
}
 80063e2:	e007      	b.n	80063f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2208      	movs	r2, #8
 80063ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b21      	cmp	r3, #33	; 0x21
 8006416:	d115      	bne.n	8006444 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2211      	movs	r2, #17
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800642c:	2101      	movs	r1, #1
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 feea 	bl	8007208 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fa3e 	bl	80058be <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006442:	e014      	b.n	800646e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2212      	movs	r2, #18
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006458:	2102      	movs	r1, #2
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fed4 	bl	8007208 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fa32 	bl	80058d2 <HAL_I2C_MasterRxCpltCallback>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	0b9b      	lsrs	r3, r3, #14
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e00d      	b.n	80064c8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	0bdb      	lsrs	r3, r3, #15
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b29      	cmp	r3, #41	; 0x29
 80064d2:	d112      	bne.n	80064fa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2228      	movs	r2, #40	; 0x28
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2221      	movs	r2, #33	; 0x21
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064e2:	2101      	movs	r1, #1
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fe8f 	bl	8007208 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f9f7 	bl	80058e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064f8:	e017      	b.n	800652a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b2a      	cmp	r3, #42	; 0x2a
 8006504:	d111      	bne.n	800652a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2228      	movs	r2, #40	; 0x28
 800650a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2222      	movs	r2, #34	; 0x22
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006514:	2102      	movs	r1, #2
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fe76 	bl	8007208 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff f9e8 	bl	80058fa <HAL_I2C_SlaveRxCpltCallback>
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2220      	movs	r2, #32
 8006548:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b21      	cmp	r3, #33	; 0x21
 8006554:	d107      	bne.n	8006566 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006556:	2101      	movs	r1, #1
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fe55 	bl	8007208 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2211      	movs	r2, #17
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
 8006564:	e00c      	b.n	8006580 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b22      	cmp	r3, #34	; 0x22
 8006570:	d106      	bne.n	8006580 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006572:	2102      	movs	r1, #2
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fe47 	bl	8007208 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2212      	movs	r2, #18
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6859      	ldr	r1, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b4d      	ldr	r3, [pc, #308]	; (80066c0 <I2C_ITMasterCplt+0x18c>)
 800658c:	400b      	ands	r3, r1
 800658e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a4a      	ldr	r2, [pc, #296]	; (80066c4 <I2C_ITMasterCplt+0x190>)
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2210      	movs	r2, #16
 80065ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	f043 0204 	orr.w	r2, r3, #4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b60      	cmp	r3, #96	; 0x60
 80065c6:	d10b      	bne.n	80065e0 <I2C_ITMasterCplt+0xac>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	089b      	lsrs	r3, r3, #2
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80065de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fac8 	bl	8006b76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b60      	cmp	r3, #96	; 0x60
 80065f6:	d002      	beq.n	80065fe <I2C_ITMasterCplt+0xca>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f9bf 	bl	8006988 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800660a:	e054      	b.n	80066b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b21      	cmp	r3, #33	; 0x21
 8006616:	d124      	bne.n	8006662 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	d10b      	bne.n	800664a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff f97b 	bl	800593e <HAL_I2C_MemTxCpltCallback>
}
 8006648:	e035      	b.n	80066b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff f92f 	bl	80058be <HAL_I2C_MasterTxCpltCallback>
}
 8006660:	e029      	b.n	80066b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b22      	cmp	r3, #34	; 0x22
 800666c:	d123      	bne.n	80066b6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d10b      	bne.n	80066a0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fa fb67 	bl	8000d6c <HAL_I2C_MemRxCpltCallback>
}
 800669e:	e00a      	b.n	80066b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff f90e 	bl	80058d2 <HAL_I2C_MasterRxCpltCallback>
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	fe00e800 	.word	0xfe00e800
 80066c4:	ffff0000 	.word	0xffff0000

080066c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2220      	movs	r2, #32
 80066ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b21      	cmp	r3, #33	; 0x21
 80066f2:	d002      	beq.n	80066fa <I2C_ITSlaveCplt+0x32>
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b29      	cmp	r3, #41	; 0x29
 80066f8:	d108      	bne.n	800670c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80066fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fd82 	bl	8007208 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2221      	movs	r2, #33	; 0x21
 8006708:	631a      	str	r2, [r3, #48]	; 0x30
 800670a:	e00d      	b.n	8006728 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b22      	cmp	r3, #34	; 0x22
 8006710:	d002      	beq.n	8006718 <I2C_ITSlaveCplt+0x50>
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b2a      	cmp	r3, #42	; 0x2a
 8006716:	d107      	bne.n	8006728 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006718:	f248 0102 	movw	r1, #32770	; 0x8002
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fd73 	bl	8007208 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2222      	movs	r2, #34	; 0x22
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006736:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6859      	ldr	r1, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b64      	ldr	r3, [pc, #400]	; (80068d4 <I2C_ITSlaveCplt+0x20c>)
 8006744:	400b      	ands	r3, r1
 8006746:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fa14 	bl	8006b76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	0b9b      	lsrs	r3, r3, #14
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d013      	beq.n	8006782 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006768:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d020      	beq.n	80067b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006780:	e018      	b.n	80067b4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	0bdb      	lsrs	r3, r3, #15
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800679c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	089b      	lsrs	r3, r3, #2
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d020      	beq.n	8006802 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0304 	bic.w	r3, r3, #4
 80067c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00c      	beq.n	8006802 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006810:	f043 0204 	orr.w	r2, r3, #4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8a7 	bl	8006988 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b28      	cmp	r3, #40	; 0x28
 8006844:	d141      	bne.n	80068ca <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006846:	6979      	ldr	r1, [r7, #20]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f847 	bl	80068dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800684e:	e03c      	b.n	80068ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006858:	d014      	beq.n	8006884 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fe0b 	bl	8006476 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <I2C_ITSlaveCplt+0x210>)
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff f854 	bl	800592a <HAL_I2C_ListenCpltCallback>
}
 8006882:	e022      	b.n	80068ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b22      	cmp	r3, #34	; 0x22
 800688e:	d10e      	bne.n	80068ae <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff f827 	bl	80058fa <HAL_I2C_SlaveRxCpltCallback>
}
 80068ac:	e00d      	b.n	80068ca <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff f80e 	bl	80058e6 <HAL_I2C_SlaveTxCpltCallback>
}
 80068ca:	bf00      	nop
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	fe00e800 	.word	0xfe00e800
 80068d8:	ffff0000 	.word	0xffff0000

080068dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a26      	ldr	r2, [pc, #152]	; (8006984 <I2C_ITListenCplt+0xa8>)
 80068ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	089b      	lsrs	r3, r3, #2
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d022      	beq.n	800695a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d012      	beq.n	800695a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f043 0204 	orr.w	r2, r3, #4
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800695a:	f248 0103 	movw	r1, #32771	; 0x8003
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc52 	bl	8007208 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2210      	movs	r2, #16
 800696a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fe ffd8 	bl	800592a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	ffff0000 	.word	0xffff0000

08006988 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a5d      	ldr	r2, [pc, #372]	; (8006b1c <I2C_ITError+0x194>)
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b28      	cmp	r3, #40	; 0x28
 80069be:	d005      	beq.n	80069cc <I2C_ITError+0x44>
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b29      	cmp	r3, #41	; 0x29
 80069c4:	d002      	beq.n	80069cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ca:	d10b      	bne.n	80069e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069cc:	2103      	movs	r1, #3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fc1a 	bl	8007208 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2228      	movs	r2, #40	; 0x28
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a50      	ldr	r2, [pc, #320]	; (8006b20 <I2C_ITError+0x198>)
 80069e0:	635a      	str	r2, [r3, #52]	; 0x34
 80069e2:	e011      	b.n	8006a08 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc0d 	bl	8007208 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b60      	cmp	r3, #96	; 0x60
 80069f8:	d003      	beq.n	8006a02 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d039      	beq.n	8006a8a <I2C_ITError+0x102>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b11      	cmp	r3, #17
 8006a1a:	d002      	beq.n	8006a22 <I2C_ITError+0x9a>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b21      	cmp	r3, #33	; 0x21
 8006a20:	d133      	bne.n	8006a8a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a30:	d107      	bne.n	8006a42 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fd f8b8 	bl	8003bbc <HAL_DMA_GetState>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d017      	beq.n	8006a82 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	4a33      	ldr	r2, [pc, #204]	; (8006b24 <I2C_ITError+0x19c>)
 8006a58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fc fefc 	bl	8003864 <HAL_DMA_Abort_IT>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d04d      	beq.n	8006b0e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a80:	e045      	b.n	8006b0e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f850 	bl	8006b28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a88:	e041      	b.n	8006b0e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d039      	beq.n	8006b06 <I2C_ITError+0x17e>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b12      	cmp	r3, #18
 8006a96:	d002      	beq.n	8006a9e <I2C_ITError+0x116>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b22      	cmp	r3, #34	; 0x22
 8006a9c:	d133      	bne.n	8006b06 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aac:	d107      	bne.n	8006abe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006abc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd f87a 	bl	8003bbc <HAL_DMA_GetState>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d017      	beq.n	8006afe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <I2C_ITError+0x19c>)
 8006ad4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fc febe 	bl	8003864 <HAL_DMA_Abort_IT>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006afc:	e009      	b.n	8006b12 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f812 	bl	8006b28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b04:	e005      	b.n	8006b12 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f80e 	bl	8006b28 <I2C_TreatErrorCallback>
  }
}
 8006b0c:	e002      	b.n	8006b14 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b12:	bf00      	nop
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	ffff0000 	.word	0xffff0000
 8006b20:	080059af 	.word	0x080059af
 8006b24:	08006cc9 	.word	0x08006cc9

08006b28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b60      	cmp	r3, #96	; 0x60
 8006b3a:	d10e      	bne.n	8006b5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fe ff07 	bl	8005966 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b58:	e009      	b.n	8006b6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fe fef2 	bl	8005952 <HAL_I2C_ErrorCallback>
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d103      	bne.n	8006b94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d007      	beq.n	8006bb2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0201 	orr.w	r2, r2, #1
 8006bb0:	619a      	str	r2, [r3, #24]
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bda:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006be6:	2120      	movs	r1, #32
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 faa3 	bl	8007134 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006bee:	e02d      	b.n	8006c4c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006bf8:	441a      	add	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2bff      	cmp	r3, #255	; 0xff
 8006c06:	d903      	bls.n	8006c10 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	22ff      	movs	r2, #255	; 0xff
 8006c0c:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c0e:	e004      	b.n	8006c1a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3324      	adds	r3, #36	; 0x24
 8006c24:	4619      	mov	r1, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006c30:	f7fc fdaa 	bl	8003788 <HAL_DMA_Start_IT>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff fea3 	bl	8006988 <I2C_ITError>
}
 8006c42:	e003      	b.n	8006c4c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006c44:	2140      	movs	r1, #64	; 0x40
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fa74 	bl	8007134 <I2C_Enable_IRQ>
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006c92:	2301      	movs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fc ff9e 	bl	8003bd8 <HAL_DMA_GetError>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d00e      	beq.n	8006cc0 <I2C_DMAError+0x6c>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006cb8:	2110      	movs	r1, #16
 8006cba:	68b8      	ldr	r0, [r7, #8]
 8006cbc:	f7ff fe64 	bl	8006988 <I2C_ITError>
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff ff16 	bl	8006b28 <I2C_TreatErrorCallback>
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d14:	e022      	b.n	8006d5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d01e      	beq.n	8006d5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1e:	f7fc f89b 	bl	8002e58 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d302      	bcc.n	8006d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d113      	bne.n	8006d5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d38:	f043 0220 	orr.w	r2, r3, #32
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e00f      	b.n	8006d7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4013      	ands	r3, r2
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d0cd      	beq.n	8006d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d90:	e02c      	b.n	8006dec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f870 	bl	8006e7c <I2C_IsErrorOccurred>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e02a      	b.n	8006dfc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d01e      	beq.n	8006dec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dae:	f7fc f853 	bl	8002e58 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d302      	bcc.n	8006dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d113      	bne.n	8006dec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e007      	b.n	8006dfc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d1cb      	bne.n	8006d92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e10:	e028      	b.n	8006e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f830 	bl	8006e7c <I2C_IsErrorOccurred>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e026      	b.n	8006e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e26:	f7fc f817 	bl	8002e58 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d113      	bne.n	8006e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	f043 0220 	orr.w	r2, r3, #32
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e007      	b.n	8006e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d1cf      	bne.n	8006e12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d068      	beq.n	8006f7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2210      	movs	r2, #16
 8006eae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006eb0:	e049      	b.n	8006f46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d045      	beq.n	8006f46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fb ffcd 	bl	8002e58 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <I2C_IsErrorOccurred+0x54>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d13a      	bne.n	8006f46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ee2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef2:	d121      	bne.n	8006f38 <I2C_IsErrorOccurred+0xbc>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006efa:	d01d      	beq.n	8006f38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006efc:	7cfb      	ldrb	r3, [r7, #19]
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d01a      	beq.n	8006f38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f12:	f7fb ffa1 	bl	8002e58 <HAL_GetTick>
 8006f16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f18:	e00e      	b.n	8006f38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f1a:	f7fb ff9d 	bl	8002e58 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b19      	cmp	r3, #25
 8006f26:	d907      	bls.n	8006f38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	f043 0320 	orr.w	r3, r3, #32
 8006f2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f36:	e006      	b.n	8006f46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d1e9      	bne.n	8006f1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d003      	beq.n	8006f5c <I2C_IsErrorOccurred+0xe0>
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0aa      	beq.n	8006eb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	f043 0304 	orr.w	r3, r3, #4
 8006f72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f043 0308 	orr.w	r3, r3, #8
 8006fb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	f043 0302 	orr.w	r3, r3, #2
 8006fd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01c      	beq.n	800702a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fdc0 	bl	8006b76 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6859      	ldr	r1, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <I2C_IsErrorOccurred+0x1bc>)
 8007002:	400b      	ands	r3, r1
 8007004:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	431a      	orrs	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800702a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800702e:	4618      	mov	r0, r3
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	fe00e800 	.word	0xfe00e800

0800703c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	817b      	strh	r3, [r7, #10]
 800704a:	4613      	mov	r3, r2
 800704c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2f      	ldr	r2, [pc, #188]	; (8007110 <I2C_TransferConfig+0xd4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <I2C_TransferConfig+0x44>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <I2C_TransferConfig+0xd8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00e      	beq.n	8007080 <I2C_TransferConfig+0x44>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2c      	ldr	r2, [pc, #176]	; (8007118 <I2C_TransferConfig+0xdc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <I2C_TransferConfig+0x44>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2a      	ldr	r2, [pc, #168]	; (800711c <I2C_TransferConfig+0xe0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <I2C_TransferConfig+0x44>
 8007076:	f641 3147 	movw	r1, #6983	; 0x1b47
 800707a:	4829      	ldr	r0, [pc, #164]	; (8007120 <I2C_TransferConfig+0xe4>)
 800707c:	f7f9 ff32 	bl	8000ee4 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007086:	d00b      	beq.n	80070a0 <I2C_TransferConfig+0x64>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800708e:	d007      	beq.n	80070a0 <I2C_TransferConfig+0x64>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <I2C_TransferConfig+0x64>
 8007096:	f641 3148 	movw	r1, #6984	; 0x1b48
 800709a:	4821      	ldr	r0, [pc, #132]	; (8007120 <I2C_TransferConfig+0xe4>)
 800709c:	f7f9 ff22 	bl	8000ee4 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	4a20      	ldr	r2, [pc, #128]	; (8007124 <I2C_TransferConfig+0xe8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00f      	beq.n	80070c8 <I2C_TransferConfig+0x8c>
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <I2C_TransferConfig+0xec>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00b      	beq.n	80070c8 <I2C_TransferConfig+0x8c>
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	4a1e      	ldr	r2, [pc, #120]	; (800712c <I2C_TransferConfig+0xf0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d007      	beq.n	80070c8 <I2C_TransferConfig+0x8c>
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <I2C_TransferConfig+0x8c>
 80070be:	f641 3149 	movw	r1, #6985	; 0x1b49
 80070c2:	4817      	ldr	r0, [pc, #92]	; (8007120 <I2C_TransferConfig+0xe4>)
 80070c4:	f7f9 ff0e 	bl	8000ee4 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070c8:	897b      	ldrh	r3, [r7, #10]
 80070ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070ce:	7a7b      	ldrb	r3, [r7, #9]
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070d6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	4313      	orrs	r3, r2
 80070e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	0d5b      	lsrs	r3, r3, #21
 80070f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <I2C_TransferConfig+0xf4>)
 80070f6:	430b      	orrs	r3, r1
 80070f8:	43db      	mvns	r3, r3
 80070fa:	ea02 0103 	and.w	r1, r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007108:	bf00      	nop
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40005400 	.word	0x40005400
 8007114:	40005800 	.word	0x40005800
 8007118:	40005c00 	.word	0x40005c00
 800711c:	40006000 	.word	0x40006000
 8007120:	0800fc70 	.word	0x0800fc70
 8007124:	80004000 	.word	0x80004000
 8007128:	80002400 	.word	0x80002400
 800712c:	80002000 	.word	0x80002000
 8007130:	03ff63ff 	.word	0x03ff63ff

08007134 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007148:	4a2d      	ldr	r2, [pc, #180]	; (8007200 <I2C_Enable_IRQ+0xcc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007152:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <I2C_Enable_IRQ+0xd0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d11d      	bne.n	8007194 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800715c:	2b00      	cmp	r3, #0
 800715e:	da03      	bge.n	8007168 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007166:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007168:	887b      	ldrh	r3, [r7, #2]
 800716a:	2b10      	cmp	r3, #16
 800716c:	d103      	bne.n	8007176 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007174:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007176:	887b      	ldrh	r3, [r7, #2]
 8007178:	2b20      	cmp	r3, #32
 800717a:	d103      	bne.n	8007184 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007182:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d12c      	bne.n	80071e4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007190:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007192:	e027      	b.n	80071e4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007198:	2b00      	cmp	r3, #0
 800719a:	da03      	bge.n	80071a4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80071a2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071a4:	887b      	ldrh	r3, [r7, #2]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80071b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071b6:	887b      	ldrh	r3, [r7, #2]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80071c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071c8:	887b      	ldrh	r3, [r7, #2]
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d103      	bne.n	80071d6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80071d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80071d6:	887b      	ldrh	r3, [r7, #2]
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d103      	bne.n	80071e4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f043 0320 	orr.w	r3, r3, #32
 80071e2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	08005bb5 	.word	0x08005bb5
 8007204:	08005fe5 	.word	0x08005fe5

08007208 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007218:	887b      	ldrh	r3, [r7, #2]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00f      	beq.n	8007242 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007228:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007236:	2b28      	cmp	r3, #40	; 0x28
 8007238:	d003      	beq.n	8007242 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007240:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007242:	887b      	ldrh	r3, [r7, #2]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00f      	beq.n	800726c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007252:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007260:	2b28      	cmp	r3, #40	; 0x28
 8007262:	d003      	beq.n	800726c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800726a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800726c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da03      	bge.n	800727c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800727a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800727c:	887b      	ldrh	r3, [r7, #2]
 800727e:	2b10      	cmp	r3, #16
 8007280:	d103      	bne.n	800728a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007288:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	2b20      	cmp	r3, #32
 800728e:	d103      	bne.n	8007298 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f043 0320 	orr.w	r3, r3, #32
 8007296:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007298:	887b      	ldrh	r3, [r7, #2]
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d103      	bne.n	80072a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	43da      	mvns	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	400a      	ands	r2, r1
 80072b6:	601a      	str	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a32      	ldr	r2, [pc, #200]	; (800739c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d012      	beq.n	80072fe <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a30      	ldr	r2, [pc, #192]	; (80073a0 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00d      	beq.n	80072fe <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d008      	beq.n	80072fe <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2d      	ldr	r2, [pc, #180]	; (80073a8 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d003      	beq.n	80072fe <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80072f6:	215e      	movs	r1, #94	; 0x5e
 80072f8:	482c      	ldr	r0, [pc, #176]	; (80073ac <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80072fa:	f7f9 fdf3 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730a:	d003      	beq.n	8007314 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800730c:	215f      	movs	r1, #95	; 0x5f
 800730e:	4827      	ldr	r0, [pc, #156]	; (80073ac <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8007310:	f7f9 fde8 	bl	8000ee4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b20      	cmp	r3, #32
 800731e:	d138      	bne.n	8007392 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800732a:	2302      	movs	r3, #2
 800732c:	e032      	b.n	8007394 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2224      	movs	r2, #36	; 0x24
 800733a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800735c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e000      	b.n	8007394 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
  }
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40005400 	.word	0x40005400
 80073a0:	40005800 	.word	0x40005800
 80073a4:	40005c00 	.word	0x40005c00
 80073a8:	40006000 	.word	0x40006000
 80073ac:	0800fca8 	.word	0x0800fca8

080073b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a31      	ldr	r2, [pc, #196]	; (8007484 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d012      	beq.n	80073ea <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2f      	ldr	r2, [pc, #188]	; (8007488 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00d      	beq.n	80073ea <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2e      	ldr	r2, [pc, #184]	; (800748c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d008      	beq.n	80073ea <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d003      	beq.n	80073ea <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80073e2:	218c      	movs	r1, #140	; 0x8c
 80073e4:	482b      	ldr	r0, [pc, #172]	; (8007494 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80073e6:	f7f9 fd7d 	bl	8000ee4 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b0f      	cmp	r3, #15
 80073ee:	d903      	bls.n	80073f8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80073f0:	218d      	movs	r1, #141	; 0x8d
 80073f2:	4828      	ldr	r0, [pc, #160]	; (8007494 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80073f4:	f7f9 fd76 	bl	8000ee4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b20      	cmp	r3, #32
 8007402:	d139      	bne.n	8007478 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800740e:	2302      	movs	r3, #2
 8007410:	e033      	b.n	800747a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2224      	movs	r2, #36	; 0x24
 800741e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40005400 	.word	0x40005400
 8007488:	40005800 	.word	0x40005800
 800748c:	40005c00 	.word	0x40005c00
 8007490:	40006000 	.word	0x40006000
 8007494:	0800fca8 	.word	0x0800fca8

08007498 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749a:	b08f      	sub	sp, #60	; 0x3c
 800749c:	af0a      	add	r7, sp, #40	; 0x28
 800749e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e124      	b.n	80076f4 <HAL_PCD_Init+0x25c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b2:	d008      	beq.n	80074c6 <HAL_PCD_Init+0x2e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a90      	ldr	r2, [pc, #576]	; (80076fc <HAL_PCD_Init+0x264>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <HAL_PCD_Init+0x2e>
 80074be:	2187      	movs	r1, #135	; 0x87
 80074c0:	488f      	ldr	r0, [pc, #572]	; (8007700 <HAL_PCD_Init+0x268>)
 80074c2:	f7f9 fd0f 	bl	8000ee4 <assert_failed>

  USBx = hpcd->Instance;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7f9 ffb7 	bl	8001454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f003 fae7 	bl	800aad8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	687e      	ldr	r6, [r7, #4]
 8007512:	466d      	mov	r5, sp
 8007514:	f106 0410 	add.w	r4, r6, #16
 8007518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800751a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800751c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800751e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007524:	e885 0003 	stmia.w	r5, {r0, r1}
 8007528:	1d33      	adds	r3, r6, #4
 800752a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800752c:	6838      	ldr	r0, [r7, #0]
 800752e:	f003 fa7b 	bl	800aa28 <USB_CoreInit>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e0d7      	b.n	80076f4 <HAL_PCD_Init+0x25c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f003 fad5 	bl	800aafa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
 8007554:	e04a      	b.n	80075ec <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007556:	7bfa      	ldrb	r2, [r7, #15]
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	4613      	mov	r3, r2
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	440b      	add	r3, r1
 8007564:	333d      	adds	r3, #61	; 0x3d
 8007566:	2201      	movs	r2, #1
 8007568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800756a:	7bfa      	ldrb	r2, [r7, #15]
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	333c      	adds	r3, #60	; 0x3c
 800757a:	7bfa      	ldrb	r2, [r7, #15]
 800757c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800757e:	7bfa      	ldrb	r2, [r7, #15]
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	b298      	uxth	r0, r3
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	3344      	adds	r3, #68	; 0x44
 8007592:	4602      	mov	r2, r0
 8007594:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007596:	7bfa      	ldrb	r2, [r7, #15]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3340      	adds	r3, #64	; 0x40
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075aa:	7bfa      	ldrb	r2, [r7, #15]
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	440b      	add	r3, r1
 80075b8:	3348      	adds	r3, #72	; 0x48
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075be:	7bfa      	ldrb	r2, [r7, #15]
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	334c      	adds	r3, #76	; 0x4c
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80075d2:	7bfa      	ldrb	r2, [r7, #15]
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	3354      	adds	r3, #84	; 0x54
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	7bfa      	ldrb	r2, [r7, #15]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d3af      	bcc.n	8007556 <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
 80075fa:	e044      	b.n	8007686 <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075fc:	7bfa      	ldrb	r2, [r7, #15]
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007612:	7bfa      	ldrb	r2, [r7, #15]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007624:	7bfa      	ldrb	r2, [r7, #15]
 8007626:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007628:	7bfa      	ldrb	r2, [r7, #15]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800763e:	7bfa      	ldrb	r2, [r7, #15]
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	4613      	mov	r3, r2
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	440b      	add	r3, r1
 800764c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007654:	7bfa      	ldrb	r2, [r7, #15]
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800766a:	7bfa      	ldrb	r2, [r7, #15]
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4613      	mov	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	3301      	adds	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
 8007686:	7bfa      	ldrb	r2, [r7, #15]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d3b5      	bcc.n	80075fc <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	687e      	ldr	r6, [r7, #4]
 8007698:	466d      	mov	r5, sp
 800769a:	f106 0410 	add.w	r4, r6, #16
 800769e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80076ae:	1d33      	adds	r3, r6, #4
 80076b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076b2:	6838      	ldr	r0, [r7, #0]
 80076b4:	f003 fa6e 	bl	800ab94 <USB_DevInit>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e014      	b.n	80076f4 <HAL_PCD_Init+0x25c>
  }

  hpcd->USB_Address = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d102      	bne.n	80076e8 <HAL_PCD_Init+0x250>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f80e 	bl	8007704 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f003 fc2c 	bl	800af4a <USB_DevDisconnect>

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fc:	40040000 	.word	0x40040000
 8007700:	0800fce4 	.word	0x0800fce4

08007704 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_PCDEx_ActivateLPM+0x44>)
 8007734:	4313      	orrs	r3, r2
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	10000003 	.word	0x10000003

0800774c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a04      	ldr	r2, [pc, #16]	; (8007768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800775a:	6013      	str	r3, [r2, #0]
}
 800775c:	bf00      	nop
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40007000 	.word	0x40007000

0800776c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007776:	4b23      	ldr	r3, [pc, #140]	; (8007804 <HAL_PWREx_EnableOverDrive+0x98>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a22      	ldr	r2, [pc, #136]	; (8007804 <HAL_PWREx_EnableOverDrive+0x98>)
 800777c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007780:	6413      	str	r3, [r2, #64]	; 0x40
 8007782:	4b20      	ldr	r3, [pc, #128]	; (8007804 <HAL_PWREx_EnableOverDrive+0x98>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800778e:	4b1e      	ldr	r3, [pc, #120]	; (8007808 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007798:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800779a:	f7fb fb5d 	bl	8002e58 <HAL_GetTick>
 800779e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077a0:	e009      	b.n	80077b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077a2:	f7fb fb59 	bl	8002e58 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077b0:	d901      	bls.n	80077b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e022      	b.n	80077fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077b6:	4b14      	ldr	r3, [pc, #80]	; (8007808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c2:	d1ee      	bne.n	80077a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077c4:	4b10      	ldr	r3, [pc, #64]	; (8007808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a0f      	ldr	r2, [pc, #60]	; (8007808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077d0:	f7fb fb42 	bl	8002e58 <HAL_GetTick>
 80077d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077d6:	e009      	b.n	80077ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077d8:	f7fb fb3e 	bl	8002e58 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077e6:	d901      	bls.n	80077ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e007      	b.n	80077fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f8:	d1ee      	bne.n	80077d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	40023800 	.word	0x40023800
 8007808:	40007000 	.word	0x40007000

0800780c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007814:	2300      	movs	r3, #0
 8007816:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e35c      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d904      	bls.n	8007834 <HAL_RCC_OscConfig+0x28>
 800782a:	f240 1163 	movw	r1, #355	; 0x163
 800782e:	4892      	ldr	r0, [pc, #584]	; (8007a78 <HAL_RCC_OscConfig+0x26c>)
 8007830:	f7f9 fb58 	bl	8000ee4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 809a 	beq.w	8007976 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <HAL_RCC_OscConfig+0x5c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007852:	d009      	beq.n	8007868 <HAL_RCC_OscConfig+0x5c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800785c:	d004      	beq.n	8007868 <HAL_RCC_OscConfig+0x5c>
 800785e:	f240 1169 	movw	r1, #361	; 0x169
 8007862:	4885      	ldr	r0, [pc, #532]	; (8007a78 <HAL_RCC_OscConfig+0x26c>)
 8007864:	f7f9 fb3e 	bl	8000ee4 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007868:	4b84      	ldr	r3, [pc, #528]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 030c 	and.w	r3, r3, #12
 8007870:	2b04      	cmp	r3, #4
 8007872:	d00c      	beq.n	800788e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007874:	4b81      	ldr	r3, [pc, #516]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 030c 	and.w	r3, r3, #12
 800787c:	2b08      	cmp	r3, #8
 800787e:	d112      	bne.n	80078a6 <HAL_RCC_OscConfig+0x9a>
 8007880:	4b7e      	ldr	r3, [pc, #504]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800788c:	d10b      	bne.n	80078a6 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800788e:	4b7b      	ldr	r3, [pc, #492]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d06c      	beq.n	8007974 <HAL_RCC_OscConfig+0x168>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d168      	bne.n	8007974 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e31a      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ae:	d106      	bne.n	80078be <HAL_RCC_OscConfig+0xb2>
 80078b0:	4b72      	ldr	r3, [pc, #456]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a71      	ldr	r2, [pc, #452]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	e02e      	b.n	800791c <HAL_RCC_OscConfig+0x110>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10c      	bne.n	80078e0 <HAL_RCC_OscConfig+0xd4>
 80078c6:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a6c      	ldr	r2, [pc, #432]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	4b6a      	ldr	r3, [pc, #424]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a69      	ldr	r2, [pc, #420]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	e01d      	b.n	800791c <HAL_RCC_OscConfig+0x110>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078e8:	d10c      	bne.n	8007904 <HAL_RCC_OscConfig+0xf8>
 80078ea:	4b64      	ldr	r3, [pc, #400]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a63      	ldr	r2, [pc, #396]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	4b61      	ldr	r3, [pc, #388]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a60      	ldr	r2, [pc, #384]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80078fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e00b      	b.n	800791c <HAL_RCC_OscConfig+0x110>
 8007904:	4b5d      	ldr	r3, [pc, #372]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a5c      	ldr	r2, [pc, #368]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 800790a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	4b5a      	ldr	r3, [pc, #360]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a59      	ldr	r2, [pc, #356]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800791a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d013      	beq.n	800794c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007924:	f7fb fa98 	bl	8002e58 <HAL_GetTick>
 8007928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800792c:	f7fb fa94 	bl	8002e58 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	; 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e2ce      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800793e:	4b4f      	ldr	r3, [pc, #316]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCC_OscConfig+0x120>
 800794a:	e014      	b.n	8007976 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794c:	f7fb fa84 	bl	8002e58 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007954:	f7fb fa80 	bl	8002e58 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b64      	cmp	r3, #100	; 0x64
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e2ba      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007966:	4b45      	ldr	r3, [pc, #276]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f0      	bne.n	8007954 <HAL_RCC_OscConfig+0x148>
 8007972:	e000      	b.n	8007976 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8084 	beq.w	8007a8c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_RCC_OscConfig+0x192>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d004      	beq.n	800799e <HAL_RCC_OscConfig+0x192>
 8007994:	f240 119b 	movw	r1, #411	; 0x19b
 8007998:	4837      	ldr	r0, [pc, #220]	; (8007a78 <HAL_RCC_OscConfig+0x26c>)
 800799a:	f7f9 faa3 	bl	8000ee4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b1f      	cmp	r3, #31
 80079a4:	d904      	bls.n	80079b0 <HAL_RCC_OscConfig+0x1a4>
 80079a6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80079aa:	4833      	ldr	r0, [pc, #204]	; (8007a78 <HAL_RCC_OscConfig+0x26c>)
 80079ac:	f7f9 fa9a 	bl	8000ee4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079b0:	4b32      	ldr	r3, [pc, #200]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 030c 	and.w	r3, r3, #12
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079bc:	4b2f      	ldr	r3, [pc, #188]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 030c 	and.w	r3, r3, #12
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d11c      	bne.n	8007a02 <HAL_RCC_OscConfig+0x1f6>
 80079c8:	4b2c      	ldr	r3, [pc, #176]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d116      	bne.n	8007a02 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079d4:	4b29      	ldr	r3, [pc, #164]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_RCC_OscConfig+0x1e0>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d001      	beq.n	80079ec <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e277      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ec:	4b23      	ldr	r3, [pc, #140]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4920      	ldr	r1, [pc, #128]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a00:	e044      	b.n	8007a8c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d023      	beq.n	8007a52 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1b      	ldr	r2, [pc, #108]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a10:	f043 0301 	orr.w	r3, r3, #1
 8007a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a16:	f7fb fa1f 	bl	8002e58 <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a1e:	f7fb fa1b 	bl	8002e58 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e255      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a30:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f0      	beq.n	8007a1e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	490c      	ldr	r1, [pc, #48]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	600b      	str	r3, [r1, #0]
 8007a50:	e01c      	b.n	8007a8c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a52:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <HAL_RCC_OscConfig+0x270>)
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5e:	f7fb f9fb 	bl	8002e58 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a64:	e00c      	b.n	8007a80 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a66:	f7fb f9f7 	bl	8002e58 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d905      	bls.n	8007a80 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e231      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
 8007a78:	0800fd1c 	.word	0x0800fd1c
 8007a7c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a80:	4b7e      	ldr	r3, [pc, #504]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1ec      	bne.n	8007a66 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d043      	beq.n	8007b20 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d008      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x2a6>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d004      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x2a6>
 8007aa8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007aac:	4874      	ldr	r0, [pc, #464]	; (8007c80 <HAL_RCC_OscConfig+0x474>)
 8007aae:	f7f9 fa19 	bl	8000ee4 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d019      	beq.n	8007aee <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aba:	4b70      	ldr	r3, [pc, #448]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007abe:	4a6f      	ldr	r2, [pc, #444]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac6:	f7fb f9c7 	bl	8002e58 <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007acc:	e008      	b.n	8007ae0 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ace:	f7fb f9c3 	bl	8002e58 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e1fd      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ae0:	4b66      	ldr	r3, [pc, #408]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <HAL_RCC_OscConfig+0x2c2>
 8007aec:	e018      	b.n	8007b20 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aee:	4b63      	ldr	r3, [pc, #396]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af2:	4a62      	ldr	r2, [pc, #392]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afa:	f7fb f9ad 	bl	8002e58 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b02:	f7fb f9a9 	bl	8002e58 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e1e3      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b14:	4b59      	ldr	r3, [pc, #356]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f0      	bne.n	8007b02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80bc 	beq.w	8007ca6 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <HAL_RCC_OscConfig+0x344>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d008      	beq.n	8007b50 <HAL_RCC_OscConfig+0x344>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d004      	beq.n	8007b50 <HAL_RCC_OscConfig+0x344>
 8007b46:	f240 2106 	movw	r1, #518	; 0x206
 8007b4a:	484d      	ldr	r0, [pc, #308]	; (8007c80 <HAL_RCC_OscConfig+0x474>)
 8007b4c:	f7f9 f9ca 	bl	8000ee4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b50:	4b4a      	ldr	r3, [pc, #296]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10d      	bne.n	8007b78 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b5c:	4b47      	ldr	r3, [pc, #284]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	4a46      	ldr	r2, [pc, #280]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b66:	6413      	str	r3, [r2, #64]	; 0x40
 8007b68:	4b44      	ldr	r3, [pc, #272]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b78:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <HAL_RCC_OscConfig+0x478>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d118      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b84:	4b3f      	ldr	r3, [pc, #252]	; (8007c84 <HAL_RCC_OscConfig+0x478>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a3e      	ldr	r2, [pc, #248]	; (8007c84 <HAL_RCC_OscConfig+0x478>)
 8007b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b90:	f7fb f962 	bl	8002e58 <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b98:	f7fb f95e 	bl	8002e58 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b64      	cmp	r3, #100	; 0x64
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e198      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007baa:	4b36      	ldr	r3, [pc, #216]	; (8007c84 <HAL_RCC_OscConfig+0x478>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f0      	beq.n	8007b98 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d106      	bne.n	8007bcc <HAL_RCC_OscConfig+0x3c0>
 8007bbe:	4b2f      	ldr	r3, [pc, #188]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	4a2e      	ldr	r2, [pc, #184]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007bc4:	f043 0301 	orr.w	r3, r3, #1
 8007bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bca:	e02d      	b.n	8007c28 <HAL_RCC_OscConfig+0x41c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10c      	bne.n	8007bee <HAL_RCC_OscConfig+0x3e2>
 8007bd4:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd8:	4a28      	ldr	r2, [pc, #160]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	6713      	str	r3, [r2, #112]	; 0x70
 8007be0:	4b26      	ldr	r3, [pc, #152]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be4:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007be6:	f023 0304 	bic.w	r3, r3, #4
 8007bea:	6713      	str	r3, [r2, #112]	; 0x70
 8007bec:	e01c      	b.n	8007c28 <HAL_RCC_OscConfig+0x41c>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d10c      	bne.n	8007c10 <HAL_RCC_OscConfig+0x404>
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	4a20      	ldr	r2, [pc, #128]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007bfc:	f043 0304 	orr.w	r3, r3, #4
 8007c00:	6713      	str	r3, [r2, #112]	; 0x70
 8007c02:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	4a1d      	ldr	r2, [pc, #116]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c0e:	e00b      	b.n	8007c28 <HAL_RCC_OscConfig+0x41c>
 8007c10:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1c:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	4a16      	ldr	r2, [pc, #88]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c22:	f023 0304 	bic.w	r3, r3, #4
 8007c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c30:	f7fb f912 	bl	8002e58 <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c36:	e00a      	b.n	8007c4e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c38:	f7fb f90e 	bl	8002e58 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e146      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <HAL_RCC_OscConfig+0x470>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0ee      	beq.n	8007c38 <HAL_RCC_OscConfig+0x42c>
 8007c5a:	e01b      	b.n	8007c94 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c5c:	f7fb f8fc 	bl	8002e58 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c62:	e011      	b.n	8007c88 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f7fb f8f8 	bl	8002e58 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d908      	bls.n	8007c88 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e130      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	0800fd1c 	.word	0x0800fd1c
 8007c84:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c88:	4b96      	ldr	r3, [pc, #600]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e7      	bne.n	8007c64 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d105      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9a:	4b92      	ldr	r3, [pc, #584]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	4a91      	ldr	r2, [pc, #580]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4bc>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d008      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4bc>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4bc>
 8007cbe:	f240 214a 	movw	r1, #586	; 0x24a
 8007cc2:	4889      	ldr	r0, [pc, #548]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007cc4:	f7f9 f90e 	bl	8000ee4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8104 	beq.w	8007eda <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cd2:	4b84      	ldr	r3, [pc, #528]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	f000 80c3 	beq.w	8007e66 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f040 80a4 	bne.w	8007e32 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d009      	beq.n	8007d06 <HAL_RCC_OscConfig+0x4fa>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cfa:	d004      	beq.n	8007d06 <HAL_RCC_OscConfig+0x4fa>
 8007cfc:	f240 2153 	movw	r1, #595	; 0x253
 8007d00:	4879      	ldr	r0, [pc, #484]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007d02:	f7f9 f8ef 	bl	8000ee4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d903      	bls.n	8007d16 <HAL_RCC_OscConfig+0x50a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	2b3f      	cmp	r3, #63	; 0x3f
 8007d14:	d904      	bls.n	8007d20 <HAL_RCC_OscConfig+0x514>
 8007d16:	f44f 7115 	mov.w	r1, #596	; 0x254
 8007d1a:	4873      	ldr	r0, [pc, #460]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007d1c:	f7f9 f8e2 	bl	8000ee4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	2b31      	cmp	r3, #49	; 0x31
 8007d26:	d904      	bls.n	8007d32 <HAL_RCC_OscConfig+0x526>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007d30:	d904      	bls.n	8007d3c <HAL_RCC_OscConfig+0x530>
 8007d32:	f240 2155 	movw	r1, #597	; 0x255
 8007d36:	486c      	ldr	r0, [pc, #432]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007d38:	f7f9 f8d4 	bl	8000ee4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d010      	beq.n	8007d66 <HAL_RCC_OscConfig+0x55a>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d00c      	beq.n	8007d66 <HAL_RCC_OscConfig+0x55a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	2b06      	cmp	r3, #6
 8007d52:	d008      	beq.n	8007d66 <HAL_RCC_OscConfig+0x55a>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d004      	beq.n	8007d66 <HAL_RCC_OscConfig+0x55a>
 8007d5c:	f240 2156 	movw	r1, #598	; 0x256
 8007d60:	4861      	ldr	r0, [pc, #388]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007d62:	f7f9 f8bf 	bl	8000ee4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d903      	bls.n	8007d76 <HAL_RCC_OscConfig+0x56a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	2b0f      	cmp	r3, #15
 8007d74:	d904      	bls.n	8007d80 <HAL_RCC_OscConfig+0x574>
 8007d76:	f240 2157 	movw	r1, #599	; 0x257
 8007d7a:	485b      	ldr	r0, [pc, #364]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007d7c:	f7f9 f8b2 	bl	8000ee4 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d903      	bls.n	8007d90 <HAL_RCC_OscConfig+0x584>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	d904      	bls.n	8007d9a <HAL_RCC_OscConfig+0x58e>
 8007d90:	f240 2159 	movw	r1, #601	; 0x259
 8007d94:	4854      	ldr	r0, [pc, #336]	; (8007ee8 <HAL_RCC_OscConfig+0x6dc>)
 8007d96:	f7f9 f8a5 	bl	8000ee4 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d9a:	4b52      	ldr	r3, [pc, #328]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a51      	ldr	r2, [pc, #324]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da6:	f7fb f857 	bl	8002e58 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dae:	f7fb f853 	bl	8002e58 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e08d      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc0:	4b48      	ldr	r3, [pc, #288]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f0      	bne.n	8007dae <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	019b      	lsls	r3, r3, #6
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	3b01      	subs	r3, #1
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	061b      	lsls	r3, r3, #24
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	071b      	lsls	r3, r3, #28
 8007df8:	493a      	ldr	r1, [pc, #232]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dfe:	4b39      	ldr	r3, [pc, #228]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a38      	ldr	r2, [pc, #224]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0a:	f7fb f825 	bl	8002e58 <HAL_GetTick>
 8007e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e12:	f7fb f821 	bl	8002e58 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e05b      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e24:	4b2f      	ldr	r3, [pc, #188]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <HAL_RCC_OscConfig+0x606>
 8007e30:	e053      	b.n	8007eda <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e32:	4b2c      	ldr	r3, [pc, #176]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a2b      	ldr	r2, [pc, #172]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3e:	f7fb f80b 	bl	8002e58 <HAL_GetTick>
 8007e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e46:	f7fb f807 	bl	8002e58 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e041      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e58:	4b22      	ldr	r3, [pc, #136]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1f0      	bne.n	8007e46 <HAL_RCC_OscConfig+0x63a>
 8007e64:	e039      	b.n	8007eda <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e66:	4b1f      	ldr	r3, [pc, #124]	; (8007ee4 <HAL_RCC_OscConfig+0x6d8>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d030      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d129      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d122      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e9c:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d119      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d10f      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d001      	beq.n	8007eda <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	0800fd1c 	.word	0x0800fd1c

08007eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e18c      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x28>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b0f      	cmp	r3, #15
 8007f12:	d904      	bls.n	8007f1e <HAL_RCC_ClockConfig+0x32>
 8007f14:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007f18:	4887      	ldr	r0, [pc, #540]	; (8008138 <HAL_RCC_ClockConfig+0x24c>)
 8007f1a:	f7f8 ffe3 	bl	8000ee4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d031      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d02e      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d02b      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d028      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d025      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d022      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b06      	cmp	r3, #6
 8007f46:	d01f      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	d01c      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d019      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b09      	cmp	r3, #9
 8007f58:	d016      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b0a      	cmp	r3, #10
 8007f5e:	d013      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	d010      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	d00d      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b0d      	cmp	r3, #13
 8007f70:	d00a      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b0e      	cmp	r3, #14
 8007f76:	d007      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b0f      	cmp	r3, #15
 8007f7c:	d004      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x9c>
 8007f7e:	f240 21de 	movw	r1, #734	; 0x2de
 8007f82:	486d      	ldr	r0, [pc, #436]	; (8008138 <HAL_RCC_ClockConfig+0x24c>)
 8007f84:	f7f8 ffae 	bl	8000ee4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f88:	4b6c      	ldr	r3, [pc, #432]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d910      	bls.n	8007fb8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f96:	4b69      	ldr	r3, [pc, #420]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f023 020f 	bic.w	r2, r3, #15
 8007f9e:	4967      	ldr	r1, [pc, #412]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa6:	4b65      	ldr	r3, [pc, #404]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d001      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e132      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d049      	beq.n	8008058 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fd0:	4b5b      	ldr	r3, [pc, #364]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4a5a      	ldr	r2, [pc, #360]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8007fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fe8:	4b55      	ldr	r3, [pc, #340]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4a54      	ldr	r2, [pc, #336]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8007fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d024      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d020      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b90      	cmp	r3, #144	; 0x90
 800800a:	d01c      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2ba0      	cmp	r3, #160	; 0xa0
 8008012:	d018      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2bb0      	cmp	r3, #176	; 0xb0
 800801a:	d014      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2bc0      	cmp	r3, #192	; 0xc0
 8008022:	d010      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2bd0      	cmp	r3, #208	; 0xd0
 800802a:	d00c      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2be0      	cmp	r3, #224	; 0xe0
 8008032:	d008      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2bf0      	cmp	r3, #240	; 0xf0
 800803a:	d004      	beq.n	8008046 <HAL_RCC_ClockConfig+0x15a>
 800803c:	f240 3102 	movw	r1, #770	; 0x302
 8008040:	483d      	ldr	r0, [pc, #244]	; (8008138 <HAL_RCC_ClockConfig+0x24c>)
 8008042:	f7f8 ff4f 	bl	8000ee4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008046:	4b3e      	ldr	r3, [pc, #248]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	493b      	ldr	r1, [pc, #236]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8008054:	4313      	orrs	r3, r2
 8008056:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d051      	beq.n	8008108 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <HAL_RCC_ClockConfig+0x19a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d008      	beq.n	8008086 <HAL_RCC_ClockConfig+0x19a>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d004      	beq.n	8008086 <HAL_RCC_ClockConfig+0x19a>
 800807c:	f240 3109 	movw	r1, #777	; 0x309
 8008080:	482d      	ldr	r0, [pc, #180]	; (8008138 <HAL_RCC_ClockConfig+0x24c>)
 8008082:	f7f8 ff2f 	bl	8000ee4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d107      	bne.n	800809e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800808e:	4b2c      	ldr	r3, [pc, #176]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d115      	bne.n	80080c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e0bf      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d107      	bne.n	80080b6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080a6:	4b26      	ldr	r3, [pc, #152]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e0b3      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b6:	4b22      	ldr	r3, [pc, #136]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0ab      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080c6:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f023 0203 	bic.w	r2, r3, #3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	491b      	ldr	r1, [pc, #108]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d8:	f7fa febe 	bl	8002e58 <HAL_GetTick>
 80080dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080de:	e00a      	b.n	80080f6 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080e0:	f7fa feba 	bl	8002e58 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e093      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080f6:	4b12      	ldr	r3, [pc, #72]	; (8008140 <HAL_RCC_ClockConfig+0x254>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 020c 	and.w	r2, r3, #12
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	429a      	cmp	r2, r3
 8008106:	d1eb      	bne.n	80080e0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d216      	bcs.n	8008144 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f023 020f 	bic.w	r2, r3, #15
 800811e:	4907      	ldr	r1, [pc, #28]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	4313      	orrs	r3, r2
 8008124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008126:	4b05      	ldr	r3, [pc, #20]	; (800813c <HAL_RCC_ClockConfig+0x250>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d007      	beq.n	8008144 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e072      	b.n	800821e <HAL_RCC_ClockConfig+0x332>
 8008138:	0800fd1c 	.word	0x0800fd1c
 800813c:	40023c00 	.word	0x40023c00
 8008140:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d025      	beq.n	800819c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d018      	beq.n	800818a <HAL_RCC_ClockConfig+0x29e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d013      	beq.n	800818a <HAL_RCC_ClockConfig+0x29e>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800816a:	d00e      	beq.n	800818a <HAL_RCC_ClockConfig+0x29e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008174:	d009      	beq.n	800818a <HAL_RCC_ClockConfig+0x29e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800817e:	d004      	beq.n	800818a <HAL_RCC_ClockConfig+0x29e>
 8008180:	f240 3146 	movw	r1, #838	; 0x346
 8008184:	4828      	ldr	r0, [pc, #160]	; (8008228 <HAL_RCC_ClockConfig+0x33c>)
 8008186:	f7f8 fead 	bl	8000ee4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800818a:	4b28      	ldr	r3, [pc, #160]	; (800822c <HAL_RCC_ClockConfig+0x340>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	4925      	ldr	r1, [pc, #148]	; (800822c <HAL_RCC_ClockConfig+0x340>)
 8008198:	4313      	orrs	r3, r2
 800819a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d026      	beq.n	80081f6 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d018      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2f6>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b8:	d013      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2f6>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081c2:	d00e      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2f6>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80081cc:	d009      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2f6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80081d6:	d004      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2f6>
 80081d8:	f240 314d 	movw	r1, #845	; 0x34d
 80081dc:	4812      	ldr	r0, [pc, #72]	; (8008228 <HAL_RCC_ClockConfig+0x33c>)
 80081de:	f7f8 fe81 	bl	8000ee4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <HAL_RCC_ClockConfig+0x340>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	490e      	ldr	r1, [pc, #56]	; (800822c <HAL_RCC_ClockConfig+0x340>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081f6:	f000 f821 	bl	800823c <HAL_RCC_GetSysClockFreq>
 80081fa:	4602      	mov	r2, r0
 80081fc:	4b0b      	ldr	r3, [pc, #44]	; (800822c <HAL_RCC_ClockConfig+0x340>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	490a      	ldr	r1, [pc, #40]	; (8008230 <HAL_RCC_ClockConfig+0x344>)
 8008208:	5ccb      	ldrb	r3, [r1, r3]
 800820a:	fa22 f303 	lsr.w	r3, r2, r3
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <HAL_RCC_ClockConfig+0x348>)
 8008210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <HAL_RCC_ClockConfig+0x34c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f7f9 f996 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	0800fd1c 	.word	0x0800fd1c
 800822c:	40023800 	.word	0x40023800
 8008230:	0800fefc 	.word	0x0800fefc
 8008234:	20000004 	.word	0x20000004
 8008238:	20000008 	.word	0x20000008

0800823c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800823c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008240:	b094      	sub	sp, #80	; 0x50
 8008242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	647b      	str	r3, [r7, #68]	; 0x44
 8008248:	2300      	movs	r3, #0
 800824a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800824c:	2300      	movs	r3, #0
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008254:	4b79      	ldr	r3, [pc, #484]	; (800843c <HAL_RCC_GetSysClockFreq+0x200>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f003 030c 	and.w	r3, r3, #12
 800825c:	2b08      	cmp	r3, #8
 800825e:	d00d      	beq.n	800827c <HAL_RCC_GetSysClockFreq+0x40>
 8008260:	2b08      	cmp	r3, #8
 8008262:	f200 80e1 	bhi.w	8008428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <HAL_RCC_GetSysClockFreq+0x34>
 800826a:	2b04      	cmp	r3, #4
 800826c:	d003      	beq.n	8008276 <HAL_RCC_GetSysClockFreq+0x3a>
 800826e:	e0db      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008270:	4b73      	ldr	r3, [pc, #460]	; (8008440 <HAL_RCC_GetSysClockFreq+0x204>)
 8008272:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008274:	e0db      	b.n	800842e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008276:	4b73      	ldr	r3, [pc, #460]	; (8008444 <HAL_RCC_GetSysClockFreq+0x208>)
 8008278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800827a:	e0d8      	b.n	800842e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800827c:	4b6f      	ldr	r3, [pc, #444]	; (800843c <HAL_RCC_GetSysClockFreq+0x200>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008284:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008286:	4b6d      	ldr	r3, [pc, #436]	; (800843c <HAL_RCC_GetSysClockFreq+0x200>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d063      	beq.n	800835a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008292:	4b6a      	ldr	r3, [pc, #424]	; (800843c <HAL_RCC_GetSysClockFreq+0x200>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	2200      	movs	r2, #0
 800829a:	63bb      	str	r3, [r7, #56]	; 0x38
 800829c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a4:	633b      	str	r3, [r7, #48]	; 0x30
 80082a6:	2300      	movs	r3, #0
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
 80082aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80082ae:	4622      	mov	r2, r4
 80082b0:	462b      	mov	r3, r5
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f04f 0100 	mov.w	r1, #0
 80082ba:	0159      	lsls	r1, r3, #5
 80082bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082c0:	0150      	lsls	r0, r2, #5
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4621      	mov	r1, r4
 80082c8:	1a51      	subs	r1, r2, r1
 80082ca:	6139      	str	r1, [r7, #16]
 80082cc:	4629      	mov	r1, r5
 80082ce:	eb63 0301 	sbc.w	r3, r3, r1
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082e0:	4659      	mov	r1, fp
 80082e2:	018b      	lsls	r3, r1, #6
 80082e4:	4651      	mov	r1, sl
 80082e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082ea:	4651      	mov	r1, sl
 80082ec:	018a      	lsls	r2, r1, #6
 80082ee:	4651      	mov	r1, sl
 80082f0:	ebb2 0801 	subs.w	r8, r2, r1
 80082f4:	4659      	mov	r1, fp
 80082f6:	eb63 0901 	sbc.w	r9, r3, r1
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800830a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800830e:	4690      	mov	r8, r2
 8008310:	4699      	mov	r9, r3
 8008312:	4623      	mov	r3, r4
 8008314:	eb18 0303 	adds.w	r3, r8, r3
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	462b      	mov	r3, r5
 800831c:	eb49 0303 	adc.w	r3, r9, r3
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800832e:	4629      	mov	r1, r5
 8008330:	024b      	lsls	r3, r1, #9
 8008332:	4621      	mov	r1, r4
 8008334:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008338:	4621      	mov	r1, r4
 800833a:	024a      	lsls	r2, r1, #9
 800833c:	4610      	mov	r0, r2
 800833e:	4619      	mov	r1, r3
 8008340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008342:	2200      	movs	r2, #0
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
 8008346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800834c:	f7f7 ffbe 	bl	80002cc <__aeabi_uldivmod>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4613      	mov	r3, r2
 8008356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008358:	e058      	b.n	800840c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800835a:	4b38      	ldr	r3, [pc, #224]	; (800843c <HAL_RCC_GetSysClockFreq+0x200>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	099b      	lsrs	r3, r3, #6
 8008360:	2200      	movs	r2, #0
 8008362:	4618      	mov	r0, r3
 8008364:	4611      	mov	r1, r2
 8008366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800836a:	623b      	str	r3, [r7, #32]
 800836c:	2300      	movs	r3, #0
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
 8008370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	f04f 0000 	mov.w	r0, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	0159      	lsls	r1, r3, #5
 8008382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008386:	0150      	lsls	r0, r2, #5
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4641      	mov	r1, r8
 800838e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008392:	4649      	mov	r1, r9
 8008394:	eb63 0b01 	sbc.w	fp, r3, r1
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80083a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80083a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80083ac:	ebb2 040a 	subs.w	r4, r2, sl
 80083b0:	eb63 050b 	sbc.w	r5, r3, fp
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	00eb      	lsls	r3, r5, #3
 80083be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083c2:	00e2      	lsls	r2, r4, #3
 80083c4:	4614      	mov	r4, r2
 80083c6:	461d      	mov	r5, r3
 80083c8:	4643      	mov	r3, r8
 80083ca:	18e3      	adds	r3, r4, r3
 80083cc:	603b      	str	r3, [r7, #0]
 80083ce:	464b      	mov	r3, r9
 80083d0:	eb45 0303 	adc.w	r3, r5, r3
 80083d4:	607b      	str	r3, [r7, #4]
 80083d6:	f04f 0200 	mov.w	r2, #0
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083e2:	4629      	mov	r1, r5
 80083e4:	028b      	lsls	r3, r1, #10
 80083e6:	4621      	mov	r1, r4
 80083e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083ec:	4621      	mov	r1, r4
 80083ee:	028a      	lsls	r2, r1, #10
 80083f0:	4610      	mov	r0, r2
 80083f2:	4619      	mov	r1, r3
 80083f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f6:	2200      	movs	r2, #0
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	61fa      	str	r2, [r7, #28]
 80083fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008400:	f7f7 ff64 	bl	80002cc <__aeabi_uldivmod>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4613      	mov	r3, r2
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <HAL_RCC_GetSysClockFreq+0x200>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	0c1b      	lsrs	r3, r3, #16
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	3301      	adds	r3, #1
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800841c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008420:	fbb2 f3f3 	udiv	r3, r2, r3
 8008424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008426:	e002      	b.n	800842e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <HAL_RCC_GetSysClockFreq+0x204>)
 800842a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800842c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800842e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008430:	4618      	mov	r0, r3
 8008432:	3750      	adds	r7, #80	; 0x50
 8008434:	46bd      	mov	sp, r7
 8008436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800843a:	bf00      	nop
 800843c:	40023800 	.word	0x40023800
 8008440:	00f42400 	.word	0x00f42400
 8008444:	007a1200 	.word	0x007a1200

08008448 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800844c:	4b03      	ldr	r3, [pc, #12]	; (800845c <HAL_RCC_GetHCLKFreq+0x14>)
 800844e:	681b      	ldr	r3, [r3, #0]
}
 8008450:	4618      	mov	r0, r3
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	20000004 	.word	0x20000004

08008460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008464:	f7ff fff0 	bl	8008448 <HAL_RCC_GetHCLKFreq>
 8008468:	4602      	mov	r2, r0
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	0a9b      	lsrs	r3, r3, #10
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	4903      	ldr	r1, [pc, #12]	; (8008484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008476:	5ccb      	ldrb	r3, [r1, r3]
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40023800 	.word	0x40023800
 8008484:	0800ff0c 	.word	0x0800ff0c

08008488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800848c:	f7ff ffdc 	bl	8008448 <HAL_RCC_GetHCLKFreq>
 8008490:	4602      	mov	r2, r0
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	0b5b      	lsrs	r3, r3, #13
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	4903      	ldr	r1, [pc, #12]	; (80084ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800849e:	5ccb      	ldrb	r3, [r1, r3]
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40023800 	.word	0x40023800
 80084ac:	0800ff0c 	.word	0x0800ff0c

080084b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	220f      	movs	r2, #15
 80084be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084c0:	4b12      	ldr	r3, [pc, #72]	; (800850c <HAL_RCC_GetClockConfig+0x5c>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 0203 	and.w	r2, r3, #3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084cc:	4b0f      	ldr	r3, [pc, #60]	; (800850c <HAL_RCC_GetClockConfig+0x5c>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80084d8:	4b0c      	ldr	r3, [pc, #48]	; (800850c <HAL_RCC_GetClockConfig+0x5c>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80084e4:	4b09      	ldr	r3, [pc, #36]	; (800850c <HAL_RCC_GetClockConfig+0x5c>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	08db      	lsrs	r3, r3, #3
 80084ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <HAL_RCC_GetClockConfig+0x60>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 020f 	and.w	r2, r3, #15
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	601a      	str	r2, [r3, #0]
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	40023800 	.word	0x40023800
 8008510:	40023c00 	.word	0x40023c00

08008514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 809e 	bne.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 8097 	bne.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0310 	and.w	r3, r3, #16
 8008554:	2b00      	cmp	r3, #0
 8008556:	f040 8090 	bne.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	f040 8089 	bne.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008570:	2b00      	cmp	r3, #0
 8008572:	f040 8082 	bne.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d17b      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800858a:	2b00      	cmp	r3, #0
 800858c:	d175      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008596:	2b00      	cmp	r3, #0
 8008598:	d16f      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d169      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d163      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d15d      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d157      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d151      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d14b      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d145      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d13f      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d139      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d133      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d12d      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d127      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d121      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d11b      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d115      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10f      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d103      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008672:	2172      	movs	r1, #114	; 0x72
 8008674:	4895      	ldr	r0, [pc, #596]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8008676:	f7f8 fc35 	bl	8000ee4 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01f      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008696:	d003      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008698:	2178      	movs	r1, #120	; 0x78
 800869a:	488c      	ldr	r0, [pc, #560]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800869c:	f7f8 fc22 	bl	8000ee4 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086a0:	4b8b      	ldr	r3, [pc, #556]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	4a8a      	ldr	r2, [pc, #552]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80086a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80086aa:	6093      	str	r3, [r2, #8]
 80086ac:	4b88      	ldr	r3, [pc, #544]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b4:	4986      	ldr	r1, [pc, #536]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 80086c2:	2301      	movs	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d02e      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d012      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e2:	d00d      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ec:	d008      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086f6:	d003      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80086f8:	2188      	movs	r1, #136	; 0x88
 80086fa:	4874      	ldr	r0, [pc, #464]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80086fc:	f7f8 fbf2 	bl	8000ee4 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008700:	4b73      	ldr	r3, [pc, #460]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870e:	4970      	ldr	r1, [pc, #448]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8008710:	4313      	orrs	r3, r2
 8008712:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800871e:	d101      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8008720:	2301      	movs	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 800872c:	2301      	movs	r3, #1
 800872e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d02e      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d012      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800874c:	d00d      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008756:	d008      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008760:	d003      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008762:	219c      	movs	r1, #156	; 0x9c
 8008764:	4859      	ldr	r0, [pc, #356]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8008766:	f7f8 fbbd 	bl	8000ee4 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800876a:	4b59      	ldr	r3, [pc, #356]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800876c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	4955      	ldr	r1, [pc, #340]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008788:	d101      	bne.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 800878a:	2301      	movs	r3, #1
 800878c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8008796:	2301      	movs	r3, #1
 8008798:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 80087a6:	2301      	movs	r3, #1
 80087a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8185 	beq.w	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c0:	f000 80e0 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087cc:	f000 80da 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	4a3f      	ldr	r2, [pc, #252]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f000 80d4 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	4a3d      	ldr	r2, [pc, #244]	; (80088d8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f000 80ce 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	4a3b      	ldr	r2, [pc, #236]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f000 80c8 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	4a39      	ldr	r2, [pc, #228]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f000 80c2 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	4a37      	ldr	r2, [pc, #220]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	f000 80bc 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	4a35      	ldr	r2, [pc, #212]	; (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f000 80b6 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	4a33      	ldr	r2, [pc, #204]	; (80088ec <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	f000 80b0 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	4a31      	ldr	r2, [pc, #196]	; (80088f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800882a:	4293      	cmp	r3, r2
 800882c:	f000 80aa 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008834:	4a2f      	ldr	r2, [pc, #188]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	f000 80a4 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	4a2d      	ldr	r2, [pc, #180]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	f000 809e 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	4a2b      	ldr	r2, [pc, #172]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	f000 8098 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	4a29      	ldr	r2, [pc, #164]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800885a:	4293      	cmp	r3, r2
 800885c:	f000 8092 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	4a27      	ldr	r2, [pc, #156]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	f000 808c 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	4a25      	ldr	r2, [pc, #148]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	f000 8086 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	4a23      	ldr	r2, [pc, #140]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	f000 8080 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	4a21      	ldr	r2, [pc, #132]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d07a      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	4a20      	ldr	r2, [pc, #128]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d075      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	4a1e      	ldr	r2, [pc, #120]	; (8008918 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d070      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	4a1d      	ldr	r2, [pc, #116]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d06b      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	4a1b      	ldr	r2, [pc, #108]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d066      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	4a1a      	ldr	r2, [pc, #104]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d061      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c4:	4a18      	ldr	r2, [pc, #96]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d05c      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80088ca:	e02f      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80088cc:	0800fd54 	.word	0x0800fd54
 80088d0:	40023800 	.word	0x40023800
 80088d4:	00020300 	.word	0x00020300
 80088d8:	00030300 	.word	0x00030300
 80088dc:	00040300 	.word	0x00040300
 80088e0:	00050300 	.word	0x00050300
 80088e4:	00060300 	.word	0x00060300
 80088e8:	00070300 	.word	0x00070300
 80088ec:	00080300 	.word	0x00080300
 80088f0:	00090300 	.word	0x00090300
 80088f4:	000a0300 	.word	0x000a0300
 80088f8:	000b0300 	.word	0x000b0300
 80088fc:	000c0300 	.word	0x000c0300
 8008900:	000d0300 	.word	0x000d0300
 8008904:	000e0300 	.word	0x000e0300
 8008908:	000f0300 	.word	0x000f0300
 800890c:	00100300 	.word	0x00100300
 8008910:	00110300 	.word	0x00110300
 8008914:	00120300 	.word	0x00120300
 8008918:	00130300 	.word	0x00130300
 800891c:	00140300 	.word	0x00140300
 8008920:	00150300 	.word	0x00150300
 8008924:	00160300 	.word	0x00160300
 8008928:	00170300 	.word	0x00170300
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	4a50      	ldr	r2, [pc, #320]	; (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d026      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	4a4f      	ldr	r2, [pc, #316]	; (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d021      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	4a4d      	ldr	r2, [pc, #308]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d01c      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	4a4c      	ldr	r2, [pc, #304]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d017      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	4a4a      	ldr	r2, [pc, #296]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d012      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4a49      	ldr	r2, [pc, #292]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00d      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	4a47      	ldr	r2, [pc, #284]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d008      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	4a46      	ldr	r2, [pc, #280]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800897c:	21b7      	movs	r1, #183	; 0xb7
 800897e:	4845      	ldr	r0, [pc, #276]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8008980:	f7f8 fab0 	bl	8000ee4 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008984:	4b44      	ldr	r3, [pc, #272]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	4a43      	ldr	r2, [pc, #268]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800898a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898e:	6413      	str	r3, [r2, #64]	; 0x40
 8008990:	4b41      	ldr	r3, [pc, #260]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008998:	60bb      	str	r3, [r7, #8]
 800899a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800899c:	4b3f      	ldr	r3, [pc, #252]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a3e      	ldr	r2, [pc, #248]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80089a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a8:	f7fa fa56 	bl	8002e58 <HAL_GetTick>
 80089ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80089ae:	e009      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b0:	f7fa fa52 	bl	8002e58 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b64      	cmp	r3, #100	; 0x64
 80089bc:	d902      	bls.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	f000 be0a 	b.w	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80089c4:	4b35      	ldr	r3, [pc, #212]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0ef      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089d0:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d8:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d036      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x53a>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d02f      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089ee:	4b2a      	ldr	r3, [pc, #168]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089f6:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089f8:	4b27      	ldr	r3, [pc, #156]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	4a26      	ldr	r2, [pc, #152]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80089fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a02:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a04:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a08:	4a23      	ldr	r2, [pc, #140]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008a10:	4a21      	ldr	r2, [pc, #132]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008a16:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d115      	bne.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x53a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a22:	f7fa fa19 	bl	8002e58 <HAL_GetTick>
 8008a26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a28:	e00b      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a2a:	f7fa fa15 	bl	8002e58 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d902      	bls.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
          {
            return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	f000 bdcb 	b.w	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a42:	4b15      	ldr	r3, [pc, #84]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0ed      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x516>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a5a:	d123      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a68:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008a6a:	400b      	ands	r3, r1
 8008a6c:	490a      	ldr	r1, [pc, #40]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	608b      	str	r3, [r1, #8]
 8008a72:	e01d      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008a74:	00180300 	.word	0x00180300
 8008a78:	00190300 	.word	0x00190300
 8008a7c:	001a0300 	.word	0x001a0300
 8008a80:	001b0300 	.word	0x001b0300
 8008a84:	001c0300 	.word	0x001c0300
 8008a88:	001d0300 	.word	0x001d0300
 8008a8c:	001e0300 	.word	0x001e0300
 8008a90:	001f0300 	.word	0x001f0300
 8008a94:	0800fd54 	.word	0x0800fd54
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	0ffffcff 	.word	0x0ffffcff
 8008aa4:	4b9a      	ldr	r3, [pc, #616]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4a99      	ldr	r2, [pc, #612]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008aaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008aae:	6093      	str	r3, [r2, #8]
 8008ab0:	4b97      	ldr	r3, [pc, #604]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008ab2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008abc:	4994      	ldr	r1, [pc, #592]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d01d      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d008      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ade:	d003      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ae0:	21f1      	movs	r1, #241	; 0xf1
 8008ae2:	488c      	ldr	r0, [pc, #560]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008ae4:	f7f8 f9fe 	bl	8000ee4 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ae8:	4b89      	ldr	r3, [pc, #548]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aee:	4a88      	ldr	r2, [pc, #544]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008af4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008af8:	4b85      	ldr	r3, [pc, #532]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008afa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	4983      	ldr	r1, [pc, #524]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01c      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b26:	d008      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b30:	d003      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x626>
 8008b32:	21fb      	movs	r1, #251	; 0xfb
 8008b34:	4877      	ldr	r0, [pc, #476]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b36:	f7f8 f9d5 	bl	8000ee4 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b3a:	4b75      	ldr	r3, [pc, #468]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	4971      	ldr	r1, [pc, #452]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01d      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00e      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b6c:	d009      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b76:	d004      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b78:	f240 1105 	movw	r1, #261	; 0x105
 8008b7c:	4865      	ldr	r0, [pc, #404]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b7e:	f7f8 f9b1 	bl	8000ee4 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b82:	4b63      	ldr	r3, [pc, #396]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b90:	495f      	ldr	r1, [pc, #380]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01d      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00e      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb4:	d009      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bbe:	d004      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8008bc0:	f240 110f 	movw	r1, #271	; 0x10f
 8008bc4:	4853      	ldr	r0, [pc, #332]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008bc6:	f7f8 f98d 	bl	8000ee4 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bca:	4b51      	ldr	r3, [pc, #324]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd8:	494d      	ldr	r1, [pc, #308]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01d      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x714>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bfc:	d009      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c06:	d004      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008c08:	f240 1119 	movw	r1, #281	; 0x119
 8008c0c:	4841      	ldr	r0, [pc, #260]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008c0e:	f7f8 f969 	bl	8000ee4 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c12:	4b3f      	ldr	r3, [pc, #252]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	493b      	ldr	r1, [pc, #236]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01f      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d010      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d00c      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d008      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d004      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008c54:	f240 1123 	movw	r1, #291	; 0x123
 8008c58:	482e      	ldr	r0, [pc, #184]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008c5a:	f7f8 f943 	bl	8000ee4 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c5e:	4b2c      	ldr	r3, [pc, #176]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c64:	f023 0203 	bic.w	r2, r3, #3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6c:	4928      	ldr	r1, [pc, #160]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01f      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d010      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d00c      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c94:	2b0c      	cmp	r3, #12
 8008c96:	d008      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d004      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008ca0:	f240 112d 	movw	r1, #301	; 0x12d
 8008ca4:	481b      	ldr	r0, [pc, #108]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008ca6:	f7f8 f91d 	bl	8000ee4 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008caa:	4b19      	ldr	r3, [pc, #100]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	f023 020c 	bic.w	r2, r3, #12
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb8:	4915      	ldr	r1, [pc, #84]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d025      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x804>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d010      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d00c      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce0:	2b30      	cmp	r3, #48	; 0x30
 8008ce2:	d008      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d004      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8008cec:	f240 1137 	movw	r1, #311	; 0x137
 8008cf0:	4808      	ldr	r0, [pc, #32]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008cf2:	f7f8 f8f7 	bl	8000ee4 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cf6:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d04:	4902      	ldr	r1, [pc, #8]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008d0c:	e004      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800
 8008d14:	0800fd54 	.word	0x0800fd54
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01f      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x850>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d00c      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d38:	2bc0      	cmp	r3, #192	; 0xc0
 8008d3a:	d008      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d004      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8008d44:	f240 1141 	movw	r1, #321	; 0x141
 8008d48:	48a0      	ldr	r0, [pc, #640]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008d4a:	f7f8 f8cb 	bl	8000ee4 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d4e:	4ba0      	ldr	r3, [pc, #640]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5c:	499c      	ldr	r1, [pc, #624]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d022      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d013      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d80:	d00e      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d8a:	d009      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d94:	d004      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8008d96:	f240 114b 	movw	r1, #331	; 0x14b
 8008d9a:	488c      	ldr	r0, [pc, #560]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008d9c:	f7f8 f8a2 	bl	8000ee4 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008da0:	4b8b      	ldr	r3, [pc, #556]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dae:	4988      	ldr	r1, [pc, #544]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d022      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d013      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd2:	d00e      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ddc:	d009      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de6:	d004      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008de8:	f240 1155 	movw	r1, #341	; 0x155
 8008dec:	4877      	ldr	r0, [pc, #476]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008dee:	f7f8 f879 	bl	8000ee4 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008df2:	4b77      	ldr	r3, [pc, #476]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e00:	4973      	ldr	r1, [pc, #460]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d022      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x946>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d013      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e24:	d00e      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e2e:	d009      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e38:	d004      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8008e3a:	f240 115f 	movw	r1, #351	; 0x15f
 8008e3e:	4863      	ldr	r0, [pc, #396]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008e40:	f7f8 f850 	bl	8000ee4 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008e44:	4b62      	ldr	r3, [pc, #392]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e52:	495f      	ldr	r1, [pc, #380]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d022      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x998>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d013      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e76:	d00e      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e80:	d009      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e8a:	d004      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008e8c:	f240 1169 	movw	r1, #361	; 0x169
 8008e90:	484e      	ldr	r0, [pc, #312]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008e92:	f7f8 f827 	bl	8000ee4 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008e96:	4b4e      	ldr	r3, [pc, #312]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea4:	494a      	ldr	r1, [pc, #296]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d018      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ec0:	d008      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008eca:	f240 1173 	movw	r1, #371	; 0x173
 8008ece:	483f      	ldr	r0, [pc, #252]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008ed0:	f7f8 f808 	bl	8000ee4 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ed4:	4b3e      	ldr	r3, [pc, #248]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ee2:	493b      	ldr	r1, [pc, #236]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d01f      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xa22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008efe:	d008      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8008f08:	f240 117d 	movw	r1, #381	; 0x17d
 8008f0c:	482f      	ldr	r0, [pc, #188]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008f0e:	f7f7 ffe9 	bl	8000ee4 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f12:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f20:	492b      	ldr	r1, [pc, #172]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f30:	d101      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xa22>
    {
      pllsaiused = 1;
 8008f32:	2301      	movs	r3, #1
 8008f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0308 	and.w	r3, r3, #8
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    pllsaiused = 1;
 8008f42:	2301      	movs	r3, #1
 8008f44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d022      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d013      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f62:	d00e      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f6c:	d009      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f76:	d004      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8008f78:	f240 1195 	movw	r1, #405	; 0x195
 8008f7c:	4813      	ldr	r0, [pc, #76]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008f7e:	f7f7 ffb1 	bl	8000ee4 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f90:	490f      	ldr	r1, [pc, #60]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d020      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fae:	d009      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008fba:	f240 119f 	movw	r1, #415	; 0x19f
 8008fbe:	4803      	ldr	r0, [pc, #12]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xab8>)
 8008fc0:	f7f7 ff90 	bl	8000ee4 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008fc4:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fca:	e003      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8008fcc:	0800fd54 	.word	0x0800fd54
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fde:	4943      	ldr	r1, [pc, #268]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01b      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffc:	d009      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xafe>
 8009008:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800900c:	4838      	ldr	r0, [pc, #224]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800900e:	f7f7 ff69 	bl	8000ee4 <assert_failed>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009012:	4b36      	ldr	r3, [pc, #216]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8009014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009018:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009022:	4932      	ldr	r1, [pc, #200]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01b      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xb42>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800904a:	d004      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xb42>
 800904c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8009050:	4827      	ldr	r0, [pc, #156]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8009052:	f7f7 ff47 	bl	8000ee4 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8009058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009066:	4921      	ldr	r1, [pc, #132]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01b      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800908e:	d004      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009090:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8009094:	4816      	ldr	r0, [pc, #88]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8009096:	f7f7 ff25 	bl	8000ee4 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800909c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090aa:	4910      	ldr	r1, [pc, #64]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d006      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 8157 	beq.w	8009374 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a08      	ldr	r2, [pc, #32]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80090cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090d2:	f7f9 fec1 	bl	8002e58 <HAL_GetTick>
 80090d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090d8:	e00c      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80090da:	f7f9 febd 	bl	8002e58 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b64      	cmp	r3, #100	; 0x64
 80090e6:	d905      	bls.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e275      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80090ec:	40023800 	.word	0x40023800
 80090f0:	0800fd54 	.word	0x0800fd54
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090f4:	4b9a      	ldr	r3, [pc, #616]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ec      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b31      	cmp	r3, #49	; 0x31
 8009106:	d904      	bls.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009110:	d904      	bls.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009112:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009116:	4893      	ldr	r0, [pc, #588]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009118:	f7f7 fee4 	bl	8000ee4 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d02e      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	2b00      	cmp	r3, #0
 800912e:	d12a      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d903      	bls.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	2b07      	cmp	r3, #7
 800913e:	d904      	bls.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8009140:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8009144:	4887      	ldr	r0, [pc, #540]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009146:	f7f7 fecd 	bl	8000ee4 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800914a:	4b85      	ldr	r3, [pc, #532]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800914c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009150:	0c1b      	lsrs	r3, r3, #16
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009158:	4b81      	ldr	r3, [pc, #516]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800915a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915e:	0e1b      	lsrs	r3, r3, #24
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	019a      	lsls	r2, r3, #6
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	041b      	lsls	r3, r3, #16
 8009170:	431a      	orrs	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	061b      	lsls	r3, r3, #24
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	071b      	lsls	r3, r3, #28
 800917e:	4978      	ldr	r1, [pc, #480]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009180:	4313      	orrs	r3, r2
 8009182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800919a:	d00a      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d048      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b0:	d143      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d903      	bls.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	2b0f      	cmp	r3, #15
 80091c0:	d904      	bls.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80091c2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80091c6:	4867      	ldr	r0, [pc, #412]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80091c8:	f7f7 fe8c 	bl	8000ee4 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d904      	bls.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80091dc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80091e0:	4860      	ldr	r0, [pc, #384]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80091e2:	f7f7 fe7f 	bl	8000ee4 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80091e6:	4b5e      	ldr	r3, [pc, #376]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091f4:	4b5a      	ldr	r3, [pc, #360]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80091f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091fa:	0f1b      	lsrs	r3, r3, #28
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	019a      	lsls	r2, r3, #6
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	061b      	lsls	r3, r3, #24
 8009214:	431a      	orrs	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	071b      	lsls	r3, r3, #28
 800921a:	4951      	ldr	r1, [pc, #324]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800921c:	4313      	orrs	r3, r2
 800921e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009222:	4b4f      	ldr	r3, [pc, #316]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009228:	f023 021f 	bic.w	r2, r3, #31
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	3b01      	subs	r3, #1
 8009232:	494b      	ldr	r1, [pc, #300]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d032      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d00c      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d008      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b03      	cmp	r3, #3
 8009264:	d004      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8009266:	f240 2105 	movw	r1, #517	; 0x205
 800926a:	483e      	ldr	r0, [pc, #248]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 800926c:	f7f7 fe3a 	bl	8000ee4 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009270:	4b3b      	ldr	r3, [pc, #236]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009276:	0e1b      	lsrs	r3, r3, #24
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800927e:	4b38      	ldr	r3, [pc, #224]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009284:	0f1b      	lsrs	r3, r3, #28
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	019a      	lsls	r2, r3, #6
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	431a      	orrs	r2, r3
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	061b      	lsls	r3, r3, #24
 800929e:	431a      	orrs	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	071b      	lsls	r3, r3, #28
 80092a4:	492e      	ldr	r1, [pc, #184]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d040      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d010      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d00c      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d008      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d004      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80092d8:	f44f 7105 	mov.w	r1, #532	; 0x214
 80092dc:	4821      	ldr	r0, [pc, #132]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80092de:	f7f7 fe01 	bl	8000ee4 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d903      	bls.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	2b07      	cmp	r3, #7
 80092f0:	d904      	bls.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
 80092f2:	f240 2115 	movw	r1, #533	; 0x215
 80092f6:	481b      	ldr	r0, [pc, #108]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 80092f8:	f7f7 fdf4 	bl	8000ee4 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d903      	bls.n	800930c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b0f      	cmp	r3, #15
 800930a:	d904      	bls.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800930c:	f240 2116 	movw	r1, #534	; 0x216
 8009310:	4814      	ldr	r0, [pc, #80]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8009312:	f7f7 fde7 	bl	8000ee4 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	019a      	lsls	r2, r3, #6
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	061b      	lsls	r3, r3, #24
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	071b      	lsls	r3, r3, #28
 8009332:	490b      	ldr	r1, [pc, #44]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009334:	4313      	orrs	r3, r2
 8009336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a08      	ldr	r2, [pc, #32]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8009340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009346:	f7f9 fd87 	bl	8002e58 <HAL_GetTick>
 800934a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800934c:	e00c      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800934e:	f7f9 fd83 	bl	8002e58 <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b64      	cmp	r3, #100	; 0x64
 800935a:	d905      	bls.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xe54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e13b      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8009360:	40023800 	.word	0x40023800
 8009364:	0800fd54 	.word	0x0800fd54
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009368:	4b9d      	ldr	r3, [pc, #628]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0ec      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	f040 812d 	bne.w	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800937c:	4b98      	ldr	r3, [pc, #608]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a97      	ldr	r2, [pc, #604]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009388:	f7f9 fd66 	bl	8002e58 <HAL_GetTick>
 800938c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800938e:	e008      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009390:	f7f9 fd62 	bl	8002e58 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b64      	cmp	r3, #100	; 0x64
 800939c:	d901      	bls.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e11a      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093a2:	4b8f      	ldr	r3, [pc, #572]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ae:	d0ef      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	2b31      	cmp	r3, #49	; 0x31
 80093b6:	d904      	bls.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80093c0:	d904      	bls.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xeb8>
 80093c2:	f44f 7111 	mov.w	r1, #580	; 0x244
 80093c6:	4887      	ldr	r0, [pc, #540]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80093c8:	f7f7 fd8c 	bl	8000ee4 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d009      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xee0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d048      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d144      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d903      	bls.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xef0>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	2b0f      	cmp	r3, #15
 8009402:	d904      	bls.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xefa>
 8009404:	f240 214b 	movw	r1, #587	; 0x24b
 8009408:	4876      	ldr	r0, [pc, #472]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800940a:	f7f7 fd6b 	bl	8000ee4 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xf0a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	2b20      	cmp	r3, #32
 800941c:	d904      	bls.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xf14>
 800941e:	f240 214d 	movw	r1, #589	; 0x24d
 8009422:	4870      	ldr	r0, [pc, #448]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8009424:	f7f7 fd5e 	bl	8000ee4 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009428:	4b6d      	ldr	r3, [pc, #436]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800942a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942e:	0c1b      	lsrs	r3, r3, #16
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009436:	4b6a      	ldr	r3, [pc, #424]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943c:	0f1b      	lsrs	r3, r3, #28
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	019a      	lsls	r2, r3, #6
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	041b      	lsls	r3, r3, #16
 800944e:	431a      	orrs	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	061b      	lsls	r3, r3, #24
 8009456:	431a      	orrs	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	071b      	lsls	r3, r3, #28
 800945c:	4960      	ldr	r1, [pc, #384]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009464:	4b5e      	ldr	r3, [pc, #376]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009472:	3b01      	subs	r3, #1
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	495a      	ldr	r1, [pc, #360]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009478:	4313      	orrs	r3, r2
 800947a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d037      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xfe6>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800948e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009492:	d132      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d010      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d00c      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d008      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d004      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xfaa>
 80094b4:	f44f 7118 	mov.w	r1, #608	; 0x260
 80094b8:	484a      	ldr	r0, [pc, #296]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80094ba:	f7f7 fd13 	bl	8000ee4 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094be:	4b48      	ldr	r3, [pc, #288]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80094c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c4:	0e1b      	lsrs	r3, r3, #24
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094cc:	4b44      	ldr	r3, [pc, #272]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80094ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d2:	0f1b      	lsrs	r3, r3, #28
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	019a      	lsls	r2, r3, #6
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	041b      	lsls	r3, r3, #16
 80094e6:	431a      	orrs	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	061b      	lsls	r3, r3, #24
 80094ec:	431a      	orrs	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	071b      	lsls	r3, r3, #28
 80094f2:	493b      	ldr	r1, [pc, #236]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0308 	and.w	r3, r3, #8
 8009502:	2b00      	cmp	r3, #0
 8009504:	d04d      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x108e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d903      	bls.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x1002>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	2b07      	cmp	r3, #7
 8009514:	d904      	bls.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x100c>
 8009516:	f240 216f 	movw	r1, #623	; 0x26f
 800951a:	4832      	ldr	r0, [pc, #200]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800951c:	f7f7 fce2 	bl	8000ee4 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d013      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009530:	d00e      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800953a:	d009      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009544:	d004      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x103c>
 8009546:	f44f 711c 	mov.w	r1, #624	; 0x270
 800954a:	4826      	ldr	r0, [pc, #152]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800954c:	f7f7 fcca 	bl	8000ee4 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009550:	4b23      	ldr	r3, [pc, #140]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009556:	0e1b      	lsrs	r3, r3, #24
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800955e:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	019a      	lsls	r2, r3, #6
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	041b      	lsls	r3, r3, #16
 8009576:	431a      	orrs	r2, r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	061b      	lsls	r3, r3, #24
 800957c:	431a      	orrs	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	071b      	lsls	r3, r3, #28
 8009584:	4916      	ldr	r1, [pc, #88]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 8009586:	4313      	orrs	r3, r2
 8009588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800958c:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800958e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	4911      	ldr	r1, [pc, #68]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 800959c:	4313      	orrs	r3, r2
 800959e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80095a2:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a0e      	ldr	r2, [pc, #56]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80095a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ae:	f7f9 fc53 	bl	8002e58 <HAL_GetTick>
 80095b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095b4:	e008      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80095b6:	f7f9 fc4f 	bl	8002e58 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	2b64      	cmp	r3, #100	; 0x64
 80095c2:	d901      	bls.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e007      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d4:	d1ef      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x10a2>
      }
    }
  }
  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	40023800 	.word	0x40023800
 80095e4:	0800fd54 	.word	0x0800fd54

080095e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e0f5      	b.n	80097e6 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a7c      	ldr	r2, [pc, #496]	; (80097f0 <HAL_TIM_Base_Init+0x208>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d045      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960c:	d040      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a78      	ldr	r2, [pc, #480]	; (80097f4 <HAL_TIM_Base_Init+0x20c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d03b      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a76      	ldr	r2, [pc, #472]	; (80097f8 <HAL_TIM_Base_Init+0x210>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d036      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a75      	ldr	r2, [pc, #468]	; (80097fc <HAL_TIM_Base_Init+0x214>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d031      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a73      	ldr	r2, [pc, #460]	; (8009800 <HAL_TIM_Base_Init+0x218>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d02c      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a72      	ldr	r2, [pc, #456]	; (8009804 <HAL_TIM_Base_Init+0x21c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d027      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a70      	ldr	r2, [pc, #448]	; (8009808 <HAL_TIM_Base_Init+0x220>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d022      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a6f      	ldr	r2, [pc, #444]	; (800980c <HAL_TIM_Base_Init+0x224>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d01d      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a6d      	ldr	r2, [pc, #436]	; (8009810 <HAL_TIM_Base_Init+0x228>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d018      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a6c      	ldr	r2, [pc, #432]	; (8009814 <HAL_TIM_Base_Init+0x22c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d013      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a6a      	ldr	r2, [pc, #424]	; (8009818 <HAL_TIM_Base_Init+0x230>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00e      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a69      	ldr	r2, [pc, #420]	; (800981c <HAL_TIM_Base_Init+0x234>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d009      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a67      	ldr	r2, [pc, #412]	; (8009820 <HAL_TIM_Base_Init+0x238>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d004      	beq.n	8009690 <HAL_TIM_Base_Init+0xa8>
 8009686:	f44f 718b 	mov.w	r1, #278	; 0x116
 800968a:	4866      	ldr	r0, [pc, #408]	; (8009824 <HAL_TIM_Base_Init+0x23c>)
 800968c:	f7f7 fc2a 	bl	8000ee4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d014      	beq.n	80096c2 <HAL_TIM_Base_Init+0xda>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2b10      	cmp	r3, #16
 800969e:	d010      	beq.n	80096c2 <HAL_TIM_Base_Init+0xda>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d00c      	beq.n	80096c2 <HAL_TIM_Base_Init+0xda>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2b40      	cmp	r3, #64	; 0x40
 80096ae:	d008      	beq.n	80096c2 <HAL_TIM_Base_Init+0xda>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	2b60      	cmp	r3, #96	; 0x60
 80096b6:	d004      	beq.n	80096c2 <HAL_TIM_Base_Init+0xda>
 80096b8:	f240 1117 	movw	r1, #279	; 0x117
 80096bc:	4859      	ldr	r0, [pc, #356]	; (8009824 <HAL_TIM_Base_Init+0x23c>)
 80096be:	f7f7 fc11 	bl	8000ee4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00e      	beq.n	80096e8 <HAL_TIM_Base_Init+0x100>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d2:	d009      	beq.n	80096e8 <HAL_TIM_Base_Init+0x100>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096dc:	d004      	beq.n	80096e8 <HAL_TIM_Base_Init+0x100>
 80096de:	f44f 718c 	mov.w	r1, #280	; 0x118
 80096e2:	4850      	ldr	r0, [pc, #320]	; (8009824 <HAL_TIM_Base_Init+0x23c>)
 80096e4:	f7f7 fbfe 	bl	8000ee4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f0:	d004      	beq.n	80096fc <HAL_TIM_Base_Init+0x114>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a41      	ldr	r2, [pc, #260]	; (80097fc <HAL_TIM_Base_Init+0x214>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d107      	bne.n	800970c <HAL_TIM_Base_Init+0x124>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bf14      	ite	ne
 8009704:	2301      	movne	r3, #1
 8009706:	2300      	moveq	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	e00e      	b.n	800972a <HAL_TIM_Base_Init+0x142>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d006      	beq.n	8009722 <HAL_TIM_Base_Init+0x13a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971c:	d201      	bcs.n	8009722 <HAL_TIM_Base_Init+0x13a>
 800971e:	2301      	movs	r3, #1
 8009720:	e000      	b.n	8009724 <HAL_TIM_Base_Init+0x13c>
 8009722:	2300      	movs	r3, #0
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d104      	bne.n	8009738 <HAL_TIM_Base_Init+0x150>
 800972e:	f240 1119 	movw	r1, #281	; 0x119
 8009732:	483c      	ldr	r0, [pc, #240]	; (8009824 <HAL_TIM_Base_Init+0x23c>)
 8009734:	f7f7 fbd6 	bl	8000ee4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <HAL_TIM_Base_Init+0x16a>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	2b80      	cmp	r3, #128	; 0x80
 8009746:	d004      	beq.n	8009752 <HAL_TIM_Base_Init+0x16a>
 8009748:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800974c:	4835      	ldr	r0, [pc, #212]	; (8009824 <HAL_TIM_Base_Init+0x23c>)
 800974e:	f7f7 fbc9 	bl	8000ee4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d106      	bne.n	800976c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f85e 	bl	8009828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3304      	adds	r3, #4
 800977c:	4619      	mov	r1, r3
 800977e:	4610      	mov	r0, r2
 8009780:	f000 fa72 	bl	8009c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	40010000 	.word	0x40010000
 80097f4:	40000400 	.word	0x40000400
 80097f8:	40000800 	.word	0x40000800
 80097fc:	40000c00 	.word	0x40000c00
 8009800:	40001000 	.word	0x40001000
 8009804:	40001400 	.word	0x40001400
 8009808:	40010400 	.word	0x40010400
 800980c:	40014000 	.word	0x40014000
 8009810:	40014400 	.word	0x40014400
 8009814:	40014800 	.word	0x40014800
 8009818:	40001800 	.word	0x40001800
 800981c:	40001c00 	.word	0x40001c00
 8009820:	40002000 	.word	0x40002000
 8009824:	0800fd90 	.word	0x0800fd90

08009828 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a54      	ldr	r2, [pc, #336]	; (800999c <HAL_TIM_Base_Start_IT+0x160>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d045      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009856:	d040      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a50      	ldr	r2, [pc, #320]	; (80099a0 <HAL_TIM_Base_Start_IT+0x164>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d03b      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a4f      	ldr	r2, [pc, #316]	; (80099a4 <HAL_TIM_Base_Start_IT+0x168>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d036      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a4d      	ldr	r2, [pc, #308]	; (80099a8 <HAL_TIM_Base_Start_IT+0x16c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d031      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a4c      	ldr	r2, [pc, #304]	; (80099ac <HAL_TIM_Base_Start_IT+0x170>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d02c      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a4a      	ldr	r2, [pc, #296]	; (80099b0 <HAL_TIM_Base_Start_IT+0x174>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d027      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a49      	ldr	r2, [pc, #292]	; (80099b4 <HAL_TIM_Base_Start_IT+0x178>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d022      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a47      	ldr	r2, [pc, #284]	; (80099b8 <HAL_TIM_Base_Start_IT+0x17c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d01d      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a46      	ldr	r2, [pc, #280]	; (80099bc <HAL_TIM_Base_Start_IT+0x180>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d018      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a44      	ldr	r2, [pc, #272]	; (80099c0 <HAL_TIM_Base_Start_IT+0x184>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d013      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a43      	ldr	r2, [pc, #268]	; (80099c4 <HAL_TIM_Base_Start_IT+0x188>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00e      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a41      	ldr	r2, [pc, #260]	; (80099c8 <HAL_TIM_Base_Start_IT+0x18c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d009      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a40      	ldr	r2, [pc, #256]	; (80099cc <HAL_TIM_Base_Start_IT+0x190>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d004      	beq.n	80098da <HAL_TIM_Base_Start_IT+0x9e>
 80098d0:	f240 11d3 	movw	r1, #467	; 0x1d3
 80098d4:	483e      	ldr	r0, [pc, #248]	; (80099d0 <HAL_TIM_Base_Start_IT+0x194>)
 80098d6:	f7f7 fb05 	bl	8000ee4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d001      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e054      	b.n	8009994 <HAL_TIM_Base_Start_IT+0x158>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0201 	orr.w	r2, r2, #1
 8009900:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a25      	ldr	r2, [pc, #148]	; (800999c <HAL_TIM_Base_Start_IT+0x160>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d022      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009914:	d01d      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a21      	ldr	r2, [pc, #132]	; (80099a0 <HAL_TIM_Base_Start_IT+0x164>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d018      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a1f      	ldr	r2, [pc, #124]	; (80099a4 <HAL_TIM_Base_Start_IT+0x168>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a1e      	ldr	r2, [pc, #120]	; (80099a8 <HAL_TIM_Base_Start_IT+0x16c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d00e      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a1e      	ldr	r2, [pc, #120]	; (80099b4 <HAL_TIM_Base_Start_IT+0x178>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d009      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a1d      	ldr	r2, [pc, #116]	; (80099b8 <HAL_TIM_Base_Start_IT+0x17c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d004      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x116>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <HAL_TIM_Base_Start_IT+0x188>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d115      	bne.n	800997e <HAL_TIM_Base_Start_IT+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <HAL_TIM_Base_Start_IT+0x198>)
 800995a:	4013      	ands	r3, r2
 800995c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b06      	cmp	r3, #6
 8009962:	d015      	beq.n	8009990 <HAL_TIM_Base_Start_IT+0x154>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996a:	d011      	beq.n	8009990 <HAL_TIM_Base_Start_IT+0x154>
    {
      __HAL_TIM_ENABLE(htim);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997c:	e008      	b.n	8009990 <HAL_TIM_Base_Start_IT+0x154>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0201 	orr.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	e000      	b.n	8009992 <HAL_TIM_Base_Start_IT+0x156>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	40010000 	.word	0x40010000
 80099a0:	40000400 	.word	0x40000400
 80099a4:	40000800 	.word	0x40000800
 80099a8:	40000c00 	.word	0x40000c00
 80099ac:	40001000 	.word	0x40001000
 80099b0:	40001400 	.word	0x40001400
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40014400 	.word	0x40014400
 80099c0:	40014800 	.word	0x40014800
 80099c4:	40001800 	.word	0x40001800
 80099c8:	40001c00 	.word	0x40001c00
 80099cc:	40002000 	.word	0x40002000
 80099d0:	0800fd90 	.word	0x0800fd90
 80099d4:	00010007 	.word	0x00010007

080099d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d122      	bne.n	8009a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d11b      	bne.n	8009a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f06f 0202 	mvn.w	r2, #2
 8009a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f905 	bl	8009c2a <HAL_TIM_IC_CaptureCallback>
 8009a20:	e005      	b.n	8009a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f8f7 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f908 	bl	8009c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d122      	bne.n	8009a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d11b      	bne.n	8009a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f06f 0204 	mvn.w	r2, #4
 8009a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f8db 	bl	8009c2a <HAL_TIM_IC_CaptureCallback>
 8009a74:	e005      	b.n	8009a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f8cd 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f8de 	bl	8009c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b08      	cmp	r3, #8
 8009a94:	d122      	bne.n	8009adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d11b      	bne.n	8009adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f06f 0208 	mvn.w	r2, #8
 8009aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f8b1 	bl	8009c2a <HAL_TIM_IC_CaptureCallback>
 8009ac8:	e005      	b.n	8009ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f8a3 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8b4 	bl	8009c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0310 	and.w	r3, r3, #16
 8009ae6:	2b10      	cmp	r3, #16
 8009ae8:	d122      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	2b10      	cmp	r3, #16
 8009af6:	d11b      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f06f 0210 	mvn.w	r2, #16
 8009b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2208      	movs	r2, #8
 8009b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f887 	bl	8009c2a <HAL_TIM_IC_CaptureCallback>
 8009b1c:	e005      	b.n	8009b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f879 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f88a 	bl	8009c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d10e      	bne.n	8009b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d107      	bne.n	8009b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f06f 0201 	mvn.w	r2, #1
 8009b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7f7 f9ac 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b66:	2b80      	cmp	r3, #128	; 0x80
 8009b68:	d10e      	bne.n	8009b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b74:	2b80      	cmp	r3, #128	; 0x80
 8009b76:	d107      	bne.n	8009b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f91a 	bl	8009dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b96:	d10e      	bne.n	8009bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba2:	2b80      	cmp	r3, #128	; 0x80
 8009ba4:	d107      	bne.n	8009bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f90d 	bl	8009dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d10e      	bne.n	8009be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bce:	2b40      	cmp	r3, #64	; 0x40
 8009bd0:	d107      	bne.n	8009be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f838 	bl	8009c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	d10e      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f003 0320 	and.w	r3, r3, #32
 8009bfa:	2b20      	cmp	r3, #32
 8009bfc:	d107      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f06f 0220 	mvn.w	r2, #32
 8009c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f8cd 	bl	8009da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c5a:	bf00      	nop
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
	...

08009c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a40      	ldr	r2, [pc, #256]	; (8009d7c <TIM_Base_SetConfig+0x114>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c86:	d00f      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a3d      	ldr	r2, [pc, #244]	; (8009d80 <TIM_Base_SetConfig+0x118>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00b      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a3c      	ldr	r2, [pc, #240]	; (8009d84 <TIM_Base_SetConfig+0x11c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d007      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a3b      	ldr	r2, [pc, #236]	; (8009d88 <TIM_Base_SetConfig+0x120>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d003      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a3a      	ldr	r2, [pc, #232]	; (8009d8c <TIM_Base_SetConfig+0x124>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d108      	bne.n	8009cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a2f      	ldr	r2, [pc, #188]	; (8009d7c <TIM_Base_SetConfig+0x114>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d02b      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc8:	d027      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a2c      	ldr	r2, [pc, #176]	; (8009d80 <TIM_Base_SetConfig+0x118>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d023      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a2b      	ldr	r2, [pc, #172]	; (8009d84 <TIM_Base_SetConfig+0x11c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d01f      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <TIM_Base_SetConfig+0x120>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d01b      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a29      	ldr	r2, [pc, #164]	; (8009d8c <TIM_Base_SetConfig+0x124>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d017      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a28      	ldr	r2, [pc, #160]	; (8009d90 <TIM_Base_SetConfig+0x128>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d013      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a27      	ldr	r2, [pc, #156]	; (8009d94 <TIM_Base_SetConfig+0x12c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00f      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a26      	ldr	r2, [pc, #152]	; (8009d98 <TIM_Base_SetConfig+0x130>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00b      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a25      	ldr	r2, [pc, #148]	; (8009d9c <TIM_Base_SetConfig+0x134>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d007      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a24      	ldr	r2, [pc, #144]	; (8009da0 <TIM_Base_SetConfig+0x138>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d003      	beq.n	8009d1a <TIM_Base_SetConfig+0xb2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a23      	ldr	r2, [pc, #140]	; (8009da4 <TIM_Base_SetConfig+0x13c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d108      	bne.n	8009d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a0a      	ldr	r2, [pc, #40]	; (8009d7c <TIM_Base_SetConfig+0x114>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d003      	beq.n	8009d60 <TIM_Base_SetConfig+0xf8>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <TIM_Base_SetConfig+0x124>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d103      	bne.n	8009d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	615a      	str	r2, [r3, #20]
}
 8009d6e:	bf00      	nop
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40010000 	.word	0x40010000
 8009d80:	40000400 	.word	0x40000400
 8009d84:	40000800 	.word	0x40000800
 8009d88:	40000c00 	.word	0x40000c00
 8009d8c:	40010400 	.word	0x40010400
 8009d90:	40014000 	.word	0x40014000
 8009d94:	40014400 	.word	0x40014400
 8009d98:	40014800 	.word	0x40014800
 8009d9c:	40001800 	.word	0x40001800
 8009da0:	40001c00 	.word	0x40001c00
 8009da4:	40002000 	.word	0x40002000

08009da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e09f      	b.n	8009f36 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d02d      	beq.n	8009e5a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a4f      	ldr	r2, [pc, #316]	; (8009f40 <HAL_UART_Init+0x15c>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d055      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a4d      	ldr	r2, [pc, #308]	; (8009f44 <HAL_UART_Init+0x160>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d050      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a4c      	ldr	r2, [pc, #304]	; (8009f48 <HAL_UART_Init+0x164>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d04b      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a4a      	ldr	r2, [pc, #296]	; (8009f4c <HAL_UART_Init+0x168>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d046      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a49      	ldr	r2, [pc, #292]	; (8009f50 <HAL_UART_Init+0x16c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d041      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a47      	ldr	r2, [pc, #284]	; (8009f54 <HAL_UART_Init+0x170>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d03c      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a46      	ldr	r2, [pc, #280]	; (8009f58 <HAL_UART_Init+0x174>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d037      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a44      	ldr	r2, [pc, #272]	; (8009f5c <HAL_UART_Init+0x178>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d032      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009e52:	4843      	ldr	r0, [pc, #268]	; (8009f60 <HAL_UART_Init+0x17c>)
 8009e54:	f7f7 f846 	bl	8000ee4 <assert_failed>
 8009e58:	e02c      	b.n	8009eb4 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a38      	ldr	r2, [pc, #224]	; (8009f40 <HAL_UART_Init+0x15c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d027      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a36      	ldr	r2, [pc, #216]	; (8009f44 <HAL_UART_Init+0x160>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d022      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a35      	ldr	r2, [pc, #212]	; (8009f48 <HAL_UART_Init+0x164>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d01d      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a33      	ldr	r2, [pc, #204]	; (8009f4c <HAL_UART_Init+0x168>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d018      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a32      	ldr	r2, [pc, #200]	; (8009f50 <HAL_UART_Init+0x16c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d013      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a30      	ldr	r2, [pc, #192]	; (8009f54 <HAL_UART_Init+0x170>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00e      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a2f      	ldr	r2, [pc, #188]	; (8009f58 <HAL_UART_Init+0x174>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d009      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a2d      	ldr	r2, [pc, #180]	; (8009f5c <HAL_UART_Init+0x178>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d004      	beq.n	8009eb4 <HAL_UART_Init+0xd0>
 8009eaa:	f240 1131 	movw	r1, #305	; 0x131
 8009eae:	482c      	ldr	r0, [pc, #176]	; (8009f60 <HAL_UART_Init+0x17c>)
 8009eb0:	f7f7 f818 	bl	8000ee4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d106      	bne.n	8009eca <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7f7 fa65 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2224      	movs	r2, #36	; 0x24
 8009ece:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f022 0201 	bic.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f83f 	bl	8009f64 <UART_SetConfig>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e022      	b.n	8009f36 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fb29 	bl	800a550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 0201 	orr.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fc66 	bl	800a800 <UART_CheckIdleState>
 8009f34:	4603      	mov	r3, r0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	40011000 	.word	0x40011000
 8009f44:	40004400 	.word	0x40004400
 8009f48:	40004800 	.word	0x40004800
 8009f4c:	40004c00 	.word	0x40004c00
 8009f50:	40005000 	.word	0x40005000
 8009f54:	40011400 	.word	0x40011400
 8009f58:	40007800 	.word	0x40007800
 8009f5c:	40007c00 	.word	0x40007c00
 8009f60:	0800fdc8 	.word	0x0800fdc8

08009f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	4aa0      	ldr	r2, [pc, #640]	; (800a1f8 <UART_SetConfig+0x294>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d904      	bls.n	8009f84 <UART_SetConfig+0x20>
 8009f7a:	f640 315d 	movw	r1, #2909	; 0xb5d
 8009f7e:	489f      	ldr	r0, [pc, #636]	; (800a1fc <UART_SetConfig+0x298>)
 8009f80:	f7f6 ffb0 	bl	8000ee4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f8c:	d00d      	beq.n	8009faa <UART_SetConfig+0x46>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <UART_SetConfig+0x46>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f9e:	d004      	beq.n	8009faa <UART_SetConfig+0x46>
 8009fa0:	f640 315e 	movw	r1, #2910	; 0xb5e
 8009fa4:	4895      	ldr	r0, [pc, #596]	; (800a1fc <UART_SetConfig+0x298>)
 8009fa6:	f7f6 ff9d 	bl	8000ee4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb2:	d012      	beq.n	8009fda <UART_SetConfig+0x76>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00e      	beq.n	8009fda <UART_SetConfig+0x76>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fc4:	d009      	beq.n	8009fda <UART_SetConfig+0x76>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fce:	d004      	beq.n	8009fda <UART_SetConfig+0x76>
 8009fd0:	f640 315f 	movw	r1, #2911	; 0xb5f
 8009fd4:	4889      	ldr	r0, [pc, #548]	; (800a1fc <UART_SetConfig+0x298>)
 8009fd6:	f7f6 ff85 	bl	8000ee4 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <UART_SetConfig+0x92>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fea:	d004      	beq.n	8009ff6 <UART_SetConfig+0x92>
 8009fec:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8009ff0:	4882      	ldr	r0, [pc, #520]	; (800a1fc <UART_SetConfig+0x298>)
 8009ff2:	f7f6 ff77 	bl	8000ee4 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00e      	beq.n	800a01c <UART_SetConfig+0xb8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a006:	d009      	beq.n	800a01c <UART_SetConfig+0xb8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a010:	d004      	beq.n	800a01c <UART_SetConfig+0xb8>
 800a012:	f640 3162 	movw	r1, #2914	; 0xb62
 800a016:	4879      	ldr	r0, [pc, #484]	; (800a1fc <UART_SetConfig+0x298>)
 800a018:	f7f6 ff64 	bl	8000ee4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	f023 030c 	bic.w	r3, r3, #12
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <UART_SetConfig+0xcc>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d104      	bne.n	800a03a <UART_SetConfig+0xd6>
 800a030:	f640 3163 	movw	r1, #2915	; 0xb63
 800a034:	4871      	ldr	r0, [pc, #452]	; (800a1fc <UART_SetConfig+0x298>)
 800a036:	f7f6 ff55 	bl	8000ee4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d013      	beq.n	800a06a <UART_SetConfig+0x106>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04a:	d00e      	beq.n	800a06a <UART_SetConfig+0x106>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a054:	d009      	beq.n	800a06a <UART_SetConfig+0x106>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a05e:	d004      	beq.n	800a06a <UART_SetConfig+0x106>
 800a060:	f640 3164 	movw	r1, #2916	; 0xb64
 800a064:	4865      	ldr	r0, [pc, #404]	; (800a1fc <UART_SetConfig+0x298>)
 800a066:	f7f6 ff3d 	bl	8000ee4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <UART_SetConfig+0x122>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a07a:	d004      	beq.n	800a086 <UART_SetConfig+0x122>
 800a07c:	f640 3165 	movw	r1, #2917	; 0xb65
 800a080:	485e      	ldr	r0, [pc, #376]	; (800a1fc <UART_SetConfig+0x298>)
 800a082:	f7f6 ff2f 	bl	8000ee4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689a      	ldr	r2, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	431a      	orrs	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	431a      	orrs	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4b56      	ldr	r3, [pc, #344]	; (800a200 <UART_SetConfig+0x29c>)
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6812      	ldr	r2, [r2, #0]
 800a0ac:	6979      	ldr	r1, [r7, #20]
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a44      	ldr	r2, [pc, #272]	; (800a204 <UART_SetConfig+0x2a0>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d121      	bne.n	800a13a <UART_SetConfig+0x1d6>
 800a0f6:	4b44      	ldr	r3, [pc, #272]	; (800a208 <UART_SetConfig+0x2a4>)
 800a0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0fc:	f003 0303 	and.w	r3, r3, #3
 800a100:	2b03      	cmp	r3, #3
 800a102:	d817      	bhi.n	800a134 <UART_SetConfig+0x1d0>
 800a104:	a201      	add	r2, pc, #4	; (adr r2, 800a10c <UART_SetConfig+0x1a8>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a11d 	.word	0x0800a11d
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a123 	.word	0x0800a123
 800a118:	0800a12f 	.word	0x0800a12f
 800a11c:	2301      	movs	r3, #1
 800a11e:	77fb      	strb	r3, [r7, #31]
 800a120:	e14c      	b.n	800a3bc <UART_SetConfig+0x458>
 800a122:	2302      	movs	r3, #2
 800a124:	77fb      	strb	r3, [r7, #31]
 800a126:	e149      	b.n	800a3bc <UART_SetConfig+0x458>
 800a128:	2304      	movs	r3, #4
 800a12a:	77fb      	strb	r3, [r7, #31]
 800a12c:	e146      	b.n	800a3bc <UART_SetConfig+0x458>
 800a12e:	2308      	movs	r3, #8
 800a130:	77fb      	strb	r3, [r7, #31]
 800a132:	e143      	b.n	800a3bc <UART_SetConfig+0x458>
 800a134:	2310      	movs	r3, #16
 800a136:	77fb      	strb	r3, [r7, #31]
 800a138:	e140      	b.n	800a3bc <UART_SetConfig+0x458>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a33      	ldr	r2, [pc, #204]	; (800a20c <UART_SetConfig+0x2a8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d132      	bne.n	800a1aa <UART_SetConfig+0x246>
 800a144:	4b30      	ldr	r3, [pc, #192]	; (800a208 <UART_SetConfig+0x2a4>)
 800a146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14a:	f003 030c 	and.w	r3, r3, #12
 800a14e:	2b0c      	cmp	r3, #12
 800a150:	d828      	bhi.n	800a1a4 <UART_SetConfig+0x240>
 800a152:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x1f4>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a18d 	.word	0x0800a18d
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a1a5 	.word	0x0800a1a5
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a199 	.word	0x0800a199
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a1a5 	.word	0x0800a1a5
 800a174:	0800a1a5 	.word	0x0800a1a5
 800a178:	0800a193 	.word	0x0800a193
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a19f 	.word	0x0800a19f
 800a18c:	2300      	movs	r3, #0
 800a18e:	77fb      	strb	r3, [r7, #31]
 800a190:	e114      	b.n	800a3bc <UART_SetConfig+0x458>
 800a192:	2302      	movs	r3, #2
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e111      	b.n	800a3bc <UART_SetConfig+0x458>
 800a198:	2304      	movs	r3, #4
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e10e      	b.n	800a3bc <UART_SetConfig+0x458>
 800a19e:	2308      	movs	r3, #8
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e10b      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e108      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a18      	ldr	r2, [pc, #96]	; (800a210 <UART_SetConfig+0x2ac>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d12f      	bne.n	800a214 <UART_SetConfig+0x2b0>
 800a1b4:	4b14      	ldr	r3, [pc, #80]	; (800a208 <UART_SetConfig+0x2a4>)
 800a1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1be:	2b30      	cmp	r3, #48	; 0x30
 800a1c0:	d013      	beq.n	800a1ea <UART_SetConfig+0x286>
 800a1c2:	2b30      	cmp	r3, #48	; 0x30
 800a1c4:	d814      	bhi.n	800a1f0 <UART_SetConfig+0x28c>
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	d009      	beq.n	800a1de <UART_SetConfig+0x27a>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d810      	bhi.n	800a1f0 <UART_SetConfig+0x28c>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <UART_SetConfig+0x274>
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d006      	beq.n	800a1e4 <UART_SetConfig+0x280>
 800a1d6:	e00b      	b.n	800a1f0 <UART_SetConfig+0x28c>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	77fb      	strb	r3, [r7, #31]
 800a1dc:	e0ee      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	77fb      	strb	r3, [r7, #31]
 800a1e2:	e0eb      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	77fb      	strb	r3, [r7, #31]
 800a1e8:	e0e8      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1ea:	2308      	movs	r3, #8
 800a1ec:	77fb      	strb	r3, [r7, #31]
 800a1ee:	e0e5      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	77fb      	strb	r3, [r7, #31]
 800a1f4:	e0e2      	b.n	800a3bc <UART_SetConfig+0x458>
 800a1f6:	bf00      	nop
 800a1f8:	019bfcc0 	.word	0x019bfcc0
 800a1fc:	0800fdc8 	.word	0x0800fdc8
 800a200:	efff69f3 	.word	0xefff69f3
 800a204:	40011000 	.word	0x40011000
 800a208:	40023800 	.word	0x40023800
 800a20c:	40004400 	.word	0x40004400
 800a210:	40004800 	.word	0x40004800
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4aa5      	ldr	r2, [pc, #660]	; (800a4b0 <UART_SetConfig+0x54c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d120      	bne.n	800a260 <UART_SetConfig+0x2fc>
 800a21e:	4ba5      	ldr	r3, [pc, #660]	; (800a4b4 <UART_SetConfig+0x550>)
 800a220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a224:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a228:	2bc0      	cmp	r3, #192	; 0xc0
 800a22a:	d013      	beq.n	800a254 <UART_SetConfig+0x2f0>
 800a22c:	2bc0      	cmp	r3, #192	; 0xc0
 800a22e:	d814      	bhi.n	800a25a <UART_SetConfig+0x2f6>
 800a230:	2b80      	cmp	r3, #128	; 0x80
 800a232:	d009      	beq.n	800a248 <UART_SetConfig+0x2e4>
 800a234:	2b80      	cmp	r3, #128	; 0x80
 800a236:	d810      	bhi.n	800a25a <UART_SetConfig+0x2f6>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <UART_SetConfig+0x2de>
 800a23c:	2b40      	cmp	r3, #64	; 0x40
 800a23e:	d006      	beq.n	800a24e <UART_SetConfig+0x2ea>
 800a240:	e00b      	b.n	800a25a <UART_SetConfig+0x2f6>
 800a242:	2300      	movs	r3, #0
 800a244:	77fb      	strb	r3, [r7, #31]
 800a246:	e0b9      	b.n	800a3bc <UART_SetConfig+0x458>
 800a248:	2302      	movs	r3, #2
 800a24a:	77fb      	strb	r3, [r7, #31]
 800a24c:	e0b6      	b.n	800a3bc <UART_SetConfig+0x458>
 800a24e:	2304      	movs	r3, #4
 800a250:	77fb      	strb	r3, [r7, #31]
 800a252:	e0b3      	b.n	800a3bc <UART_SetConfig+0x458>
 800a254:	2308      	movs	r3, #8
 800a256:	77fb      	strb	r3, [r7, #31]
 800a258:	e0b0      	b.n	800a3bc <UART_SetConfig+0x458>
 800a25a:	2310      	movs	r3, #16
 800a25c:	77fb      	strb	r3, [r7, #31]
 800a25e:	e0ad      	b.n	800a3bc <UART_SetConfig+0x458>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a94      	ldr	r2, [pc, #592]	; (800a4b8 <UART_SetConfig+0x554>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d125      	bne.n	800a2b6 <UART_SetConfig+0x352>
 800a26a:	4b92      	ldr	r3, [pc, #584]	; (800a4b4 <UART_SetConfig+0x550>)
 800a26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a278:	d017      	beq.n	800a2aa <UART_SetConfig+0x346>
 800a27a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a27e:	d817      	bhi.n	800a2b0 <UART_SetConfig+0x34c>
 800a280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a284:	d00b      	beq.n	800a29e <UART_SetConfig+0x33a>
 800a286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a28a:	d811      	bhi.n	800a2b0 <UART_SetConfig+0x34c>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <UART_SetConfig+0x334>
 800a290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a294:	d006      	beq.n	800a2a4 <UART_SetConfig+0x340>
 800a296:	e00b      	b.n	800a2b0 <UART_SetConfig+0x34c>
 800a298:	2300      	movs	r3, #0
 800a29a:	77fb      	strb	r3, [r7, #31]
 800a29c:	e08e      	b.n	800a3bc <UART_SetConfig+0x458>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	77fb      	strb	r3, [r7, #31]
 800a2a2:	e08b      	b.n	800a3bc <UART_SetConfig+0x458>
 800a2a4:	2304      	movs	r3, #4
 800a2a6:	77fb      	strb	r3, [r7, #31]
 800a2a8:	e088      	b.n	800a3bc <UART_SetConfig+0x458>
 800a2aa:	2308      	movs	r3, #8
 800a2ac:	77fb      	strb	r3, [r7, #31]
 800a2ae:	e085      	b.n	800a3bc <UART_SetConfig+0x458>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	77fb      	strb	r3, [r7, #31]
 800a2b4:	e082      	b.n	800a3bc <UART_SetConfig+0x458>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a80      	ldr	r2, [pc, #512]	; (800a4bc <UART_SetConfig+0x558>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d125      	bne.n	800a30c <UART_SetConfig+0x3a8>
 800a2c0:	4b7c      	ldr	r3, [pc, #496]	; (800a4b4 <UART_SetConfig+0x550>)
 800a2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2ce:	d017      	beq.n	800a300 <UART_SetConfig+0x39c>
 800a2d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2d4:	d817      	bhi.n	800a306 <UART_SetConfig+0x3a2>
 800a2d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2da:	d00b      	beq.n	800a2f4 <UART_SetConfig+0x390>
 800a2dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2e0:	d811      	bhi.n	800a306 <UART_SetConfig+0x3a2>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <UART_SetConfig+0x38a>
 800a2e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2ea:	d006      	beq.n	800a2fa <UART_SetConfig+0x396>
 800a2ec:	e00b      	b.n	800a306 <UART_SetConfig+0x3a2>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	77fb      	strb	r3, [r7, #31]
 800a2f2:	e063      	b.n	800a3bc <UART_SetConfig+0x458>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	77fb      	strb	r3, [r7, #31]
 800a2f8:	e060      	b.n	800a3bc <UART_SetConfig+0x458>
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	77fb      	strb	r3, [r7, #31]
 800a2fe:	e05d      	b.n	800a3bc <UART_SetConfig+0x458>
 800a300:	2308      	movs	r3, #8
 800a302:	77fb      	strb	r3, [r7, #31]
 800a304:	e05a      	b.n	800a3bc <UART_SetConfig+0x458>
 800a306:	2310      	movs	r3, #16
 800a308:	77fb      	strb	r3, [r7, #31]
 800a30a:	e057      	b.n	800a3bc <UART_SetConfig+0x458>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a6b      	ldr	r2, [pc, #428]	; (800a4c0 <UART_SetConfig+0x55c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d125      	bne.n	800a362 <UART_SetConfig+0x3fe>
 800a316:	4b67      	ldr	r3, [pc, #412]	; (800a4b4 <UART_SetConfig+0x550>)
 800a318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a31c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a324:	d017      	beq.n	800a356 <UART_SetConfig+0x3f2>
 800a326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a32a:	d817      	bhi.n	800a35c <UART_SetConfig+0x3f8>
 800a32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a330:	d00b      	beq.n	800a34a <UART_SetConfig+0x3e6>
 800a332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a336:	d811      	bhi.n	800a35c <UART_SetConfig+0x3f8>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <UART_SetConfig+0x3e0>
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a340:	d006      	beq.n	800a350 <UART_SetConfig+0x3ec>
 800a342:	e00b      	b.n	800a35c <UART_SetConfig+0x3f8>
 800a344:	2300      	movs	r3, #0
 800a346:	77fb      	strb	r3, [r7, #31]
 800a348:	e038      	b.n	800a3bc <UART_SetConfig+0x458>
 800a34a:	2302      	movs	r3, #2
 800a34c:	77fb      	strb	r3, [r7, #31]
 800a34e:	e035      	b.n	800a3bc <UART_SetConfig+0x458>
 800a350:	2304      	movs	r3, #4
 800a352:	77fb      	strb	r3, [r7, #31]
 800a354:	e032      	b.n	800a3bc <UART_SetConfig+0x458>
 800a356:	2308      	movs	r3, #8
 800a358:	77fb      	strb	r3, [r7, #31]
 800a35a:	e02f      	b.n	800a3bc <UART_SetConfig+0x458>
 800a35c:	2310      	movs	r3, #16
 800a35e:	77fb      	strb	r3, [r7, #31]
 800a360:	e02c      	b.n	800a3bc <UART_SetConfig+0x458>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a57      	ldr	r2, [pc, #348]	; (800a4c4 <UART_SetConfig+0x560>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d125      	bne.n	800a3b8 <UART_SetConfig+0x454>
 800a36c:	4b51      	ldr	r3, [pc, #324]	; (800a4b4 <UART_SetConfig+0x550>)
 800a36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a372:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a376:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a37a:	d017      	beq.n	800a3ac <UART_SetConfig+0x448>
 800a37c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a380:	d817      	bhi.n	800a3b2 <UART_SetConfig+0x44e>
 800a382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a386:	d00b      	beq.n	800a3a0 <UART_SetConfig+0x43c>
 800a388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a38c:	d811      	bhi.n	800a3b2 <UART_SetConfig+0x44e>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <UART_SetConfig+0x436>
 800a392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a396:	d006      	beq.n	800a3a6 <UART_SetConfig+0x442>
 800a398:	e00b      	b.n	800a3b2 <UART_SetConfig+0x44e>
 800a39a:	2300      	movs	r3, #0
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e00d      	b.n	800a3bc <UART_SetConfig+0x458>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	77fb      	strb	r3, [r7, #31]
 800a3a4:	e00a      	b.n	800a3bc <UART_SetConfig+0x458>
 800a3a6:	2304      	movs	r3, #4
 800a3a8:	77fb      	strb	r3, [r7, #31]
 800a3aa:	e007      	b.n	800a3bc <UART_SetConfig+0x458>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	77fb      	strb	r3, [r7, #31]
 800a3b0:	e004      	b.n	800a3bc <UART_SetConfig+0x458>
 800a3b2:	2310      	movs	r3, #16
 800a3b4:	77fb      	strb	r3, [r7, #31]
 800a3b6:	e001      	b.n	800a3bc <UART_SetConfig+0x458>
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c4:	d15c      	bne.n	800a480 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a3c6:	7ffb      	ldrb	r3, [r7, #31]
 800a3c8:	2b08      	cmp	r3, #8
 800a3ca:	d828      	bhi.n	800a41e <UART_SetConfig+0x4ba>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <UART_SetConfig+0x470>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a3f9 	.word	0x0800a3f9
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a409 	.word	0x0800a409
 800a3e0:	0800a41f 	.word	0x0800a41f
 800a3e4:	0800a40f 	.word	0x0800a40f
 800a3e8:	0800a41f 	.word	0x0800a41f
 800a3ec:	0800a41f 	.word	0x0800a41f
 800a3f0:	0800a41f 	.word	0x0800a41f
 800a3f4:	0800a417 	.word	0x0800a417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3f8:	f7fe f832 	bl	8008460 <HAL_RCC_GetPCLK1Freq>
 800a3fc:	61b8      	str	r0, [r7, #24]
        break;
 800a3fe:	e013      	b.n	800a428 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a400:	f7fe f842 	bl	8008488 <HAL_RCC_GetPCLK2Freq>
 800a404:	61b8      	str	r0, [r7, #24]
        break;
 800a406:	e00f      	b.n	800a428 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a408:	4b2f      	ldr	r3, [pc, #188]	; (800a4c8 <UART_SetConfig+0x564>)
 800a40a:	61bb      	str	r3, [r7, #24]
        break;
 800a40c:	e00c      	b.n	800a428 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a40e:	f7fd ff15 	bl	800823c <HAL_RCC_GetSysClockFreq>
 800a412:	61b8      	str	r0, [r7, #24]
        break;
 800a414:	e008      	b.n	800a428 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a41a:	61bb      	str	r3, [r7, #24]
        break;
 800a41c:	e004      	b.n	800a428 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	77bb      	strb	r3, [r7, #30]
        break;
 800a426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8082 	beq.w	800a534 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	005a      	lsls	r2, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	085b      	lsrs	r3, r3, #1
 800a43a:	441a      	add	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b0f      	cmp	r3, #15
 800a44a:	d916      	bls.n	800a47a <UART_SetConfig+0x516>
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a452:	d212      	bcs.n	800a47a <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	b29b      	uxth	r3, r3
 800a458:	f023 030f 	bic.w	r3, r3, #15
 800a45c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	b29b      	uxth	r3, r3
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	b29a      	uxth	r2, r3
 800a46a:	89fb      	ldrh	r3, [r7, #14]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	89fa      	ldrh	r2, [r7, #14]
 800a476:	60da      	str	r2, [r3, #12]
 800a478:	e05c      	b.n	800a534 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	77bb      	strb	r3, [r7, #30]
 800a47e:	e059      	b.n	800a534 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a480:	7ffb      	ldrb	r3, [r7, #31]
 800a482:	2b08      	cmp	r3, #8
 800a484:	d835      	bhi.n	800a4f2 <UART_SetConfig+0x58e>
 800a486:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <UART_SetConfig+0x528>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4d5 	.word	0x0800a4d5
 800a494:	0800a4dd 	.word	0x0800a4dd
 800a498:	0800a4f3 	.word	0x0800a4f3
 800a49c:	0800a4e3 	.word	0x0800a4e3
 800a4a0:	0800a4f3 	.word	0x0800a4f3
 800a4a4:	0800a4f3 	.word	0x0800a4f3
 800a4a8:	0800a4f3 	.word	0x0800a4f3
 800a4ac:	0800a4eb 	.word	0x0800a4eb
 800a4b0:	40004c00 	.word	0x40004c00
 800a4b4:	40023800 	.word	0x40023800
 800a4b8:	40005000 	.word	0x40005000
 800a4bc:	40011400 	.word	0x40011400
 800a4c0:	40007800 	.word	0x40007800
 800a4c4:	40007c00 	.word	0x40007c00
 800a4c8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4cc:	f7fd ffc8 	bl	8008460 <HAL_RCC_GetPCLK1Freq>
 800a4d0:	61b8      	str	r0, [r7, #24]
        break;
 800a4d2:	e013      	b.n	800a4fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4d4:	f7fd ffd8 	bl	8008488 <HAL_RCC_GetPCLK2Freq>
 800a4d8:	61b8      	str	r0, [r7, #24]
        break;
 800a4da:	e00f      	b.n	800a4fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <UART_SetConfig+0x5e8>)
 800a4de:	61bb      	str	r3, [r7, #24]
        break;
 800a4e0:	e00c      	b.n	800a4fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4e2:	f7fd feab 	bl	800823c <HAL_RCC_GetSysClockFreq>
 800a4e6:	61b8      	str	r0, [r7, #24]
        break;
 800a4e8:	e008      	b.n	800a4fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ee:	61bb      	str	r3, [r7, #24]
        break;
 800a4f0:	e004      	b.n	800a4fc <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	77bb      	strb	r3, [r7, #30]
        break;
 800a4fa:	bf00      	nop
    }

    if (pclk != 0U)
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d018      	beq.n	800a534 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	085a      	lsrs	r2, r3, #1
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	441a      	add	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	fbb2 f3f3 	udiv	r3, r2, r3
 800a514:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b0f      	cmp	r3, #15
 800a51a:	d909      	bls.n	800a530 <UART_SetConfig+0x5cc>
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a522:	d205      	bcs.n	800a530 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	b29a      	uxth	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	60da      	str	r2, [r3, #12]
 800a52e:	e001      	b.n	800a534 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a540:	7fbb      	ldrb	r3, [r7, #30]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3720      	adds	r7, #32
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	00f42400 	.word	0x00f42400

0800a550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2bff      	cmp	r3, #255	; 0xff
 800a55e:	d904      	bls.n	800a56a <UART_AdvFeatureConfig+0x1a>
 800a560:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a564:	488e      	ldr	r0, [pc, #568]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a566:	f7f6 fcbd 	bl	8000ee4 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d018      	beq.n	800a5a8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <UART_AdvFeatureConfig+0x42>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a586:	d004      	beq.n	800a592 <UART_AdvFeatureConfig+0x42>
 800a588:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a58c:	4884      	ldr	r0, [pc, #528]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a58e:	f7f6 fca9 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d018      	beq.n	800a5e6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d009      	beq.n	800a5d0 <UART_AdvFeatureConfig+0x80>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c4:	d004      	beq.n	800a5d0 <UART_AdvFeatureConfig+0x80>
 800a5c6:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a5ca:	4875      	ldr	r0, [pc, #468]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a5cc:	f7f6 fc8a 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d018      	beq.n	800a624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <UART_AdvFeatureConfig+0xbe>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a602:	d004      	beq.n	800a60e <UART_AdvFeatureConfig+0xbe>
 800a604:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a608:	4865      	ldr	r0, [pc, #404]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a60a:	f7f6 fc6b 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d018      	beq.n	800a662 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a634:	2b00      	cmp	r3, #0
 800a636:	d009      	beq.n	800a64c <UART_AdvFeatureConfig+0xfc>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a640:	d004      	beq.n	800a64c <UART_AdvFeatureConfig+0xfc>
 800a642:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a646:	4856      	ldr	r0, [pc, #344]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a648:	f7f6 fc4c 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	f003 0310 	and.w	r3, r3, #16
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d018      	beq.n	800a6a0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	d009      	beq.n	800a68a <UART_AdvFeatureConfig+0x13a>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67e:	d004      	beq.n	800a68a <UART_AdvFeatureConfig+0x13a>
 800a680:	f640 4107 	movw	r1, #3079	; 0xc07
 800a684:	4846      	ldr	r0, [pc, #280]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a686:	f7f6 fc2d 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d018      	beq.n	800a6de <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <UART_AdvFeatureConfig+0x178>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6bc:	d004      	beq.n	800a6c8 <UART_AdvFeatureConfig+0x178>
 800a6be:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a6c2:	4837      	ldr	r0, [pc, #220]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a6c4:	f7f6 fc0e 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d064      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a2d      	ldr	r2, [pc, #180]	; (800a7a4 <UART_AdvFeatureConfig+0x254>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d013      	beq.n	800a71c <UART_AdvFeatureConfig+0x1cc>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a2b      	ldr	r2, [pc, #172]	; (800a7a8 <UART_AdvFeatureConfig+0x258>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00e      	beq.n	800a71c <UART_AdvFeatureConfig+0x1cc>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a2a      	ldr	r2, [pc, #168]	; (800a7ac <UART_AdvFeatureConfig+0x25c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d009      	beq.n	800a71c <UART_AdvFeatureConfig+0x1cc>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a28      	ldr	r2, [pc, #160]	; (800a7b0 <UART_AdvFeatureConfig+0x260>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d004      	beq.n	800a71c <UART_AdvFeatureConfig+0x1cc>
 800a712:	f640 4115 	movw	r1, #3093	; 0xc15
 800a716:	4822      	ldr	r0, [pc, #136]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a718:	f7f6 fbe4 	bl	8000ee4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <UART_AdvFeatureConfig+0x1e8>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a72c:	d004      	beq.n	800a738 <UART_AdvFeatureConfig+0x1e8>
 800a72e:	f640 4116 	movw	r1, #3094	; 0xc16
 800a732:	481b      	ldr	r0, [pc, #108]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a734:	f7f6 fbd6 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a756:	d12d      	bne.n	800a7b4 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d013      	beq.n	800a788 <UART_AdvFeatureConfig+0x238>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a768:	d00e      	beq.n	800a788 <UART_AdvFeatureConfig+0x238>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a772:	d009      	beq.n	800a788 <UART_AdvFeatureConfig+0x238>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a778:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a77c:	d004      	beq.n	800a788 <UART_AdvFeatureConfig+0x238>
 800a77e:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a782:	4807      	ldr	r0, [pc, #28]	; (800a7a0 <UART_AdvFeatureConfig+0x250>)
 800a784:	f7f6 fbae 	bl	8000ee4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
 800a79e:	e009      	b.n	800a7b4 <UART_AdvFeatureConfig+0x264>
 800a7a0:	0800fdc8 	.word	0x0800fdc8
 800a7a4:	40011000 	.word	0x40011000
 800a7a8:	40004400 	.word	0x40004400
 800a7ac:	40004800 	.word	0x40004800
 800a7b0:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d018      	beq.n	800a7f2 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <UART_AdvFeatureConfig+0x28c>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7d0:	d004      	beq.n	800a7dc <UART_AdvFeatureConfig+0x28c>
 800a7d2:	f640 4123 	movw	r1, #3107	; 0xc23
 800a7d6:	4809      	ldr	r0, [pc, #36]	; (800a7fc <UART_AdvFeatureConfig+0x2ac>)
 800a7d8:	f7f6 fb84 	bl	8000ee4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	605a      	str	r2, [r3, #4]
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	0800fdc8 	.word	0x0800fdc8

0800a800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af02      	add	r7, sp, #8
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a810:	f7f8 fb22 	bl	8002e58 <HAL_GetTick>
 800a814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0308 	and.w	r3, r3, #8
 800a820:	2b08      	cmp	r3, #8
 800a822:	d10e      	bne.n	800a842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f831 	bl	800a89a <UART_WaitOnFlagUntilTimeout>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e027      	b.n	800a892 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d10e      	bne.n	800a86e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f81b 	bl	800a89a <UART_WaitOnFlagUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e011      	b.n	800a892 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b09c      	sub	sp, #112	; 0x70
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	603b      	str	r3, [r7, #0]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8aa:	e0a7      	b.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b2:	f000 80a3 	beq.w	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b6:	f7f8 facf 	bl	8002e58 <HAL_GetTick>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d302      	bcc.n	800a8cc <UART_WaitOnFlagUntilTimeout+0x32>
 800a8c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d13f      	bne.n	800a94c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8e0:	667b      	str	r3, [r7, #100]	; 0x64
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8f2:	e841 2300 	strex	r3, r2, [r1]
 800a8f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1e6      	bne.n	800a8cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3308      	adds	r3, #8
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a910:	f023 0301 	bic.w	r3, r3, #1
 800a914:	663b      	str	r3, [r7, #96]	; 0x60
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a91e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e5      	bne.n	800a8fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2220      	movs	r2, #32
 800a936:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e068      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	d050      	beq.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a968:	d148      	bne.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a972:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	637b      	str	r3, [r7, #52]	; 0x34
 800a994:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e6      	bne.n	800a974 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f023 0301 	bic.w	r3, r3, #1
 800a9bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9c6:	623a      	str	r2, [r7, #32]
 800a9c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	69f9      	ldr	r1, [r7, #28]
 800a9cc:	6a3a      	ldr	r2, [r7, #32]
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e5      	bne.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e010      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	69da      	ldr	r2, [r3, #28]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	4013      	ands	r3, r2
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2301      	moveq	r3, #1
 800aa0e:	2300      	movne	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	461a      	mov	r2, r3
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	f43f af48 	beq.w	800a8ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3770      	adds	r7, #112	; 0x70
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa28:	b084      	sub	sp, #16
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	f107 001c 	add.w	r0, r7, #28
 800aa36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d120      	bne.n	800aa82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68da      	ldr	r2, [r3, #12]
 800aa50:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <USB_CoreInit+0xac>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d105      	bne.n	800aa76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fa96 	bl	800afa8 <USB_CoreReset>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]
 800aa80:	e010      	b.n	800aaa4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa8a 	bl	800afa8 <USB_CoreReset>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d10b      	bne.n	800aac2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f043 0206 	orr.w	r2, r3, #6
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f043 0220 	orr.w	r2, r3, #32
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aace:	b004      	add	sp, #16
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	ffbdffbf 	.word	0xffbdffbf

0800aad8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f023 0201 	bic.w	r2, r3, #1
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab16:	78fb      	ldrb	r3, [r7, #3]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d115      	bne.n	800ab48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ab28:	2001      	movs	r0, #1
 800ab2a:	f7f8 f9a1 	bl	8002e70 <HAL_Delay>
      ms++;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fa29 	bl	800af8c <USB_GetMode>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d01e      	beq.n	800ab7e <USB_SetCurrentMode+0x84>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b31      	cmp	r3, #49	; 0x31
 800ab44:	d9f0      	bls.n	800ab28 <USB_SetCurrentMode+0x2e>
 800ab46:	e01a      	b.n	800ab7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d115      	bne.n	800ab7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ab5a:	2001      	movs	r0, #1
 800ab5c:	f7f8 f988 	bl	8002e70 <HAL_Delay>
      ms++;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fa10 	bl	800af8c <USB_GetMode>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <USB_SetCurrentMode+0x84>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b31      	cmp	r3, #49	; 0x31
 800ab76:	d9f0      	bls.n	800ab5a <USB_SetCurrentMode+0x60>
 800ab78:	e001      	b.n	800ab7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e005      	b.n	800ab8a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b32      	cmp	r3, #50	; 0x32
 800ab82:	d101      	bne.n	800ab88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e000      	b.n	800ab8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab94:	b084      	sub	sp, #16
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
 800abb2:	e009      	b.n	800abc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3340      	adds	r3, #64	; 0x40
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	3301      	adds	r3, #1
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2b0e      	cmp	r3, #14
 800abcc:	d9f2      	bls.n	800abb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800abce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11c      	bne.n	800ac0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abe2:	f043 0302 	orr.w	r3, r3, #2
 800abe6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	e005      	b.n	800ac1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac20:	461a      	mov	r2, r3
 800ac22:	2300      	movs	r3, #0
 800ac24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac34:	461a      	mov	r2, r3
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d10c      	bne.n	800ac5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d104      	bne.n	800ac50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac46:	2100      	movs	r1, #0
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f965 	bl	800af18 <USB_SetDevSpeed>
 800ac4e:	e008      	b.n	800ac62 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac50:	2101      	movs	r1, #1
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f960 	bl	800af18 <USB_SetDevSpeed>
 800ac58:	e003      	b.n	800ac62 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac5a:	2103      	movs	r1, #3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f95b 	bl	800af18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac62:	2110      	movs	r1, #16
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f8f3 	bl	800ae50 <USB_FlushTxFifo>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f91f 	bl	800aeb8 <USB_FlushRxFifo>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac96:	461a      	mov	r2, r3
 800ac98:	2300      	movs	r3, #0
 800ac9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca2:	461a      	mov	r2, r3
 800aca4:	2300      	movs	r3, #0
 800aca6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aca8:	2300      	movs	r3, #0
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	e043      	b.n	800ad36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acc4:	d118      	bne.n	800acf8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd8:	461a      	mov	r2, r3
 800acda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	e013      	b.n	800ad0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acee:	461a      	mov	r2, r3
 800acf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	e008      	b.n	800ad0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad04:	461a      	mov	r2, r3
 800ad06:	2300      	movs	r3, #0
 800ad08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad16:	461a      	mov	r2, r3
 800ad18:	2300      	movs	r3, #0
 800ad1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ad2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	3301      	adds	r3, #1
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d3b7      	bcc.n	800acae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad3e:	2300      	movs	r3, #0
 800ad40:	613b      	str	r3, [r7, #16]
 800ad42:	e043      	b.n	800adcc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad5a:	d118      	bne.n	800ad8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10a      	bne.n	800ad78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	e013      	b.n	800ada0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	461a      	mov	r2, r3
 800ad86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	e008      	b.n	800ada0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adac:	461a      	mov	r2, r3
 800adae:	2300      	movs	r3, #0
 800adb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	461a      	mov	r2, r3
 800adc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	3301      	adds	r3, #1
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	429a      	cmp	r2, r3
 800add2:	d3b7      	bcc.n	800ad44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ade2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ade6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800adf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d105      	bne.n	800ae08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	f043 0210 	orr.w	r2, r3, #16
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	699a      	ldr	r2, [r3, #24]
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <USB_DevInit+0x2b4>)
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d005      	beq.n	800ae26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	f043 0208 	orr.w	r2, r3, #8
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d105      	bne.n	800ae38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	699a      	ldr	r2, [r3, #24]
 800ae30:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <USB_DevInit+0x2b8>)
 800ae32:	4313      	orrs	r3, r2
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae44:	b004      	add	sp, #16
 800ae46:	4770      	bx	lr
 800ae48:	803c3800 	.word	0x803c3800
 800ae4c:	40000004 	.word	0x40000004

0800ae50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3301      	adds	r3, #1
 800ae62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4a13      	ldr	r2, [pc, #76]	; (800aeb4 <USB_FlushTxFifo+0x64>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d901      	bls.n	800ae70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e01b      	b.n	800aea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	daf2      	bge.n	800ae5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	019b      	lsls	r3, r3, #6
 800ae80:	f043 0220 	orr.w	r2, r3, #32
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	4a08      	ldr	r2, [pc, #32]	; (800aeb4 <USB_FlushTxFifo+0x64>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d901      	bls.n	800ae9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e006      	b.n	800aea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f003 0320 	and.w	r3, r3, #32
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d0f0      	beq.n	800ae88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	00030d40 	.word	0x00030d40

0800aeb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4a11      	ldr	r2, [pc, #68]	; (800af14 <USB_FlushRxFifo+0x5c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d901      	bls.n	800aed6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e018      	b.n	800af08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	daf2      	bge.n	800aec4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2210      	movs	r2, #16
 800aee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3301      	adds	r3, #1
 800aeec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4a08      	ldr	r2, [pc, #32]	; (800af14 <USB_FlushRxFifo+0x5c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d901      	bls.n	800aefa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e006      	b.n	800af08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f003 0310 	and.w	r3, r3, #16
 800af02:	2b10      	cmp	r3, #16
 800af04:	d0f0      	beq.n	800aee8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	00030d40 	.word	0x00030d40

0800af18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	68f9      	ldr	r1, [r7, #12]
 800af34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af38:	4313      	orrs	r3, r2
 800af3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b085      	sub	sp, #20
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af64:	f023 0303 	bic.w	r3, r3, #3
 800af68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af78:	f043 0302 	orr.w	r3, r3, #2
 800af7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	f003 0301 	and.w	r3, r3, #1
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3301      	adds	r3, #1
 800afb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	4a13      	ldr	r2, [pc, #76]	; (800b00c <USB_CoreReset+0x64>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d901      	bls.n	800afc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e01b      	b.n	800affe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	daf2      	bge.n	800afb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	f043 0201 	orr.w	r2, r3, #1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3301      	adds	r3, #1
 800afe2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4a09      	ldr	r2, [pc, #36]	; (800b00c <USB_CoreReset+0x64>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d901      	bls.n	800aff0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e006      	b.n	800affe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d0f0      	beq.n	800afde <USB_CoreReset+0x36>

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	00030d40 	.word	0x00030d40

0800b010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b026:	f3ef 8305 	mrs	r3, IPSR
 800b02a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b02c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10f      	bne.n	800b052 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b032:	f3ef 8310 	mrs	r3, PRIMASK
 800b036:	607b      	str	r3, [r7, #4]
  return(result);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d105      	bne.n	800b04a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b03e:	f3ef 8311 	mrs	r3, BASEPRI
 800b042:	603b      	str	r3, [r7, #0]
  return(result);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d007      	beq.n	800b05a <osKernelInitialize+0x3a>
 800b04a:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <osKernelInitialize+0x64>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d103      	bne.n	800b05a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b052:	f06f 0305 	mvn.w	r3, #5
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	e00c      	b.n	800b074 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b05a:	4b0a      	ldr	r3, [pc, #40]	; (800b084 <osKernelInitialize+0x64>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d105      	bne.n	800b06e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b062:	4b08      	ldr	r3, [pc, #32]	; (800b084 <osKernelInitialize+0x64>)
 800b064:	2201      	movs	r2, #1
 800b066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	e002      	b.n	800b074 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b06e:	f04f 33ff 	mov.w	r3, #4294967295
 800b072:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b074:	68fb      	ldr	r3, [r7, #12]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20000b30 	.word	0x20000b30

0800b088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b08e:	f3ef 8305 	mrs	r3, IPSR
 800b092:	60bb      	str	r3, [r7, #8]
  return(result);
 800b094:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10f      	bne.n	800b0ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b09a:	f3ef 8310 	mrs	r3, PRIMASK
 800b09e:	607b      	str	r3, [r7, #4]
  return(result);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d105      	bne.n	800b0b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0a6:	f3ef 8311 	mrs	r3, BASEPRI
 800b0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d007      	beq.n	800b0c2 <osKernelStart+0x3a>
 800b0b2:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <osKernelStart+0x68>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d103      	bne.n	800b0c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b0ba:	f06f 0305 	mvn.w	r3, #5
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e010      	b.n	800b0e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <osKernelStart+0x68>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d109      	bne.n	800b0de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b0ca:	f7ff ffa1 	bl	800b010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b0ce:	4b08      	ldr	r3, [pc, #32]	; (800b0f0 <osKernelStart+0x68>)
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b0d4:	f001 f966 	bl	800c3a4 <vTaskStartScheduler>
      stat = osOK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e002      	b.n	800b0e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b0de:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000b30 	.word	0x20000b30

0800b0f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b090      	sub	sp, #64	; 0x40
 800b0f8:	af04      	add	r7, sp, #16
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b104:	f3ef 8305 	mrs	r3, IPSR
 800b108:	61fb      	str	r3, [r7, #28]
  return(result);
 800b10a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 808f 	bne.w	800b230 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b112:	f3ef 8310 	mrs	r3, PRIMASK
 800b116:	61bb      	str	r3, [r7, #24]
  return(result);
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d105      	bne.n	800b12a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b11e:	f3ef 8311 	mrs	r3, BASEPRI
 800b122:	617b      	str	r3, [r7, #20]
  return(result);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <osThreadNew+0x3e>
 800b12a:	4b44      	ldr	r3, [pc, #272]	; (800b23c <osThreadNew+0x148>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d07e      	beq.n	800b230 <osThreadNew+0x13c>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d07b      	beq.n	800b230 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b138:	2380      	movs	r3, #128	; 0x80
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b13c:	2318      	movs	r3, #24
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b144:	f04f 33ff 	mov.w	r3, #4294967295
 800b148:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d045      	beq.n	800b1dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <osThreadNew+0x6a>
        name = attr->name;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d008      	beq.n	800b184 <osThreadNew+0x90>
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	2b38      	cmp	r3, #56	; 0x38
 800b176:	d805      	bhi.n	800b184 <osThreadNew+0x90>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <osThreadNew+0x94>
        return (NULL);
 800b184:	2300      	movs	r3, #0
 800b186:	e054      	b.n	800b232 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	089b      	lsrs	r3, r3, #2
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00e      	beq.n	800b1be <osThreadNew+0xca>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	2bbb      	cmp	r3, #187	; 0xbb
 800b1a6:	d90a      	bls.n	800b1be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <osThreadNew+0xca>
        mem = 1;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	623b      	str	r3, [r7, #32]
 800b1bc:	e010      	b.n	800b1e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10c      	bne.n	800b1e0 <osThreadNew+0xec>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d108      	bne.n	800b1e0 <osThreadNew+0xec>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d104      	bne.n	800b1e0 <osThreadNew+0xec>
          mem = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	623b      	str	r3, [r7, #32]
 800b1da:	e001      	b.n	800b1e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d110      	bne.n	800b208 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1ee:	9202      	str	r2, [sp, #8]
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 feb9 	bl	800bf74 <xTaskCreateStatic>
 800b202:	4603      	mov	r3, r0
 800b204:	613b      	str	r3, [r7, #16]
 800b206:	e013      	b.n	800b230 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d110      	bne.n	800b230 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	b29a      	uxth	r2, r3
 800b212:	f107 0310 	add.w	r3, r7, #16
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 ff0a 	bl	800c03a <xTaskCreate>
 800b226:	4603      	mov	r3, r0
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d001      	beq.n	800b230 <osThreadNew+0x13c>
          hTask = NULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b230:	693b      	ldr	r3, [r7, #16]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3730      	adds	r7, #48	; 0x30
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000b30 	.word	0x20000b30

0800b240 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b248:	f3ef 8305 	mrs	r3, IPSR
 800b24c:	613b      	str	r3, [r7, #16]
  return(result);
 800b24e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10f      	bne.n	800b274 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b254:	f3ef 8310 	mrs	r3, PRIMASK
 800b258:	60fb      	str	r3, [r7, #12]
  return(result);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d105      	bne.n	800b26c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b260:	f3ef 8311 	mrs	r3, BASEPRI
 800b264:	60bb      	str	r3, [r7, #8]
  return(result);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d007      	beq.n	800b27c <osDelay+0x3c>
 800b26c:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <osDelay+0x58>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d103      	bne.n	800b27c <osDelay+0x3c>
    stat = osErrorISR;
 800b274:	f06f 0305 	mvn.w	r3, #5
 800b278:	617b      	str	r3, [r7, #20]
 800b27a:	e007      	b.n	800b28c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <osDelay+0x4c>
      vTaskDelay(ticks);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f001 f852 	bl	800c330 <vTaskDelay>
    }
  }

  return (stat);
 800b28c:	697b      	ldr	r3, [r7, #20]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000b30 	.word	0x20000b30

0800b29c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4a07      	ldr	r2, [pc, #28]	; (800b2c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b2ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	4a06      	ldr	r2, [pc, #24]	; (800b2cc <vApplicationGetIdleTaskMemory+0x30>)
 800b2b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2280      	movs	r2, #128	; 0x80
 800b2b8:	601a      	str	r2, [r3, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	20000b34 	.word	0x20000b34
 800b2cc:	20000bf0 	.word	0x20000bf0

0800b2d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4a07      	ldr	r2, [pc, #28]	; (800b2fc <vApplicationGetTimerTaskMemory+0x2c>)
 800b2e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	4a06      	ldr	r2, [pc, #24]	; (800b300 <vApplicationGetTimerTaskMemory+0x30>)
 800b2e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2ee:	601a      	str	r2, [r3, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	20000df0 	.word	0x20000df0
 800b300:	20000eac 	.word	0x20000eac

0800b304 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f103 0208 	add.w	r2, r3, #8
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f04f 32ff 	mov.w	r2, #4294967295
 800b31c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f103 0208 	add.w	r2, r3, #8
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f103 0208 	add.w	r2, r3, #8
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b35e:	b480      	push	{r7}
 800b360:	b085      	sub	sp, #20
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	1c5a      	adds	r2, r3, #1
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	601a      	str	r2, [r3, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3bc:	d103      	bne.n	800b3c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e00c      	b.n	800b3e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3308      	adds	r3, #8
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	e002      	b.n	800b3d4 <vListInsert+0x2e>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d2f6      	bcs.n	800b3ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	601a      	str	r2, [r3, #0]
}
 800b40c:	bf00      	nop
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	6892      	ldr	r2, [r2, #8]
 800b42e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	6852      	ldr	r2, [r2, #4]
 800b438:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d103      	bne.n	800b44c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	1e5a      	subs	r2, r3, #1
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10c      	bne.n	800b49a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	b672      	cpsid	i
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	b662      	cpsie	i
 800b494:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b49a:	f002 f9c7 	bl	800d82c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a6:	68f9      	ldr	r1, [r7, #12]
 800b4a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4aa:	fb01 f303 	mul.w	r3, r1, r3
 800b4ae:	441a      	add	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	68f9      	ldr	r1, [r7, #12]
 800b4ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4d0:	fb01 f303 	mul.w	r3, r1, r3
 800b4d4:	441a      	add	r2, r3
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	22ff      	movs	r2, #255	; 0xff
 800b4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	22ff      	movs	r2, #255	; 0xff
 800b4e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d114      	bne.n	800b51a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d01a      	beq.n	800b52e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3310      	adds	r3, #16
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f001 fa3b 	bl	800c978 <xTaskRemoveFromEventList>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d012      	beq.n	800b52e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b508:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <xQueueGenericReset+0xd0>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	e009      	b.n	800b52e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3310      	adds	r3, #16
 800b51e:	4618      	mov	r0, r3
 800b520:	f7ff fef0 	bl	800b304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3324      	adds	r3, #36	; 0x24
 800b528:	4618      	mov	r0, r3
 800b52a:	f7ff feeb 	bl	800b304 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b52e:	f002 f9b1 	bl	800d894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b532:	2301      	movs	r3, #1
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	e000ed04 	.word	0xe000ed04

0800b540 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08e      	sub	sp, #56	; 0x38
 800b544:	af02      	add	r7, sp, #8
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10c      	bne.n	800b56e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	b672      	cpsid	i
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	b662      	cpsie	i
 800b568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10c      	bne.n	800b58e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	b672      	cpsid	i
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	b662      	cpsie	i
 800b588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <xQueueGenericCreateStatic+0x5a>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <xQueueGenericCreateStatic+0x5e>
 800b59a:	2301      	movs	r3, #1
 800b59c:	e000      	b.n	800b5a0 <xQueueGenericCreateStatic+0x60>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10c      	bne.n	800b5be <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	b672      	cpsid	i
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	b662      	cpsie	i
 800b5b8:	623b      	str	r3, [r7, #32]
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <xQueueGenericCreateStatic+0x8a>
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <xQueueGenericCreateStatic+0x8e>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <xQueueGenericCreateStatic+0x90>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10c      	bne.n	800b5ee <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	b672      	cpsid	i
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	b662      	cpsie	i
 800b5e8:	61fb      	str	r3, [r7, #28]
}
 800b5ea:	bf00      	nop
 800b5ec:	e7fe      	b.n	800b5ec <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5ee:	2350      	movs	r3, #80	; 0x50
 800b5f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b50      	cmp	r3, #80	; 0x50
 800b5f6:	d00c      	beq.n	800b612 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	b672      	cpsid	i
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	b662      	cpsie	i
 800b60c:	61bb      	str	r3, [r7, #24]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b612:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00d      	beq.n	800b63a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b626:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	4613      	mov	r3, r2
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f805 	bl	800b644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3730      	adds	r7, #48	; 0x30
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	69ba      	ldr	r2, [r7, #24]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	e002      	b.n	800b666 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b672:	2101      	movs	r1, #1
 800b674:	69b8      	ldr	r0, [r7, #24]
 800b676:	f7ff fef9 	bl	800b46c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	78fa      	ldrb	r2, [r7, #3]
 800b67e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	68f9      	ldr	r1, [r7, #12]
 800b688:	2073      	movs	r0, #115	; 0x73
 800b68a:	f003 f949 	bl	800e920 <SEGGER_SYSVIEW_RecordU32x3>
}
 800b68e:	bf00      	nop
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b090      	sub	sp, #64	; 0x40
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10c      	bne.n	800b6ce <xQueueGenericSend+0x36>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	b672      	cpsid	i
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	b662      	cpsie	i
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d103      	bne.n	800b6dc <xQueueGenericSend+0x44>
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <xQueueGenericSend+0x48>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e000      	b.n	800b6e2 <xQueueGenericSend+0x4a>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10c      	bne.n	800b700 <xQueueGenericSend+0x68>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	b672      	cpsid	i
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	b662      	cpsie	i
 800b6fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d103      	bne.n	800b70e <xQueueGenericSend+0x76>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <xQueueGenericSend+0x7a>
 800b70e:	2301      	movs	r3, #1
 800b710:	e000      	b.n	800b714 <xQueueGenericSend+0x7c>
 800b712:	2300      	movs	r3, #0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10c      	bne.n	800b732 <xQueueGenericSend+0x9a>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	b672      	cpsid	i
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	b662      	cpsie	i
 800b72c:	623b      	str	r3, [r7, #32]
}
 800b72e:	bf00      	nop
 800b730:	e7fe      	b.n	800b730 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b732:	f001 fb27 	bl	800cd84 <xTaskGetSchedulerState>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d102      	bne.n	800b742 <xQueueGenericSend+0xaa>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <xQueueGenericSend+0xae>
 800b742:	2301      	movs	r3, #1
 800b744:	e000      	b.n	800b748 <xQueueGenericSend+0xb0>
 800b746:	2300      	movs	r3, #0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10c      	bne.n	800b766 <xQueueGenericSend+0xce>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	b672      	cpsid	i
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	b662      	cpsie	i
 800b760:	61fb      	str	r3, [r7, #28]
}
 800b762:	bf00      	nop
 800b764:	e7fe      	b.n	800b764 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b766:	f002 f861 	bl	800d82c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b772:	429a      	cmp	r2, r3
 800b774:	d302      	bcc.n	800b77c <xQueueGenericSend+0xe4>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d136      	bne.n	800b7ea <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	4618      	mov	r0, r3
 800b780:	f003 fd8a 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	460b      	mov	r3, r1
 800b78e:	4601      	mov	r1, r0
 800b790:	205a      	movs	r0, #90	; 0x5a
 800b792:	f003 f93b 	bl	800ea0c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b79c:	f000 fa74 	bl	800bc88 <prvCopyDataToQueue>
 800b7a0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d010      	beq.n	800b7cc <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	3324      	adds	r3, #36	; 0x24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f001 f8e2 	bl	800c978 <xTaskRemoveFromEventList>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d013      	beq.n	800b7e2 <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b7ba:	4b4d      	ldr	r3, [pc, #308]	; (800b8f0 <xQueueGenericSend+0x258>)
 800b7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	e00a      	b.n	800b7e2 <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d007      	beq.n	800b7e2 <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7d2:	4b47      	ldr	r3, [pc, #284]	; (800b8f0 <xQueueGenericSend+0x258>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7e2:	f002 f857 	bl	800d894 <vPortExitCritical>
				return pdPASS;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e07d      	b.n	800b8e6 <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d110      	bne.n	800b812 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7f0:	f002 f850 	bl	800d894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f003 fd4e 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	460b      	mov	r3, r1
 800b806:	4601      	mov	r1, r0
 800b808:	205a      	movs	r0, #90	; 0x5a
 800b80a:	f003 f8ff 	bl	800ea0c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800b80e:	2300      	movs	r3, #0
 800b810:	e069      	b.n	800b8e6 <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b814:	2b00      	cmp	r3, #0
 800b816:	d106      	bne.n	800b826 <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b818:	f107 0314 	add.w	r3, r7, #20
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 f915 	bl	800ca4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b822:	2301      	movs	r3, #1
 800b824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b826:	f002 f835 	bl	800d894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b82a:	f000 fe41 	bl	800c4b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b82e:	f001 fffd 	bl	800d82c <vPortEnterCritical>
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b838:	b25b      	sxtb	r3, r3
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d103      	bne.n	800b848 <xQueueGenericSend+0x1b0>
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b84e:	b25b      	sxtb	r3, r3
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d103      	bne.n	800b85e <xQueueGenericSend+0x1c6>
 800b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b85e:	f002 f819 	bl	800d894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b862:	1d3a      	adds	r2, r7, #4
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 f904 	bl	800ca78 <xTaskCheckForTimeOut>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d124      	bne.n	800b8c0 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b878:	f000 fafe 	bl	800be78 <prvIsQueueFull>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d018      	beq.n	800b8b4 <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	3310      	adds	r3, #16
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f001 f81e 	bl	800c8cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b892:	f000 fa89 	bl	800bda8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b896:	f000 fe19 	bl	800c4cc <xTaskResumeAll>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f47f af62 	bne.w	800b766 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b8a2:	4b13      	ldr	r3, [pc, #76]	; (800b8f0 <xQueueGenericSend+0x258>)
 800b8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	e758      	b.n	800b766 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8b6:	f000 fa77 	bl	800bda8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8ba:	f000 fe07 	bl	800c4cc <xTaskResumeAll>
 800b8be:	e752      	b.n	800b766 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8c2:	f000 fa71 	bl	800bda8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8c6:	f000 fe01 	bl	800c4cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f003 fce3 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4601      	mov	r1, r0
 800b8de:	205a      	movs	r0, #90	; 0x5a
 800b8e0:	f003 f894 	bl	800ea0c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800b8e4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3738      	adds	r7, #56	; 0x38
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08e      	sub	sp, #56	; 0x38
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10c      	bne.n	800b926 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	b672      	cpsid	i
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	b662      	cpsie	i
 800b920:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d103      	bne.n	800b934 <xQueueGenericSendFromISR+0x40>
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <xQueueGenericSendFromISR+0x44>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <xQueueGenericSendFromISR+0x46>
 800b938:	2300      	movs	r3, #0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10c      	bne.n	800b958 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	b672      	cpsid	i
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	b662      	cpsie	i
 800b952:	623b      	str	r3, [r7, #32]
}
 800b954:	bf00      	nop
 800b956:	e7fe      	b.n	800b956 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d103      	bne.n	800b966 <xQueueGenericSendFromISR+0x72>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b962:	2b01      	cmp	r3, #1
 800b964:	d101      	bne.n	800b96a <xQueueGenericSendFromISR+0x76>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xQueueGenericSendFromISR+0x78>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10c      	bne.n	800b98a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	b672      	cpsid	i
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	b662      	cpsie	i
 800b984:	61fb      	str	r3, [r7, #28]
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b98a:	f002 f837 	bl	800d9fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b98e:	f3ef 8211 	mrs	r2, BASEPRI
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	b672      	cpsid	i
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	b662      	cpsie	i
 800b9a6:	61ba      	str	r2, [r7, #24]
 800b9a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d302      	bcc.n	800b9c0 <xQueueGenericSendFromISR+0xcc>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d136      	bne.n	800ba2e <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f003 fc63 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2060      	movs	r0, #96	; 0x60
 800b9da:	f002 ff47 	bl	800e86c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e4:	f000 f950 	bl	800bc88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b9e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f0:	d112      	bne.n	800ba18 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d016      	beq.n	800ba28 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	3324      	adds	r3, #36	; 0x24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 ffba 	bl	800c978 <xTaskRemoveFromEventList>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00e      	beq.n	800ba28 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	e007      	b.n	800ba28 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	b25a      	sxtb	r2, r3
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ba2c:	e00b      	b.n	800ba46 <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	4618      	mov	r0, r3
 800ba32:	f003 fc31 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800ba36:	4601      	mov	r1, r0
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	2060      	movs	r0, #96	; 0x60
 800ba3e:	f002 ff15 	bl	800e86c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	637b      	str	r3, [r7, #52]	; 0x34
 800ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3738      	adds	r7, #56	; 0x38
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba5c:	b590      	push	{r4, r7, lr}
 800ba5e:	b08f      	sub	sp, #60	; 0x3c
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10c      	bne.n	800ba90 <xQueueReceive+0x34>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	b672      	cpsid	i
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	b662      	cpsie	i
 800ba8a:	623b      	str	r3, [r7, #32]
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d103      	bne.n	800ba9e <xQueueReceive+0x42>
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <xQueueReceive+0x46>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e000      	b.n	800baa4 <xQueueReceive+0x48>
 800baa2:	2300      	movs	r3, #0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10c      	bne.n	800bac2 <xQueueReceive+0x66>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	b672      	cpsid	i
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	b662      	cpsie	i
 800babc:	61fb      	str	r3, [r7, #28]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bac2:	f001 f95f 	bl	800cd84 <xTaskGetSchedulerState>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <xQueueReceive+0x76>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <xQueueReceive+0x7a>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e000      	b.n	800bad8 <xQueueReceive+0x7c>
 800bad6:	2300      	movs	r3, #0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10c      	bne.n	800baf6 <xQueueReceive+0x9a>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	b672      	cpsid	i
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	b662      	cpsie	i
 800baf0:	61bb      	str	r3, [r7, #24]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baf6:	f001 fe99 	bl	800d82c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d02f      	beq.n	800bb66 <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0a:	f000 f927 	bl	800bd5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	4618      	mov	r0, r3
 800bb12:	f003 fbc1 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bb16:	4604      	mov	r4, r0
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f003 fbbd 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2101      	movs	r1, #1
 800bb24:	9100      	str	r1, [sp, #0]
 800bb26:	4621      	mov	r1, r4
 800bb28:	205c      	movs	r0, #92	; 0x5c
 800bb2a:	f002 ff6f 	bl	800ea0c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	1e5a      	subs	r2, r3, #1
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00f      	beq.n	800bb5e <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	3310      	adds	r3, #16
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 ff18 	bl	800c978 <xTaskRemoveFromEventList>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d007      	beq.n	800bb5e <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb4e:	4b4d      	ldr	r3, [pc, #308]	; (800bc84 <xQueueReceive+0x228>)
 800bb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb5e:	f001 fe99 	bl	800d894 <vPortExitCritical>
				return pdPASS;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e08a      	b.n	800bc7c <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d113      	bne.n	800bb94 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb6c:	f001 fe92 	bl	800d894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	4618      	mov	r0, r3
 800bb74:	f003 fb90 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bb78:	4604      	mov	r4, r0
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f003 fb8c 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bb80:	4602      	mov	r2, r0
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2101      	movs	r1, #1
 800bb86:	9100      	str	r1, [sp, #0]
 800bb88:	4621      	mov	r1, r4
 800bb8a:	205c      	movs	r0, #92	; 0x5c
 800bb8c:	f002 ff3e 	bl	800ea0c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800bb90:	2300      	movs	r3, #0
 800bb92:	e073      	b.n	800bc7c <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d106      	bne.n	800bba8 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb9a:	f107 0310 	add.w	r3, r7, #16
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 ff54 	bl	800ca4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bba4:	2301      	movs	r3, #1
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bba8:	f001 fe74 	bl	800d894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbac:	f000 fc80 	bl	800c4b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbb0:	f001 fe3c 	bl	800d82c <vPortEnterCritical>
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbba:	b25b      	sxtb	r3, r3
 800bbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc0:	d103      	bne.n	800bbca <xQueueReceive+0x16e>
 800bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbd0:	b25b      	sxtb	r3, r3
 800bbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd6:	d103      	bne.n	800bbe0 <xQueueReceive+0x184>
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbe0:	f001 fe58 	bl	800d894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbe4:	1d3a      	adds	r2, r7, #4
 800bbe6:	f107 0310 	add.w	r3, r7, #16
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 ff43 	bl	800ca78 <xTaskCheckForTimeOut>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d124      	bne.n	800bc42 <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfa:	f000 f927 	bl	800be4c <prvIsQueueEmpty>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d018      	beq.n	800bc36 <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	3324      	adds	r3, #36	; 0x24
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fe5d 	bl	800c8cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc14:	f000 f8c8 	bl	800bda8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc18:	f000 fc58 	bl	800c4cc <xTaskResumeAll>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f47f af69 	bne.w	800baf6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bc24:	4b17      	ldr	r3, [pc, #92]	; (800bc84 <xQueueReceive+0x228>)
 800bc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	e75f      	b.n	800baf6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc38:	f000 f8b6 	bl	800bda8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc3c:	f000 fc46 	bl	800c4cc <xTaskResumeAll>
 800bc40:	e759      	b.n	800baf6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc44:	f000 f8b0 	bl	800bda8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc48:	f000 fc40 	bl	800c4cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc4e:	f000 f8fd 	bl	800be4c <prvIsQueueEmpty>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f43f af4e 	beq.w	800baf6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f003 fb1b 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bc62:	4604      	mov	r4, r0
 800bc64:	2000      	movs	r0, #0
 800bc66:	f003 fb17 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2101      	movs	r1, #1
 800bc70:	9100      	str	r1, [sp, #0]
 800bc72:	4621      	mov	r1, r4
 800bc74:	205c      	movs	r0, #92	; 0x5c
 800bc76:	f002 fec9 	bl	800ea0c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800bc7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3734      	adds	r7, #52	; 0x34
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd90      	pop	{r4, r7, pc}
 800bc84:	e000ed04 	.word	0xe000ed04

0800bc88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc94:	2300      	movs	r3, #0
 800bc96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10d      	bne.n	800bcc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d14d      	bne.n	800bd4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f001 f884 	bl	800cdc0 <xTaskPriorityDisinherit>
 800bcb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	609a      	str	r2, [r3, #8]
 800bcc0:	e043      	b.n	800bd4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d119      	bne.n	800bcfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6858      	ldr	r0, [r3, #4]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	68b9      	ldr	r1, [r7, #8]
 800bcd4:	f003 fdc4 	bl	800f860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	441a      	add	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d32b      	bcc.n	800bd4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	605a      	str	r2, [r3, #4]
 800bcfa:	e026      	b.n	800bd4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68d8      	ldr	r0, [r3, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd04:	461a      	mov	r2, r3
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	f003 fdaa 	bl	800f860 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd14:	425b      	negs	r3, r3
 800bd16:	441a      	add	r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d207      	bcs.n	800bd38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	689a      	ldr	r2, [r3, #8]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd30:	425b      	negs	r3, r3
 800bd32:	441a      	add	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d105      	bne.n	800bd4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd52:	697b      	ldr	r3, [r7, #20]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d018      	beq.n	800bda0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	68da      	ldr	r2, [r3, #12]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	441a      	add	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d303      	bcc.n	800bd90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68d9      	ldr	r1, [r3, #12]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6838      	ldr	r0, [r7, #0]
 800bd9c:	f003 fd60 	bl	800f860 <memcpy>
	}
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bdb0:	f001 fd3c 	bl	800d82c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdbc:	e011      	b.n	800bde2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d012      	beq.n	800bdec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	3324      	adds	r3, #36	; 0x24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 fdd4 	bl	800c978 <xTaskRemoveFromEventList>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d001      	beq.n	800bdda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdd6:	f000 feb5 	bl	800cb44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dce9      	bgt.n	800bdbe <prvUnlockQueue+0x16>
 800bdea:	e000      	b.n	800bdee <prvUnlockQueue+0x46>
					break;
 800bdec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	22ff      	movs	r2, #255	; 0xff
 800bdf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bdf6:	f001 fd4d 	bl	800d894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bdfa:	f001 fd17 	bl	800d82c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be06:	e011      	b.n	800be2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d012      	beq.n	800be36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3310      	adds	r3, #16
 800be14:	4618      	mov	r0, r3
 800be16:	f000 fdaf 	bl	800c978 <xTaskRemoveFromEventList>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be20:	f000 fe90 	bl	800cb44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	3b01      	subs	r3, #1
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be30:	2b00      	cmp	r3, #0
 800be32:	dce9      	bgt.n	800be08 <prvUnlockQueue+0x60>
 800be34:	e000      	b.n	800be38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	22ff      	movs	r2, #255	; 0xff
 800be3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800be40:	f001 fd28 	bl	800d894 <vPortExitCritical>
}
 800be44:	bf00      	nop
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be54:	f001 fcea 	bl	800d82c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	e001      	b.n	800be6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be6a:	f001 fd13 	bl	800d894 <vPortExitCritical>

	return xReturn;
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be80:	f001 fcd4 	bl	800d82c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d102      	bne.n	800be96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be90:	2301      	movs	r3, #1
 800be92:	60fb      	str	r3, [r7, #12]
 800be94:	e001      	b.n	800be9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be9a:	f001 fcfb 	bl	800d894 <vPortExitCritical>

	return xReturn;
 800be9e:	68fb      	ldr	r3, [r7, #12]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e01e      	b.n	800bef6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800beb8:	4a13      	ldr	r2, [pc, #76]	; (800bf08 <vQueueAddToRegistry+0x60>)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d115      	bne.n	800bef0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bec4:	4910      	ldr	r1, [pc, #64]	; (800bf08 <vQueueAddToRegistry+0x60>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bece:	4a0e      	ldr	r2, [pc, #56]	; (800bf08 <vQueueAddToRegistry+0x60>)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	4413      	add	r3, r2
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	f003 f9db 	bl	800f298 <SEGGER_SYSVIEW_ShrinkId>
 800bee2:	4601      	mov	r1, r0
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	2071      	movs	r0, #113	; 0x71
 800beea:	f002 fcbf 	bl	800e86c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800beee:	e006      	b.n	800befe <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3301      	adds	r3, #1
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b07      	cmp	r3, #7
 800befa:	d9dd      	bls.n	800beb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800befc:	bf00      	nop
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200012ac 	.word	0x200012ac

0800bf0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf1c:	f001 fc86 	bl	800d82c <vPortEnterCritical>
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d103      	bne.n	800bf36 <vQueueWaitForMessageRestricted+0x2a>
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf3c:	b25b      	sxtb	r3, r3
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf42:	d103      	bne.n	800bf4c <vQueueWaitForMessageRestricted+0x40>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf4c:	f001 fca2 	bl	800d894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	3324      	adds	r3, #36	; 0x24
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fcd9 	bl	800c918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf66:	6978      	ldr	r0, [r7, #20]
 800bf68:	f7ff ff1e 	bl	800bda8 <prvUnlockQueue>
	}
 800bf6c:	bf00      	nop
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08e      	sub	sp, #56	; 0x38
 800bf78:	af04      	add	r7, sp, #16
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10c      	bne.n	800bfa2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	b672      	cpsid	i
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	b662      	cpsie	i
 800bf9c:	623b      	str	r3, [r7, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10c      	bne.n	800bfc2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	b672      	cpsid	i
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	b662      	cpsie	i
 800bfbc:	61fb      	str	r3, [r7, #28]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfc2:	23bc      	movs	r3, #188	; 0xbc
 800bfc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2bbc      	cmp	r3, #188	; 0xbc
 800bfca:	d00c      	beq.n	800bfe6 <xTaskCreateStatic+0x72>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
 800bfe0:	61bb      	str	r3, [r7, #24]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d01e      	beq.n	800c02c <xTaskCreateStatic+0xb8>
 800bfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d01b      	beq.n	800c02c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bffc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	2202      	movs	r2, #2
 800c002:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c006:	2300      	movs	r3, #0
 800c008:	9303      	str	r3, [sp, #12]
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	9302      	str	r3, [sp, #8]
 800c00e:	f107 0314 	add.w	r3, r7, #20
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f000 f850 	bl	800c0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c026:	f000 f8f5 	bl	800c214 <prvAddNewTaskToReadyList>
 800c02a:	e001      	b.n	800c030 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c030:	697b      	ldr	r3, [r7, #20]
	}
 800c032:	4618      	mov	r0, r3
 800c034:	3728      	adds	r7, #40	; 0x28
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b08c      	sub	sp, #48	; 0x30
 800c03e:	af04      	add	r7, sp, #16
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	603b      	str	r3, [r7, #0]
 800c046:	4613      	mov	r3, r2
 800c048:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c04a:	88fb      	ldrh	r3, [r7, #6]
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4618      	mov	r0, r3
 800c050:	f001 fd18 	bl	800da84 <pvPortMalloc>
 800c054:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00e      	beq.n	800c07a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c05c:	20bc      	movs	r0, #188	; 0xbc
 800c05e:	f001 fd11 	bl	800da84 <pvPortMalloc>
 800c062:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	631a      	str	r2, [r3, #48]	; 0x30
 800c070:	e005      	b.n	800c07e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c072:	6978      	ldr	r0, [r7, #20]
 800c074:	f001 fdd0 	bl	800dc18 <vPortFree>
 800c078:	e001      	b.n	800c07e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d017      	beq.n	800c0b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c08c:	88fa      	ldrh	r2, [r7, #6]
 800c08e:	2300      	movs	r3, #0
 800c090:	9303      	str	r3, [sp, #12]
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	9302      	str	r3, [sp, #8]
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	9301      	str	r3, [sp, #4]
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 f80e 	bl	800c0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0a8:	69f8      	ldr	r0, [r7, #28]
 800c0aa:	f000 f8b3 	bl	800c214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	61bb      	str	r3, [r7, #24]
 800c0b2:	e002      	b.n	800c0ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0ba:	69bb      	ldr	r3, [r7, #24]
	}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3720      	adds	r7, #32
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	461a      	mov	r2, r3
 800c0dc:	21a5      	movs	r1, #165	; 0xa5
 800c0de:	f003 fbcd 	bl	800f87c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c0ec:	440b      	add	r3, r1
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	f023 0307 	bic.w	r3, r3, #7
 800c0fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00c      	beq.n	800c120 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	b672      	cpsid	i
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	b662      	cpsie	i
 800c11a:	617b      	str	r3, [r7, #20]
}
 800c11c:	bf00      	nop
 800c11e:	e7fe      	b.n	800c11e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d01f      	beq.n	800c166 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c126:	2300      	movs	r3, #0
 800c128:	61fb      	str	r3, [r7, #28]
 800c12a:	e012      	b.n	800c152 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	4413      	add	r3, r2
 800c132:	7819      	ldrb	r1, [r3, #0]
 800c134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	4413      	add	r3, r2
 800c13a:	3334      	adds	r3, #52	; 0x34
 800c13c:	460a      	mov	r2, r1
 800c13e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	4413      	add	r3, r2
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d006      	beq.n	800c15a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	3301      	adds	r3, #1
 800c150:	61fb      	str	r3, [r7, #28]
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	2b0f      	cmp	r3, #15
 800c156:	d9e9      	bls.n	800c12c <prvInitialiseNewTask+0x68>
 800c158:	e000      	b.n	800c15c <prvInitialiseNewTask+0x98>
			{
				break;
 800c15a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c164:	e003      	b.n	800c16e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c170:	2b37      	cmp	r3, #55	; 0x37
 800c172:	d901      	bls.n	800c178 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c174:	2337      	movs	r3, #55	; 0x37
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c17c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	2200      	movs	r2, #0
 800c188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	3304      	adds	r3, #4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff f8d8 	bl	800b344 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	3318      	adds	r3, #24
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff f8d3 	bl	800b344 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	3354      	adds	r3, #84	; 0x54
 800c1c8:	2260      	movs	r2, #96	; 0x60
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f003 fb55 	bl	800f87c <memset>
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	4a0c      	ldr	r2, [pc, #48]	; (800c208 <prvInitialiseNewTask+0x144>)
 800c1d6:	659a      	str	r2, [r3, #88]	; 0x58
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	4a0c      	ldr	r2, [pc, #48]	; (800c20c <prvInitialiseNewTask+0x148>)
 800c1dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	4a0b      	ldr	r2, [pc, #44]	; (800c210 <prvInitialiseNewTask+0x14c>)
 800c1e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	68f9      	ldr	r1, [r7, #12]
 800c1e8:	69b8      	ldr	r0, [r7, #24]
 800c1ea:	f001 fa13 	bl	800d614 <pxPortInitialiseStack>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c200:	bf00      	nop
 800c202:	3720      	adds	r7, #32
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	0800ff50 	.word	0x0800ff50
 800c20c:	0800ff70 	.word	0x0800ff70
 800c210:	0800ff30 	.word	0x0800ff30

0800c214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c214:	b5b0      	push	{r4, r5, r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af02      	add	r7, sp, #8
 800c21a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c21c:	f001 fb06 	bl	800d82c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c220:	4b3c      	ldr	r3, [pc, #240]	; (800c314 <prvAddNewTaskToReadyList+0x100>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3301      	adds	r3, #1
 800c226:	4a3b      	ldr	r2, [pc, #236]	; (800c314 <prvAddNewTaskToReadyList+0x100>)
 800c228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c22a:	4b3b      	ldr	r3, [pc, #236]	; (800c318 <prvAddNewTaskToReadyList+0x104>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d109      	bne.n	800c246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c232:	4a39      	ldr	r2, [pc, #228]	; (800c318 <prvAddNewTaskToReadyList+0x104>)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c238:	4b36      	ldr	r3, [pc, #216]	; (800c314 <prvAddNewTaskToReadyList+0x100>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d110      	bne.n	800c262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c240:	f000 fca4 	bl	800cb8c <prvInitialiseTaskLists>
 800c244:	e00d      	b.n	800c262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c246:	4b35      	ldr	r3, [pc, #212]	; (800c31c <prvAddNewTaskToReadyList+0x108>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c24e:	4b32      	ldr	r3, [pc, #200]	; (800c318 <prvAddNewTaskToReadyList+0x104>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	429a      	cmp	r2, r3
 800c25a:	d802      	bhi.n	800c262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c25c:	4a2e      	ldr	r2, [pc, #184]	; (800c318 <prvAddNewTaskToReadyList+0x104>)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c262:	4b2f      	ldr	r3, [pc, #188]	; (800c320 <prvAddNewTaskToReadyList+0x10c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3301      	adds	r3, #1
 800c268:	4a2d      	ldr	r2, [pc, #180]	; (800c320 <prvAddNewTaskToReadyList+0x10c>)
 800c26a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c26c:	4b2c      	ldr	r3, [pc, #176]	; (800c320 <prvAddNewTaskToReadyList+0x10c>)
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d016      	beq.n	800c2a8 <prvAddNewTaskToReadyList+0x94>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f002 ff3f 	bl	800f100 <SEGGER_SYSVIEW_OnTaskCreate>
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c292:	461d      	mov	r5, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	461c      	mov	r4, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29e:	1ae3      	subs	r3, r4, r3
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	462b      	mov	r3, r5
 800c2a4:	f003 fa1c 	bl	800f6e0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f002 ffb0 	bl	800f210 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b4:	4b1b      	ldr	r3, [pc, #108]	; (800c324 <prvAddNewTaskToReadyList+0x110>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d903      	bls.n	800c2c4 <prvAddNewTaskToReadyList+0xb0>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	4a18      	ldr	r2, [pc, #96]	; (800c324 <prvAddNewTaskToReadyList+0x110>)
 800c2c2:	6013      	str	r3, [r2, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4a15      	ldr	r2, [pc, #84]	; (800c328 <prvAddNewTaskToReadyList+0x114>)
 800c2d2:	441a      	add	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7ff f83f 	bl	800b35e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2e0:	f001 fad8 	bl	800d894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <prvAddNewTaskToReadyList+0x108>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00e      	beq.n	800c30a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	; (800c318 <prvAddNewTaskToReadyList+0x104>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d207      	bcs.n	800c30a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2fa:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <prvAddNewTaskToReadyList+0x118>)
 800c2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bdb0      	pop	{r4, r5, r7, pc}
 800c312:	bf00      	nop
 800c314:	200017c0 	.word	0x200017c0
 800c318:	200012ec 	.word	0x200012ec
 800c31c:	200017cc 	.word	0x200017cc
 800c320:	200017dc 	.word	0x200017dc
 800c324:	200017c8 	.word	0x200017c8
 800c328:	200012f0 	.word	0x200012f0
 800c32c:	e000ed04 	.word	0xe000ed04

0800c330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01d      	beq.n	800c37e <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <vTaskDelay+0x6c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00c      	beq.n	800c364 <vTaskDelay+0x34>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	b672      	cpsid	i
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	b662      	cpsie	i
 800c35e:	60bb      	str	r3, [r7, #8]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c364:	f000 f8a4 	bl	800c4b0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800c368:	6879      	ldr	r1, [r7, #4]
 800c36a:	2023      	movs	r0, #35	; 0x23
 800c36c:	f002 fa42 	bl	800e7f4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c370:	2100      	movs	r1, #0
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fd9e 	bl	800ceb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c378:	f000 f8a8 	bl	800c4cc <xTaskResumeAll>
 800c37c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d107      	bne.n	800c394 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 800c384:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <vTaskDelay+0x70>)
 800c386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c394:	bf00      	nop
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	200017e8 	.word	0x200017e8
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08a      	sub	sp, #40	; 0x28
 800c3a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3b2:	463a      	mov	r2, r7
 800c3b4:	1d39      	adds	r1, r7, #4
 800c3b6:	f107 0308 	add.w	r3, r7, #8
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe ff6e 	bl	800b29c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	9202      	str	r2, [sp, #8]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	460a      	mov	r2, r1
 800c3d2:	492f      	ldr	r1, [pc, #188]	; (800c490 <vTaskStartScheduler+0xec>)
 800c3d4:	482f      	ldr	r0, [pc, #188]	; (800c494 <vTaskStartScheduler+0xf0>)
 800c3d6:	f7ff fdcd 	bl	800bf74 <xTaskCreateStatic>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4a2e      	ldr	r2, [pc, #184]	; (800c498 <vTaskStartScheduler+0xf4>)
 800c3de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3e0:	4b2d      	ldr	r3, [pc, #180]	; (800c498 <vTaskStartScheduler+0xf4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	617b      	str	r3, [r7, #20]
 800c3ec:	e001      	b.n	800c3f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d102      	bne.n	800c3fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c3f8:	f000 fdb0 	bl	800cf5c <xTimerCreateTimerTask>
 800c3fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d130      	bne.n	800c466 <vTaskStartScheduler+0xc2>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	b672      	cpsid	i
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	b662      	cpsie	i
 800c418:	613b      	str	r3, [r7, #16]
}
 800c41a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c41c:	4b1f      	ldr	r3, [pc, #124]	; (800c49c <vTaskStartScheduler+0xf8>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3354      	adds	r3, #84	; 0x54
 800c422:	4a1f      	ldr	r2, [pc, #124]	; (800c4a0 <vTaskStartScheduler+0xfc>)
 800c424:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c426:	4b1f      	ldr	r3, [pc, #124]	; (800c4a4 <vTaskStartScheduler+0x100>)
 800c428:	f04f 32ff 	mov.w	r2, #4294967295
 800c42c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c42e:	4b1e      	ldr	r3, [pc, #120]	; (800c4a8 <vTaskStartScheduler+0x104>)
 800c430:	2201      	movs	r2, #1
 800c432:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c434:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <vTaskStartScheduler+0x108>)
 800c436:	2200      	movs	r2, #0
 800c438:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800c43a:	4b18      	ldr	r3, [pc, #96]	; (800c49c <vTaskStartScheduler+0xf8>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3334      	adds	r3, #52	; 0x34
 800c440:	2205      	movs	r2, #5
 800c442:	4913      	ldr	r1, [pc, #76]	; (800c490 <vTaskStartScheduler+0xec>)
 800c444:	4618      	mov	r0, r3
 800c446:	f003 f9fb 	bl	800f840 <memcmp>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <vTaskStartScheduler+0xb8>
 800c450:	4b12      	ldr	r3, [pc, #72]	; (800c49c <vTaskStartScheduler+0xf8>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4618      	mov	r0, r3
 800c456:	f002 fe97 	bl	800f188 <SEGGER_SYSVIEW_OnTaskStartExec>
 800c45a:	e001      	b.n	800c460 <vTaskStartScheduler+0xbc>
 800c45c:	f002 fe34 	bl	800f0c8 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c460:	f001 f966 	bl	800d730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c464:	e010      	b.n	800c488 <vTaskStartScheduler+0xe4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46c:	d10c      	bne.n	800c488 <vTaskStartScheduler+0xe4>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	b672      	cpsid	i
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	b662      	cpsie	i
 800c482:	60fb      	str	r3, [r7, #12]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <vTaskStartScheduler+0xe2>
}
 800c488:	bf00      	nop
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	0800fe04 	.word	0x0800fe04
 800c494:	0800cb5d 	.word	0x0800cb5d
 800c498:	200017e4 	.word	0x200017e4
 800c49c:	200012ec 	.word	0x200012ec
 800c4a0:	20000014 	.word	0x20000014
 800c4a4:	200017e0 	.word	0x200017e0
 800c4a8:	200017cc 	.word	0x200017cc
 800c4ac:	200017c4 	.word	0x200017c4

0800c4b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c4b4:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <vTaskSuspendAll+0x18>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	4a03      	ldr	r2, [pc, #12]	; (800c4c8 <vTaskSuspendAll+0x18>)
 800c4bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c4be:	bf00      	nop
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr
 800c4c8:	200017e8 	.word	0x200017e8

0800c4cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4da:	4b45      	ldr	r3, [pc, #276]	; (800c5f0 <xTaskResumeAll+0x124>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10c      	bne.n	800c4fc <xTaskResumeAll+0x30>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	b672      	cpsid	i
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	b662      	cpsie	i
 800c4f6:	603b      	str	r3, [r7, #0]
}
 800c4f8:	bf00      	nop
 800c4fa:	e7fe      	b.n	800c4fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4fc:	f001 f996 	bl	800d82c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c500:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <xTaskResumeAll+0x124>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3b01      	subs	r3, #1
 800c506:	4a3a      	ldr	r2, [pc, #232]	; (800c5f0 <xTaskResumeAll+0x124>)
 800c508:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c50a:	4b39      	ldr	r3, [pc, #228]	; (800c5f0 <xTaskResumeAll+0x124>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d166      	bne.n	800c5e0 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c512:	4b38      	ldr	r3, [pc, #224]	; (800c5f4 <xTaskResumeAll+0x128>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d062      	beq.n	800c5e0 <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c51a:	e033      	b.n	800c584 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c51c:	4b36      	ldr	r3, [pc, #216]	; (800c5f8 <xTaskResumeAll+0x12c>)
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3318      	adds	r3, #24
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe ff75 	bl	800b418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3304      	adds	r3, #4
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe ff70 	bl	800b418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f002 fe68 	bl	800f210 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c544:	4b2d      	ldr	r3, [pc, #180]	; (800c5fc <xTaskResumeAll+0x130>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d903      	bls.n	800c554 <xTaskResumeAll+0x88>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c550:	4a2a      	ldr	r2, [pc, #168]	; (800c5fc <xTaskResumeAll+0x130>)
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4a27      	ldr	r2, [pc, #156]	; (800c600 <xTaskResumeAll+0x134>)
 800c562:	441a      	add	r2, r3
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7fe fef7 	bl	800b35e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c574:	4b23      	ldr	r3, [pc, #140]	; (800c604 <xTaskResumeAll+0x138>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d302      	bcc.n	800c584 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 800c57e:	4b22      	ldr	r3, [pc, #136]	; (800c608 <xTaskResumeAll+0x13c>)
 800c580:	2201      	movs	r2, #1
 800c582:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c584:	4b1c      	ldr	r3, [pc, #112]	; (800c5f8 <xTaskResumeAll+0x12c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1c7      	bne.n	800c51c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c592:	f000 fbd7 	bl	800cd44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c596:	4b1d      	ldr	r3, [pc, #116]	; (800c60c <xTaskResumeAll+0x140>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d010      	beq.n	800c5c4 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5a2:	f000 f859 	bl	800c658 <xTaskIncrementTick>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 800c5ac:	4b16      	ldr	r3, [pc, #88]	; (800c608 <xTaskResumeAll+0x13c>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1f1      	bne.n	800c5a2 <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <xTaskResumeAll+0x140>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5c4:	4b10      	ldr	r3, [pc, #64]	; (800c608 <xTaskResumeAll+0x13c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d009      	beq.n	800c5e0 <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <xTaskResumeAll+0x144>)
 800c5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e0:	f001 f958 	bl	800d894 <vPortExitCritical>

	return xAlreadyYielded;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	200017e8 	.word	0x200017e8
 800c5f4:	200017c0 	.word	0x200017c0
 800c5f8:	20001780 	.word	0x20001780
 800c5fc:	200017c8 	.word	0x200017c8
 800c600:	200012f0 	.word	0x200012f0
 800c604:	200012ec 	.word	0x200012ec
 800c608:	200017d4 	.word	0x200017d4
 800c60c:	200017d0 	.word	0x200017d0
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c61a:	4b05      	ldr	r3, [pc, #20]	; (800c630 <xTaskGetTickCount+0x1c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c620:	687b      	ldr	r3, [r7, #4]
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	200017c4 	.word	0x200017c4

0800c634 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c63a:	f001 f9df 	bl	800d9fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c63e:	2300      	movs	r3, #0
 800c640:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c642:	4b04      	ldr	r3, [pc, #16]	; (800c654 <xTaskGetTickCountFromISR+0x20>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c648:	683b      	ldr	r3, [r7, #0]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	200017c4 	.word	0x200017c4

0800c658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c662:	4b52      	ldr	r3, [pc, #328]	; (800c7ac <xTaskIncrementTick+0x154>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	f040 808f 	bne.w	800c78a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c66c:	4b50      	ldr	r3, [pc, #320]	; (800c7b0 <xTaskIncrementTick+0x158>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3301      	adds	r3, #1
 800c672:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c674:	4a4e      	ldr	r2, [pc, #312]	; (800c7b0 <xTaskIncrementTick+0x158>)
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d122      	bne.n	800c6c6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c680:	4b4c      	ldr	r3, [pc, #304]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00c      	beq.n	800c6a4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	b672      	cpsid	i
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	b662      	cpsie	i
 800c69e:	603b      	str	r3, [r7, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <xTaskIncrementTick+0x4a>
 800c6a4:	4b43      	ldr	r3, [pc, #268]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	4b43      	ldr	r3, [pc, #268]	; (800c7b8 <xTaskIncrementTick+0x160>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a41      	ldr	r2, [pc, #260]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	4a41      	ldr	r2, [pc, #260]	; (800c7b8 <xTaskIncrementTick+0x160>)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	4b40      	ldr	r3, [pc, #256]	; (800c7bc <xTaskIncrementTick+0x164>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	4a3f      	ldr	r2, [pc, #252]	; (800c7bc <xTaskIncrementTick+0x164>)
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	f000 fb3f 	bl	800cd44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6c6:	4b3e      	ldr	r3, [pc, #248]	; (800c7c0 <xTaskIncrementTick+0x168>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d34d      	bcc.n	800c76c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6d0:	4b38      	ldr	r3, [pc, #224]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d104      	bne.n	800c6e4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6da:	4b39      	ldr	r3, [pc, #228]	; (800c7c0 <xTaskIncrementTick+0x168>)
 800c6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e0:	601a      	str	r2, [r3, #0]
					break;
 800c6e2:	e043      	b.n	800c76c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e4:	4b33      	ldr	r3, [pc, #204]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d203      	bcs.n	800c704 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6fc:	4a30      	ldr	r2, [pc, #192]	; (800c7c0 <xTaskIncrementTick+0x168>)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c702:	e033      	b.n	800c76c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	3304      	adds	r3, #4
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fe85 	bl	800b418 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c712:	2b00      	cmp	r3, #0
 800c714:	d004      	beq.n	800c720 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	3318      	adds	r3, #24
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe fe7c 	bl	800b418 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4618      	mov	r0, r3
 800c724:	f002 fd74 	bl	800f210 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72c:	4b25      	ldr	r3, [pc, #148]	; (800c7c4 <xTaskIncrementTick+0x16c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d903      	bls.n	800c73c <xTaskIncrementTick+0xe4>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	4a22      	ldr	r2, [pc, #136]	; (800c7c4 <xTaskIncrementTick+0x16c>)
 800c73a:	6013      	str	r3, [r2, #0]
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c740:	4613      	mov	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4a1f      	ldr	r2, [pc, #124]	; (800c7c8 <xTaskIncrementTick+0x170>)
 800c74a:	441a      	add	r2, r3
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	3304      	adds	r3, #4
 800c750:	4619      	mov	r1, r3
 800c752:	4610      	mov	r0, r2
 800c754:	f7fe fe03 	bl	800b35e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75c:	4b1b      	ldr	r3, [pc, #108]	; (800c7cc <xTaskIncrementTick+0x174>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c762:	429a      	cmp	r2, r3
 800c764:	d3b4      	bcc.n	800c6d0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c766:	2301      	movs	r3, #1
 800c768:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c76a:	e7b1      	b.n	800c6d0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c76c:	4b17      	ldr	r3, [pc, #92]	; (800c7cc <xTaskIncrementTick+0x174>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c772:	4915      	ldr	r1, [pc, #84]	; (800c7c8 <xTaskIncrementTick+0x170>)
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	440b      	add	r3, r1
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d907      	bls.n	800c794 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c784:	2301      	movs	r3, #1
 800c786:	617b      	str	r3, [r7, #20]
 800c788:	e004      	b.n	800c794 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c78a:	4b11      	ldr	r3, [pc, #68]	; (800c7d0 <xTaskIncrementTick+0x178>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	4a0f      	ldr	r2, [pc, #60]	; (800c7d0 <xTaskIncrementTick+0x178>)
 800c792:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c794:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <xTaskIncrementTick+0x17c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c7a0:	697b      	ldr	r3, [r7, #20]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200017e8 	.word	0x200017e8
 800c7b0:	200017c4 	.word	0x200017c4
 800c7b4:	20001778 	.word	0x20001778
 800c7b8:	2000177c 	.word	0x2000177c
 800c7bc:	200017d8 	.word	0x200017d8
 800c7c0:	200017e0 	.word	0x200017e0
 800c7c4:	200017c8 	.word	0x200017c8
 800c7c8:	200012f0 	.word	0x200012f0
 800c7cc:	200012ec 	.word	0x200012ec
 800c7d0:	200017d0 	.word	0x200017d0
 800c7d4:	200017d4 	.word	0x200017d4

0800c7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7de:	4b34      	ldr	r3, [pc, #208]	; (800c8b0 <vTaskSwitchContext+0xd8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7e6:	4b33      	ldr	r3, [pc, #204]	; (800c8b4 <vTaskSwitchContext+0xdc>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7ec:	e05b      	b.n	800c8a6 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 800c7ee:	4b31      	ldr	r3, [pc, #196]	; (800c8b4 <vTaskSwitchContext+0xdc>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f4:	4b30      	ldr	r3, [pc, #192]	; (800c8b8 <vTaskSwitchContext+0xe0>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	e012      	b.n	800c822 <vTaskSwitchContext+0x4a>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10c      	bne.n	800c81c <vTaskSwitchContext+0x44>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c806:	b672      	cpsid	i
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	b662      	cpsie	i
 800c816:	607b      	str	r3, [r7, #4]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <vTaskSwitchContext+0x42>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3b01      	subs	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	4926      	ldr	r1, [pc, #152]	; (800c8bc <vTaskSwitchContext+0xe4>)
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	440b      	add	r3, r1
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d0e2      	beq.n	800c7fc <vTaskSwitchContext+0x24>
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4613      	mov	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4a1e      	ldr	r2, [pc, #120]	; (800c8bc <vTaskSwitchContext+0xe4>)
 800c842:	4413      	add	r3, r2
 800c844:	60bb      	str	r3, [r7, #8]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	605a      	str	r2, [r3, #4]
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	3308      	adds	r3, #8
 800c858:	429a      	cmp	r2, r3
 800c85a:	d104      	bne.n	800c866 <vTaskSwitchContext+0x8e>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	605a      	str	r2, [r3, #4]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	4a14      	ldr	r2, [pc, #80]	; (800c8c0 <vTaskSwitchContext+0xe8>)
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	4a11      	ldr	r2, [pc, #68]	; (800c8b8 <vTaskSwitchContext+0xe0>)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800c876:	4b12      	ldr	r3, [pc, #72]	; (800c8c0 <vTaskSwitchContext+0xe8>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3334      	adds	r3, #52	; 0x34
 800c87c:	2205      	movs	r2, #5
 800c87e:	4911      	ldr	r1, [pc, #68]	; (800c8c4 <vTaskSwitchContext+0xec>)
 800c880:	4618      	mov	r0, r3
 800c882:	f002 ffdd 	bl	800f840 <memcmp>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d005      	beq.n	800c898 <vTaskSwitchContext+0xc0>
 800c88c:	4b0c      	ldr	r3, [pc, #48]	; (800c8c0 <vTaskSwitchContext+0xe8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4618      	mov	r0, r3
 800c892:	f002 fc79 	bl	800f188 <SEGGER_SYSVIEW_OnTaskStartExec>
 800c896:	e001      	b.n	800c89c <vTaskSwitchContext+0xc4>
 800c898:	f002 fc16 	bl	800f0c8 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c89c:	4b08      	ldr	r3, [pc, #32]	; (800c8c0 <vTaskSwitchContext+0xe8>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3354      	adds	r3, #84	; 0x54
 800c8a2:	4a09      	ldr	r2, [pc, #36]	; (800c8c8 <vTaskSwitchContext+0xf0>)
 800c8a4:	6013      	str	r3, [r2, #0]
}
 800c8a6:	bf00      	nop
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	200017e8 	.word	0x200017e8
 800c8b4:	200017d4 	.word	0x200017d4
 800c8b8:	200017c8 	.word	0x200017c8
 800c8bc:	200012f0 	.word	0x200012f0
 800c8c0:	200012ec 	.word	0x200012ec
 800c8c4:	0800fe04 	.word	0x0800fe04
 800c8c8:	20000014 	.word	0x20000014

0800c8cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10c      	bne.n	800c8f6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	b672      	cpsid	i
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	b662      	cpsie	i
 800c8f0:	60fb      	str	r3, [r7, #12]
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8f6:	4b07      	ldr	r3, [pc, #28]	; (800c914 <vTaskPlaceOnEventList+0x48>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3318      	adds	r3, #24
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7fe fd51 	bl	800b3a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c904:	2101      	movs	r1, #1
 800c906:	6838      	ldr	r0, [r7, #0]
 800c908:	f000 fad4 	bl	800ceb4 <prvAddCurrentTaskToDelayedList>
}
 800c90c:	bf00      	nop
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	200012ec 	.word	0x200012ec

0800c918 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10c      	bne.n	800c944 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	b672      	cpsid	i
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	b662      	cpsie	i
 800c93e:	617b      	str	r3, [r7, #20]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c944:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <vTaskPlaceOnEventListRestricted+0x5c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3318      	adds	r3, #24
 800c94a:	4619      	mov	r1, r3
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7fe fd06 	bl	800b35e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d002      	beq.n	800c95e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c958:	f04f 33ff 	mov.w	r3, #4294967295
 800c95c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800c95e:	2024      	movs	r0, #36	; 0x24
 800c960:	f001 ff2a 	bl	800e7b8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c964:	6879      	ldr	r1, [r7, #4]
 800c966:	68b8      	ldr	r0, [r7, #8]
 800c968:	f000 faa4 	bl	800ceb4 <prvAddCurrentTaskToDelayedList>
	}
 800c96c:	bf00      	nop
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	200012ec 	.word	0x200012ec

0800c978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10c      	bne.n	800c9a8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	b672      	cpsid	i
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	b662      	cpsie	i
 800c9a2:	60fb      	str	r3, [r7, #12]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	3318      	adds	r3, #24
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fe fd33 	bl	800b418 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9b2:	4b20      	ldr	r3, [pc, #128]	; (800ca34 <xTaskRemoveFromEventList+0xbc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d121      	bne.n	800c9fe <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe fd2a 	bl	800b418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f002 fc22 	bl	800f210 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d0:	4b19      	ldr	r3, [pc, #100]	; (800ca38 <xTaskRemoveFromEventList+0xc0>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d903      	bls.n	800c9e0 <xTaskRemoveFromEventList+0x68>
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9dc:	4a16      	ldr	r2, [pc, #88]	; (800ca38 <xTaskRemoveFromEventList+0xc0>)
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4a13      	ldr	r2, [pc, #76]	; (800ca3c <xTaskRemoveFromEventList+0xc4>)
 800c9ee:	441a      	add	r2, r3
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	f7fe fcb1 	bl	800b35e <vListInsertEnd>
 800c9fc:	e005      	b.n	800ca0a <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	3318      	adds	r3, #24
 800ca02:	4619      	mov	r1, r3
 800ca04:	480e      	ldr	r0, [pc, #56]	; (800ca40 <xTaskRemoveFromEventList+0xc8>)
 800ca06:	f7fe fcaa 	bl	800b35e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0e:	4b0d      	ldr	r3, [pc, #52]	; (800ca44 <xTaskRemoveFromEventList+0xcc>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d905      	bls.n	800ca24 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <xTaskRemoveFromEventList+0xd0>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	e001      	b.n	800ca28 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800ca24:	2300      	movs	r3, #0
 800ca26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca28:	697b      	ldr	r3, [r7, #20]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	200017e8 	.word	0x200017e8
 800ca38:	200017c8 	.word	0x200017c8
 800ca3c:	200012f0 	.word	0x200012f0
 800ca40:	20001780 	.word	0x20001780
 800ca44:	200012ec 	.word	0x200012ec
 800ca48:	200017d4 	.word	0x200017d4

0800ca4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca54:	4b06      	ldr	r3, [pc, #24]	; (800ca70 <vTaskInternalSetTimeOutState+0x24>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca5c:	4b05      	ldr	r3, [pc, #20]	; (800ca74 <vTaskInternalSetTimeOutState+0x28>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	605a      	str	r2, [r3, #4]
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	200017d8 	.word	0x200017d8
 800ca74:	200017c4 	.word	0x200017c4

0800ca78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b088      	sub	sp, #32
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10c      	bne.n	800caa2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	b672      	cpsid	i
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	b662      	cpsie	i
 800ca9c:	613b      	str	r3, [r7, #16]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10c      	bne.n	800cac2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	b672      	cpsid	i
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	b662      	cpsie	i
 800cabc:	60fb      	str	r3, [r7, #12]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cac2:	f000 feb3 	bl	800d82c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cac6:	4b1d      	ldr	r3, [pc, #116]	; (800cb3c <xTaskCheckForTimeOut+0xc4>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cade:	d102      	bne.n	800cae6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cae0:	2300      	movs	r3, #0
 800cae2:	61fb      	str	r3, [r7, #28]
 800cae4:	e023      	b.n	800cb2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b15      	ldr	r3, [pc, #84]	; (800cb40 <xTaskCheckForTimeOut+0xc8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d007      	beq.n	800cb02 <xTaskCheckForTimeOut+0x8a>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d302      	bcc.n	800cb02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cafc:	2301      	movs	r3, #1
 800cafe:	61fb      	str	r3, [r7, #28]
 800cb00:	e015      	b.n	800cb2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d20b      	bcs.n	800cb24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	1ad2      	subs	r2, r2, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f7ff ff97 	bl	800ca4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61fb      	str	r3, [r7, #28]
 800cb22:	e004      	b.n	800cb2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb2e:	f000 feb1 	bl	800d894 <vPortExitCritical>

	return xReturn;
 800cb32:	69fb      	ldr	r3, [r7, #28]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3720      	adds	r7, #32
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	200017c4 	.word	0x200017c4
 800cb40:	200017d8 	.word	0x200017d8

0800cb44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb44:	b480      	push	{r7}
 800cb46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb48:	4b03      	ldr	r3, [pc, #12]	; (800cb58 <vTaskMissedYield+0x14>)
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	601a      	str	r2, [r3, #0]
}
 800cb4e:	bf00      	nop
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	200017d4 	.word	0x200017d4

0800cb5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb64:	f000 f852 	bl	800cc0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb68:	4b06      	ldr	r3, [pc, #24]	; (800cb84 <prvIdleTask+0x28>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d9f9      	bls.n	800cb64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb70:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <prvIdleTask+0x2c>)
 800cb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb80:	e7f0      	b.n	800cb64 <prvIdleTask+0x8>
 800cb82:	bf00      	nop
 800cb84:	200012f0 	.word	0x200012f0
 800cb88:	e000ed04 	.word	0xe000ed04

0800cb8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb92:	2300      	movs	r3, #0
 800cb94:	607b      	str	r3, [r7, #4]
 800cb96:	e00c      	b.n	800cbb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4a12      	ldr	r2, [pc, #72]	; (800cbec <prvInitialiseTaskLists+0x60>)
 800cba4:	4413      	add	r3, r2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe fbac 	bl	800b304 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	607b      	str	r3, [r7, #4]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b37      	cmp	r3, #55	; 0x37
 800cbb6:	d9ef      	bls.n	800cb98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cbb8:	480d      	ldr	r0, [pc, #52]	; (800cbf0 <prvInitialiseTaskLists+0x64>)
 800cbba:	f7fe fba3 	bl	800b304 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cbbe:	480d      	ldr	r0, [pc, #52]	; (800cbf4 <prvInitialiseTaskLists+0x68>)
 800cbc0:	f7fe fba0 	bl	800b304 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cbc4:	480c      	ldr	r0, [pc, #48]	; (800cbf8 <prvInitialiseTaskLists+0x6c>)
 800cbc6:	f7fe fb9d 	bl	800b304 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cbca:	480c      	ldr	r0, [pc, #48]	; (800cbfc <prvInitialiseTaskLists+0x70>)
 800cbcc:	f7fe fb9a 	bl	800b304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbd0:	480b      	ldr	r0, [pc, #44]	; (800cc00 <prvInitialiseTaskLists+0x74>)
 800cbd2:	f7fe fb97 	bl	800b304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <prvInitialiseTaskLists+0x78>)
 800cbd8:	4a05      	ldr	r2, [pc, #20]	; (800cbf0 <prvInitialiseTaskLists+0x64>)
 800cbda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <prvInitialiseTaskLists+0x7c>)
 800cbde:	4a05      	ldr	r2, [pc, #20]	; (800cbf4 <prvInitialiseTaskLists+0x68>)
 800cbe0:	601a      	str	r2, [r3, #0]
}
 800cbe2:	bf00      	nop
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200012f0 	.word	0x200012f0
 800cbf0:	20001750 	.word	0x20001750
 800cbf4:	20001764 	.word	0x20001764
 800cbf8:	20001780 	.word	0x20001780
 800cbfc:	20001794 	.word	0x20001794
 800cc00:	200017ac 	.word	0x200017ac
 800cc04:	20001778 	.word	0x20001778
 800cc08:	2000177c 	.word	0x2000177c

0800cc0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc12:	e019      	b.n	800cc48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc14:	f000 fe0a 	bl	800d82c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc18:	4b10      	ldr	r3, [pc, #64]	; (800cc5c <prvCheckTasksWaitingTermination+0x50>)
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	3304      	adds	r3, #4
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fe fbf7 	bl	800b418 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	; (800cc60 <prvCheckTasksWaitingTermination+0x54>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	4a0b      	ldr	r2, [pc, #44]	; (800cc60 <prvCheckTasksWaitingTermination+0x54>)
 800cc32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc34:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <prvCheckTasksWaitingTermination+0x58>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	4a0a      	ldr	r2, [pc, #40]	; (800cc64 <prvCheckTasksWaitingTermination+0x58>)
 800cc3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc3e:	f000 fe29 	bl	800d894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f848 	bl	800ccd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc48:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <prvCheckTasksWaitingTermination+0x58>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e1      	bne.n	800cc14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20001794 	.word	0x20001794
 800cc60:	200017c0 	.word	0x200017c0
 800cc64:	200017a8 	.word	0x200017a8

0800cc68 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cc74:	e005      	b.n	800cc82 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2ba5      	cmp	r3, #165	; 0xa5
 800cc88:	d0f5      	beq.n	800cc76 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	089b      	lsrs	r3, r3, #2
 800cc8e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	b29b      	uxth	r3, r3
	}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d102      	bne.n	800ccb4 <uxTaskGetStackHighWaterMark+0x14>
 800ccae:	4b09      	ldr	r3, [pc, #36]	; (800ccd4 <uxTaskGetStackHighWaterMark+0x34>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	e000      	b.n	800ccb6 <uxTaskGetStackHighWaterMark+0x16>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ccbe:	6938      	ldr	r0, [r7, #16]
 800ccc0:	f7ff ffd2 	bl	800cc68 <prvTaskCheckFreeStackSpace>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
	}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	200012ec 	.word	0x200012ec

0800ccd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3354      	adds	r3, #84	; 0x54
 800cce4:	4618      	mov	r0, r3
 800cce6:	f002 fddf 	bl	800f8a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d108      	bne.n	800cd06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 ff8d 	bl	800dc18 <vPortFree>
				vPortFree( pxTCB );
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 ff8a 	bl	800dc18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd04:	e01a      	b.n	800cd3c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d103      	bne.n	800cd18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 ff81 	bl	800dc18 <vPortFree>
	}
 800cd16:	e011      	b.n	800cd3c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d00c      	beq.n	800cd3c <prvDeleteTCB+0x64>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	b672      	cpsid	i
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	b662      	cpsie	i
 800cd36:	60fb      	str	r3, [r7, #12]
}
 800cd38:	bf00      	nop
 800cd3a:	e7fe      	b.n	800cd3a <prvDeleteTCB+0x62>
	}
 800cd3c:	bf00      	nop
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd4a:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <prvResetNextTaskUnblockTime+0x38>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d104      	bne.n	800cd5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd54:	4b0a      	ldr	r3, [pc, #40]	; (800cd80 <prvResetNextTaskUnblockTime+0x3c>)
 800cd56:	f04f 32ff 	mov.w	r2, #4294967295
 800cd5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd5c:	e008      	b.n	800cd70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd5e:	4b07      	ldr	r3, [pc, #28]	; (800cd7c <prvResetNextTaskUnblockTime+0x38>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	4a04      	ldr	r2, [pc, #16]	; (800cd80 <prvResetNextTaskUnblockTime+0x3c>)
 800cd6e:	6013      	str	r3, [r2, #0]
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	20001778 	.word	0x20001778
 800cd80:	200017e0 	.word	0x200017e0

0800cd84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd8a:	4b0b      	ldr	r3, [pc, #44]	; (800cdb8 <xTaskGetSchedulerState+0x34>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d102      	bne.n	800cd98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd92:	2301      	movs	r3, #1
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e008      	b.n	800cdaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd98:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <xTaskGetSchedulerState+0x38>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cda0:	2302      	movs	r3, #2
 800cda2:	607b      	str	r3, [r7, #4]
 800cda4:	e001      	b.n	800cdaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cda6:	2300      	movs	r3, #0
 800cda8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cdaa:	687b      	ldr	r3, [r7, #4]
	}
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	200017cc 	.word	0x200017cc
 800cdbc:	200017e8 	.word	0x200017e8

0800cdc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d063      	beq.n	800ce9e <xTaskPriorityDisinherit+0xde>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdd6:	4b34      	ldr	r3, [pc, #208]	; (800cea8 <xTaskPriorityDisinherit+0xe8>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	693a      	ldr	r2, [r7, #16]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d00c      	beq.n	800cdfa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	b672      	cpsid	i
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	b662      	cpsie	i
 800cdf4:	60fb      	str	r3, [r7, #12]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10c      	bne.n	800ce1c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	b672      	cpsid	i
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	b662      	cpsie	i
 800ce16:	60bb      	str	r3, [r7, #8]
}
 800ce18:	bf00      	nop
 800ce1a:	e7fe      	b.n	800ce1a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce20:	1e5a      	subs	r2, r3, #1
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d035      	beq.n	800ce9e <xTaskPriorityDisinherit+0xde>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d131      	bne.n	800ce9e <xTaskPriorityDisinherit+0xde>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fe faea 	bl	800b418 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4619      	mov	r1, r3
 800ce48:	204a      	movs	r0, #74	; 0x4a
 800ce4a:	f001 fcd3 	bl	800e7f4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f002 f9d3 	bl	800f210 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce6e:	4b0f      	ldr	r3, [pc, #60]	; (800ceac <xTaskPriorityDisinherit+0xec>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d903      	bls.n	800ce7e <xTaskPriorityDisinherit+0xbe>
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	4a0c      	ldr	r2, [pc, #48]	; (800ceac <xTaskPriorityDisinherit+0xec>)
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4a09      	ldr	r2, [pc, #36]	; (800ceb0 <xTaskPriorityDisinherit+0xf0>)
 800ce8c:	441a      	add	r2, r3
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	3304      	adds	r3, #4
 800ce92:	4619      	mov	r1, r3
 800ce94:	4610      	mov	r0, r2
 800ce96:	f7fe fa62 	bl	800b35e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce9e:	697b      	ldr	r3, [r7, #20]
	}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	200012ec 	.word	0x200012ec
 800ceac:	200017c8 	.word	0x200017c8
 800ceb0:	200012f0 	.word	0x200012f0

0800ceb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cebe:	4b21      	ldr	r3, [pc, #132]	; (800cf44 <prvAddCurrentTaskToDelayedList+0x90>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cec4:	4b20      	ldr	r3, [pc, #128]	; (800cf48 <prvAddCurrentTaskToDelayedList+0x94>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3304      	adds	r3, #4
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fe faa4 	bl	800b418 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced6:	d10a      	bne.n	800ceee <prvAddCurrentTaskToDelayedList+0x3a>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d007      	beq.n	800ceee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cede:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <prvAddCurrentTaskToDelayedList+0x94>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3304      	adds	r3, #4
 800cee4:	4619      	mov	r1, r3
 800cee6:	4819      	ldr	r0, [pc, #100]	; (800cf4c <prvAddCurrentTaskToDelayedList+0x98>)
 800cee8:	f7fe fa39 	bl	800b35e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ceec:	e026      	b.n	800cf3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4413      	add	r3, r2
 800cef4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cef6:	4b14      	ldr	r3, [pc, #80]	; (800cf48 <prvAddCurrentTaskToDelayedList+0x94>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d209      	bcs.n	800cf1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf06:	4b12      	ldr	r3, [pc, #72]	; (800cf50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fe fa47 	bl	800b3a6 <vListInsert>
}
 800cf18:	e010      	b.n	800cf3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf1a:	4b0e      	ldr	r3, [pc, #56]	; (800cf54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	4b0a      	ldr	r3, [pc, #40]	; (800cf48 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3304      	adds	r3, #4
 800cf24:	4619      	mov	r1, r3
 800cf26:	4610      	mov	r0, r2
 800cf28:	f7fe fa3d 	bl	800b3a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d202      	bcs.n	800cf3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cf36:	4a08      	ldr	r2, [pc, #32]	; (800cf58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	6013      	str	r3, [r2, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	200017c4 	.word	0x200017c4
 800cf48:	200012ec 	.word	0x200012ec
 800cf4c:	200017ac 	.word	0x200017ac
 800cf50:	2000177c 	.word	0x2000177c
 800cf54:	20001778 	.word	0x20001778
 800cf58:	200017e0 	.word	0x200017e0

0800cf5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	; 0x28
 800cf60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf66:	f000 fb15 	bl	800d594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf6a:	4b1d      	ldr	r3, [pc, #116]	; (800cfe0 <xTimerCreateTimerTask+0x84>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d021      	beq.n	800cfb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf7a:	1d3a      	adds	r2, r7, #4
 800cf7c:	f107 0108 	add.w	r1, r7, #8
 800cf80:	f107 030c 	add.w	r3, r7, #12
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe f9a3 	bl	800b2d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	9202      	str	r2, [sp, #8]
 800cf92:	9301      	str	r3, [sp, #4]
 800cf94:	2302      	movs	r3, #2
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	2300      	movs	r3, #0
 800cf9a:	460a      	mov	r2, r1
 800cf9c:	4911      	ldr	r1, [pc, #68]	; (800cfe4 <xTimerCreateTimerTask+0x88>)
 800cf9e:	4812      	ldr	r0, [pc, #72]	; (800cfe8 <xTimerCreateTimerTask+0x8c>)
 800cfa0:	f7fe ffe8 	bl	800bf74 <xTaskCreateStatic>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	4a11      	ldr	r2, [pc, #68]	; (800cfec <xTimerCreateTimerTask+0x90>)
 800cfa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cfaa:	4b10      	ldr	r3, [pc, #64]	; (800cfec <xTimerCreateTimerTask+0x90>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10c      	bne.n	800cfd6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	b672      	cpsid	i
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	b662      	cpsie	i
 800cfd0:	613b      	str	r3, [r7, #16]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800cfd6:	697b      	ldr	r3, [r7, #20]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	2000181c 	.word	0x2000181c
 800cfe4:	0800fe0c 	.word	0x0800fe0c
 800cfe8:	0800d12d 	.word	0x0800d12d
 800cfec:	20001820 	.word	0x20001820

0800cff0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08a      	sub	sp, #40	; 0x28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
 800cffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cffe:	2300      	movs	r3, #0
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10c      	bne.n	800d022 <xTimerGenericCommand+0x32>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	b672      	cpsid	i
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	b662      	cpsie	i
 800d01c:	623b      	str	r3, [r7, #32]
}
 800d01e:	bf00      	nop
 800d020:	e7fe      	b.n	800d020 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d022:	4b1a      	ldr	r3, [pc, #104]	; (800d08c <xTimerGenericCommand+0x9c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d02a      	beq.n	800d080 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	2b05      	cmp	r3, #5
 800d03a:	dc18      	bgt.n	800d06e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d03c:	f7ff fea2 	bl	800cd84 <xTaskGetSchedulerState>
 800d040:	4603      	mov	r3, r0
 800d042:	2b02      	cmp	r3, #2
 800d044:	d109      	bne.n	800d05a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d046:	4b11      	ldr	r3, [pc, #68]	; (800d08c <xTimerGenericCommand+0x9c>)
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	f107 0110 	add.w	r1, r7, #16
 800d04e:	2300      	movs	r3, #0
 800d050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d052:	f7fe fb21 	bl	800b698 <xQueueGenericSend>
 800d056:	6278      	str	r0, [r7, #36]	; 0x24
 800d058:	e012      	b.n	800d080 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d05a:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <xTimerGenericCommand+0x9c>)
 800d05c:	6818      	ldr	r0, [r3, #0]
 800d05e:	f107 0110 	add.w	r1, r7, #16
 800d062:	2300      	movs	r3, #0
 800d064:	2200      	movs	r2, #0
 800d066:	f7fe fb17 	bl	800b698 <xQueueGenericSend>
 800d06a:	6278      	str	r0, [r7, #36]	; 0x24
 800d06c:	e008      	b.n	800d080 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d06e:	4b07      	ldr	r3, [pc, #28]	; (800d08c <xTimerGenericCommand+0x9c>)
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	f107 0110 	add.w	r1, r7, #16
 800d076:	2300      	movs	r3, #0
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	f7fe fc3b 	bl	800b8f4 <xQueueGenericSendFromISR>
 800d07e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d082:	4618      	mov	r0, r3
 800d084:	3728      	adds	r7, #40	; 0x28
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	2000181c 	.word	0x2000181c

0800d090 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af02      	add	r7, sp, #8
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d09a:	4b23      	ldr	r3, [pc, #140]	; (800d128 <prvProcessExpiredTimer+0x98>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe f9b5 	bl	800b418 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0b4:	f003 0304 	and.w	r3, r3, #4
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d024      	beq.n	800d106 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	699a      	ldr	r2, [r3, #24]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	18d1      	adds	r1, r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	6978      	ldr	r0, [r7, #20]
 800d0ca:	f000 f8d3 	bl	800d274 <prvInsertTimerInActiveList>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d021      	beq.n	800d118 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	2300      	movs	r3, #0
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	2100      	movs	r1, #0
 800d0de:	6978      	ldr	r0, [r7, #20]
 800d0e0:	f7ff ff86 	bl	800cff0 <xTimerGenericCommand>
 800d0e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d115      	bne.n	800d118 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	b672      	cpsid	i
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	b662      	cpsie	i
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d10c:	f023 0301 	bic.w	r3, r3, #1
 800d110:	b2da      	uxtb	r2, r3
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	6978      	ldr	r0, [r7, #20]
 800d11e:	4798      	blx	r3
}
 800d120:	bf00      	nop
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20001814 	.word	0x20001814

0800d12c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d134:	f107 0308 	add.w	r3, r7, #8
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 f857 	bl	800d1ec <prvGetNextExpireTime>
 800d13e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	4619      	mov	r1, r3
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 f803 	bl	800d150 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d14a:	f000 f8d5 	bl	800d2f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d14e:	e7f1      	b.n	800d134 <prvTimerTask+0x8>

0800d150 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d15a:	f7ff f9a9 	bl	800c4b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d15e:	f107 0308 	add.w	r3, r7, #8
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f866 	bl	800d234 <prvSampleTimeNow>
 800d168:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d130      	bne.n	800d1d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10a      	bne.n	800d18c <prvProcessTimerOrBlockTask+0x3c>
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d806      	bhi.n	800d18c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d17e:	f7ff f9a5 	bl	800c4cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff ff83 	bl	800d090 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d18a:	e024      	b.n	800d1d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d008      	beq.n	800d1a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d192:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <prvProcessTimerOrBlockTask+0x90>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <prvProcessTimerOrBlockTask+0x50>
 800d19c:	2301      	movs	r3, #1
 800d19e:	e000      	b.n	800d1a2 <prvProcessTimerOrBlockTask+0x52>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d1a4:	4b0f      	ldr	r3, [pc, #60]	; (800d1e4 <prvProcessTimerOrBlockTask+0x94>)
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	f7fe feab 	bl	800bf0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d1b6:	f7ff f989 	bl	800c4cc <xTaskResumeAll>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d1c0:	4b09      	ldr	r3, [pc, #36]	; (800d1e8 <prvProcessTimerOrBlockTask+0x98>)
 800d1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	f3bf 8f6f 	isb	sy
}
 800d1d0:	e001      	b.n	800d1d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d1d2:	f7ff f97b 	bl	800c4cc <xTaskResumeAll>
}
 800d1d6:	bf00      	nop
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20001818 	.word	0x20001818
 800d1e4:	2000181c 	.word	0x2000181c
 800d1e8:	e000ed04 	.word	0xe000ed04

0800d1ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1f4:	4b0e      	ldr	r3, [pc, #56]	; (800d230 <prvGetNextExpireTime+0x44>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <prvGetNextExpireTime+0x16>
 800d1fe:	2201      	movs	r2, #1
 800d200:	e000      	b.n	800d204 <prvGetNextExpireTime+0x18>
 800d202:	2200      	movs	r2, #0
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d105      	bne.n	800d21c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <prvGetNextExpireTime+0x44>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	e001      	b.n	800d220 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d220:	68fb      	ldr	r3, [r7, #12]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	20001814 	.word	0x20001814

0800d234 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d23c:	f7ff f9ea 	bl	800c614 <xTaskGetTickCount>
 800d240:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <prvSampleTimeNow+0x3c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d205      	bcs.n	800d258 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d24c:	f000 f93c 	bl	800d4c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	e002      	b.n	800d25e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d25e:	4a04      	ldr	r2, [pc, #16]	; (800d270 <prvSampleTimeNow+0x3c>)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d264:	68fb      	ldr	r3, [r7, #12]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20001824 	.word	0x20001824

0800d274 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d282:	2300      	movs	r3, #0
 800d284:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d812      	bhi.n	800d2c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d302      	bcc.n	800d2ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	617b      	str	r3, [r7, #20]
 800d2ac:	e01b      	b.n	800d2e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d2ae:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <prvInsertTimerInActiveList+0x7c>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	f7fe f874 	bl	800b3a6 <vListInsert>
 800d2be:	e012      	b.n	800d2e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d206      	bcs.n	800d2d6 <prvInsertTimerInActiveList+0x62>
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d302      	bcc.n	800d2d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	e007      	b.n	800d2e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2d6:	4b07      	ldr	r3, [pc, #28]	; (800d2f4 <prvInsertTimerInActiveList+0x80>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3304      	adds	r3, #4
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	f7fe f860 	bl	800b3a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d2e6:	697b      	ldr	r3, [r7, #20]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20001818 	.word	0x20001818
 800d2f4:	20001814 	.word	0x20001814

0800d2f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08e      	sub	sp, #56	; 0x38
 800d2fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2fe:	e0d0      	b.n	800d4a2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	da1a      	bge.n	800d33c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d306:	1d3b      	adds	r3, r7, #4
 800d308:	3304      	adds	r3, #4
 800d30a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10c      	bne.n	800d32c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	b672      	cpsid	i
 800d318:	f383 8811 	msr	BASEPRI, r3
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	f3bf 8f4f 	dsb	sy
 800d324:	b662      	cpsie	i
 800d326:	61fb      	str	r3, [r7, #28]
}
 800d328:	bf00      	nop
 800d32a:	e7fe      	b.n	800d32a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d332:	6850      	ldr	r0, [r2, #4]
 800d334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d336:	6892      	ldr	r2, [r2, #8]
 800d338:	4611      	mov	r1, r2
 800d33a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f2c0 80ae 	blt.w	800d4a0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	695b      	ldr	r3, [r3, #20]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d004      	beq.n	800d35a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	3304      	adds	r3, #4
 800d354:	4618      	mov	r0, r3
 800d356:	f7fe f85f 	bl	800b418 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d35a:	463b      	mov	r3, r7
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff ff69 	bl	800d234 <prvSampleTimeNow>
 800d362:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b09      	cmp	r3, #9
 800d368:	f200 809b 	bhi.w	800d4a2 <prvProcessReceivedCommands+0x1aa>
 800d36c:	a201      	add	r2, pc, #4	; (adr r2, 800d374 <prvProcessReceivedCommands+0x7c>)
 800d36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d372:	bf00      	nop
 800d374:	0800d39d 	.word	0x0800d39d
 800d378:	0800d39d 	.word	0x0800d39d
 800d37c:	0800d39d 	.word	0x0800d39d
 800d380:	0800d415 	.word	0x0800d415
 800d384:	0800d429 	.word	0x0800d429
 800d388:	0800d477 	.word	0x0800d477
 800d38c:	0800d39d 	.word	0x0800d39d
 800d390:	0800d39d 	.word	0x0800d39d
 800d394:	0800d415 	.word	0x0800d415
 800d398:	0800d429 	.word	0x0800d429
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3a2:	f043 0301 	orr.w	r3, r3, #1
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	18d1      	adds	r1, r2, r3
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3bc:	f7ff ff5a 	bl	800d274 <prvInsertTimerInActiveList>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d06d      	beq.n	800d4a2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d062      	beq.n	800d4a2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	441a      	add	r2, r3
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3ee:	f7ff fdff 	bl	800cff0 <xTimerGenericCommand>
 800d3f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d3f4:	6a3b      	ldr	r3, [r7, #32]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d153      	bne.n	800d4a2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	b672      	cpsid	i
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	b662      	cpsie	i
 800d40e:	61bb      	str	r3, [r7, #24]
}
 800d410:	bf00      	nop
 800d412:	e7fe      	b.n	800d412 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d41a:	f023 0301 	bic.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d426:	e03c      	b.n	800d4a2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d42e:	f043 0301 	orr.w	r3, r3, #1
 800d432:	b2da      	uxtb	r2, r3
 800d434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10c      	bne.n	800d462 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	b672      	cpsid	i
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	b662      	cpsie	i
 800d45c:	617b      	str	r3, [r7, #20]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d464:	699a      	ldr	r2, [r3, #24]
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	18d1      	adds	r1, r2, r3
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d46e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d470:	f7ff ff00 	bl	800d274 <prvInsertTimerInActiveList>
					break;
 800d474:	e015      	b.n	800d4a2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d47c:	f003 0302 	and.w	r3, r3, #2
 800d480:	2b00      	cmp	r3, #0
 800d482:	d103      	bne.n	800d48c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d486:	f000 fbc7 	bl	800dc18 <vPortFree>
 800d48a:	e00a      	b.n	800d4a2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d492:	f023 0301 	bic.w	r3, r3, #1
 800d496:	b2da      	uxtb	r2, r3
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d49e:	e000      	b.n	800d4a2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d4a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d4a2:	4b08      	ldr	r3, [pc, #32]	; (800d4c4 <prvProcessReceivedCommands+0x1cc>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	1d39      	adds	r1, r7, #4
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe fad6 	bl	800ba5c <xQueueReceive>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f47f af24 	bne.w	800d300 <prvProcessReceivedCommands+0x8>
	}
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	3730      	adds	r7, #48	; 0x30
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	2000181c 	.word	0x2000181c

0800d4c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d4ce:	e04a      	b.n	800d566 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4d0:	4b2e      	ldr	r3, [pc, #184]	; (800d58c <prvSwitchTimerLists+0xc4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4da:	4b2c      	ldr	r3, [pc, #176]	; (800d58c <prvSwitchTimerLists+0xc4>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fd ff95 	bl	800b418 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4fc:	f003 0304 	and.w	r3, r3, #4
 800d500:	2b00      	cmp	r3, #0
 800d502:	d030      	beq.n	800d566 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	693a      	ldr	r2, [r7, #16]
 800d50a:	4413      	add	r3, r2
 800d50c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	429a      	cmp	r2, r3
 800d514:	d90e      	bls.n	800d534 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d522:	4b1a      	ldr	r3, [pc, #104]	; (800d58c <prvSwitchTimerLists+0xc4>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3304      	adds	r3, #4
 800d52a:	4619      	mov	r1, r3
 800d52c:	4610      	mov	r0, r2
 800d52e:	f7fd ff3a 	bl	800b3a6 <vListInsert>
 800d532:	e018      	b.n	800d566 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d534:	2300      	movs	r3, #0
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	2300      	movs	r3, #0
 800d53a:	693a      	ldr	r2, [r7, #16]
 800d53c:	2100      	movs	r1, #0
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f7ff fd56 	bl	800cff0 <xTimerGenericCommand>
 800d544:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10c      	bne.n	800d566 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	b672      	cpsid	i
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	b662      	cpsie	i
 800d560:	603b      	str	r3, [r7, #0]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d566:	4b09      	ldr	r3, [pc, #36]	; (800d58c <prvSwitchTimerLists+0xc4>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1af      	bne.n	800d4d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d570:	4b06      	ldr	r3, [pc, #24]	; (800d58c <prvSwitchTimerLists+0xc4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d576:	4b06      	ldr	r3, [pc, #24]	; (800d590 <prvSwitchTimerLists+0xc8>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a04      	ldr	r2, [pc, #16]	; (800d58c <prvSwitchTimerLists+0xc4>)
 800d57c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d57e:	4a04      	ldr	r2, [pc, #16]	; (800d590 <prvSwitchTimerLists+0xc8>)
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	6013      	str	r3, [r2, #0]
}
 800d584:	bf00      	nop
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20001814 	.word	0x20001814
 800d590:	20001818 	.word	0x20001818

0800d594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d59a:	f000 f947 	bl	800d82c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d59e:	4b15      	ldr	r3, [pc, #84]	; (800d5f4 <prvCheckForValidListAndQueue+0x60>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d120      	bne.n	800d5e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d5a6:	4814      	ldr	r0, [pc, #80]	; (800d5f8 <prvCheckForValidListAndQueue+0x64>)
 800d5a8:	f7fd feac 	bl	800b304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d5ac:	4813      	ldr	r0, [pc, #76]	; (800d5fc <prvCheckForValidListAndQueue+0x68>)
 800d5ae:	f7fd fea9 	bl	800b304 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d5b2:	4b13      	ldr	r3, [pc, #76]	; (800d600 <prvCheckForValidListAndQueue+0x6c>)
 800d5b4:	4a10      	ldr	r2, [pc, #64]	; (800d5f8 <prvCheckForValidListAndQueue+0x64>)
 800d5b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d5b8:	4b12      	ldr	r3, [pc, #72]	; (800d604 <prvCheckForValidListAndQueue+0x70>)
 800d5ba:	4a10      	ldr	r2, [pc, #64]	; (800d5fc <prvCheckForValidListAndQueue+0x68>)
 800d5bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d5be:	2300      	movs	r3, #0
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	4b11      	ldr	r3, [pc, #68]	; (800d608 <prvCheckForValidListAndQueue+0x74>)
 800d5c4:	4a11      	ldr	r2, [pc, #68]	; (800d60c <prvCheckForValidListAndQueue+0x78>)
 800d5c6:	2110      	movs	r1, #16
 800d5c8:	200a      	movs	r0, #10
 800d5ca:	f7fd ffb9 	bl	800b540 <xQueueGenericCreateStatic>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	4a08      	ldr	r2, [pc, #32]	; (800d5f4 <prvCheckForValidListAndQueue+0x60>)
 800d5d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d5d4:	4b07      	ldr	r3, [pc, #28]	; (800d5f4 <prvCheckForValidListAndQueue+0x60>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d5dc:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <prvCheckForValidListAndQueue+0x60>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	490b      	ldr	r1, [pc, #44]	; (800d610 <prvCheckForValidListAndQueue+0x7c>)
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe fc60 	bl	800bea8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5e8:	f000 f954 	bl	800d894 <vPortExitCritical>
}
 800d5ec:	bf00      	nop
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	2000181c 	.word	0x2000181c
 800d5f8:	200017ec 	.word	0x200017ec
 800d5fc:	20001800 	.word	0x20001800
 800d600:	20001814 	.word	0x20001814
 800d604:	20001818 	.word	0x20001818
 800d608:	200018c8 	.word	0x200018c8
 800d60c:	20001828 	.word	0x20001828
 800d610:	0800fe14 	.word	0x0800fe14

0800d614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3b04      	subs	r3, #4
 800d624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3b04      	subs	r3, #4
 800d632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f023 0201 	bic.w	r2, r3, #1
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3b04      	subs	r3, #4
 800d642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d644:	4a0c      	ldr	r2, [pc, #48]	; (800d678 <pxPortInitialiseStack+0x64>)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3b14      	subs	r3, #20
 800d64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3b04      	subs	r3, #4
 800d65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f06f 0202 	mvn.w	r2, #2
 800d662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3b20      	subs	r3, #32
 800d668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d66a:	68fb      	ldr	r3, [r7, #12]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	0800d67d 	.word	0x0800d67d

0800d67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d686:	4b14      	ldr	r3, [pc, #80]	; (800d6d8 <prvTaskExitError+0x5c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68e:	d00c      	beq.n	800d6aa <prvTaskExitError+0x2e>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	b672      	cpsid	i
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	b662      	cpsie	i
 800d6a4:	60fb      	str	r3, [r7, #12]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <prvTaskExitError+0x2c>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	b672      	cpsid	i
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	b662      	cpsie	i
 800d6be:	60bb      	str	r3, [r7, #8]
}
 800d6c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6c2:	bf00      	nop
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d0fc      	beq.n	800d6c4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6ca:	bf00      	nop
 800d6cc:	bf00      	nop
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	20000010 	.word	0x20000010
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <pxCurrentTCBConst2>)
 800d6e2:	6819      	ldr	r1, [r3, #0]
 800d6e4:	6808      	ldr	r0, [r1, #0]
 800d6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	f380 8809 	msr	PSP, r0
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f04f 0000 	mov.w	r0, #0
 800d6f6:	f380 8811 	msr	BASEPRI, r0
 800d6fa:	4770      	bx	lr
 800d6fc:	f3af 8000 	nop.w

0800d700 <pxCurrentTCBConst2>:
 800d700:	200012ec 	.word	0x200012ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop

0800d708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d708:	4808      	ldr	r0, [pc, #32]	; (800d72c <prvPortStartFirstTask+0x24>)
 800d70a:	6800      	ldr	r0, [r0, #0]
 800d70c:	6800      	ldr	r0, [r0, #0]
 800d70e:	f380 8808 	msr	MSP, r0
 800d712:	f04f 0000 	mov.w	r0, #0
 800d716:	f380 8814 	msr	CONTROL, r0
 800d71a:	b662      	cpsie	i
 800d71c:	b661      	cpsie	f
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	df00      	svc	0
 800d728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d72a:	bf00      	nop
 800d72c:	e000ed08 	.word	0xe000ed08

0800d730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d736:	4b37      	ldr	r3, [pc, #220]	; (800d814 <xPortStartScheduler+0xe4>)
 800d738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	22ff      	movs	r2, #255	; 0xff
 800d746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	4b2f      	ldr	r3, [pc, #188]	; (800d818 <xPortStartScheduler+0xe8>)
 800d75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d75e:	4b2f      	ldr	r3, [pc, #188]	; (800d81c <xPortStartScheduler+0xec>)
 800d760:	2207      	movs	r2, #7
 800d762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d764:	e009      	b.n	800d77a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d766:	4b2d      	ldr	r3, [pc, #180]	; (800d81c <xPortStartScheduler+0xec>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4a2b      	ldr	r2, [pc, #172]	; (800d81c <xPortStartScheduler+0xec>)
 800d76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	b2db      	uxtb	r3, r3
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	b2db      	uxtb	r3, r3
 800d778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d77a:	78fb      	ldrb	r3, [r7, #3]
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d782:	2b80      	cmp	r3, #128	; 0x80
 800d784:	d0ef      	beq.n	800d766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d786:	4b25      	ldr	r3, [pc, #148]	; (800d81c <xPortStartScheduler+0xec>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f1c3 0307 	rsb	r3, r3, #7
 800d78e:	2b04      	cmp	r3, #4
 800d790:	d00c      	beq.n	800d7ac <xPortStartScheduler+0x7c>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	b672      	cpsid	i
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	b662      	cpsie	i
 800d7a6:	60bb      	str	r3, [r7, #8]
}
 800d7a8:	bf00      	nop
 800d7aa:	e7fe      	b.n	800d7aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7ac:	4b1b      	ldr	r3, [pc, #108]	; (800d81c <xPortStartScheduler+0xec>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	021b      	lsls	r3, r3, #8
 800d7b2:	4a1a      	ldr	r2, [pc, #104]	; (800d81c <xPortStartScheduler+0xec>)
 800d7b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7b6:	4b19      	ldr	r3, [pc, #100]	; (800d81c <xPortStartScheduler+0xec>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7be:	4a17      	ldr	r2, [pc, #92]	; (800d81c <xPortStartScheduler+0xec>)
 800d7c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7ca:	4b15      	ldr	r3, [pc, #84]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a14      	ldr	r2, [pc, #80]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7d6:	4b12      	ldr	r3, [pc, #72]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a11      	ldr	r2, [pc, #68]	; (800d820 <xPortStartScheduler+0xf0>)
 800d7dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7e2:	f000 f8dd 	bl	800d9a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <xPortStartScheduler+0xf4>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7ec:	f000 f8fc 	bl	800d9e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7f0:	4b0d      	ldr	r3, [pc, #52]	; (800d828 <xPortStartScheduler+0xf8>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a0c      	ldr	r2, [pc, #48]	; (800d828 <xPortStartScheduler+0xf8>)
 800d7f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7fc:	f7ff ff84 	bl	800d708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d800:	f7fe ffea 	bl	800c7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800d804:	f7ff ff3a 	bl	800d67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	e000e400 	.word	0xe000e400
 800d818:	20001918 	.word	0x20001918
 800d81c:	2000191c 	.word	0x2000191c
 800d820:	e000ed20 	.word	0xe000ed20
 800d824:	20000010 	.word	0x20000010
 800d828:	e000ef34 	.word	0xe000ef34

0800d82c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
	__asm volatile
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	b672      	cpsid	i
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	b662      	cpsie	i
 800d846:	607b      	str	r3, [r7, #4]
}
 800d848:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d84a:	4b10      	ldr	r3, [pc, #64]	; (800d88c <vPortEnterCritical+0x60>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3301      	adds	r3, #1
 800d850:	4a0e      	ldr	r2, [pc, #56]	; (800d88c <vPortEnterCritical+0x60>)
 800d852:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d854:	4b0d      	ldr	r3, [pc, #52]	; (800d88c <vPortEnterCritical+0x60>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d111      	bne.n	800d880 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d85c:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <vPortEnterCritical+0x64>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00c      	beq.n	800d880 <vPortEnterCritical+0x54>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	b672      	cpsid	i
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	b662      	cpsie	i
 800d87a:	603b      	str	r3, [r7, #0]
}
 800d87c:	bf00      	nop
 800d87e:	e7fe      	b.n	800d87e <vPortEnterCritical+0x52>
	}
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	20000010 	.word	0x20000010
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d89a:	4b13      	ldr	r3, [pc, #76]	; (800d8e8 <vPortExitCritical+0x54>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10c      	bne.n	800d8bc <vPortExitCritical+0x28>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a6:	b672      	cpsid	i
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	b662      	cpsie	i
 800d8b6:	607b      	str	r3, [r7, #4]
}
 800d8b8:	bf00      	nop
 800d8ba:	e7fe      	b.n	800d8ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <vPortExitCritical+0x54>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4a09      	ldr	r2, [pc, #36]	; (800d8e8 <vPortExitCritical+0x54>)
 800d8c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8c6:	4b08      	ldr	r3, [pc, #32]	; (800d8e8 <vPortExitCritical+0x54>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d105      	bne.n	800d8da <vPortExitCritical+0x46>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	f383 8811 	msr	BASEPRI, r3
}
 800d8d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8da:	bf00      	nop
 800d8dc:	370c      	adds	r7, #12
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	20000010 	.word	0x20000010
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8f0:	f3ef 8009 	mrs	r0, PSP
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	4b15      	ldr	r3, [pc, #84]	; (800d950 <pxCurrentTCBConst>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	f01e 0f10 	tst.w	lr, #16
 800d900:	bf08      	it	eq
 800d902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90a:	6010      	str	r0, [r2, #0]
 800d90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d914:	b672      	cpsid	i
 800d916:	f380 8811 	msr	BASEPRI, r0
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	b662      	cpsie	i
 800d924:	f7fe ff58 	bl	800c7d8 <vTaskSwitchContext>
 800d928:	f04f 0000 	mov.w	r0, #0
 800d92c:	f380 8811 	msr	BASEPRI, r0
 800d930:	bc09      	pop	{r0, r3}
 800d932:	6819      	ldr	r1, [r3, #0]
 800d934:	6808      	ldr	r0, [r1, #0]
 800d936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	f01e 0f10 	tst.w	lr, #16
 800d93e:	bf08      	it	eq
 800d940:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d944:	f380 8809 	msr	PSP, r0
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop

0800d950 <pxCurrentTCBConst>:
 800d950:	200012ec 	.word	0x200012ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop

0800d958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	b672      	cpsid	i
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	b662      	cpsie	i
 800d972:	607b      	str	r3, [r7, #4]
}
 800d974:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d976:	f7fe fe6f 	bl	800c658 <xTaskIncrementTick>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d003      	beq.n	800d988 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d980:	4b06      	ldr	r3, [pc, #24]	; (800d99c <SysTick_Handler+0x44>)
 800d982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	2300      	movs	r3, #0
 800d98a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f383 8811 	msr	BASEPRI, r3
}
 800d992:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	e000ed04 	.word	0xe000ed04

0800d9a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d9a4:	4b0b      	ldr	r3, [pc, #44]	; (800d9d4 <vPortSetupTimerInterrupt+0x34>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <vPortSetupTimerInterrupt+0x38>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <vPortSetupTimerInterrupt+0x3c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a0a      	ldr	r2, [pc, #40]	; (800d9e0 <vPortSetupTimerInterrupt+0x40>)
 800d9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ba:	099b      	lsrs	r3, r3, #6
 800d9bc:	4a09      	ldr	r2, [pc, #36]	; (800d9e4 <vPortSetupTimerInterrupt+0x44>)
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9c2:	4b04      	ldr	r3, [pc, #16]	; (800d9d4 <vPortSetupTimerInterrupt+0x34>)
 800d9c4:	2207      	movs	r2, #7
 800d9c6:	601a      	str	r2, [r3, #0]
}
 800d9c8:	bf00      	nop
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	e000e010 	.word	0xe000e010
 800d9d8:	e000e018 	.word	0xe000e018
 800d9dc:	20000004 	.word	0x20000004
 800d9e0:	10624dd3 	.word	0x10624dd3
 800d9e4:	e000e014 	.word	0xe000e014

0800d9e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9f8 <vPortEnableVFP+0x10>
 800d9ec:	6801      	ldr	r1, [r0, #0]
 800d9ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9f2:	6001      	str	r1, [r0, #0]
 800d9f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9f6:	bf00      	nop
 800d9f8:	e000ed88 	.word	0xe000ed88

0800d9fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da02:	f3ef 8305 	mrs	r3, IPSR
 800da06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b0f      	cmp	r3, #15
 800da0c:	d916      	bls.n	800da3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da0e:	4a19      	ldr	r2, [pc, #100]	; (800da74 <vPortValidateInterruptPriority+0x78>)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da18:	4b17      	ldr	r3, [pc, #92]	; (800da78 <vPortValidateInterruptPriority+0x7c>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	7afa      	ldrb	r2, [r7, #11]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d20c      	bcs.n	800da3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	b672      	cpsid	i
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	b662      	cpsie	i
 800da36:	607b      	str	r3, [r7, #4]
}
 800da38:	bf00      	nop
 800da3a:	e7fe      	b.n	800da3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da3c:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <vPortValidateInterruptPriority+0x80>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800da44:	4b0e      	ldr	r3, [pc, #56]	; (800da80 <vPortValidateInterruptPriority+0x84>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d90c      	bls.n	800da66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	b672      	cpsid	i
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	b662      	cpsie	i
 800da60:	603b      	str	r3, [r7, #0]
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <vPortValidateInterruptPriority+0x68>
	}
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	e000e3f0 	.word	0xe000e3f0
 800da78:	20001918 	.word	0x20001918
 800da7c:	e000ed0c 	.word	0xe000ed0c
 800da80:	2000191c 	.word	0x2000191c

0800da84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08a      	sub	sp, #40	; 0x28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da8c:	2300      	movs	r3, #0
 800da8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da90:	f7fe fd0e 	bl	800c4b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da94:	4b5b      	ldr	r3, [pc, #364]	; (800dc04 <pvPortMalloc+0x180>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da9c:	f000 f91a 	bl	800dcd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800daa0:	4b59      	ldr	r3, [pc, #356]	; (800dc08 <pvPortMalloc+0x184>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4013      	ands	r3, r2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f040 8092 	bne.w	800dbd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01f      	beq.n	800daf4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dab4:	2208      	movs	r2, #8
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4413      	add	r3, r2
 800daba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f003 0307 	and.w	r3, r3, #7
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d016      	beq.n	800daf4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f023 0307 	bic.w	r3, r3, #7
 800dacc:	3308      	adds	r3, #8
 800dace:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f003 0307 	and.w	r3, r3, #7
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00c      	beq.n	800daf4 <pvPortMalloc+0x70>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dade:	b672      	cpsid	i
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	b662      	cpsie	i
 800daee:	617b      	str	r3, [r7, #20]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d06b      	beq.n	800dbd2 <pvPortMalloc+0x14e>
 800dafa:	4b44      	ldr	r3, [pc, #272]	; (800dc0c <pvPortMalloc+0x188>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	429a      	cmp	r2, r3
 800db02:	d866      	bhi.n	800dbd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db04:	4b42      	ldr	r3, [pc, #264]	; (800dc10 <pvPortMalloc+0x18c>)
 800db06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db08:	4b41      	ldr	r3, [pc, #260]	; (800dc10 <pvPortMalloc+0x18c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db0e:	e004      	b.n	800db1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d903      	bls.n	800db2c <pvPortMalloc+0xa8>
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1f1      	bne.n	800db10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db2c:	4b35      	ldr	r3, [pc, #212]	; (800dc04 <pvPortMalloc+0x180>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db32:	429a      	cmp	r2, r3
 800db34:	d04d      	beq.n	800dbd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2208      	movs	r2, #8
 800db3c:	4413      	add	r3, r2
 800db3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	1ad2      	subs	r2, r2, r3
 800db50:	2308      	movs	r3, #8
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	429a      	cmp	r2, r3
 800db56:	d921      	bls.n	800db9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4413      	add	r3, r2
 800db5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	f003 0307 	and.w	r3, r3, #7
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00c      	beq.n	800db84 <pvPortMalloc+0x100>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	b672      	cpsid	i
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	b662      	cpsie	i
 800db7e:	613b      	str	r3, [r7, #16]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	1ad2      	subs	r2, r2, r3
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db96:	69b8      	ldr	r0, [r7, #24]
 800db98:	f000 f8fe 	bl	800dd98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db9c:	4b1b      	ldr	r3, [pc, #108]	; (800dc0c <pvPortMalloc+0x188>)
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	4a19      	ldr	r2, [pc, #100]	; (800dc0c <pvPortMalloc+0x188>)
 800dba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dbaa:	4b18      	ldr	r3, [pc, #96]	; (800dc0c <pvPortMalloc+0x188>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	4b19      	ldr	r3, [pc, #100]	; (800dc14 <pvPortMalloc+0x190>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d203      	bcs.n	800dbbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dbb6:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <pvPortMalloc+0x188>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a16      	ldr	r2, [pc, #88]	; (800dc14 <pvPortMalloc+0x190>)
 800dbbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc0:	685a      	ldr	r2, [r3, #4]
 800dbc2:	4b11      	ldr	r3, [pc, #68]	; (800dc08 <pvPortMalloc+0x184>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	2200      	movs	r2, #0
 800dbd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dbd2:	f7fe fc7b 	bl	800c4cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f003 0307 	and.w	r3, r3, #7
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00c      	beq.n	800dbfa <pvPortMalloc+0x176>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	b672      	cpsid	i
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	b662      	cpsie	i
 800dbf4:	60fb      	str	r3, [r7, #12]
}
 800dbf6:	bf00      	nop
 800dbf8:	e7fe      	b.n	800dbf8 <pvPortMalloc+0x174>
	return pvReturn;
 800dbfa:	69fb      	ldr	r3, [r7, #28]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3728      	adds	r7, #40	; 0x28
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20005528 	.word	0x20005528
 800dc08:	20005534 	.word	0x20005534
 800dc0c:	2000552c 	.word	0x2000552c
 800dc10:	20005520 	.word	0x20005520
 800dc14:	20005530 	.word	0x20005530

0800dc18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d04c      	beq.n	800dcc4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc2a:	2308      	movs	r3, #8
 800dc2c:	425b      	negs	r3, r3
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	4413      	add	r3, r2
 800dc32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	4b23      	ldr	r3, [pc, #140]	; (800dccc <vPortFree+0xb4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4013      	ands	r3, r2
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10c      	bne.n	800dc60 <vPortFree+0x48>
	__asm volatile
 800dc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4a:	b672      	cpsid	i
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	b662      	cpsie	i
 800dc5a:	60fb      	str	r3, [r7, #12]
}
 800dc5c:	bf00      	nop
 800dc5e:	e7fe      	b.n	800dc5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00c      	beq.n	800dc82 <vPortFree+0x6a>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	b672      	cpsid	i
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	b662      	cpsie	i
 800dc7c:	60bb      	str	r3, [r7, #8]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	4b11      	ldr	r3, [pc, #68]	; (800dccc <vPortFree+0xb4>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d019      	beq.n	800dcc4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d115      	bne.n	800dcc4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	4b0b      	ldr	r3, [pc, #44]	; (800dccc <vPortFree+0xb4>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	43db      	mvns	r3, r3
 800dca2:	401a      	ands	r2, r3
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dca8:	f7fe fc02 	bl	800c4b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	4b07      	ldr	r3, [pc, #28]	; (800dcd0 <vPortFree+0xb8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4a06      	ldr	r2, [pc, #24]	; (800dcd0 <vPortFree+0xb8>)
 800dcb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dcba:	6938      	ldr	r0, [r7, #16]
 800dcbc:	f000 f86c 	bl	800dd98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dcc0:	f7fe fc04 	bl	800c4cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dcc4:	bf00      	nop
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20005534 	.word	0x20005534
 800dcd0:	2000552c 	.word	0x2000552c

0800dcd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dcde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dce0:	4b27      	ldr	r3, [pc, #156]	; (800dd80 <prvHeapInit+0xac>)
 800dce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f003 0307 	and.w	r3, r3, #7
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00c      	beq.n	800dd08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3307      	adds	r3, #7
 800dcf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 0307 	bic.w	r3, r3, #7
 800dcfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	4a1f      	ldr	r2, [pc, #124]	; (800dd80 <prvHeapInit+0xac>)
 800dd04:	4413      	add	r3, r2
 800dd06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd0c:	4a1d      	ldr	r2, [pc, #116]	; (800dd84 <prvHeapInit+0xb0>)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd12:	4b1c      	ldr	r3, [pc, #112]	; (800dd84 <prvHeapInit+0xb0>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd20:	2208      	movs	r2, #8
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	1a9b      	subs	r3, r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f023 0307 	bic.w	r3, r3, #7
 800dd2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4a15      	ldr	r2, [pc, #84]	; (800dd88 <prvHeapInit+0xb4>)
 800dd34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd36:	4b14      	ldr	r3, [pc, #80]	; (800dd88 <prvHeapInit+0xb4>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd3e:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <prvHeapInit+0xb4>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	1ad2      	subs	r2, r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd54:	4b0c      	ldr	r3, [pc, #48]	; (800dd88 <prvHeapInit+0xb4>)
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	4a0a      	ldr	r2, [pc, #40]	; (800dd8c <prvHeapInit+0xb8>)
 800dd62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	4a09      	ldr	r2, [pc, #36]	; (800dd90 <prvHeapInit+0xbc>)
 800dd6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <prvHeapInit+0xc0>)
 800dd6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd72:	601a      	str	r2, [r3, #0]
}
 800dd74:	bf00      	nop
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr
 800dd80:	20001920 	.word	0x20001920
 800dd84:	20005520 	.word	0x20005520
 800dd88:	20005528 	.word	0x20005528
 800dd8c:	20005530 	.word	0x20005530
 800dd90:	2000552c 	.word	0x2000552c
 800dd94:	20005534 	.word	0x20005534

0800dd98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dda0:	4b28      	ldr	r3, [pc, #160]	; (800de44 <prvInsertBlockIntoFreeList+0xac>)
 800dda2:	60fb      	str	r3, [r7, #12]
 800dda4:	e002      	b.n	800ddac <prvInsertBlockIntoFreeList+0x14>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d8f7      	bhi.n	800dda6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d108      	bne.n	800ddda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	441a      	add	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	441a      	add	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d118      	bne.n	800de20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	4b15      	ldr	r3, [pc, #84]	; (800de48 <prvInsertBlockIntoFreeList+0xb0>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d00d      	beq.n	800de16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685a      	ldr	r2, [r3, #4]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	441a      	add	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	e008      	b.n	800de28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de16:	4b0c      	ldr	r3, [pc, #48]	; (800de48 <prvInsertBlockIntoFreeList+0xb0>)
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e003      	b.n	800de28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d002      	beq.n	800de36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de36:	bf00      	nop
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	20005520 	.word	0x20005520
 800de48:	20005528 	.word	0x20005528

0800de4c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800de52:	4b21      	ldr	r3, [pc, #132]	; (800ded8 <_DoInit+0x8c>)
 800de54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2203      	movs	r2, #3
 800de5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2203      	movs	r2, #3
 800de60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4a1d      	ldr	r2, [pc, #116]	; (800dedc <_DoInit+0x90>)
 800de66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a1d      	ldr	r2, [pc, #116]	; (800dee0 <_DoInit+0x94>)
 800de6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4a14      	ldr	r2, [pc, #80]	; (800dedc <_DoInit+0x90>)
 800de8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a14      	ldr	r2, [pc, #80]	; (800dee4 <_DoInit+0x98>)
 800de92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2210      	movs	r2, #16
 800de98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3307      	adds	r3, #7
 800deb0:	4a0d      	ldr	r2, [pc, #52]	; (800dee8 <_DoInit+0x9c>)
 800deb2:	6810      	ldr	r0, [r2, #0]
 800deb4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a0c      	ldr	r2, [pc, #48]	; (800deec <_DoInit+0xa0>)
 800deba:	6810      	ldr	r0, [r2, #0]
 800debc:	6018      	str	r0, [r3, #0]
 800debe:	8891      	ldrh	r1, [r2, #4]
 800dec0:	7992      	ldrb	r2, [r2, #6]
 800dec2:	8099      	strh	r1, [r3, #4]
 800dec4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2220      	movs	r2, #32
 800deca:	719a      	strb	r2, [r3, #6]
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	20005538 	.word	0x20005538
 800dedc:	0800fe1c 	.word	0x0800fe1c
 800dee0:	200055e0 	.word	0x200055e0
 800dee4:	200059e0 	.word	0x200059e0
 800dee8:	0800fe28 	.word	0x0800fe28
 800deec:	0800fe2c 	.word	0x0800fe2c

0800def0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b08a      	sub	sp, #40	; 0x28
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800defc:	4b3c      	ldr	r3, [pc, #240]	; (800dff0 <SEGGER_RTT_ReadNoLock+0x100>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <SEGGER_RTT_ReadNoLock+0x18>
 800df04:	f7ff ffa2 	bl	800de4c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	4613      	mov	r3, r2
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	4413      	add	r3, r2
 800df10:	00db      	lsls	r3, r3, #3
 800df12:	3360      	adds	r3, #96	; 0x60
 800df14:	4a36      	ldr	r2, [pc, #216]	; (800dff0 <SEGGER_RTT_ReadNoLock+0x100>)
 800df16:	4413      	add	r3, r2
 800df18:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800df2a:	2300      	movs	r3, #0
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800df2e:	6a3a      	ldr	r2, [r7, #32]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	429a      	cmp	r2, r3
 800df34:	d92a      	bls.n	800df8c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	689a      	ldr	r2, [r3, #8]
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4293      	cmp	r3, r2
 800df46:	bf28      	it	cs
 800df48:	4613      	movcs	r3, r2
 800df4a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	685a      	ldr	r2, [r3, #4]
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	4413      	add	r3, r2
 800df54:	693a      	ldr	r2, [r7, #16]
 800df56:	4619      	mov	r1, r3
 800df58:	69f8      	ldr	r0, [r7, #28]
 800df5a:	f001 fc81 	bl	800f860 <memcpy>
    NumBytesRead += NumBytesRem;
 800df5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	4413      	add	r3, r2
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800df66:	69fa      	ldr	r2, [r7, #28]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	4413      	add	r3, r2
 800df6c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800df76:	6a3a      	ldr	r2, [r7, #32]
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	4413      	add	r3, r2
 800df7c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	6a3a      	ldr	r2, [r7, #32]
 800df84:	429a      	cmp	r2, r3
 800df86:	d101      	bne.n	800df8c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800df88:	2300      	movs	r3, #0
 800df8a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800df8c:	697a      	ldr	r2, [r7, #20]
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4293      	cmp	r3, r2
 800df9a:	bf28      	it	cs
 800df9c:	4613      	movcs	r3, r2
 800df9e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d018      	beq.n	800dfd8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	685a      	ldr	r2, [r3, #4]
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	4413      	add	r3, r2
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	69f8      	ldr	r0, [r7, #28]
 800dfb4:	f001 fc54 	bl	800f860 <memcpy>
    NumBytesRead += NumBytesRem;
 800dfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800dfc0:	69fa      	ldr	r2, [r7, #28]
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800dfd0:	6a3a      	ldr	r2, [r7, #32]
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	6a3a      	ldr	r2, [r7, #32]
 800dfe2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3728      	adds	r7, #40	; 0x28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20005538 	.word	0x20005538

0800dff4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800e002:	4b30      	ldr	r3, [pc, #192]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800e00a:	f7ff ff1f 	bl	800de4c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800e00e:	4b2d      	ldr	r3, [pc, #180]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	461a      	mov	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	4293      	cmp	r3, r2
 800e018:	d24c      	bcs.n	800e0b4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800e01a:	f3ef 8311 	mrs	r3, BASEPRI
 800e01e:	f04f 0120 	mov.w	r1, #32
 800e022:	f381 8811 	msr	BASEPRI, r1
 800e026:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d032      	beq.n	800e094 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800e02e:	4925      	ldr	r1, [pc, #148]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	1c5a      	adds	r2, r3, #1
 800e034:	4613      	mov	r3, r2
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	4413      	add	r3, r2
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	440b      	add	r3, r1
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800e042:	4920      	ldr	r1, [pc, #128]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	4613      	mov	r3, r2
 800e04a:	005b      	lsls	r3, r3, #1
 800e04c:	4413      	add	r3, r2
 800e04e:	00db      	lsls	r3, r3, #3
 800e050:	440b      	add	r3, r1
 800e052:	3304      	adds	r3, #4
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800e058:	491a      	ldr	r1, [pc, #104]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	4613      	mov	r3, r2
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	4413      	add	r3, r2
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	440b      	add	r3, r1
 800e066:	3320      	adds	r3, #32
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800e06c:	4915      	ldr	r1, [pc, #84]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	4613      	mov	r3, r2
 800e072:	005b      	lsls	r3, r3, #1
 800e074:	4413      	add	r3, r2
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	440b      	add	r3, r1
 800e07a:	3328      	adds	r3, #40	; 0x28
 800e07c:	2200      	movs	r2, #0
 800e07e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800e080:	4910      	ldr	r1, [pc, #64]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	440b      	add	r3, r1
 800e08e:	3324      	adds	r3, #36	; 0x24
 800e090:	2200      	movs	r2, #0
 800e092:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800e094:	490b      	ldr	r1, [pc, #44]	; (800e0c4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	4613      	mov	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	440b      	add	r3, r1
 800e0a2:	332c      	adds	r3, #44	; 0x2c
 800e0a4:	6a3a      	ldr	r2, [r7, #32]
 800e0a6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
 800e0b2:	e002      	b.n	800e0ba <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800e0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e0ba:	697b      	ldr	r3, [r7, #20]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	20005538 	.word	0x20005538

0800e0c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800e0d6:	4b30      	ldr	r3, [pc, #192]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800e0de:	f7ff feb5 	bl	800de4c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800e0e2:	4b2d      	ldr	r3, [pc, #180]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d24b      	bcs.n	800e186 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800e0ee:	f3ef 8311 	mrs	r3, BASEPRI
 800e0f2:	f04f 0120 	mov.w	r1, #32
 800e0f6:	f381 8811 	msr	BASEPRI, r1
 800e0fa:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d031      	beq.n	800e166 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800e102:	4925      	ldr	r1, [pc, #148]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	4613      	mov	r3, r2
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	4413      	add	r3, r2
 800e10c:	00db      	lsls	r3, r3, #3
 800e10e:	440b      	add	r3, r1
 800e110:	3360      	adds	r3, #96	; 0x60
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800e116:	4920      	ldr	r1, [pc, #128]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	4613      	mov	r3, r2
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	4413      	add	r3, r2
 800e120:	00db      	lsls	r3, r3, #3
 800e122:	440b      	add	r3, r1
 800e124:	3364      	adds	r3, #100	; 0x64
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800e12a:	491b      	ldr	r1, [pc, #108]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	4613      	mov	r3, r2
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	3368      	adds	r3, #104	; 0x68
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800e13e:	4916      	ldr	r1, [pc, #88]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	4613      	mov	r3, r2
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	4413      	add	r3, r2
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	440b      	add	r3, r1
 800e14c:	3370      	adds	r3, #112	; 0x70
 800e14e:	2200      	movs	r2, #0
 800e150:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800e152:	4911      	ldr	r1, [pc, #68]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	4613      	mov	r3, r2
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	4413      	add	r3, r2
 800e15c:	00db      	lsls	r3, r3, #3
 800e15e:	440b      	add	r3, r1
 800e160:	336c      	adds	r3, #108	; 0x6c
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800e166:	490c      	ldr	r1, [pc, #48]	; (800e198 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	4613      	mov	r3, r2
 800e16c:	005b      	lsls	r3, r3, #1
 800e16e:	4413      	add	r3, r2
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	440b      	add	r3, r1
 800e174:	3374      	adds	r3, #116	; 0x74
 800e176:	6a3a      	ldr	r2, [r7, #32]
 800e178:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]
 800e184:	e002      	b.n	800e18c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800e186:	f04f 33ff 	mov.w	r3, #4294967295
 800e18a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e18c:	697b      	ldr	r3, [r7, #20]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20005538 	.word	0x20005538

0800e19c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800e19c:	b480      	push	{r7}
 800e19e:	b087      	sub	sp, #28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e1ac:	e002      	b.n	800e1b4 <_EncodeStr+0x18>
    Len++;
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1f6      	bne.n	800e1ae <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d901      	bls.n	800e1cc <_EncodeStr+0x30>
    Len = Limit;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2bfe      	cmp	r3, #254	; 0xfe
 800e1d0:	d806      	bhi.n	800e1e0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	60fa      	str	r2, [r7, #12]
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	b2d2      	uxtb	r2, r2
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	e011      	b.n	800e204 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	60fa      	str	r2, [r7, #12]
 800e1e6:	22ff      	movs	r2, #255	; 0xff
 800e1e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	60fa      	str	r2, [r7, #12]
 800e1f0:	693a      	ldr	r2, [r7, #16]
 800e1f2:	b2d2      	uxtb	r2, r2
 800e1f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	0a19      	lsrs	r1, r3, #8
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	60fa      	str	r2, [r7, #12]
 800e200:	b2ca      	uxtb	r2, r1
 800e202:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e208:	e00a      	b.n	800e220 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	1c53      	adds	r3, r2, #1
 800e20e:	60bb      	str	r3, [r7, #8]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	1c59      	adds	r1, r3, #1
 800e214:	60f9      	str	r1, [r7, #12]
 800e216:	7812      	ldrb	r2, [r2, #0]
 800e218:	701a      	strb	r2, [r3, #0]
    n++;
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	3301      	adds	r3, #1
 800e21e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	429a      	cmp	r2, r3
 800e226:	d3f0      	bcc.n	800e20a <_EncodeStr+0x6e>
  }
  return pPayload;
 800e228:	68fb      	ldr	r3, [r7, #12]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	371c      	adds	r7, #28
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr

0800e236 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800e236:	b480      	push	{r7}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3304      	adds	r3, #4
}
 800e242:	4618      	mov	r0, r3
 800e244:	370c      	adds	r7, #12
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
	...

0800e250 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e256:	1cfb      	adds	r3, r7, #3
 800e258:	2201      	movs	r2, #1
 800e25a:	4619      	mov	r1, r3
 800e25c:	2001      	movs	r0, #1
 800e25e:	f7ff fe47 	bl	800def0 <SEGGER_RTT_ReadNoLock>
 800e262:	4603      	mov	r3, r0
 800e264:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dd4c      	ble.n	800e306 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800e26c:	78fb      	ldrb	r3, [r7, #3]
 800e26e:	2b07      	cmp	r3, #7
 800e270:	dc16      	bgt.n	800e2a0 <_HandleIncomingPacket+0x50>
 800e272:	2b00      	cmp	r3, #0
 800e274:	dd3c      	ble.n	800e2f0 <_HandleIncomingPacket+0xa0>
 800e276:	3b01      	subs	r3, #1
 800e278:	2b06      	cmp	r3, #6
 800e27a:	d839      	bhi.n	800e2f0 <_HandleIncomingPacket+0xa0>
 800e27c:	a201      	add	r2, pc, #4	; (adr r2, 800e284 <_HandleIncomingPacket+0x34>)
 800e27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e282:	bf00      	nop
 800e284:	0800e2a7 	.word	0x0800e2a7
 800e288:	0800e2ad 	.word	0x0800e2ad
 800e28c:	0800e2b3 	.word	0x0800e2b3
 800e290:	0800e2b9 	.word	0x0800e2b9
 800e294:	0800e2bf 	.word	0x0800e2bf
 800e298:	0800e2c5 	.word	0x0800e2c5
 800e29c:	0800e2cb 	.word	0x0800e2cb
 800e2a0:	2b80      	cmp	r3, #128	; 0x80
 800e2a2:	d015      	beq.n	800e2d0 <_HandleIncomingPacket+0x80>
 800e2a4:	e024      	b.n	800e2f0 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800e2a6:	f000 fc43 	bl	800eb30 <SEGGER_SYSVIEW_Start>
      break;
 800e2aa:	e031      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800e2ac:	f000 fcfc 	bl	800eca8 <SEGGER_SYSVIEW_Stop>
      break;
 800e2b0:	e02e      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800e2b2:	f000 fed7 	bl	800f064 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800e2b6:	e02b      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800e2b8:	f000 fe9c 	bl	800eff4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800e2bc:	e028      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800e2be:	f000 fd19 	bl	800ecf4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800e2c2:	e025      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800e2c4:	f001 f898 	bl	800f3f8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800e2c8:	e022      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800e2ca:	f001 f877 	bl	800f3bc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800e2ce:	e01f      	b.n	800e310 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e2d0:	1cfb      	adds	r3, r7, #3
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	f7ff fe0a 	bl	800def0 <SEGGER_RTT_ReadNoLock>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	dd11      	ble.n	800e30a <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800e2e6:	78fb      	ldrb	r3, [r7, #3]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 ffe7 	bl	800f2bc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800e2ee:	e00c      	b.n	800e30a <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800e2f0:	78fb      	ldrb	r3, [r7, #3]
 800e2f2:	b25b      	sxtb	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da0a      	bge.n	800e30e <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e2f8:	1cfb      	adds	r3, r7, #3
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	2001      	movs	r0, #1
 800e300:	f7ff fdf6 	bl	800def0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800e304:	e003      	b.n	800e30e <_HandleIncomingPacket+0xbe>
    }
  }
 800e306:	bf00      	nop
 800e308:	e002      	b.n	800e310 <_HandleIncomingPacket+0xc0>
      break;
 800e30a:	bf00      	nop
 800e30c:	e000      	b.n	800e310 <_HandleIncomingPacket+0xc0>
      break;
 800e30e:	bf00      	nop
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08c      	sub	sp, #48	; 0x30
 800e31c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800e31e:	2301      	movs	r3, #1
 800e320:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800e322:	1d3b      	adds	r3, r7, #4
 800e324:	3301      	adds	r3, #1
 800e326:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e32c:	4b30      	ldr	r3, [pc, #192]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e32e:	695b      	ldr	r3, [r3, #20]
 800e330:	62bb      	str	r3, [r7, #40]	; 0x28
 800e332:	e00b      	b.n	800e34c <_TrySendOverflowPacket+0x34>
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	b2da      	uxtb	r2, r3
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	1c59      	adds	r1, r3, #1
 800e33c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e33e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	09db      	lsrs	r3, r3, #7
 800e34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34e:	2b7f      	cmp	r3, #127	; 0x7f
 800e350:	d8f0      	bhi.n	800e334 <_TrySendOverflowPacket+0x1c>
 800e352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e354:	1c5a      	adds	r2, r3, #1
 800e356:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e35a:	b2d2      	uxtb	r2, r2
 800e35c:	701a      	strb	r2, [r3, #0]
 800e35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e360:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e362:	4b24      	ldr	r3, [pc, #144]	; (800e3f4 <_TrySendOverflowPacket+0xdc>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e368:	4b21      	ldr	r3, [pc, #132]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	69ba      	ldr	r2, [r7, #24]
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	627b      	str	r3, [r7, #36]	; 0x24
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	623b      	str	r3, [r7, #32]
 800e37a:	e00b      	b.n	800e394 <_TrySendOverflowPacket+0x7c>
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	1c59      	adds	r1, r3, #1
 800e384:	6279      	str	r1, [r7, #36]	; 0x24
 800e386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e38a:	b2d2      	uxtb	r2, r2
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	09db      	lsrs	r3, r3, #7
 800e392:	623b      	str	r3, [r7, #32]
 800e394:	6a3b      	ldr	r3, [r7, #32]
 800e396:	2b7f      	cmp	r3, #127	; 0x7f
 800e398:	d8f0      	bhi.n	800e37c <_TrySendOverflowPacket+0x64>
 800e39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	627a      	str	r2, [r7, #36]	; 0x24
 800e3a0:	6a3a      	ldr	r2, [r7, #32]
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	701a      	strb	r2, [r3, #0]
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800e3aa:	1d3b      	adds	r3, r7, #4
 800e3ac:	69fa      	ldr	r2, [r7, #28]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	1d3b      	adds	r3, r7, #4
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	f7f1 ff42 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d009      	beq.n	800e3da <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e3c6:	4a0a      	ldr	r2, [pc, #40]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800e3cc:	4b08      	ldr	r3, [pc, #32]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e3d6:	701a      	strb	r2, [r3, #0]
 800e3d8:	e004      	b.n	800e3e4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800e3da:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	4a03      	ldr	r2, [pc, #12]	; (800e3f0 <_TrySendOverflowPacket+0xd8>)
 800e3e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800e3e4:	693b      	ldr	r3, [r7, #16]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3730      	adds	r7, #48	; 0x30
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20005df8 	.word	0x20005df8
 800e3f4:	e0001004 	.word	0xe0001004

0800e3f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	; 0x28
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800e404:	4b63      	ldr	r3, [pc, #396]	; (800e594 <_SendPacket+0x19c>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d010      	beq.n	800e42e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e40c:	4b61      	ldr	r3, [pc, #388]	; (800e594 <_SendPacket+0x19c>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 80a1 	beq.w	800e558 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800e416:	4b5f      	ldr	r3, [pc, #380]	; (800e594 <_SendPacket+0x19c>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d109      	bne.n	800e432 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800e41e:	f7ff ff7b 	bl	800e318 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800e422:	4b5c      	ldr	r3, [pc, #368]	; (800e594 <_SendPacket+0x19c>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b01      	cmp	r3, #1
 800e428:	f040 8098 	bne.w	800e55c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800e42c:	e001      	b.n	800e432 <_SendPacket+0x3a>
    goto Send;
 800e42e:	bf00      	nop
 800e430:	e000      	b.n	800e434 <_SendPacket+0x3c>
Send:
 800e432:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b1f      	cmp	r3, #31
 800e438:	d809      	bhi.n	800e44e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800e43a:	4b56      	ldr	r3, [pc, #344]	; (800e594 <_SendPacket+0x19c>)
 800e43c:	69da      	ldr	r2, [r3, #28]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	fa22 f303 	lsr.w	r3, r2, r3
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f040 8089 	bne.w	800e560 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b17      	cmp	r3, #23
 800e452:	d807      	bhi.n	800e464 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	3b01      	subs	r3, #1
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	701a      	strb	r2, [r3, #0]
 800e462:	e03d      	b.n	800e4e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800e464:	68ba      	ldr	r2, [r7, #8]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	2b7f      	cmp	r3, #127	; 0x7f
 800e470:	d912      	bls.n	800e498 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	09da      	lsrs	r2, r3, #7
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3b01      	subs	r3, #1
 800e47a:	60fb      	str	r3, [r7, #12]
 800e47c:	b2d2      	uxtb	r2, r2
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	3a01      	subs	r2, #1
 800e48a:	60fa      	str	r2, [r7, #12]
 800e48c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e490:	b2da      	uxtb	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	701a      	strb	r2, [r3, #0]
 800e496:	e006      	b.n	800e4a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	60fb      	str	r3, [r7, #12]
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b7f      	cmp	r3, #127	; 0x7f
 800e4aa:	d912      	bls.n	800e4d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	09da      	lsrs	r2, r3, #7
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	b2d2      	uxtb	r2, r2
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	68fa      	ldr	r2, [r7, #12]
 800e4c2:	3a01      	subs	r2, #1
 800e4c4:	60fa      	str	r2, [r7, #12]
 800e4c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e4ca:	b2da      	uxtb	r2, r3
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	701a      	strb	r2, [r3, #0]
 800e4d0:	e006      	b.n	800e4e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e4e0:	4b2d      	ldr	r3, [pc, #180]	; (800e598 <_SendPacket+0x1a0>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e4e6:	4b2b      	ldr	r3, [pc, #172]	; (800e594 <_SendPacket+0x19c>)
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	69ba      	ldr	r2, [r7, #24]
 800e4ec:	1ad3      	subs	r3, r2, r3
 800e4ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	623b      	str	r3, [r7, #32]
 800e4f8:	e00b      	b.n	800e512 <_SendPacket+0x11a>
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	1c59      	adds	r1, r3, #1
 800e502:	6279      	str	r1, [r7, #36]	; 0x24
 800e504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e508:	b2d2      	uxtb	r2, r2
 800e50a:	701a      	strb	r2, [r3, #0]
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	09db      	lsrs	r3, r3, #7
 800e510:	623b      	str	r3, [r7, #32]
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	2b7f      	cmp	r3, #127	; 0x7f
 800e516:	d8f0      	bhi.n	800e4fa <_SendPacket+0x102>
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	627a      	str	r2, [r7, #36]	; 0x24
 800e51e:	6a3a      	ldr	r2, [r7, #32]
 800e520:	b2d2      	uxtb	r2, r2
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	461a      	mov	r2, r3
 800e530:	68f9      	ldr	r1, [r7, #12]
 800e532:	2001      	movs	r0, #1
 800e534:	f7f1 fe84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e538:	4603      	mov	r3, r0
 800e53a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d003      	beq.n	800e54a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e542:	4a14      	ldr	r2, [pc, #80]	; (800e594 <_SendPacket+0x19c>)
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	60d3      	str	r3, [r2, #12]
 800e548:	e00b      	b.n	800e562 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800e54a:	4b12      	ldr	r3, [pc, #72]	; (800e594 <_SendPacket+0x19c>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	3301      	adds	r3, #1
 800e550:	b2da      	uxtb	r2, r3
 800e552:	4b10      	ldr	r3, [pc, #64]	; (800e594 <_SendPacket+0x19c>)
 800e554:	701a      	strb	r2, [r3, #0]
 800e556:	e004      	b.n	800e562 <_SendPacket+0x16a>
    goto SendDone;
 800e558:	bf00      	nop
 800e55a:	e002      	b.n	800e562 <_SendPacket+0x16a>
      goto SendDone;
 800e55c:	bf00      	nop
 800e55e:	e000      	b.n	800e562 <_SendPacket+0x16a>
      goto SendDone;
 800e560:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800e562:	4b0e      	ldr	r3, [pc, #56]	; (800e59c <_SendPacket+0x1a4>)
 800e564:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e568:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <_SendPacket+0x1a4>)
 800e56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e56e:	429a      	cmp	r2, r3
 800e570:	d00b      	beq.n	800e58a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800e572:	4b08      	ldr	r3, [pc, #32]	; (800e594 <_SendPacket+0x19c>)
 800e574:	789b      	ldrb	r3, [r3, #2]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d107      	bne.n	800e58a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800e57a:	4b06      	ldr	r3, [pc, #24]	; (800e594 <_SendPacket+0x19c>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800e580:	f7ff fe66 	bl	800e250 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800e584:	4b03      	ldr	r3, [pc, #12]	; (800e594 <_SendPacket+0x19c>)
 800e586:	2200      	movs	r2, #0
 800e588:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800e58a:	bf00      	nop
 800e58c:	3728      	adds	r7, #40	; 0x28
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	20005df8 	.word	0x20005df8
 800e598:	e0001004 	.word	0xe0001004
 800e59c:	20005538 	.word	0x20005538

0800e5a0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b0a2      	sub	sp, #136	; 0x88
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800e5b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800e5c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d01d      	beq.n	800e606 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800e5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5ce:	2b25      	cmp	r3, #37	; 0x25
 800e5d0:	d1f1      	bne.n	800e5b6 <_VPrintHost+0x16>
      c = *p;
 800e5d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	1d19      	adds	r1, r3, #4
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	6011      	str	r1, [r2, #0]
 800e5e4:	6819      	ldr	r1, [r3, #0]
 800e5e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e5f0:	460a      	mov	r2, r1
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	3388      	adds	r3, #136	; 0x88
 800e5f6:	443b      	add	r3, r7
 800e5f8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800e5fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e600:	2b10      	cmp	r3, #16
 800e602:	d002      	beq.n	800e60a <_VPrintHost+0x6a>
    c = *p++;
 800e604:	e7d7      	b.n	800e5b6 <_VPrintHost+0x16>
      break;
 800e606:	bf00      	nop
 800e608:	e000      	b.n	800e60c <_VPrintHost+0x6c>
        break;
 800e60a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800e60c:	f3ef 8311 	mrs	r3, BASEPRI
 800e610:	f04f 0120 	mov.w	r1, #32
 800e614:	f381 8811 	msr	BASEPRI, r1
 800e618:	65bb      	str	r3, [r7, #88]	; 0x58
 800e61a:	483f      	ldr	r0, [pc, #252]	; (800e718 <_VPrintHost+0x178>)
 800e61c:	f7ff fe0b 	bl	800e236 <_PreparePacket>
 800e620:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e622:	2280      	movs	r2, #128	; 0x80
 800e624:	68f9      	ldr	r1, [r7, #12]
 800e626:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e628:	f7ff fdb8 	bl	800e19c <_EncodeStr>
 800e62c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800e62e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e630:	677b      	str	r3, [r7, #116]	; 0x74
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	673b      	str	r3, [r7, #112]	; 0x70
 800e636:	e00b      	b.n	800e650 <_VPrintHost+0xb0>
 800e638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e63e:	1c59      	adds	r1, r3, #1
 800e640:	6779      	str	r1, [r7, #116]	; 0x74
 800e642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e646:	b2d2      	uxtb	r2, r2
 800e648:	701a      	strb	r2, [r3, #0]
 800e64a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e64c:	09db      	lsrs	r3, r3, #7
 800e64e:	673b      	str	r3, [r7, #112]	; 0x70
 800e650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e652:	2b7f      	cmp	r3, #127	; 0x7f
 800e654:	d8f0      	bhi.n	800e638 <_VPrintHost+0x98>
 800e656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	677a      	str	r2, [r7, #116]	; 0x74
 800e65c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e65e:	b2d2      	uxtb	r2, r2
 800e660:	701a      	strb	r2, [r3, #0]
 800e662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e664:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800e666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e66a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e66e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e670:	e00b      	b.n	800e68a <_VPrintHost+0xea>
 800e672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e674:	b2da      	uxtb	r2, r3
 800e676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e678:	1c59      	adds	r1, r3, #1
 800e67a:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e67c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e680:	b2d2      	uxtb	r2, r2
 800e682:	701a      	strb	r2, [r3, #0]
 800e684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e686:	09db      	lsrs	r3, r3, #7
 800e688:	66bb      	str	r3, [r7, #104]	; 0x68
 800e68a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e68c:	2b7f      	cmp	r3, #127	; 0x7f
 800e68e:	d8f0      	bhi.n	800e672 <_VPrintHost+0xd2>
 800e690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e698:	b2d2      	uxtb	r2, r2
 800e69a:	701a      	strb	r2, [r3, #0]
 800e69c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e69e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800e6a0:	f107 0314 	add.w	r3, r7, #20
 800e6a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e6a8:	e022      	b.n	800e6f0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800e6aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6ac:	667b      	str	r3, [r7, #100]	; 0x64
 800e6ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	663b      	str	r3, [r7, #96]	; 0x60
 800e6b6:	e00b      	b.n	800e6d0 <_VPrintHost+0x130>
 800e6b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6be:	1c59      	adds	r1, r3, #1
 800e6c0:	6679      	str	r1, [r7, #100]	; 0x64
 800e6c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e6c6:	b2d2      	uxtb	r2, r2
 800e6c8:	701a      	strb	r2, [r3, #0]
 800e6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6cc:	09db      	lsrs	r3, r3, #7
 800e6ce:	663b      	str	r3, [r7, #96]	; 0x60
 800e6d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6d2:	2b7f      	cmp	r3, #127	; 0x7f
 800e6d4:	d8f0      	bhi.n	800e6b8 <_VPrintHost+0x118>
 800e6d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	667a      	str	r2, [r7, #100]	; 0x64
 800e6dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6de:	b2d2      	uxtb	r2, r2
 800e6e0:	701a      	strb	r2, [r3, #0]
 800e6e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6e4:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800e6e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e6f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e6f4:	1e5a      	subs	r2, r3, #1
 800e6f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1d5      	bne.n	800e6aa <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e6fe:	221a      	movs	r2, #26
 800e700:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e702:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e704:	f7ff fe78 	bl	800e3f8 <_SendPacket>
    RECORD_END();
 800e708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e70a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3788      	adds	r7, #136	; 0x88
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	20005e28 	.word	0x20005e28

0800e71c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af02      	add	r7, sp, #8
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e72a:	2300      	movs	r3, #0
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e732:	4a14      	ldr	r2, [pc, #80]	; (800e784 <SEGGER_SYSVIEW_Init+0x68>)
 800e734:	4914      	ldr	r1, [pc, #80]	; (800e788 <SEGGER_SYSVIEW_Init+0x6c>)
 800e736:	2001      	movs	r0, #1
 800e738:	f7ff fc5c 	bl	800dff4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e73c:	2300      	movs	r3, #0
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	2308      	movs	r3, #8
 800e742:	4a12      	ldr	r2, [pc, #72]	; (800e78c <SEGGER_SYSVIEW_Init+0x70>)
 800e744:	4910      	ldr	r1, [pc, #64]	; (800e788 <SEGGER_SYSVIEW_Init+0x6c>)
 800e746:	2001      	movs	r0, #1
 800e748:	f7ff fcbe 	bl	800e0c8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800e74c:	4b10      	ldr	r3, [pc, #64]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e752:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e754:	4b0f      	ldr	r3, [pc, #60]	; (800e794 <SEGGER_SYSVIEW_Init+0x78>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a0d      	ldr	r2, [pc, #52]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e75a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800e75c:	4a0c      	ldr	r2, [pc, #48]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800e762:	4a0b      	ldr	r2, [pc, #44]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800e768:	4a09      	ldr	r2, [pc, #36]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800e76e:	4a08      	ldr	r2, [pc, #32]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800e774:	4b06      	ldr	r3, [pc, #24]	; (800e790 <SEGGER_SYSVIEW_Init+0x74>)
 800e776:	2200      	movs	r2, #0
 800e778:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	200059f0 	.word	0x200059f0
 800e788:	0800fe34 	.word	0x0800fe34
 800e78c:	20005df0 	.word	0x20005df0
 800e790:	20005df8 	.word	0x20005df8
 800e794:	e0001004 	.word	0xe0001004

0800e798 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800e7a0:	4a04      	ldr	r2, [pc, #16]	; (800e7b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6113      	str	r3, [r2, #16]
}
 800e7a6:	bf00      	nop
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20005df8 	.word	0x20005df8

0800e7b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e7c0:	f3ef 8311 	mrs	r3, BASEPRI
 800e7c4:	f04f 0120 	mov.w	r1, #32
 800e7c8:	f381 8811 	msr	BASEPRI, r1
 800e7cc:	60fb      	str	r3, [r7, #12]
 800e7ce:	4808      	ldr	r0, [pc, #32]	; (800e7f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800e7d0:	f7ff fd31 	bl	800e236 <_PreparePacket>
 800e7d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	68b9      	ldr	r1, [r7, #8]
 800e7da:	68b8      	ldr	r0, [r7, #8]
 800e7dc:	f7ff fe0c 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f383 8811 	msr	BASEPRI, r3
}
 800e7e6:	bf00      	nop
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20005e28 	.word	0x20005e28

0800e7f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e7fe:	f3ef 8311 	mrs	r3, BASEPRI
 800e802:	f04f 0120 	mov.w	r1, #32
 800e806:	f381 8811 	msr	BASEPRI, r1
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	4816      	ldr	r0, [pc, #88]	; (800e868 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800e80e:	f7ff fd12 	bl	800e236 <_PreparePacket>
 800e812:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	61fb      	str	r3, [r7, #28]
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	61bb      	str	r3, [r7, #24]
 800e820:	e00b      	b.n	800e83a <SEGGER_SYSVIEW_RecordU32+0x46>
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	b2da      	uxtb	r2, r3
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	1c59      	adds	r1, r3, #1
 800e82a:	61f9      	str	r1, [r7, #28]
 800e82c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e830:	b2d2      	uxtb	r2, r2
 800e832:	701a      	strb	r2, [r3, #0]
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	09db      	lsrs	r3, r3, #7
 800e838:	61bb      	str	r3, [r7, #24]
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	2b7f      	cmp	r3, #127	; 0x7f
 800e83e:	d8f0      	bhi.n	800e822 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	61fa      	str	r2, [r7, #28]
 800e846:	69ba      	ldr	r2, [r7, #24]
 800e848:	b2d2      	uxtb	r2, r2
 800e84a:	701a      	strb	r2, [r3, #0]
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	68f9      	ldr	r1, [r7, #12]
 800e854:	6938      	ldr	r0, [r7, #16]
 800e856:	f7ff fdcf 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	f383 8811 	msr	BASEPRI, r3
}
 800e860:	bf00      	nop
 800e862:	3720      	adds	r7, #32
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	20005e28 	.word	0x20005e28

0800e86c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08c      	sub	sp, #48	; 0x30
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e878:	f3ef 8311 	mrs	r3, BASEPRI
 800e87c:	f04f 0120 	mov.w	r1, #32
 800e880:	f381 8811 	msr	BASEPRI, r1
 800e884:	61fb      	str	r3, [r7, #28]
 800e886:	4825      	ldr	r0, [pc, #148]	; (800e91c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800e888:	f7ff fcd5 	bl	800e236 <_PreparePacket>
 800e88c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	62bb      	str	r3, [r7, #40]	; 0x28
 800e89a:	e00b      	b.n	800e8b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	1c59      	adds	r1, r3, #1
 800e8a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e8a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e8aa:	b2d2      	uxtb	r2, r2
 800e8ac:	701a      	strb	r2, [r3, #0]
 800e8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b0:	09db      	lsrs	r3, r3, #7
 800e8b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b6:	2b7f      	cmp	r3, #127	; 0x7f
 800e8b8:	d8f0      	bhi.n	800e89c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8c2:	b2d2      	uxtb	r2, r2
 800e8c4:	701a      	strb	r2, [r3, #0]
 800e8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	623b      	str	r3, [r7, #32]
 800e8d2:	e00b      	b.n	800e8ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	1c59      	adds	r1, r3, #1
 800e8dc:	6279      	str	r1, [r7, #36]	; 0x24
 800e8de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e8e2:	b2d2      	uxtb	r2, r2
 800e8e4:	701a      	strb	r2, [r3, #0]
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	09db      	lsrs	r3, r3, #7
 800e8ea:	623b      	str	r3, [r7, #32]
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
 800e8ee:	2b7f      	cmp	r3, #127	; 0x7f
 800e8f0:	d8f0      	bhi.n	800e8d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	1c5a      	adds	r2, r3, #1
 800e8f6:	627a      	str	r2, [r7, #36]	; 0x24
 800e8f8:	6a3a      	ldr	r2, [r7, #32]
 800e8fa:	b2d2      	uxtb	r2, r2
 800e8fc:	701a      	strb	r2, [r3, #0]
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	6979      	ldr	r1, [r7, #20]
 800e906:	69b8      	ldr	r0, [r7, #24]
 800e908:	f7ff fd76 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	f383 8811 	msr	BASEPRI, r3
}
 800e912:	bf00      	nop
 800e914:	3730      	adds	r7, #48	; 0x30
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	20005e28 	.word	0x20005e28

0800e920 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800e920:	b580      	push	{r7, lr}
 800e922:	b08e      	sub	sp, #56	; 0x38
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800e92e:	f3ef 8311 	mrs	r3, BASEPRI
 800e932:	f04f 0120 	mov.w	r1, #32
 800e936:	f381 8811 	msr	BASEPRI, r1
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	4832      	ldr	r0, [pc, #200]	; (800ea08 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800e93e:	f7ff fc7a 	bl	800e236 <_PreparePacket>
 800e942:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	637b      	str	r3, [r7, #52]	; 0x34
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	633b      	str	r3, [r7, #48]	; 0x30
 800e950:	e00b      	b.n	800e96a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800e952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e954:	b2da      	uxtb	r2, r3
 800e956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e958:	1c59      	adds	r1, r3, #1
 800e95a:	6379      	str	r1, [r7, #52]	; 0x34
 800e95c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e960:	b2d2      	uxtb	r2, r2
 800e962:	701a      	strb	r2, [r3, #0]
 800e964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e966:	09db      	lsrs	r3, r3, #7
 800e968:	633b      	str	r3, [r7, #48]	; 0x30
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	2b7f      	cmp	r3, #127	; 0x7f
 800e96e:	d8f0      	bhi.n	800e952 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800e970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e972:	1c5a      	adds	r2, r3, #1
 800e974:	637a      	str	r2, [r7, #52]	; 0x34
 800e976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e978:	b2d2      	uxtb	r2, r2
 800e97a:	701a      	strb	r2, [r3, #0]
 800e97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e97e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28
 800e988:	e00b      	b.n	800e9a2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e990:	1c59      	adds	r1, r3, #1
 800e992:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e998:	b2d2      	uxtb	r2, r2
 800e99a:	701a      	strb	r2, [r3, #0]
 800e99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99e:	09db      	lsrs	r3, r3, #7
 800e9a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	2b7f      	cmp	r3, #127	; 0x7f
 800e9a6:	d8f0      	bhi.n	800e98a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9b0:	b2d2      	uxtb	r2, r2
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	623b      	str	r3, [r7, #32]
 800e9c0:	e00b      	b.n	800e9da <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	1c59      	adds	r1, r3, #1
 800e9ca:	6279      	str	r1, [r7, #36]	; 0x24
 800e9cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e9d0:	b2d2      	uxtb	r2, r2
 800e9d2:	701a      	strb	r2, [r3, #0]
 800e9d4:	6a3b      	ldr	r3, [r7, #32]
 800e9d6:	09db      	lsrs	r3, r3, #7
 800e9d8:	623b      	str	r3, [r7, #32]
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	2b7f      	cmp	r3, #127	; 0x7f
 800e9de:	d8f0      	bhi.n	800e9c2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	1c5a      	adds	r2, r3, #1
 800e9e4:	627a      	str	r2, [r7, #36]	; 0x24
 800e9e6:	6a3a      	ldr	r2, [r7, #32]
 800e9e8:	b2d2      	uxtb	r2, r2
 800e9ea:	701a      	strb	r2, [r3, #0]
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	6979      	ldr	r1, [r7, #20]
 800e9f4:	69b8      	ldr	r0, [r7, #24]
 800e9f6:	f7ff fcff 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	f383 8811 	msr	BASEPRI, r3
}
 800ea00:	bf00      	nop
 800ea02:	3738      	adds	r7, #56	; 0x38
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	20005e28 	.word	0x20005e28

0800ea0c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b090      	sub	sp, #64	; 0x40
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ea1a:	f3ef 8311 	mrs	r3, BASEPRI
 800ea1e:	f04f 0120 	mov.w	r1, #32
 800ea22:	f381 8811 	msr	BASEPRI, r1
 800ea26:	61fb      	str	r3, [r7, #28]
 800ea28:	4840      	ldr	r0, [pc, #256]	; (800eb2c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800ea2a:	f7ff fc04 	bl	800e236 <_PreparePacket>
 800ea2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea3c:	e00b      	b.n	800ea56 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ea3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea44:	1c59      	adds	r1, r3, #1
 800ea46:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ea48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea4c:	b2d2      	uxtb	r2, r2
 800ea4e:	701a      	strb	r2, [r3, #0]
 800ea50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea52:	09db      	lsrs	r3, r3, #7
 800ea54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea58:	2b7f      	cmp	r3, #127	; 0x7f
 800ea5a:	d8f0      	bhi.n	800ea3e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ea5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea64:	b2d2      	uxtb	r2, r2
 800ea66:	701a      	strb	r2, [r3, #0]
 800ea68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	633b      	str	r3, [r7, #48]	; 0x30
 800ea74:	e00b      	b.n	800ea8e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ea76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7c:	1c59      	adds	r1, r3, #1
 800ea7e:	6379      	str	r1, [r7, #52]	; 0x34
 800ea80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea84:	b2d2      	uxtb	r2, r2
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	09db      	lsrs	r3, r3, #7
 800ea8c:	633b      	str	r3, [r7, #48]	; 0x30
 800ea8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea90:	2b7f      	cmp	r3, #127	; 0x7f
 800ea92:	d8f0      	bhi.n	800ea76 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ea94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea96:	1c5a      	adds	r2, r3, #1
 800ea98:	637a      	str	r2, [r7, #52]	; 0x34
 800ea9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea9c:	b2d2      	uxtb	r2, r2
 800ea9e:	701a      	strb	r2, [r3, #0]
 800eaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaac:	e00b      	b.n	800eac6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800eaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	1c59      	adds	r1, r3, #1
 800eab6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eabc:	b2d2      	uxtb	r2, r2
 800eabe:	701a      	strb	r2, [r3, #0]
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	09db      	lsrs	r3, r3, #7
 800eac4:	62bb      	str	r3, [r7, #40]	; 0x28
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	2b7f      	cmp	r3, #127	; 0x7f
 800eaca:	d8f0      	bhi.n	800eaae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ead2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ead4:	b2d2      	uxtb	r2, r2
 800ead6:	701a      	strb	r2, [r3, #0]
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	627b      	str	r3, [r7, #36]	; 0x24
 800eae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae2:	623b      	str	r3, [r7, #32]
 800eae4:	e00b      	b.n	800eafe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	1c59      	adds	r1, r3, #1
 800eaee:	6279      	str	r1, [r7, #36]	; 0x24
 800eaf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eaf4:	b2d2      	uxtb	r2, r2
 800eaf6:	701a      	strb	r2, [r3, #0]
 800eaf8:	6a3b      	ldr	r3, [r7, #32]
 800eafa:	09db      	lsrs	r3, r3, #7
 800eafc:	623b      	str	r3, [r7, #32]
 800eafe:	6a3b      	ldr	r3, [r7, #32]
 800eb00:	2b7f      	cmp	r3, #127	; 0x7f
 800eb02:	d8f0      	bhi.n	800eae6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	627a      	str	r2, [r7, #36]	; 0x24
 800eb0a:	6a3a      	ldr	r2, [r7, #32]
 800eb0c:	b2d2      	uxtb	r2, r2
 800eb0e:	701a      	strb	r2, [r3, #0]
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	6979      	ldr	r1, [r7, #20]
 800eb18:	69b8      	ldr	r0, [r7, #24]
 800eb1a:	f7ff fc6d 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	f383 8811 	msr	BASEPRI, r3
}
 800eb24:	bf00      	nop
 800eb26:	3740      	adds	r7, #64	; 0x40
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	20005e28 	.word	0x20005e28

0800eb30 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08c      	sub	sp, #48	; 0x30
 800eb34:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800eb36:	4b59      	ldr	r3, [pc, #356]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f040 80aa 	bne.w	800ec94 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800eb40:	4b56      	ldr	r3, [pc, #344]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800eb46:	f3ef 8311 	mrs	r3, BASEPRI
 800eb4a:	f04f 0120 	mov.w	r1, #32
 800eb4e:	f381 8811 	msr	BASEPRI, r1
 800eb52:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800eb54:	220a      	movs	r2, #10
 800eb56:	4952      	ldr	r1, [pc, #328]	; (800eca0 <SEGGER_SYSVIEW_Start+0x170>)
 800eb58:	2001      	movs	r0, #1
 800eb5a:	f7f1 fb71 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800eb64:	200a      	movs	r0, #10
 800eb66:	f7ff fe27 	bl	800e7b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800eb6a:	f3ef 8311 	mrs	r3, BASEPRI
 800eb6e:	f04f 0120 	mov.w	r1, #32
 800eb72:	f381 8811 	msr	BASEPRI, r1
 800eb76:	60bb      	str	r3, [r7, #8]
 800eb78:	484a      	ldr	r0, [pc, #296]	; (800eca4 <SEGGER_SYSVIEW_Start+0x174>)
 800eb7a:	f7ff fb5c 	bl	800e236 <_PreparePacket>
 800eb7e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb88:	4b44      	ldr	r3, [pc, #272]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb8e:	e00b      	b.n	800eba8 <SEGGER_SYSVIEW_Start+0x78>
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	1c59      	adds	r1, r3, #1
 800eb98:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eb9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb9e:	b2d2      	uxtb	r2, r2
 800eba0:	701a      	strb	r2, [r3, #0]
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	09db      	lsrs	r3, r3, #7
 800eba6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebaa:	2b7f      	cmp	r3, #127	; 0x7f
 800ebac:	d8f0      	bhi.n	800eb90 <SEGGER_SYSVIEW_Start+0x60>
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	1c5a      	adds	r2, r3, #1
 800ebb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb6:	b2d2      	uxtb	r2, r2
 800ebb8:	701a      	strb	r2, [r3, #0]
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc2:	4b36      	ldr	r3, [pc, #216]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	623b      	str	r3, [r7, #32]
 800ebc8:	e00b      	b.n	800ebe2 <SEGGER_SYSVIEW_Start+0xb2>
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	b2da      	uxtb	r2, r3
 800ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd0:	1c59      	adds	r1, r3, #1
 800ebd2:	6279      	str	r1, [r7, #36]	; 0x24
 800ebd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebd8:	b2d2      	uxtb	r2, r2
 800ebda:	701a      	strb	r2, [r3, #0]
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	09db      	lsrs	r3, r3, #7
 800ebe0:	623b      	str	r3, [r7, #32]
 800ebe2:	6a3b      	ldr	r3, [r7, #32]
 800ebe4:	2b7f      	cmp	r3, #127	; 0x7f
 800ebe6:	d8f0      	bhi.n	800ebca <SEGGER_SYSVIEW_Start+0x9a>
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	627a      	str	r2, [r7, #36]	; 0x24
 800ebee:	6a3a      	ldr	r2, [r7, #32]
 800ebf0:	b2d2      	uxtb	r2, r2
 800ebf2:	701a      	strb	r2, [r3, #0]
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	61fb      	str	r3, [r7, #28]
 800ebfc:	4b27      	ldr	r3, [pc, #156]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	61bb      	str	r3, [r7, #24]
 800ec02:	e00b      	b.n	800ec1c <SEGGER_SYSVIEW_Start+0xec>
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	1c59      	adds	r1, r3, #1
 800ec0c:	61f9      	str	r1, [r7, #28]
 800ec0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec12:	b2d2      	uxtb	r2, r2
 800ec14:	701a      	strb	r2, [r3, #0]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	09db      	lsrs	r3, r3, #7
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ec20:	d8f0      	bhi.n	800ec04 <SEGGER_SYSVIEW_Start+0xd4>
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	1c5a      	adds	r2, r3, #1
 800ec26:	61fa      	str	r2, [r7, #28]
 800ec28:	69ba      	ldr	r2, [r7, #24]
 800ec2a:	b2d2      	uxtb	r2, r2
 800ec2c:	701a      	strb	r2, [r3, #0]
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	2302      	movs	r3, #2
 800ec38:	613b      	str	r3, [r7, #16]
 800ec3a:	e00b      	b.n	800ec54 <SEGGER_SYSVIEW_Start+0x124>
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	1c59      	adds	r1, r3, #1
 800ec44:	6179      	str	r1, [r7, #20]
 800ec46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec4a:	b2d2      	uxtb	r2, r2
 800ec4c:	701a      	strb	r2, [r3, #0]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	09db      	lsrs	r3, r3, #7
 800ec52:	613b      	str	r3, [r7, #16]
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	2b7f      	cmp	r3, #127	; 0x7f
 800ec58:	d8f0      	bhi.n	800ec3c <SEGGER_SYSVIEW_Start+0x10c>
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	617a      	str	r2, [r7, #20]
 800ec60:	693a      	ldr	r2, [r7, #16]
 800ec62:	b2d2      	uxtb	r2, r2
 800ec64:	701a      	strb	r2, [r3, #0]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ec6a:	2218      	movs	r2, #24
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f7ff fbc2 	bl	800e3f8 <_SendPacket>
      RECORD_END();
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ec7a:	4b08      	ldr	r3, [pc, #32]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800ec82:	4b06      	ldr	r3, [pc, #24]	; (800ec9c <SEGGER_SYSVIEW_Start+0x16c>)
 800ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec86:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800ec88:	f000 f9ec 	bl	800f064 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800ec8c:	f000 f9b2 	bl	800eff4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800ec90:	f000 fbb2 	bl	800f3f8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800ec94:	bf00      	nop
 800ec96:	3730      	adds	r7, #48	; 0x30
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	20005df8 	.word	0x20005df8
 800eca0:	0800ff1c 	.word	0x0800ff1c
 800eca4:	20005e28 	.word	0x20005e28

0800eca8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ecae:	f3ef 8311 	mrs	r3, BASEPRI
 800ecb2:	f04f 0120 	mov.w	r1, #32
 800ecb6:	f381 8811 	msr	BASEPRI, r1
 800ecba:	607b      	str	r3, [r7, #4]
 800ecbc:	480b      	ldr	r0, [pc, #44]	; (800ecec <SEGGER_SYSVIEW_Stop+0x44>)
 800ecbe:	f7ff faba 	bl	800e236 <_PreparePacket>
 800ecc2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ecc4:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <SEGGER_SYSVIEW_Stop+0x48>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d007      	beq.n	800ecdc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800eccc:	220b      	movs	r2, #11
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	6838      	ldr	r0, [r7, #0]
 800ecd2:	f7ff fb91 	bl	800e3f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ecd6:	4b06      	ldr	r3, [pc, #24]	; (800ecf0 <SEGGER_SYSVIEW_Stop+0x48>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f383 8811 	msr	BASEPRI, r3
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20005e28 	.word	0x20005e28
 800ecf0:	20005df8 	.word	0x20005df8

0800ecf4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b08c      	sub	sp, #48	; 0x30
 800ecf8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ecfa:	f3ef 8311 	mrs	r3, BASEPRI
 800ecfe:	f04f 0120 	mov.w	r1, #32
 800ed02:	f381 8811 	msr	BASEPRI, r1
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	4845      	ldr	r0, [pc, #276]	; (800ee20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ed0a:	f7ff fa94 	bl	800e236 <_PreparePacket>
 800ed0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed18:	4b42      	ldr	r3, [pc, #264]	; (800ee24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed1e:	e00b      	b.n	800ed38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	1c59      	adds	r1, r3, #1
 800ed28:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ed2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed2e:	b2d2      	uxtb	r2, r2
 800ed30:	701a      	strb	r2, [r3, #0]
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	09db      	lsrs	r3, r3, #7
 800ed36:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ed3c:	d8f0      	bhi.n	800ed20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed46:	b2d2      	uxtb	r2, r2
 800ed48:	701a      	strb	r2, [r3, #0]
 800ed4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
 800ed52:	4b34      	ldr	r3, [pc, #208]	; (800ee24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	623b      	str	r3, [r7, #32]
 800ed58:	e00b      	b.n	800ed72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ed5a:	6a3b      	ldr	r3, [r7, #32]
 800ed5c:	b2da      	uxtb	r2, r3
 800ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed60:	1c59      	adds	r1, r3, #1
 800ed62:	6279      	str	r1, [r7, #36]	; 0x24
 800ed64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed68:	b2d2      	uxtb	r2, r2
 800ed6a:	701a      	strb	r2, [r3, #0]
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	09db      	lsrs	r3, r3, #7
 800ed70:	623b      	str	r3, [r7, #32]
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	2b7f      	cmp	r3, #127	; 0x7f
 800ed76:	d8f0      	bhi.n	800ed5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	1c5a      	adds	r2, r3, #1
 800ed7c:	627a      	str	r2, [r7, #36]	; 0x24
 800ed7e:	6a3a      	ldr	r2, [r7, #32]
 800ed80:	b2d2      	uxtb	r2, r2
 800ed82:	701a      	strb	r2, [r3, #0]
 800ed84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	61fb      	str	r3, [r7, #28]
 800ed8c:	4b25      	ldr	r3, [pc, #148]	; (800ee24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	61bb      	str	r3, [r7, #24]
 800ed92:	e00b      	b.n	800edac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	1c59      	adds	r1, r3, #1
 800ed9c:	61f9      	str	r1, [r7, #28]
 800ed9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eda2:	b2d2      	uxtb	r2, r2
 800eda4:	701a      	strb	r2, [r3, #0]
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	09db      	lsrs	r3, r3, #7
 800edaa:	61bb      	str	r3, [r7, #24]
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	2b7f      	cmp	r3, #127	; 0x7f
 800edb0:	d8f0      	bhi.n	800ed94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	61fa      	str	r2, [r7, #28]
 800edb8:	69ba      	ldr	r2, [r7, #24]
 800edba:	b2d2      	uxtb	r2, r2
 800edbc:	701a      	strb	r2, [r3, #0]
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	617b      	str	r3, [r7, #20]
 800edc6:	2302      	movs	r3, #2
 800edc8:	613b      	str	r3, [r7, #16]
 800edca:	e00b      	b.n	800ede4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	1c59      	adds	r1, r3, #1
 800edd4:	6179      	str	r1, [r7, #20]
 800edd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800edda:	b2d2      	uxtb	r2, r2
 800eddc:	701a      	strb	r2, [r3, #0]
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	09db      	lsrs	r3, r3, #7
 800ede2:	613b      	str	r3, [r7, #16]
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	2b7f      	cmp	r3, #127	; 0x7f
 800ede8:	d8f0      	bhi.n	800edcc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	617a      	str	r2, [r7, #20]
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	b2d2      	uxtb	r2, r2
 800edf4:	701a      	strb	r2, [r3, #0]
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800edfa:	2218      	movs	r2, #24
 800edfc:	6879      	ldr	r1, [r7, #4]
 800edfe:	68b8      	ldr	r0, [r7, #8]
 800ee00:	f7ff fafa 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ee0a:	4b06      	ldr	r3, [pc, #24]	; (800ee24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800ee12:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ee14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee16:	4798      	blx	r3
  }
}
 800ee18:	bf00      	nop
 800ee1a:	3730      	adds	r7, #48	; 0x30
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	20005e28 	.word	0x20005e28
 800ee24:	20005df8 	.word	0x20005df8

0800ee28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b092      	sub	sp, #72	; 0x48
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800ee30:	f3ef 8311 	mrs	r3, BASEPRI
 800ee34:	f04f 0120 	mov.w	r1, #32
 800ee38:	f381 8811 	msr	BASEPRI, r1
 800ee3c:	617b      	str	r3, [r7, #20]
 800ee3e:	486b      	ldr	r0, [pc, #428]	; (800efec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ee40:	f7ff f9f9 	bl	800e236 <_PreparePacket>
 800ee44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	4b67      	ldr	r3, [pc, #412]	; (800eff0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	089b      	lsrs	r3, r3, #2
 800ee5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ee5c:	e00b      	b.n	800ee76 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800ee5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee64:	1c59      	adds	r1, r3, #1
 800ee66:	6479      	str	r1, [r7, #68]	; 0x44
 800ee68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee6c:	b2d2      	uxtb	r2, r2
 800ee6e:	701a      	strb	r2, [r3, #0]
 800ee70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee72:	09db      	lsrs	r3, r3, #7
 800ee74:	643b      	str	r3, [r7, #64]	; 0x40
 800ee76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee78:	2b7f      	cmp	r3, #127	; 0x7f
 800ee7a:	d8f0      	bhi.n	800ee5e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800ee7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee7e:	1c5a      	adds	r2, r3, #1
 800ee80:	647a      	str	r2, [r7, #68]	; 0x44
 800ee82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee84:	b2d2      	uxtb	r2, r2
 800ee86:	701a      	strb	r2, [r3, #0]
 800ee88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee96:	e00b      	b.n	800eeb0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800ee98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee9e:	1c59      	adds	r1, r3, #1
 800eea0:	63f9      	str	r1, [r7, #60]	; 0x3c
 800eea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eea6:	b2d2      	uxtb	r2, r2
 800eea8:	701a      	strb	r2, [r3, #0]
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeac:	09db      	lsrs	r3, r3, #7
 800eeae:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb2:	2b7f      	cmp	r3, #127	; 0x7f
 800eeb4:	d8f0      	bhi.n	800ee98 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800eeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eebe:	b2d2      	uxtb	r2, r2
 800eec0:	701a      	strb	r2, [r3, #0]
 800eec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eec4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	2220      	movs	r2, #32
 800eecc:	4619      	mov	r1, r3
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f7ff f964 	bl	800e19c <_EncodeStr>
 800eed4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800eed6:	2209      	movs	r2, #9
 800eed8:	68f9      	ldr	r1, [r7, #12]
 800eeda:	6938      	ldr	r0, [r7, #16]
 800eedc:	f7ff fa8c 	bl	800e3f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	637b      	str	r3, [r7, #52]	; 0x34
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	4b40      	ldr	r3, [pc, #256]	; (800eff0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	089b      	lsrs	r3, r3, #2
 800eef4:	633b      	str	r3, [r7, #48]	; 0x30
 800eef6:	e00b      	b.n	800ef10 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800eef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eefe:	1c59      	adds	r1, r3, #1
 800ef00:	6379      	str	r1, [r7, #52]	; 0x34
 800ef02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef06:	b2d2      	uxtb	r2, r2
 800ef08:	701a      	strb	r2, [r3, #0]
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0c:	09db      	lsrs	r3, r3, #7
 800ef0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef12:	2b7f      	cmp	r3, #127	; 0x7f
 800ef14:	d8f0      	bhi.n	800eef8 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800ef16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	637a      	str	r2, [r7, #52]	; 0x34
 800ef1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef1e:	b2d2      	uxtb	r2, r2
 800ef20:	701a      	strb	r2, [r3, #0]
 800ef22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef30:	e00b      	b.n	800ef4a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800ef32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	1c59      	adds	r1, r3, #1
 800ef3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ef3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef40:	b2d2      	uxtb	r2, r2
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	09db      	lsrs	r3, r3, #7
 800ef48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4c:	2b7f      	cmp	r3, #127	; 0x7f
 800ef4e:	d8f0      	bhi.n	800ef32 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef58:	b2d2      	uxtb	r2, r2
 800ef5a:	701a      	strb	r2, [r3, #0]
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	627b      	str	r3, [r7, #36]	; 0x24
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	691b      	ldr	r3, [r3, #16]
 800ef68:	623b      	str	r3, [r7, #32]
 800ef6a:	e00b      	b.n	800ef84 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	1c59      	adds	r1, r3, #1
 800ef74:	6279      	str	r1, [r7, #36]	; 0x24
 800ef76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef7a:	b2d2      	uxtb	r2, r2
 800ef7c:	701a      	strb	r2, [r3, #0]
 800ef7e:	6a3b      	ldr	r3, [r7, #32]
 800ef80:	09db      	lsrs	r3, r3, #7
 800ef82:	623b      	str	r3, [r7, #32]
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	2b7f      	cmp	r3, #127	; 0x7f
 800ef88:	d8f0      	bhi.n	800ef6c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	1c5a      	adds	r2, r3, #1
 800ef8e:	627a      	str	r2, [r7, #36]	; 0x24
 800ef90:	6a3a      	ldr	r2, [r7, #32]
 800ef92:	b2d2      	uxtb	r2, r2
 800ef94:	701a      	strb	r2, [r3, #0]
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	61fb      	str	r3, [r7, #28]
 800ef9e:	2300      	movs	r3, #0
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	e00b      	b.n	800efbc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	b2da      	uxtb	r2, r3
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	1c59      	adds	r1, r3, #1
 800efac:	61f9      	str	r1, [r7, #28]
 800efae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	09db      	lsrs	r3, r3, #7
 800efba:	61bb      	str	r3, [r7, #24]
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	2b7f      	cmp	r3, #127	; 0x7f
 800efc0:	d8f0      	bhi.n	800efa4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	1c5a      	adds	r2, r3, #1
 800efc6:	61fa      	str	r2, [r7, #28]
 800efc8:	69ba      	ldr	r2, [r7, #24]
 800efca:	b2d2      	uxtb	r2, r2
 800efcc:	701a      	strb	r2, [r3, #0]
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800efd2:	2215      	movs	r2, #21
 800efd4:	68f9      	ldr	r1, [r7, #12]
 800efd6:	6938      	ldr	r0, [r7, #16]
 800efd8:	f7ff fa0e 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	f383 8811 	msr	BASEPRI, r3
}
 800efe2:	bf00      	nop
 800efe4:	3748      	adds	r7, #72	; 0x48
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	20005e28 	.word	0x20005e28
 800eff0:	20005df8 	.word	0x20005df8

0800eff4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800eff8:	4b07      	ldr	r3, [pc, #28]	; (800f018 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800effa:	6a1b      	ldr	r3, [r3, #32]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d008      	beq.n	800f012 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800f000:	4b05      	ldr	r3, [pc, #20]	; (800f018 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f002:	6a1b      	ldr	r3, [r3, #32]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d003      	beq.n	800f012 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800f00a:	4b03      	ldr	r3, [pc, #12]	; (800f018 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	4798      	blx	r3
  }
}
 800f012:	bf00      	nop
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20005df8 	.word	0x20005df8

0800f01c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f024:	f3ef 8311 	mrs	r3, BASEPRI
 800f028:	f04f 0120 	mov.w	r1, #32
 800f02c:	f381 8811 	msr	BASEPRI, r1
 800f030:	617b      	str	r3, [r7, #20]
 800f032:	480b      	ldr	r0, [pc, #44]	; (800f060 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800f034:	f7ff f8ff 	bl	800e236 <_PreparePacket>
 800f038:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f03a:	2280      	movs	r2, #128	; 0x80
 800f03c:	6879      	ldr	r1, [r7, #4]
 800f03e:	6938      	ldr	r0, [r7, #16]
 800f040:	f7ff f8ac 	bl	800e19c <_EncodeStr>
 800f044:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800f046:	220e      	movs	r2, #14
 800f048:	68f9      	ldr	r1, [r7, #12]
 800f04a:	6938      	ldr	r0, [r7, #16]
 800f04c:	f7ff f9d4 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f383 8811 	msr	BASEPRI, r3
}
 800f056:	bf00      	nop
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20005e28 	.word	0x20005e28

0800f064 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800f06a:	4b15      	ldr	r3, [pc, #84]	; (800f0c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d01a      	beq.n	800f0a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800f072:	4b13      	ldr	r3, [pc, #76]	; (800f0c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d015      	beq.n	800f0a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800f07c:	4b10      	ldr	r3, [pc, #64]	; (800f0c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4798      	blx	r3
 800f084:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f088:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800f08a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	f04f 0300 	mov.w	r3, #0
 800f096:	000a      	movs	r2, r1
 800f098:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f09a:	4613      	mov	r3, r2
 800f09c:	461a      	mov	r2, r3
 800f09e:	4621      	mov	r1, r4
 800f0a0:	200d      	movs	r0, #13
 800f0a2:	f7ff fbe3 	bl	800e86c <SEGGER_SYSVIEW_RecordU32x2>
 800f0a6:	e006      	b.n	800f0b6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800f0a8:	4b06      	ldr	r3, [pc, #24]	; (800f0c4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	200c      	movs	r0, #12
 800f0b0:	f7ff fba0 	bl	800e7f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800f0b4:	bf00      	nop
 800f0b6:	bf00      	nop
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd90      	pop	{r4, r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	20005df8 	.word	0x20005df8
 800f0c4:	e0001004 	.word	0xe0001004

0800f0c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f0ce:	f3ef 8311 	mrs	r3, BASEPRI
 800f0d2:	f04f 0120 	mov.w	r1, #32
 800f0d6:	f381 8811 	msr	BASEPRI, r1
 800f0da:	607b      	str	r3, [r7, #4]
 800f0dc:	4807      	ldr	r0, [pc, #28]	; (800f0fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800f0de:	f7ff f8aa 	bl	800e236 <_PreparePacket>
 800f0e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800f0e4:	2211      	movs	r2, #17
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	6838      	ldr	r0, [r7, #0]
 800f0ea:	f7ff f985 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f383 8811 	msr	BASEPRI, r3
}
 800f0f4:	bf00      	nop
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	20005e28 	.word	0x20005e28

0800f100 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f108:	f3ef 8311 	mrs	r3, BASEPRI
 800f10c:	f04f 0120 	mov.w	r1, #32
 800f110:	f381 8811 	msr	BASEPRI, r1
 800f114:	617b      	str	r3, [r7, #20]
 800f116:	481a      	ldr	r0, [pc, #104]	; (800f180 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800f118:	f7ff f88d 	bl	800e236 <_PreparePacket>
 800f11c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f122:	4b18      	ldr	r3, [pc, #96]	; (800f184 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	1ad3      	subs	r3, r2, r3
 800f12a:	089b      	lsrs	r3, r3, #2
 800f12c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	61fb      	str	r3, [r7, #28]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	61bb      	str	r3, [r7, #24]
 800f136:	e00b      	b.n	800f150 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800f138:	69bb      	ldr	r3, [r7, #24]
 800f13a:	b2da      	uxtb	r2, r3
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	1c59      	adds	r1, r3, #1
 800f140:	61f9      	str	r1, [r7, #28]
 800f142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f146:	b2d2      	uxtb	r2, r2
 800f148:	701a      	strb	r2, [r3, #0]
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	09db      	lsrs	r3, r3, #7
 800f14e:	61bb      	str	r3, [r7, #24]
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	2b7f      	cmp	r3, #127	; 0x7f
 800f154:	d8f0      	bhi.n	800f138 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	61fa      	str	r2, [r7, #28]
 800f15c:	69ba      	ldr	r2, [r7, #24]
 800f15e:	b2d2      	uxtb	r2, r2
 800f160:	701a      	strb	r2, [r3, #0]
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800f166:	2208      	movs	r2, #8
 800f168:	68f9      	ldr	r1, [r7, #12]
 800f16a:	6938      	ldr	r0, [r7, #16]
 800f16c:	f7ff f944 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f383 8811 	msr	BASEPRI, r3
}
 800f176:	bf00      	nop
 800f178:	3720      	adds	r7, #32
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	20005e28 	.word	0x20005e28
 800f184:	20005df8 	.word	0x20005df8

0800f188 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b088      	sub	sp, #32
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f190:	f3ef 8311 	mrs	r3, BASEPRI
 800f194:	f04f 0120 	mov.w	r1, #32
 800f198:	f381 8811 	msr	BASEPRI, r1
 800f19c:	617b      	str	r3, [r7, #20]
 800f19e:	481a      	ldr	r0, [pc, #104]	; (800f208 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800f1a0:	f7ff f849 	bl	800e236 <_PreparePacket>
 800f1a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f1aa:	4b18      	ldr	r3, [pc, #96]	; (800f20c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800f1ac:	691b      	ldr	r3, [r3, #16]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	1ad3      	subs	r3, r2, r3
 800f1b2:	089b      	lsrs	r3, r3, #2
 800f1b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	61fb      	str	r3, [r7, #28]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	61bb      	str	r3, [r7, #24]
 800f1be:	e00b      	b.n	800f1d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	1c59      	adds	r1, r3, #1
 800f1c8:	61f9      	str	r1, [r7, #28]
 800f1ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1ce:	b2d2      	uxtb	r2, r2
 800f1d0:	701a      	strb	r2, [r3, #0]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	09db      	lsrs	r3, r3, #7
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	2b7f      	cmp	r3, #127	; 0x7f
 800f1dc:	d8f0      	bhi.n	800f1c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	1c5a      	adds	r2, r3, #1
 800f1e2:	61fa      	str	r2, [r7, #28]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	b2d2      	uxtb	r2, r2
 800f1e8:	701a      	strb	r2, [r3, #0]
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800f1ee:	2204      	movs	r2, #4
 800f1f0:	68f9      	ldr	r1, [r7, #12]
 800f1f2:	6938      	ldr	r0, [r7, #16]
 800f1f4:	f7ff f900 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	f383 8811 	msr	BASEPRI, r3
}
 800f1fe:	bf00      	nop
 800f200:	3720      	adds	r7, #32
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20005e28 	.word	0x20005e28
 800f20c:	20005df8 	.word	0x20005df8

0800f210 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b088      	sub	sp, #32
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f218:	f3ef 8311 	mrs	r3, BASEPRI
 800f21c:	f04f 0120 	mov.w	r1, #32
 800f220:	f381 8811 	msr	BASEPRI, r1
 800f224:	617b      	str	r3, [r7, #20]
 800f226:	481a      	ldr	r0, [pc, #104]	; (800f290 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800f228:	f7ff f805 	bl	800e236 <_PreparePacket>
 800f22c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f232:	4b18      	ldr	r3, [pc, #96]	; (800f294 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800f234:	691b      	ldr	r3, [r3, #16]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	089b      	lsrs	r3, r3, #2
 800f23c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	61fb      	str	r3, [r7, #28]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	61bb      	str	r3, [r7, #24]
 800f246:	e00b      	b.n	800f260 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	1c59      	adds	r1, r3, #1
 800f250:	61f9      	str	r1, [r7, #28]
 800f252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f256:	b2d2      	uxtb	r2, r2
 800f258:	701a      	strb	r2, [r3, #0]
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	09db      	lsrs	r3, r3, #7
 800f25e:	61bb      	str	r3, [r7, #24]
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	2b7f      	cmp	r3, #127	; 0x7f
 800f264:	d8f0      	bhi.n	800f248 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	1c5a      	adds	r2, r3, #1
 800f26a:	61fa      	str	r2, [r7, #28]
 800f26c:	69ba      	ldr	r2, [r7, #24]
 800f26e:	b2d2      	uxtb	r2, r2
 800f270:	701a      	strb	r2, [r3, #0]
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800f276:	2206      	movs	r2, #6
 800f278:	68f9      	ldr	r1, [r7, #12]
 800f27a:	6938      	ldr	r0, [r7, #16]
 800f27c:	f7ff f8bc 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f383 8811 	msr	BASEPRI, r3
}
 800f286:	bf00      	nop
 800f288:	3720      	adds	r7, #32
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	20005e28 	.word	0x20005e28
 800f294:	20005df8 	.word	0x20005df8

0800f298 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800f2a0:	4b05      	ldr	r3, [pc, #20]	; (800f2b8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	089b      	lsrs	r3, r3, #2
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	370c      	adds	r7, #12
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20005df8 	.word	0x20005df8

0800f2bc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08c      	sub	sp, #48	; 0x30
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800f2c6:	4b3b      	ldr	r3, [pc, #236]	; (800f3b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d06d      	beq.n	800f3aa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800f2ce:	4b39      	ldr	r3, [pc, #228]	; (800f3b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2d8:	e008      	b.n	800f2ec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800f2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d007      	beq.n	800f2f6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800f2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2ec:	79fb      	ldrb	r3, [r7, #7]
 800f2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d3f2      	bcc.n	800f2da <SEGGER_SYSVIEW_SendModule+0x1e>
 800f2f4:	e000      	b.n	800f2f8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800f2f6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d055      	beq.n	800f3aa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f2fe:	f3ef 8311 	mrs	r3, BASEPRI
 800f302:	f04f 0120 	mov.w	r1, #32
 800f306:	f381 8811 	msr	BASEPRI, r1
 800f30a:	617b      	str	r3, [r7, #20]
 800f30c:	482a      	ldr	r0, [pc, #168]	; (800f3b8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800f30e:	f7fe ff92 	bl	800e236 <_PreparePacket>
 800f312:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	627b      	str	r3, [r7, #36]	; 0x24
 800f31c:	79fb      	ldrb	r3, [r7, #7]
 800f31e:	623b      	str	r3, [r7, #32]
 800f320:	e00b      	b.n	800f33a <SEGGER_SYSVIEW_SendModule+0x7e>
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	b2da      	uxtb	r2, r3
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	1c59      	adds	r1, r3, #1
 800f32a:	6279      	str	r1, [r7, #36]	; 0x24
 800f32c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f330:	b2d2      	uxtb	r2, r2
 800f332:	701a      	strb	r2, [r3, #0]
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	09db      	lsrs	r3, r3, #7
 800f338:	623b      	str	r3, [r7, #32]
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	2b7f      	cmp	r3, #127	; 0x7f
 800f33e:	d8f0      	bhi.n	800f322 <SEGGER_SYSVIEW_SendModule+0x66>
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	627a      	str	r2, [r7, #36]	; 0x24
 800f346:	6a3a      	ldr	r2, [r7, #32]
 800f348:	b2d2      	uxtb	r2, r2
 800f34a:	701a      	strb	r2, [r3, #0]
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	61fb      	str	r3, [r7, #28]
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	61bb      	str	r3, [r7, #24]
 800f35a:	e00b      	b.n	800f374 <SEGGER_SYSVIEW_SendModule+0xb8>
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	1c59      	adds	r1, r3, #1
 800f364:	61f9      	str	r1, [r7, #28]
 800f366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f36a:	b2d2      	uxtb	r2, r2
 800f36c:	701a      	strb	r2, [r3, #0]
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	09db      	lsrs	r3, r3, #7
 800f372:	61bb      	str	r3, [r7, #24]
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	2b7f      	cmp	r3, #127	; 0x7f
 800f378:	d8f0      	bhi.n	800f35c <SEGGER_SYSVIEW_SendModule+0xa0>
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	1c5a      	adds	r2, r3, #1
 800f37e:	61fa      	str	r2, [r7, #28]
 800f380:	69ba      	ldr	r2, [r7, #24]
 800f382:	b2d2      	uxtb	r2, r2
 800f384:	701a      	strb	r2, [r3, #0]
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2280      	movs	r2, #128	; 0x80
 800f390:	4619      	mov	r1, r3
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7fe ff02 	bl	800e19c <_EncodeStr>
 800f398:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800f39a:	2216      	movs	r2, #22
 800f39c:	68f9      	ldr	r1, [r7, #12]
 800f39e:	6938      	ldr	r0, [r7, #16]
 800f3a0:	f7ff f82a 	bl	800e3f8 <_SendPacket>
      RECORD_END();
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800f3aa:	bf00      	nop
 800f3ac:	3730      	adds	r7, #48	; 0x30
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	20005e20 	.word	0x20005e20
 800f3b8:	20005e28 	.word	0x20005e28

0800f3bc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800f3c2:	4b0c      	ldr	r3, [pc, #48]	; (800f3f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00f      	beq.n	800f3ea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800f3ca:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d002      	beq.n	800f3de <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1f2      	bne.n	800f3d0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20005e20 	.word	0x20005e20

0800f3f8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f3fe:	f3ef 8311 	mrs	r3, BASEPRI
 800f402:	f04f 0120 	mov.w	r1, #32
 800f406:	f381 8811 	msr	BASEPRI, r1
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	4817      	ldr	r0, [pc, #92]	; (800f46c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800f40e:	f7fe ff12 	bl	800e236 <_PreparePacket>
 800f412:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	4b14      	ldr	r3, [pc, #80]	; (800f470 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	613b      	str	r3, [r7, #16]
 800f422:	e00b      	b.n	800f43c <SEGGER_SYSVIEW_SendNumModules+0x44>
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	b2da      	uxtb	r2, r3
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	1c59      	adds	r1, r3, #1
 800f42c:	6179      	str	r1, [r7, #20]
 800f42e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f432:	b2d2      	uxtb	r2, r2
 800f434:	701a      	strb	r2, [r3, #0]
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	09db      	lsrs	r3, r3, #7
 800f43a:	613b      	str	r3, [r7, #16]
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	2b7f      	cmp	r3, #127	; 0x7f
 800f440:	d8f0      	bhi.n	800f424 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	1c5a      	adds	r2, r3, #1
 800f446:	617a      	str	r2, [r7, #20]
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	b2d2      	uxtb	r2, r2
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f452:	221b      	movs	r2, #27
 800f454:	6879      	ldr	r1, [r7, #4]
 800f456:	68b8      	ldr	r0, [r7, #8]
 800f458:	f7fe ffce 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f383 8811 	msr	BASEPRI, r3
}
 800f462:	bf00      	nop
 800f464:	3718      	adds	r7, #24
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	20005e28 	.word	0x20005e28
 800f470:	20005e24 	.word	0x20005e24

0800f474 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800f474:	b40f      	push	{r0, r1, r2, r3}
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800f47c:	f107 0314 	add.w	r3, r7, #20
 800f480:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800f482:	1d3b      	adds	r3, r7, #4
 800f484:	461a      	mov	r2, r3
 800f486:	2100      	movs	r1, #0
 800f488:	6938      	ldr	r0, [r7, #16]
 800f48a:	f7ff f889 	bl	800e5a0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800f48e:	bf00      	nop
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f498:	b004      	add	sp, #16
 800f49a:	4770      	bx	lr

0800f49c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08a      	sub	sp, #40	; 0x28
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f4a4:	f3ef 8311 	mrs	r3, BASEPRI
 800f4a8:	f04f 0120 	mov.w	r1, #32
 800f4ac:	f381 8811 	msr	BASEPRI, r1
 800f4b0:	617b      	str	r3, [r7, #20]
 800f4b2:	4827      	ldr	r0, [pc, #156]	; (800f550 <SEGGER_SYSVIEW_Warn+0xb4>)
 800f4b4:	f7fe febf 	bl	800e236 <_PreparePacket>
 800f4b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f4ba:	2280      	movs	r2, #128	; 0x80
 800f4bc:	6879      	ldr	r1, [r7, #4]
 800f4be:	6938      	ldr	r0, [r7, #16]
 800f4c0:	f7fe fe6c 	bl	800e19c <_EncodeStr>
 800f4c4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	623b      	str	r3, [r7, #32]
 800f4ce:	e00b      	b.n	800f4e8 <SEGGER_SYSVIEW_Warn+0x4c>
 800f4d0:	6a3b      	ldr	r3, [r7, #32]
 800f4d2:	b2da      	uxtb	r2, r3
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	1c59      	adds	r1, r3, #1
 800f4d8:	6279      	str	r1, [r7, #36]	; 0x24
 800f4da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	701a      	strb	r2, [r3, #0]
 800f4e2:	6a3b      	ldr	r3, [r7, #32]
 800f4e4:	09db      	lsrs	r3, r3, #7
 800f4e6:	623b      	str	r3, [r7, #32]
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	2b7f      	cmp	r3, #127	; 0x7f
 800f4ec:	d8f0      	bhi.n	800f4d0 <SEGGER_SYSVIEW_Warn+0x34>
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	627a      	str	r2, [r7, #36]	; 0x24
 800f4f4:	6a3a      	ldr	r2, [r7, #32]
 800f4f6:	b2d2      	uxtb	r2, r2
 800f4f8:	701a      	strb	r2, [r3, #0]
 800f4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	61fb      	str	r3, [r7, #28]
 800f502:	2300      	movs	r3, #0
 800f504:	61bb      	str	r3, [r7, #24]
 800f506:	e00b      	b.n	800f520 <SEGGER_SYSVIEW_Warn+0x84>
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	1c59      	adds	r1, r3, #1
 800f510:	61f9      	str	r1, [r7, #28]
 800f512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f516:	b2d2      	uxtb	r2, r2
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	69bb      	ldr	r3, [r7, #24]
 800f51c:	09db      	lsrs	r3, r3, #7
 800f51e:	61bb      	str	r3, [r7, #24]
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	2b7f      	cmp	r3, #127	; 0x7f
 800f524:	d8f0      	bhi.n	800f508 <SEGGER_SYSVIEW_Warn+0x6c>
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	61fa      	str	r2, [r7, #28]
 800f52c:	69ba      	ldr	r2, [r7, #24]
 800f52e:	b2d2      	uxtb	r2, r2
 800f530:	701a      	strb	r2, [r3, #0]
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800f536:	221a      	movs	r2, #26
 800f538:	68f9      	ldr	r1, [r7, #12]
 800f53a:	6938      	ldr	r0, [r7, #16]
 800f53c:	f7fe ff5c 	bl	800e3f8 <_SendPacket>
  RECORD_END();
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	f383 8811 	msr	BASEPRI, r3
}
 800f546:	bf00      	nop
 800f548:	3728      	adds	r7, #40	; 0x28
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20005e28 	.word	0x20005e28

0800f554 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800f554:	b580      	push	{r7, lr}
 800f556:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800f558:	4803      	ldr	r0, [pc, #12]	; (800f568 <_cbSendSystemDesc+0x14>)
 800f55a:	f7ff fd5f 	bl	800f01c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800f55e:	4803      	ldr	r0, [pc, #12]	; (800f56c <_cbSendSystemDesc+0x18>)
 800f560:	f7ff fd5c 	bl	800f01c <SEGGER_SYSVIEW_SendSysDesc>
}
 800f564:	bf00      	nop
 800f566:	bd80      	pop	{r7, pc}
 800f568:	0800fe3c 	.word	0x0800fe3c
 800f56c:	0800fe70 	.word	0x0800fe70

0800f570 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800f570:	b580      	push	{r7, lr}
 800f572:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800f574:	4b06      	ldr	r3, [pc, #24]	; (800f590 <SEGGER_SYSVIEW_Conf+0x20>)
 800f576:	6818      	ldr	r0, [r3, #0]
 800f578:	4b05      	ldr	r3, [pc, #20]	; (800f590 <SEGGER_SYSVIEW_Conf+0x20>)
 800f57a:	6819      	ldr	r1, [r3, #0]
 800f57c:	4b05      	ldr	r3, [pc, #20]	; (800f594 <SEGGER_SYSVIEW_Conf+0x24>)
 800f57e:	4a06      	ldr	r2, [pc, #24]	; (800f598 <SEGGER_SYSVIEW_Conf+0x28>)
 800f580:	f7ff f8cc 	bl	800e71c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800f584:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f588:	f7ff f906 	bl	800e798 <SEGGER_SYSVIEW_SetRAMBase>
}
 800f58c:	bf00      	nop
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	20000004 	.word	0x20000004
 800f594:	0800f555 	.word	0x0800f555
 800f598:	0800ff28 	.word	0x0800ff28

0800f59c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	607b      	str	r3, [r7, #4]
 800f5a6:	e048      	b.n	800f63a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800f5a8:	4929      	ldr	r1, [pc, #164]	; (800f650 <_cbSendTaskList+0xb4>)
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	440b      	add	r3, r1
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fd fb71 	bl	800cca0 <uxTaskGetStackHighWaterMark>
 800f5be:	4601      	mov	r1, r0
 800f5c0:	4823      	ldr	r0, [pc, #140]	; (800f650 <_cbSendTaskList+0xb4>)
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4403      	add	r3, r0
 800f5ce:	3310      	adds	r3, #16
 800f5d0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800f5d2:	491f      	ldr	r1, [pc, #124]	; (800f650 <_cbSendTaskList+0xb4>)
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	440b      	add	r3, r1
 800f5e0:	6818      	ldr	r0, [r3, #0]
 800f5e2:	491b      	ldr	r1, [pc, #108]	; (800f650 <_cbSendTaskList+0xb4>)
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	4613      	mov	r3, r2
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	440b      	add	r3, r1
 800f5f0:	3304      	adds	r3, #4
 800f5f2:	6819      	ldr	r1, [r3, #0]
 800f5f4:	4c16      	ldr	r4, [pc, #88]	; (800f650 <_cbSendTaskList+0xb4>)
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	4413      	add	r3, r2
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	4423      	add	r3, r4
 800f602:	3308      	adds	r3, #8
 800f604:	681c      	ldr	r4, [r3, #0]
 800f606:	4d12      	ldr	r5, [pc, #72]	; (800f650 <_cbSendTaskList+0xb4>)
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	4613      	mov	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	4413      	add	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	442b      	add	r3, r5
 800f614:	330c      	adds	r3, #12
 800f616:	681d      	ldr	r5, [r3, #0]
 800f618:	4e0d      	ldr	r6, [pc, #52]	; (800f650 <_cbSendTaskList+0xb4>)
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	4613      	mov	r3, r2
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	4413      	add	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4433      	add	r3, r6
 800f626:	3310      	adds	r3, #16
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	462b      	mov	r3, r5
 800f62e:	4622      	mov	r2, r4
 800f630:	f000 f8be 	bl	800f7b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3301      	adds	r3, #1
 800f638:	607b      	str	r3, [r7, #4]
 800f63a:	4b06      	ldr	r3, [pc, #24]	; (800f654 <_cbSendTaskList+0xb8>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	429a      	cmp	r2, r3
 800f642:	d3b1      	bcc.n	800f5a8 <_cbSendTaskList+0xc>
  }
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f64e:	bf00      	nop
 800f650:	20005f0c 	.word	0x20005f0c
 800f654:	20005fac 	.word	0x20005fac

0800f658 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800f658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f65c:	b082      	sub	sp, #8
 800f65e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800f660:	f7fc ffe8 	bl	800c634 <xTaskGetTickCountFromISR>
 800f664:	4603      	mov	r3, r0
 800f666:	2200      	movs	r2, #0
 800f668:	469a      	mov	sl, r3
 800f66a:	4693      	mov	fp, r2
 800f66c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800f670:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	f04f 0a00 	mov.w	sl, #0
 800f67c:	f04f 0b00 	mov.w	fp, #0
 800f680:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f684:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800f688:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800f68c:	4652      	mov	r2, sl
 800f68e:	465b      	mov	r3, fp
 800f690:	1a14      	subs	r4, r2, r0
 800f692:	eb63 0501 	sbc.w	r5, r3, r1
 800f696:	f04f 0200 	mov.w	r2, #0
 800f69a:	f04f 0300 	mov.w	r3, #0
 800f69e:	00ab      	lsls	r3, r5, #2
 800f6a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f6a4:	00a2      	lsls	r2, r4, #2
 800f6a6:	4614      	mov	r4, r2
 800f6a8:	461d      	mov	r5, r3
 800f6aa:	eb14 0800 	adds.w	r8, r4, r0
 800f6ae:	eb45 0901 	adc.w	r9, r5, r1
 800f6b2:	f04f 0200 	mov.w	r2, #0
 800f6b6:	f04f 0300 	mov.w	r3, #0
 800f6ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f6be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f6c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f6c6:	4690      	mov	r8, r2
 800f6c8:	4699      	mov	r9, r3
 800f6ca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800f6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f6d2:	4610      	mov	r0, r2
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800f6e0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
 800f6ec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f6ee:	2205      	movs	r2, #5
 800f6f0:	492b      	ldr	r1, [pc, #172]	; (800f7a0 <SYSVIEW_AddTask+0xc0>)
 800f6f2:	68b8      	ldr	r0, [r7, #8]
 800f6f4:	f000 f8a4 	bl	800f840 <memcmp>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d04b      	beq.n	800f796 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f6fe:	4b29      	ldr	r3, [pc, #164]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b07      	cmp	r3, #7
 800f704:	d903      	bls.n	800f70e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f706:	4828      	ldr	r0, [pc, #160]	; (800f7a8 <SYSVIEW_AddTask+0xc8>)
 800f708:	f7ff fec8 	bl	800f49c <SEGGER_SYSVIEW_Warn>
    return;
 800f70c:	e044      	b.n	800f798 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f70e:	4b25      	ldr	r3, [pc, #148]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	4926      	ldr	r1, [pc, #152]	; (800f7ac <SYSVIEW_AddTask+0xcc>)
 800f714:	4613      	mov	r3, r2
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4413      	add	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	440b      	add	r3, r1
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800f722:	4b20      	ldr	r3, [pc, #128]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	4921      	ldr	r1, [pc, #132]	; (800f7ac <SYSVIEW_AddTask+0xcc>)
 800f728:	4613      	mov	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4413      	add	r3, r2
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	440b      	add	r3, r1
 800f732:	3304      	adds	r3, #4
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f738:	4b1a      	ldr	r3, [pc, #104]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	491b      	ldr	r1, [pc, #108]	; (800f7ac <SYSVIEW_AddTask+0xcc>)
 800f73e:	4613      	mov	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4413      	add	r3, r2
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	440b      	add	r3, r1
 800f748:	3308      	adds	r3, #8
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800f74e:	4b15      	ldr	r3, [pc, #84]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	4916      	ldr	r1, [pc, #88]	; (800f7ac <SYSVIEW_AddTask+0xcc>)
 800f754:	4613      	mov	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4413      	add	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	440b      	add	r3, r1
 800f75e:	330c      	adds	r3, #12
 800f760:	683a      	ldr	r2, [r7, #0]
 800f762:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f764:	4b0f      	ldr	r3, [pc, #60]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	4910      	ldr	r1, [pc, #64]	; (800f7ac <SYSVIEW_AddTask+0xcc>)
 800f76a:	4613      	mov	r3, r2
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4413      	add	r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	440b      	add	r3, r1
 800f774:	3310      	adds	r3, #16
 800f776:	69ba      	ldr	r2, [r7, #24]
 800f778:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800f77a:	4b0a      	ldr	r3, [pc, #40]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	3301      	adds	r3, #1
 800f780:	4a08      	ldr	r2, [pc, #32]	; (800f7a4 <SYSVIEW_AddTask+0xc4>)
 800f782:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	68b9      	ldr	r1, [r7, #8]
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f000 f80e 	bl	800f7b0 <SYSVIEW_SendTaskInfo>
 800f794:	e000      	b.n	800f798 <SYSVIEW_AddTask+0xb8>
    return;
 800f796:	bf00      	nop

}
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	0800fe80 	.word	0x0800fe80
 800f7a4:	20005fac 	.word	0x20005fac
 800f7a8:	0800fe88 	.word	0x0800fe88
 800f7ac:	20005f0c 	.word	0x20005f0c

0800f7b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08a      	sub	sp, #40	; 0x28
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800f7be:	f107 0314 	add.w	r3, r7, #20
 800f7c2:	2214      	movs	r2, #20
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 f858 	bl	800f87c <memset>
  TaskInfo.TaskID     = TaskID;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f7e0:	f107 0314 	add.w	r3, r7, #20
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7ff fb1f 	bl	800ee28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f7ea:	bf00      	nop
 800f7ec:	3728      	adds	r7, #40	; 0x28
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
	...

0800f7f4 <__libc_init_array>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	4d0d      	ldr	r5, [pc, #52]	; (800f82c <__libc_init_array+0x38>)
 800f7f8:	4c0d      	ldr	r4, [pc, #52]	; (800f830 <__libc_init_array+0x3c>)
 800f7fa:	1b64      	subs	r4, r4, r5
 800f7fc:	10a4      	asrs	r4, r4, #2
 800f7fe:	2600      	movs	r6, #0
 800f800:	42a6      	cmp	r6, r4
 800f802:	d109      	bne.n	800f818 <__libc_init_array+0x24>
 800f804:	4d0b      	ldr	r5, [pc, #44]	; (800f834 <__libc_init_array+0x40>)
 800f806:	4c0c      	ldr	r4, [pc, #48]	; (800f838 <__libc_init_array+0x44>)
 800f808:	f000 f902 	bl	800fa10 <_init>
 800f80c:	1b64      	subs	r4, r4, r5
 800f80e:	10a4      	asrs	r4, r4, #2
 800f810:	2600      	movs	r6, #0
 800f812:	42a6      	cmp	r6, r4
 800f814:	d105      	bne.n	800f822 <__libc_init_array+0x2e>
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81c:	4798      	blx	r3
 800f81e:	3601      	adds	r6, #1
 800f820:	e7ee      	b.n	800f800 <__libc_init_array+0xc>
 800f822:	f855 3b04 	ldr.w	r3, [r5], #4
 800f826:	4798      	blx	r3
 800f828:	3601      	adds	r6, #1
 800f82a:	e7f2      	b.n	800f812 <__libc_init_array+0x1e>
 800f82c:	0800ff98 	.word	0x0800ff98
 800f830:	0800ff98 	.word	0x0800ff98
 800f834:	0800ff98 	.word	0x0800ff98
 800f838:	0800ff9c 	.word	0x0800ff9c

0800f83c <__retarget_lock_acquire_recursive>:
 800f83c:	4770      	bx	lr

0800f83e <__retarget_lock_release_recursive>:
 800f83e:	4770      	bx	lr

0800f840 <memcmp>:
 800f840:	b510      	push	{r4, lr}
 800f842:	3901      	subs	r1, #1
 800f844:	4402      	add	r2, r0
 800f846:	4290      	cmp	r0, r2
 800f848:	d101      	bne.n	800f84e <memcmp+0xe>
 800f84a:	2000      	movs	r0, #0
 800f84c:	e005      	b.n	800f85a <memcmp+0x1a>
 800f84e:	7803      	ldrb	r3, [r0, #0]
 800f850:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f854:	42a3      	cmp	r3, r4
 800f856:	d001      	beq.n	800f85c <memcmp+0x1c>
 800f858:	1b18      	subs	r0, r3, r4
 800f85a:	bd10      	pop	{r4, pc}
 800f85c:	3001      	adds	r0, #1
 800f85e:	e7f2      	b.n	800f846 <memcmp+0x6>

0800f860 <memcpy>:
 800f860:	440a      	add	r2, r1
 800f862:	4291      	cmp	r1, r2
 800f864:	f100 33ff 	add.w	r3, r0, #4294967295
 800f868:	d100      	bne.n	800f86c <memcpy+0xc>
 800f86a:	4770      	bx	lr
 800f86c:	b510      	push	{r4, lr}
 800f86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f876:	4291      	cmp	r1, r2
 800f878:	d1f9      	bne.n	800f86e <memcpy+0xe>
 800f87a:	bd10      	pop	{r4, pc}

0800f87c <memset>:
 800f87c:	4402      	add	r2, r0
 800f87e:	4603      	mov	r3, r0
 800f880:	4293      	cmp	r3, r2
 800f882:	d100      	bne.n	800f886 <memset+0xa>
 800f884:	4770      	bx	lr
 800f886:	f803 1b01 	strb.w	r1, [r3], #1
 800f88a:	e7f9      	b.n	800f880 <memset+0x4>

0800f88c <cleanup_glue>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	460c      	mov	r4, r1
 800f890:	6809      	ldr	r1, [r1, #0]
 800f892:	4605      	mov	r5, r0
 800f894:	b109      	cbz	r1, 800f89a <cleanup_glue+0xe>
 800f896:	f7ff fff9 	bl	800f88c <cleanup_glue>
 800f89a:	4621      	mov	r1, r4
 800f89c:	4628      	mov	r0, r5
 800f89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8a2:	f000 b869 	b.w	800f978 <_free_r>
	...

0800f8a8 <_reclaim_reent>:
 800f8a8:	4b2c      	ldr	r3, [pc, #176]	; (800f95c <_reclaim_reent+0xb4>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4283      	cmp	r3, r0
 800f8ae:	b570      	push	{r4, r5, r6, lr}
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	d051      	beq.n	800f958 <_reclaim_reent+0xb0>
 800f8b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f8b6:	b143      	cbz	r3, 800f8ca <_reclaim_reent+0x22>
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d14a      	bne.n	800f954 <_reclaim_reent+0xac>
 800f8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8c0:	6819      	ldr	r1, [r3, #0]
 800f8c2:	b111      	cbz	r1, 800f8ca <_reclaim_reent+0x22>
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f000 f857 	bl	800f978 <_free_r>
 800f8ca:	6961      	ldr	r1, [r4, #20]
 800f8cc:	b111      	cbz	r1, 800f8d4 <_reclaim_reent+0x2c>
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 f852 	bl	800f978 <_free_r>
 800f8d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f8d6:	b111      	cbz	r1, 800f8de <_reclaim_reent+0x36>
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 f84d 	bl	800f978 <_free_r>
 800f8de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f8e0:	b111      	cbz	r1, 800f8e8 <_reclaim_reent+0x40>
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 f848 	bl	800f978 <_free_r>
 800f8e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f8ea:	b111      	cbz	r1, 800f8f2 <_reclaim_reent+0x4a>
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f000 f843 	bl	800f978 <_free_r>
 800f8f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f8f4:	b111      	cbz	r1, 800f8fc <_reclaim_reent+0x54>
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 f83e 	bl	800f978 <_free_r>
 800f8fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f8fe:	b111      	cbz	r1, 800f906 <_reclaim_reent+0x5e>
 800f900:	4620      	mov	r0, r4
 800f902:	f000 f839 	bl	800f978 <_free_r>
 800f906:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f908:	b111      	cbz	r1, 800f910 <_reclaim_reent+0x68>
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 f834 	bl	800f978 <_free_r>
 800f910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f912:	b111      	cbz	r1, 800f91a <_reclaim_reent+0x72>
 800f914:	4620      	mov	r0, r4
 800f916:	f000 f82f 	bl	800f978 <_free_r>
 800f91a:	69a3      	ldr	r3, [r4, #24]
 800f91c:	b1e3      	cbz	r3, 800f958 <_reclaim_reent+0xb0>
 800f91e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f920:	4620      	mov	r0, r4
 800f922:	4798      	blx	r3
 800f924:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f926:	b1b9      	cbz	r1, 800f958 <_reclaim_reent+0xb0>
 800f928:	4620      	mov	r0, r4
 800f92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f92e:	f7ff bfad 	b.w	800f88c <cleanup_glue>
 800f932:	5949      	ldr	r1, [r1, r5]
 800f934:	b941      	cbnz	r1, 800f948 <_reclaim_reent+0xa0>
 800f936:	3504      	adds	r5, #4
 800f938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f93a:	2d80      	cmp	r5, #128	; 0x80
 800f93c:	68d9      	ldr	r1, [r3, #12]
 800f93e:	d1f8      	bne.n	800f932 <_reclaim_reent+0x8a>
 800f940:	4620      	mov	r0, r4
 800f942:	f000 f819 	bl	800f978 <_free_r>
 800f946:	e7ba      	b.n	800f8be <_reclaim_reent+0x16>
 800f948:	680e      	ldr	r6, [r1, #0]
 800f94a:	4620      	mov	r0, r4
 800f94c:	f000 f814 	bl	800f978 <_free_r>
 800f950:	4631      	mov	r1, r6
 800f952:	e7ef      	b.n	800f934 <_reclaim_reent+0x8c>
 800f954:	2500      	movs	r5, #0
 800f956:	e7ef      	b.n	800f938 <_reclaim_reent+0x90>
 800f958:	bd70      	pop	{r4, r5, r6, pc}
 800f95a:	bf00      	nop
 800f95c:	20000014 	.word	0x20000014

0800f960 <__malloc_lock>:
 800f960:	4801      	ldr	r0, [pc, #4]	; (800f968 <__malloc_lock+0x8>)
 800f962:	f7ff bf6b 	b.w	800f83c <__retarget_lock_acquire_recursive>
 800f966:	bf00      	nop
 800f968:	20005fb0 	.word	0x20005fb0

0800f96c <__malloc_unlock>:
 800f96c:	4801      	ldr	r0, [pc, #4]	; (800f974 <__malloc_unlock+0x8>)
 800f96e:	f7ff bf66 	b.w	800f83e <__retarget_lock_release_recursive>
 800f972:	bf00      	nop
 800f974:	20005fb0 	.word	0x20005fb0

0800f978 <_free_r>:
 800f978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f97a:	2900      	cmp	r1, #0
 800f97c:	d044      	beq.n	800fa08 <_free_r+0x90>
 800f97e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f982:	9001      	str	r0, [sp, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f1a1 0404 	sub.w	r4, r1, #4
 800f98a:	bfb8      	it	lt
 800f98c:	18e4      	addlt	r4, r4, r3
 800f98e:	f7ff ffe7 	bl	800f960 <__malloc_lock>
 800f992:	4a1e      	ldr	r2, [pc, #120]	; (800fa0c <_free_r+0x94>)
 800f994:	9801      	ldr	r0, [sp, #4]
 800f996:	6813      	ldr	r3, [r2, #0]
 800f998:	b933      	cbnz	r3, 800f9a8 <_free_r+0x30>
 800f99a:	6063      	str	r3, [r4, #4]
 800f99c:	6014      	str	r4, [r2, #0]
 800f99e:	b003      	add	sp, #12
 800f9a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9a4:	f7ff bfe2 	b.w	800f96c <__malloc_unlock>
 800f9a8:	42a3      	cmp	r3, r4
 800f9aa:	d908      	bls.n	800f9be <_free_r+0x46>
 800f9ac:	6825      	ldr	r5, [r4, #0]
 800f9ae:	1961      	adds	r1, r4, r5
 800f9b0:	428b      	cmp	r3, r1
 800f9b2:	bf01      	itttt	eq
 800f9b4:	6819      	ldreq	r1, [r3, #0]
 800f9b6:	685b      	ldreq	r3, [r3, #4]
 800f9b8:	1949      	addeq	r1, r1, r5
 800f9ba:	6021      	streq	r1, [r4, #0]
 800f9bc:	e7ed      	b.n	800f99a <_free_r+0x22>
 800f9be:	461a      	mov	r2, r3
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	b10b      	cbz	r3, 800f9c8 <_free_r+0x50>
 800f9c4:	42a3      	cmp	r3, r4
 800f9c6:	d9fa      	bls.n	800f9be <_free_r+0x46>
 800f9c8:	6811      	ldr	r1, [r2, #0]
 800f9ca:	1855      	adds	r5, r2, r1
 800f9cc:	42a5      	cmp	r5, r4
 800f9ce:	d10b      	bne.n	800f9e8 <_free_r+0x70>
 800f9d0:	6824      	ldr	r4, [r4, #0]
 800f9d2:	4421      	add	r1, r4
 800f9d4:	1854      	adds	r4, r2, r1
 800f9d6:	42a3      	cmp	r3, r4
 800f9d8:	6011      	str	r1, [r2, #0]
 800f9da:	d1e0      	bne.n	800f99e <_free_r+0x26>
 800f9dc:	681c      	ldr	r4, [r3, #0]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	6053      	str	r3, [r2, #4]
 800f9e2:	4421      	add	r1, r4
 800f9e4:	6011      	str	r1, [r2, #0]
 800f9e6:	e7da      	b.n	800f99e <_free_r+0x26>
 800f9e8:	d902      	bls.n	800f9f0 <_free_r+0x78>
 800f9ea:	230c      	movs	r3, #12
 800f9ec:	6003      	str	r3, [r0, #0]
 800f9ee:	e7d6      	b.n	800f99e <_free_r+0x26>
 800f9f0:	6825      	ldr	r5, [r4, #0]
 800f9f2:	1961      	adds	r1, r4, r5
 800f9f4:	428b      	cmp	r3, r1
 800f9f6:	bf04      	itt	eq
 800f9f8:	6819      	ldreq	r1, [r3, #0]
 800f9fa:	685b      	ldreq	r3, [r3, #4]
 800f9fc:	6063      	str	r3, [r4, #4]
 800f9fe:	bf04      	itt	eq
 800fa00:	1949      	addeq	r1, r1, r5
 800fa02:	6021      	streq	r1, [r4, #0]
 800fa04:	6054      	str	r4, [r2, #4]
 800fa06:	e7ca      	b.n	800f99e <_free_r+0x26>
 800fa08:	b003      	add	sp, #12
 800fa0a:	bd30      	pop	{r4, r5, pc}
 800fa0c:	20005fb4 	.word	0x20005fb4

0800fa10 <_init>:
 800fa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa12:	bf00      	nop
 800fa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa16:	bc08      	pop	{r3}
 800fa18:	469e      	mov	lr, r3
 800fa1a:	4770      	bx	lr

0800fa1c <_fini>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	bf00      	nop
 800fa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa22:	bc08      	pop	{r3}
 800fa24:	469e      	mov	lr, r3
 800fa26:	4770      	bx	lr
